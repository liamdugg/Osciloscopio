
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a4  080061a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080061ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004884  20000018  080061c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000489c  080061c4  0002489c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f2e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003033  00000000  00000000  00035f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019950  00000000  00000000  0003b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018281  00000000  00000000  00054f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a383c  00000000  00000000  0006d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c4  00000000  00000000  00110aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b54 	.word	0x08005b54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08005b54 	.word	0x08005b54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000034 	.word	0x20000034
 8000514:	20000088 	.word	0x20000088

08000518 <int_to_char>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */

void int_to_char(uint32_t num, char texto[])
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	uint32_t buffer = num;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	617b      	str	r3, [r7, #20]
	int contador = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]

	while(buffer > 0)
 800052a:	e008      	b.n	800053e <int_to_char+0x26>
	{
		buffer /= 10;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <int_to_char+0x90>)
 8000530:	fba2 2303 	umull	r2, r3, r2, r3
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	617b      	str	r3, [r7, #20]
		contador++;
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	3301      	adds	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
	while(buffer > 0)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f3      	bne.n	800052c <int_to_char+0x14>
	}

	texto[contador] = '\0';
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]

	buffer = num;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	617b      	str	r3, [r7, #20]
	int pos = contador - 1, digito;
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	3b01      	subs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
	while(pos >= 0)
 8000558:	e01b      	b.n	8000592 <int_to_char+0x7a>
	{
		digito = buffer%10;
 800055a:	6979      	ldr	r1, [r7, #20]
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <int_to_char+0x90>)
 800055e:	fba3 2301 	umull	r2, r3, r3, r1
 8000562:	08da      	lsrs	r2, r3, #3
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	60ba      	str	r2, [r7, #8]
		buffer /= 10;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <int_to_char+0x90>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	617b      	str	r3, [r7, #20]
		texto[pos] = digito + '0';
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	440b      	add	r3, r1
 8000586:	3230      	adds	r2, #48	; 0x30
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
		pos--;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3b01      	subs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
	while(pos >= 0)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dae0      	bge.n	800055a <int_to_char+0x42>
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	cccccccd 	.word	0xcccccccd

080005ac <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80005b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80005ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80005be:	edc7 1a02 	vstr	s3, [r7, #8]
 80005c2:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80005c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80005d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80005e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005f6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	371c      	adds	r7, #28
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <grafico>:

void grafico(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fbd6 	bl	8000dc0 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fd20 	bl	800105c <ssd1306_SetCursor>
	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 800061c:	2301      	movs	r3, #1
 800061e:	2237      	movs	r2, #55	; 0x37
 8000620:	2109      	movs	r1, #9
 8000622:	201a      	movs	r0, #26
 8000624:	f000 fd9e 	bl	8001164 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 8000628:	2301      	movs	r3, #1
 800062a:	2203      	movs	r2, #3
 800062c:	2109      	movs	r1, #9
 800062e:	207f      	movs	r0, #127	; 0x7f
 8000630:	f000 fd98 	bl	8001164 <ssd1306_VLine>
	ssd1306_VLine(127, 61, 3, White);  // right vrtical line bottom
 8000634:	2301      	movs	r3, #1
 8000636:	2203      	movs	r2, #3
 8000638:	213d      	movs	r1, #61	; 0x3d
 800063a:	207f      	movs	r0, #127	; 0x7f
 800063c:	f000 fd92 	bl	8001164 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000640:	2301      	movs	r3, #1
 8000642:	2207      	movs	r2, #7
 8000644:	2109      	movs	r1, #9
 8000646:	2018      	movs	r0, #24
 8000648:	f000 fdab 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 800064c:	2301      	movs	r3, #1
 800064e:	2202      	movs	r2, #2
 8000650:	2124      	movs	r1, #36	; 0x24
 8000652:	2018      	movs	r0, #24
 8000654:	f000 fda5 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 8000658:	2301      	movs	r3, #1
 800065a:	2207      	movs	r2, #7
 800065c:	213f      	movs	r1, #63	; 0x3f
 800065e:	2018      	movs	r0, #24
 8000660:	f000 fd9f 	bl	80011a2 <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 8000664:	2301      	movs	r3, #1
 8000666:	2203      	movs	r2, #3
 8000668:	2109      	movs	r1, #9
 800066a:	2033      	movs	r0, #51	; 0x33
 800066c:	f000 fd99 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000670:	2301      	movs	r3, #1
 8000672:	2203      	movs	r2, #3
 8000674:	213f      	movs	r1, #63	; 0x3f
 8000676:	2033      	movs	r0, #51	; 0x33
 8000678:	f000 fd93 	bl	80011a2 <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 800067c:	2301      	movs	r3, #1
 800067e:	2203      	movs	r2, #3
 8000680:	2109      	movs	r1, #9
 8000682:	204c      	movs	r0, #76	; 0x4c
 8000684:	f000 fd8d 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 8000688:	2301      	movs	r3, #1
 800068a:	2203      	movs	r2, #3
 800068c:	213f      	movs	r1, #63	; 0x3f
 800068e:	204c      	movs	r0, #76	; 0x4c
 8000690:	f000 fd87 	bl	80011a2 <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 8000694:	2301      	movs	r3, #1
 8000696:	2203      	movs	r2, #3
 8000698:	2109      	movs	r1, #9
 800069a:	2065      	movs	r0, #101	; 0x65
 800069c:	f000 fd81 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80006a0:	2301      	movs	r3, #1
 80006a2:	2203      	movs	r2, #3
 80006a4:	213f      	movs	r1, #63	; 0x3f
 80006a6:	2065      	movs	r0, #101	; 0x65
 80006a8:	f000 fd7b 	bl	80011a2 <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80006ac:	2301      	movs	r3, #1
 80006ae:	2205      	movs	r2, #5
 80006b0:	2109      	movs	r1, #9
 80006b2:	207b      	movs	r0, #123	; 0x7b
 80006b4:	f000 fd75 	bl	80011a2 <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80006b8:	2301      	movs	r3, #1
 80006ba:	2205      	movs	r2, #5
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	207b      	movs	r0, #123	; 0x7b
 80006c0:	f000 fd6f 	bl	80011a2 <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5)
 80006c4:	231a      	movs	r3, #26
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <grafico+0xd6>
	{
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	b2d8      	uxtb	r0, r3
 80006ce:	2301      	movs	r3, #1
 80006d0:	2202      	movs	r2, #2
 80006d2:	2124      	movs	r1, #36	; 0x24
 80006d4:	f000 fd65 	bl	80011a2 <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3305      	adds	r3, #5
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	ddf2      	ble.n	80006ca <grafico+0xc2>
	}
	for (int x = (127 - 25); x > 30; x -= 25)
 80006e4:	2366      	movs	r3, #102	; 0x66
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e013      	b.n	8000712 <grafico+0x10a>
	{
		for (int y = 10; y < 63; y += 5)
 80006ea:	230a      	movs	r3, #10
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e00a      	b.n	8000706 <grafico+0xfe>
		{
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	b2d8      	uxtb	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b2d9      	uxtb	r1, r3
 80006f8:	2301      	movs	r3, #1
 80006fa:	2202      	movs	r2, #2
 80006fc:	f000 fd32 	bl	8001164 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3305      	adds	r3, #5
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b3e      	cmp	r3, #62	; 0x3e
 800070a:	ddf1      	ble.n	80006f0 <grafico+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	3b19      	subs	r3, #25
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b1e      	cmp	r3, #30
 8000716:	dce8      	bgt.n	80006ea <grafico+0xe2>
		}
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <senoidal_moviendose>:

void senoidal_moviendose(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b087      	sub	sp, #28
 8000728:	af02      	add	r7, sp, #8
	//static int vect[largo] = {0};
	//static double x = 0.0;
	int y_1 = 0, y_2=0;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]

	// desplazo la senoidal
	//for(int i = 0; i < MAX-1; i++)
		//vect[i] = vect[i + 1];

	 for (int k = 0; k <= 98; k++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e049      	b.n	80007cc <senoidal_moviendose+0xa8>
	 {
	    y_1 = map(Buffer[k], 0, 4095, 63, 9); 				// convert to plot
 8000738:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <senoidal_moviendose+0xcc>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	ee07 3a90 	vmov	s15, r3
 8000744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000748:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 800074c:	eddf 1a29 	vldr	s3, [pc, #164]	; 80007f4 <senoidal_moviendose+0xd0>
 8000750:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80007f8 <senoidal_moviendose+0xd4>
 8000754:	eddf 0a29 	vldr	s1, [pc, #164]	; 80007fc <senoidal_moviendose+0xd8>
 8000758:	eeb0 0a67 	vmov.f32	s0, s15
 800075c:	f7ff ff26 	bl	80005ac <map>
 8000760:	eef0 7a40 	vmov.f32	s15, s0
 8000764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000768:	ee17 3a90 	vmov	r3, s15
 800076c:	60bb      	str	r3, [r7, #8]
		y_2 = map(Buffer[k+1], 0, 4095, 63, 9);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <senoidal_moviendose+0xcc>)
 8000774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000784:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80007f4 <senoidal_moviendose+0xd0>
 8000788:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80007f8 <senoidal_moviendose+0xd4>
 800078c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80007fc <senoidal_moviendose+0xd8>
 8000790:	eeb0 0a67 	vmov.f32	s0, s15
 8000794:	f7ff ff0a 	bl	80005ac <map>
 8000798:	eef0 7a40 	vmov.f32	s15, s0
 800079c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a0:	ee17 3a90 	vmov	r3, s15
 80007a4:	607b      	str	r3, [r7, #4]
		ssd1306_Line(k + 27, y_1, k + 28, y_2, White);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	331b      	adds	r3, #27
 80007ac:	b2d8      	uxtb	r0, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	331c      	adds	r3, #28
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2401      	movs	r4, #1
 80007c0:	9400      	str	r4, [sp, #0]
 80007c2:	f000 fc63 	bl	800108c <ssd1306_Line>
	 for (int k = 0; k <= 98; k++)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b62      	cmp	r3, #98	; 0x62
 80007d0:	ddb2      	ble.n	8000738 <senoidal_moviendose+0x14>
	 }
	 ssd1306_SetCursor(0, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fc41 	bl	800105c <ssd1306_SetCursor>
	 ssd1306_WriteString("Sine", Font_6x8, White);
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <senoidal_moviendose+0xdc>)
 80007dc:	2301      	movs	r3, #1
 80007de:	ca06      	ldmia	r2, {r1, r2}
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <senoidal_moviendose+0xe0>)
 80007e2:	f000 fc15 	bl	8001010 <ssd1306_WriteString>
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000558 	.word	0x20000558
 80007f4:	427c0000 	.word	0x427c0000
 80007f8:	457ff000 	.word	0x457ff000
 80007fc:	00000000 	.word	0x00000000
 8000800:	20000000 	.word	0x20000000
 8000804:	08005b6c 	.word	0x08005b6c

08000808 <Mostrar_pantalla>:

void Mostrar_pantalla(void *pvParameters)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8000810:	f000 fa70 	bl	8000cf4 <ssd1306_Init>

	while(1)
	{
		grafico();
 8000814:	f7ff fef8 	bl	8000608 <grafico>
		senoidal_moviendose();
 8000818:	f7ff ff84 	bl	8000724 <senoidal_moviendose>
		int_to_char(Buffer[0], adc_char);
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <Mostrar_pantalla+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	490a      	ldr	r1, [pc, #40]	; (800084c <Mostrar_pantalla+0x44>)
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fe78 	bl	8000518 <int_to_char>
		ssd1306_SetCursor(84, 0);
 8000828:	2100      	movs	r1, #0
 800082a:	2054      	movs	r0, #84	; 0x54
 800082c:	f000 fc16 	bl	800105c <ssd1306_SetCursor>
		ssd1306_WriteString(adc_char, Font_6x8, White);
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <Mostrar_pantalla+0x48>)
 8000832:	2301      	movs	r3, #1
 8000834:	ca06      	ldmia	r2, {r1, r2}
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <Mostrar_pantalla+0x44>)
 8000838:	f000 fbea 	bl	8001010 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800083c:	f000 fae4 	bl	8000e08 <ssd1306_UpdateScreen>
		vTaskDelay(30/portTICK_RATE_MS);
 8000840:	201e      	movs	r0, #30
 8000842:	f004 f9d5 	bl	8004bf0 <vTaskDelay>
		grafico();
 8000846:	e7e5      	b.n	8000814 <Mostrar_pantalla+0xc>
 8000848:	20000558 	.word	0x20000558
 800084c:	200006e8 	.word	0x200006e8
 8000850:	20000000 	.word	0x20000000

08000854 <Leer_ADC>:
	}
}

void Leer_ADC(void *pvParameters)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, Dato, 100);
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <Leer_ADC+0x1c>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <Leer_ADC+0x20>)
 8000862:	f000 ff81 	bl	8001768 <HAL_ADC_Start_DMA>
	while(1)
	{
		vTaskDelay(20/portTICK_RATE_MS);
 8000866:	2014      	movs	r0, #20
 8000868:	f004 f9c2 	bl	8004bf0 <vTaskDelay>
 800086c:	e7fb      	b.n	8000866 <Leer_ADC+0x12>
 800086e:	bf00      	nop
 8000870:	200003c8 	.word	0x200003c8
 8000874:	20000288 	.word	0x20000288

08000878 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<MAX; i++)
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e00a      	b.n	800089c <HAL_ADC_ConvCpltCallback+0x24>
		Buffer[i] = Dato[i];
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800088e:	4909      	ldr	r1, [pc, #36]	; (80008b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX; i++)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b63      	cmp	r3, #99	; 0x63
 80008a0:	ddf1      	ble.n	8000886 <HAL_ADC_ConvCpltCallback+0xe>
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	200003c8 	.word	0x200003c8
 80008b4:	20000558 	.word	0x20000558

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fecd 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f829 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f95d 	bl	8000b84 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ca:	f000 f93b 	bl	8000b44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008ce:	f000 f90f 	bl	8000af0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008d2:	f000 f88d 	bl	80009f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008d6:	f000 f8dd 	bl	8000a94 <MX_I2C1_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80008da:	2300      	movs	r3, #0
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	2302      	movs	r3, #2
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <main+0x50>)
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <main+0x54>)
 80008ea:	f004 f84a 	bl	8004982 <xTaskCreate>
  xTaskCreate(Leer_ADC, "ADC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80008ee:	2300      	movs	r3, #0
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	4905      	ldr	r1, [pc, #20]	; (8000910 <main+0x58>)
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <main+0x5c>)
 80008fe:	f004 f840 	bl	8004982 <xTaskCreate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  vTaskStartScheduler();
 8000902:	f004 f9a9 	bl	8004c58 <vTaskStartScheduler>
  while (1)
 8000906:	e7fe      	b.n	8000906 <main+0x4e>
 8000908:	08005b74 	.word	0x08005b74
 800090c:	08000809 	.word	0x08000809
 8000910:	08005b80 	.word	0x08005b80
 8000914:	08000855 	.word	0x08000855

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f005 f90c 	bl	8005b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <SystemClock_Config+0xd0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <SystemClock_Config+0xd0>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemClock_Config+0xd0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <SystemClock_Config+0xd4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SystemClock_Config+0xd4>)
 8000966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800098c:	2310      	movs	r3, #16
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000990:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000996:	2304      	movs	r3, #4
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800099a:	2307      	movs	r3, #7
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fcd0 	bl	8003348 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ae:	f000 f969 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 ff32 	bl	8003838 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009da:	f000 f953 	bl	8000c84 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_ADC1_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_ADC1_Init+0xa0>)
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a52:	f000 fe45 	bl	80016e0 <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 f912 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a72:	f000 ff7d 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f000 f902 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000288 	.word	0x20000288
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_I2C1_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ad2:	f001 ffdd 	bl	8002a90 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f8d2 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000330 	.word	0x20000330
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	00061a80 	.word	0x00061a80

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_USART2_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b28:	f003 fb58 	bl	80041dc <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b32:	f000 f8a7 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000384 	.word	0x20000384
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2105      	movs	r1, #5
 8000b6a:	2038      	movs	r0, #56	; 0x38
 8000b6c:	f001 fa58 	bl	8002020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b70:	2038      	movs	r0, #56	; 0x38
 8000b72:	f001 fa71 	bl	8002058 <HAL_NVIC_EnableIRQ>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_GPIO_Init+0xd4>)
 8000c10:	f001 ff24 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_GPIO_Init+0xd8>)
 8000c2c:	f001 fd92 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c30:	2320      	movs	r3, #32
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0xd4>)
 8000c48:	f001 fd84 	bl	8002754 <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fd15 	bl	80016a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010000 	.word	0x40010000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2200      	movs	r2, #0
 8000cac:	2178      	movs	r1, #120	; 0x78
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <ssd1306_WriteCommand+0x2c>)
 8000cb0:	f002 f832 	bl	8002d18 <HAL_I2C_Mem_Write>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000330 	.word	0x20000330

08000cc0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	9202      	str	r2, [sp, #8]
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	2178      	movs	r1, #120	; 0x78
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <ssd1306_WriteData+0x30>)
 8000ce2:	f002 f819 	bl	8002d18 <HAL_I2C_Mem_Write>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000330 	.word	0x20000330

08000cf4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fa85 	bl	8001208 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000cfe:	2020      	movs	r0, #32
 8000d00:	f7ff ffc6 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ffc3 	bl	8000c90 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d0a:	20b0      	movs	r0, #176	; 0xb0
 8000d0c:	f7ff ffc0 	bl	8000c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d10:	20c8      	movs	r0, #200	; 0xc8
 8000d12:	f7ff ffbd 	bl	8000c90 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffba 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f7ff ffb7 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d22:	2040      	movs	r0, #64	; 0x40
 8000d24:	f7ff ffb4 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d28:	20ff      	movs	r0, #255	; 0xff
 8000d2a:	f000 fa59 	bl	80011e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d2e:	20a1      	movs	r0, #161	; 0xa1
 8000d30:	f7ff ffae 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d34:	20a6      	movs	r0, #166	; 0xa6
 8000d36:	f7ff ffab 	bl	8000c90 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d3a:	20a8      	movs	r0, #168	; 0xa8
 8000d3c:	f7ff ffa8 	bl	8000c90 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d40:	203f      	movs	r0, #63	; 0x3f
 8000d42:	f7ff ffa5 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d46:	20a4      	movs	r0, #164	; 0xa4
 8000d48:	f7ff ffa2 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d4c:	20d3      	movs	r0, #211	; 0xd3
 8000d4e:	f7ff ff9f 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff9c 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d58:	20d5      	movs	r0, #213	; 0xd5
 8000d5a:	f7ff ff99 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d5e:	20f0      	movs	r0, #240	; 0xf0
 8000d60:	f7ff ff96 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d64:	20d9      	movs	r0, #217	; 0xd9
 8000d66:	f7ff ff93 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d6a:	2022      	movs	r0, #34	; 0x22
 8000d6c:	f7ff ff90 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d70:	20da      	movs	r0, #218	; 0xda
 8000d72:	f7ff ff8d 	bl	8000c90 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d76:	2012      	movs	r0, #18
 8000d78:	f7ff ff8a 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d7c:	20db      	movs	r0, #219	; 0xdb
 8000d7e:	f7ff ff87 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d82:	2020      	movs	r0, #32
 8000d84:	f7ff ff84 	bl	8000c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d88:	208d      	movs	r0, #141	; 0x8d
 8000d8a:	f7ff ff81 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d8e:	2014      	movs	r0, #20
 8000d90:	f7ff ff7e 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 fa37 	bl	8001208 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f810 	bl	8000dc0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000da0:	f000 f832 	bl	8000e08 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <ssd1306_Init+0xc8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <ssd1306_Init+0xc8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <ssd1306_Init+0xc8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	711a      	strb	r2, [r3, #4]
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000af4 	.word	0x20000af4

08000dc0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e00d      	b.n	8000dec <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <ssd1306_Fill+0x1a>
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e000      	b.n	8000ddc <ssd1306_Fill+0x1c>
 8000dda:	21ff      	movs	r1, #255	; 0xff
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <ssd1306_Fill+0x44>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df2:	d3ed      	bcc.n	8000dd0 <ssd1306_Fill+0x10>
    }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200006f4 	.word	0x200006f4

08000e08 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e016      	b.n	8000e42 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3b50      	subs	r3, #80	; 0x50
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff38 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff ff35 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e26:	2010      	movs	r0, #16
 8000e28:	f7ff ff32 	bl	8000c90 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	01db      	lsls	r3, r3, #7
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <ssd1306_UpdateScreen+0x4c>)
 8000e32:	4413      	add	r3, r2
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff42 	bl	8000cc0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b07      	cmp	r3, #7
 8000e46:	d9e5      	bls.n	8000e14 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200006f4 	.word	0x200006f4

08000e58 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	460b      	mov	r3, r1
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db3d      	blt.n	8000eee <ssd1306_DrawPixel+0x96>
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	2b3f      	cmp	r3, #63	; 0x3f
 8000e76:	d83a      	bhi.n	8000eee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d11a      	bne.n	8000eb4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	b2d8      	uxtb	r0, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	01db      	lsls	r3, r3, #7
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <ssd1306_DrawPixel+0xa4>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b259      	sxtb	r1, r3
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	01db      	lsls	r3, r3, #7
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2c9      	uxtb	r1, r1
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <ssd1306_DrawPixel+0xa4>)
 8000eb0:	54d1      	strb	r1, [r2, r3]
 8000eb2:	e01d      	b.n	8000ef0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	b2d8      	uxtb	r0, r3
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	01db      	lsls	r3, r3, #7
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <ssd1306_DrawPixel+0xa4>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4013      	ands	r3, r2
 8000edc:	b259      	sxtb	r1, r3
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2c9      	uxtb	r1, r1
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <ssd1306_DrawPixel+0xa4>)
 8000eea:	54d1      	strb	r1, [r2, r3]
 8000eec:	e000      	b.n	8000ef0 <ssd1306_DrawPixel+0x98>
        return;
 8000eee:	bf00      	nop
    }
}
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200006f4 	.word	0x200006f4

08000f00 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4604      	mov	r4, r0
 8000f08:	1d38      	adds	r0, r7, #4
 8000f0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4623      	mov	r3, r4
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	4613      	mov	r3, r2
 8000f16:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b1f      	cmp	r3, #31
 8000f1c:	d902      	bls.n	8000f24 <ssd1306_WriteChar+0x24>
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b7e      	cmp	r3, #126	; 0x7e
 8000f22:	d901      	bls.n	8000f28 <ssd1306_WriteChar+0x28>
        return 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e06d      	b.n	8001004 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	2b80      	cmp	r3, #128	; 0x80
 8000f34:	dc06      	bgt.n	8000f44 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000f38:	885b      	ldrh	r3, [r3, #2]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	797b      	ldrb	r3, [r7, #5]
 8000f3e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f40:	2b40      	cmp	r3, #64	; 0x40
 8000f42:	dd01      	ble.n	8000f48 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05d      	b.n	8001004 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	e04c      	b.n	8000fe8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3b20      	subs	r3, #32
 8000f54:	7979      	ldrb	r1, [r7, #5]
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	440b      	add	r3, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	e034      	b.n	8000fd8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d012      	beq.n	8000fa4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2d8      	uxtb	r0, r3
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	7bba      	ldrb	r2, [r7, #14]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff ff5b 	bl	8000e58 <ssd1306_DrawPixel>
 8000fa2:	e016      	b.n	8000fd2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2d8      	uxtb	r0, r3
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000fb4:	885b      	ldrh	r3, [r3, #2]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2d9      	uxtb	r1, r3
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f7ff ff43 	bl	8000e58 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d3c5      	bcc.n	8000f6e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	461a      	mov	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d3ad      	bcc.n	8000f4e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <ssd1306_WriteChar+0x10c>)
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <ssd1306_WriteChar+0x10c>)
 8001000:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3724      	adds	r7, #36	; 0x24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	20000af4 	.word	0x20000af4

08001010 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	1d38      	adds	r0, r7, #4
 800101a:	e880 0006 	stmia.w	r0, {r1, r2}
 800101e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001020:	e012      	b.n	8001048 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	7818      	ldrb	r0, [r3, #0]
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	1d3a      	adds	r2, r7, #4
 800102a:	ca06      	ldmia	r2, {r1, r2}
 800102c:	f7ff ff68 	bl	8000f00 <ssd1306_WriteChar>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d002      	beq.n	8001042 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	e008      	b.n	8001054 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e8      	bne.n	8001022 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <ssd1306_SetCursor+0x2c>)
 8001072:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <ssd1306_SetCursor+0x2c>)
 800107a:	805a      	strh	r2, [r3, #2]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000af4 	.word	0x20000af4

0800108c <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4623      	mov	r3, r4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4603      	mov	r3, r0
 80010a0:	71bb      	strb	r3, [r7, #6]
 80010a2:	460b      	mov	r3, r1
 80010a4:	717b      	strb	r3, [r7, #5]
 80010a6:	4613      	mov	r3, r2
 80010a8:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80010aa:	797a      	ldrb	r2, [r7, #5]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bfb8      	it	lt
 80010b4:	425b      	neglt	r3, r3
 80010b6:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80010b8:	793a      	ldrb	r2, [r7, #4]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfb8      	it	lt
 80010c2:	425b      	neglt	r3, r3
 80010c4:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d201      	bcs.n	80010d2 <ssd1306_Line+0x46>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e001      	b.n	80010d6 <ssd1306_Line+0x4a>
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d201      	bcs.n	80010e4 <ssd1306_Line+0x58>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e001      	b.n	80010e8 <ssd1306_Line+0x5c>
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80010f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80010f6:	7939      	ldrb	r1, [r7, #4]
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff feac 	bl	8000e58 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001100:	e024      	b.n	800114c <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001102:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001106:	79b9      	ldrb	r1, [r7, #6]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fea4 	bl	8000e58 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	425b      	negs	r3, r3
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	429a      	cmp	r2, r3
 800111e:	dd08      	ble.n	8001132 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4413      	add	r3, r2
 8001130:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	429a      	cmp	r2, r3
 8001138:	da08      	bge.n	800114c <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4413      	add	r3, r2
 8001140:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	4413      	add	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	429a      	cmp	r2, r3
 8001152:	d1d6      	bne.n	8001102 <ssd1306_Line+0x76>
 8001154:	79ba      	ldrb	r2, [r7, #6]
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d1d2      	bne.n	8001102 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800115c:	bf00      	nop
}
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}

08001164 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af02      	add	r7, sp, #8
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	4603      	mov	r3, r0
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	460b      	mov	r3, r1
 800117c:	717b      	strb	r3, [r7, #5]
 800117e:	4613      	mov	r3, r2
 8001180:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	4413      	add	r3, r2
 8001188:	b2dc      	uxtb	r4, r3
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	79b9      	ldrb	r1, [r7, #6]
 800118e:	79f8      	ldrb	r0, [r7, #7]
 8001190:	793b      	ldrb	r3, [r7, #4]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4623      	mov	r3, r4
 8001196:	f7ff ff79 	bl	800108c <ssd1306_Line>
	return;
 800119a:	bf00      	nop
}
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}

080011a2 <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 80011a2:	b590      	push	{r4, r7, lr}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af02      	add	r7, sp, #8
 80011a8:	4604      	mov	r4, r0
 80011aa:	4608      	mov	r0, r1
 80011ac:	4611      	mov	r1, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	4623      	mov	r3, r4
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4603      	mov	r3, r0
 80011b6:	71bb      	strb	r3, [r7, #6]
 80011b8:	460b      	mov	r3, r1
 80011ba:	717b      	strb	r3, [r7, #5]
 80011bc:	4613      	mov	r3, r2
 80011be:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	79bc      	ldrb	r4, [r7, #6]
 80011ca:	79b9      	ldrb	r1, [r7, #6]
 80011cc:	79f8      	ldrb	r0, [r7, #7]
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4623      	mov	r3, r4
 80011d4:	f7ff ff5a 	bl	800108c <ssd1306_Line>
	return;
 80011d8:	bf00      	nop
}
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}

080011e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80011ea:	2381      	movs	r3, #129	; 0x81
 80011ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd4d 	bl	8000c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd49 	bl	8000c90 <ssd1306_WriteCommand>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001218:	23af      	movs	r3, #175	; 0xaf
 800121a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <ssd1306_SetDisplayOn+0x38>)
 800121e:	2201      	movs	r2, #1
 8001220:	715a      	strb	r2, [r3, #5]
 8001222:	e004      	b.n	800122e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001224:	23ae      	movs	r3, #174	; 0xae
 8001226:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <ssd1306_SetDisplayOn+0x38>)
 800122a:	2200      	movs	r2, #0
 800122c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd2d 	bl	8000c90 <ssd1306_WriteCommand>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000af4 	.word	0x20000af4

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x54>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_MspInit+0x54>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x54>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_MspInit+0x54>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_MspInit+0x54>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_MspInit+0x54>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	210f      	movs	r1, #15
 8001286:	f06f 0001 	mvn.w	r0, #1
 800128a:	f000 fec9 	bl	8002020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <HAL_ADC_MspInit+0xdc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d157      	bne.n	800136e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a2d      	ldr	r2, [pc, #180]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a26      	ldr	r2, [pc, #152]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	481d      	ldr	r0, [pc, #116]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 800130a:	f001 fa23 	bl	8002754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001312:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800132c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001344:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001354:	f000 fe8e 	bl	8002074 <HAL_DMA_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800135e:	f7ff fc91 	bl	8000c84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 8001366:	639a      	str	r2, [r3, #56]	; 0x38
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40012000 	.word	0x40012000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000
 8001384:	200002d0 	.word	0x200002d0
 8001388:	40026410 	.word	0x40026410

0800138c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12c      	bne.n	8001408 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013dc:	2304      	movs	r3, #4
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e8:	f001 f9b4 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_UART_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12b      	bne.n	8001496 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_UART_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001486:	2307      	movs	r3, #7
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001492:	f001 f95f 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_InitTick+0xd0>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_InitTick+0xd0>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6453      	str	r3, [r2, #68]	; 0x44
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_InitTick+0xd0>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d8:	f107 020c 	add.w	r2, r7, #12
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fbc8 	bl	8003c78 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014e8:	f002 fbb2 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 80014ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	4a23      	ldr	r2, [pc, #140]	; (8001580 <HAL_InitTick+0xd4>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	3b01      	subs	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_InitTick+0xd8>)
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_InitTick+0xdc>)
 8001500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_InitTick+0xd8>)
 8001504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_InitTick+0xd8>)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_InitTick+0xd8>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_InitTick+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_InitTick+0xd8>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001522:	4818      	ldr	r0, [pc, #96]	; (8001584 <HAL_InitTick+0xd8>)
 8001524:	f002 fbda 	bl	8003cdc <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800152e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11b      	bne.n	800156e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <HAL_InitTick+0xd8>)
 8001538:	f002 fc2a 	bl	8003d90 <HAL_TIM_Base_Start_IT>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001546:	2b00      	cmp	r3, #0
 8001548:	d111      	bne.n	800156e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800154a:	2019      	movs	r0, #25
 800154c:	f000 fd84 	bl	8002058 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	d808      	bhi.n	8001568 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001556:	2200      	movs	r2, #0
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	2019      	movs	r0, #25
 800155c:	f000 fd60 	bl	8002020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_InitTick+0xe0>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e002      	b.n	800156e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001572:	4618      	mov	r0, r3
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	431bde83 	.word	0x431bde83
 8001584:	20000afc 	.word	0x20000afc
 8001588:	40010000 	.word	0x40010000
 800158c:	2000000c 	.word	0x2000000c

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015c2:	f002 fc47 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000afc 	.word	0x20000afc

080015d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA2_Stream0_IRQHandler+0x10>)
 80015d6:	f000 fe53 	bl	8002280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002d0 	.word	0x200002d0

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f004 fa61 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff f93d 	bl	80008b8 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800164c:	080061ac 	.word	0x080061ac
  ldr r2, =_sbss
 8001650:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001654:	2000489c 	.word	0x2000489c

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fcc0 	bl	800200a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff ff0e 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fdd8 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000010 	.word	0x20000010
 80016c4:	20000b44 	.word	0x20000b44

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000b44 	.word	0x20000b44

080016e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e033      	b.n	800175e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fdcc 	bl	800129c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fa3e 	bl	8001bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
 800174e:	e001      	b.n	8001754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Start_DMA+0x1e>
 8001782:	2302      	movs	r3, #2
 8001784:	e0ce      	b.n	8001924 <HAL_ADC_Start_DMA+0x1bc>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d018      	beq.n	80017ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_ADC_Start_DMA+0x1c4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5f      	ldr	r2, [pc, #380]	; (8001930 <HAL_ADC_Start_DMA+0x1c8>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0c9a      	lsrs	r2, r3, #18
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017dc:	d107      	bne.n	80017ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	f040 8086 	bne.w	800190a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001828:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800183c:	d106      	bne.n	800184c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f023 0206 	bic.w	r2, r3, #6
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
 800184a:	e002      	b.n	8001852 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185a:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_ADC_Start_DMA+0x1cc>)
 800185c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	4a35      	ldr	r2, [pc, #212]	; (8001938 <HAL_ADC_Start_DMA+0x1d0>)
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	4a34      	ldr	r2, [pc, #208]	; (800193c <HAL_ADC_Start_DMA+0x1d4>)
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	4a33      	ldr	r2, [pc, #204]	; (8001940 <HAL_ADC_Start_DMA+0x1d8>)
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800187e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800188e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	334c      	adds	r3, #76	; 0x4c
 80018aa:	4619      	mov	r1, r3
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f000 fc8e 	bl	80021d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10f      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d129      	bne.n	8001922 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	e020      	b.n	8001922 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_ADC_Start_DMA+0x1dc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11b      	bne.n	8001922 <HAL_ADC_Start_DMA+0x1ba>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d114      	bne.n	8001922 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00b      	b.n	8001922 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000008 	.word	0x20000008
 8001930:	431bde83 	.word	0x431bde83
 8001934:	40012300 	.word	0x40012300
 8001938:	08001dad 	.word	0x08001dad
 800193c:	08001e67 	.word	0x08001e67
 8001940:	08001e83 	.word	0x08001e83
 8001944:	40012000 	.word	0x40012000

08001948 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1c>
 8001988:	2302      	movs	r3, #2
 800198a:	e105      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x228>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d925      	bls.n	80019e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68d9      	ldr	r1, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4403      	add	r3, r0
 80019da:	3b1e      	subs	r3, #30
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	e022      	b.n	8001a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	2207      	movs	r2, #7
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	409a      	lsls	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d824      	bhi.n	8001a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b05      	subs	r3, #5
 8001a48:	221f      	movs	r2, #31
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b05      	subs	r3, #5
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7e:	e04c      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d824      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b23      	subs	r3, #35	; 0x23
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b23      	subs	r3, #35	; 0x23
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad0:	e023      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b41      	subs	r3, #65	; 0x41
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b41      	subs	r3, #65	; 0x41
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_ADC_ConfigChannel+0x234>)
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_ADC_ConfigChannel+0x238>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x1cc>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_ADC_ConfigChannel+0x238>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d123      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x21e>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d003      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x1e6>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b11      	cmp	r3, #17
 8001b54:	d11b      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d111      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_ADC_ConfigChannel+0x23c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_ADC_ConfigChannel+0x240>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	0c9a      	lsrs	r2, r3, #18
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbc:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <ADC_Init+0x1f0>)
 8001bbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	021a      	lsls	r2, r3, #8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <ADC_Init+0x1f4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e00f      	b.n	8001cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0202 	bic.w	r2, r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
 8001ccc:	005a      	lsls	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	035a      	lsls	r2, r3, #13
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e007      	b.n	8001d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	051a      	lsls	r2, r3, #20
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d6a:	025a      	lsls	r2, r3, #9
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	029a      	lsls	r2, r3, #10
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012300 	.word	0x40012300
 8001da8:	0f000001 	.word	0x0f000001

08001dac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13c      	bne.n	8001e40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d12b      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d127      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d119      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0220 	bic.w	r2, r2, #32
 8001e12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7fe fd1d 	bl	8000878 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e3e:	e00e      	b.n	8001e5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fd85 	bl	800195c <HAL_ADC_ErrorCallback>
}
 8001e52:	e004      	b.n	8001e5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fd67 	bl	8001948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f043 0204 	orr.w	r2, r3, #4
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fd5a 	bl	800195c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff4c 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff61 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb1 	bl	8001fa4 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff80 	bl	8001f50 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff54 	bl	8001f14 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fb22 	bl	80016c8 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e099      	b.n	80021c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b0:	e00f      	b.n	80020d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b2:	f7ff fb09 	bl	80016c8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d908      	bls.n	80020d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2203      	movs	r2, #3
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e078      	b.n	80021c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e8      	bne.n	80020b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_DMA_Init+0x158>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b04      	cmp	r3, #4
 800212a:	d107      	bne.n	800213c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4313      	orrs	r3, r2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2b04      	cmp	r3, #4
 8002164:	d117      	bne.n	8002196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fa6f 	bl	800265c <DMA_CheckFifoParam>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002192:	2301      	movs	r3, #1
 8002194:	e016      	b.n	80021c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa26 	bl	80025f0 <DMA_CalcBaseAndBitshift>
 80021a4:	4603      	mov	r3, r0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	f010803f 	.word	0xf010803f

080021d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_Start_IT+0x26>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e040      	b.n	8002278 <HAL_DMA_Start_IT+0xa8>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d12f      	bne.n	800226a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9b8 	bl	8002594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	223f      	movs	r2, #63	; 0x3f
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0216 	orr.w	r2, r2, #22
 800223e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e005      	b.n	8002276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800228c:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_DMA_IRQHandler+0x248>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a8e      	ldr	r2, [pc, #568]	; (80024cc <HAL_DMA_IRQHandler+0x24c>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	2208      	movs	r2, #8
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2208      	movs	r2, #8
 80022da:	409a      	lsls	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2201      	movs	r2, #1
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2201      	movs	r2, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2204      	movs	r2, #4
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2210      	movs	r2, #16
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d043      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03c      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2210      	movs	r2, #16
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d024      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
 80023ae:	e01f      	b.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
 80023c0:	e016      	b.n	80023f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0208 	bic.w	r2, r2, #8
 80023de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2220      	movs	r2, #32
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 808f 	beq.w	8002520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8087 	beq.w	8002520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2220      	movs	r2, #32
 8002418:	409a      	lsls	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b05      	cmp	r3, #5
 8002428:	d136      	bne.n	8002498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0216 	bic.w	r2, r2, #22
 8002438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_DMA_IRQHandler+0x1da>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	223f      	movs	r2, #63	; 0x3f
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248a:	2b00      	cmp	r3, #0
 800248c:	d07e      	beq.n	800258c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
        }
        return;
 8002496:	e079      	b.n	800258c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01d      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d031      	beq.n	8002520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e02c      	b.n	8002520 <HAL_DMA_IRQHandler+0x2a0>
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008
 80024cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d023      	beq.n	8002520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e01e      	b.n	8002520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0210 	bic.w	r2, r2, #16
 80024fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	2b00      	cmp	r3, #0
 8002526:	d032      	beq.n	800258e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d022      	beq.n	800257a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2205      	movs	r2, #5
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3301      	adds	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	d307      	bcc.n	8002568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f2      	bne.n	800254c <HAL_DMA_IRQHandler+0x2cc>
 8002566:	e000      	b.n	800256a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
 800258a:	e000      	b.n	800258e <HAL_DMA_IRQHandler+0x30e>
        return;
 800258c:	bf00      	nop
    }
  }
}
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d108      	bne.n	80025d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025d2:	e007      	b.n	80025e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b10      	subs	r3, #16
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <DMA_CalcBaseAndBitshift+0x64>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <DMA_CalcBaseAndBitshift+0x68>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d909      	bls.n	8002632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	659a      	str	r2, [r3, #88]	; 0x58
 8002630:	e007      	b.n	8002642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	aaaaaaab 	.word	0xaaaaaaab
 8002658:	08006194 	.word	0x08006194

0800265c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11f      	bne.n	80026b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d856      	bhi.n	800272a <DMA_CheckFifoParam+0xce>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <DMA_CheckFifoParam+0x28>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026a7 	.word	0x080026a7
 800268c:	08002695 	.word	0x08002695
 8002690:	0800272b 	.word	0x0800272b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d046      	beq.n	800272e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a4:	e043      	b.n	800272e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ae:	d140      	bne.n	8002732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e03d      	b.n	8002732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026be:	d121      	bne.n	8002704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d837      	bhi.n	8002736 <DMA_CheckFifoParam+0xda>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <DMA_CheckFifoParam+0x70>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026e3 	.word	0x080026e3
 80026d4:	080026dd 	.word	0x080026dd
 80026d8:	080026f5 	.word	0x080026f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e030      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d025      	beq.n	800273a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f2:	e022      	b.n	800273a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026fc:	d11f      	bne.n	800273e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002702:	e01c      	b.n	800273e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d903      	bls.n	8002712 <DMA_CheckFifoParam+0xb6>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d003      	beq.n	8002718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002710:	e018      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      break;
 8002716:	e015      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e00b      	b.n	8002742 <DMA_CheckFifoParam+0xe6>
      break;
 800272a:	bf00      	nop
 800272c:	e00a      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e008      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e006      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e004      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;   
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
    }
  } 
  
  return status; 
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e159      	b.n	8002a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8148 	bne.w	8002a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a2 	beq.w	8002a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_GPIO_Init+0x2ec>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x202>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <HAL_GPIO_Init+0x2f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x1fe>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a47      	ldr	r2, [pc, #284]	; (8002a4c <HAL_GPIO_Init+0x2f8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x1fa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a46      	ldr	r2, [pc, #280]	; (8002a50 <HAL_GPIO_Init+0x2fc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x1f6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <HAL_GPIO_Init+0x300>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x1f2>
 8002942:	2304      	movs	r3, #4
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002946:	2307      	movs	r3, #7
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x204>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x204>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x2ec>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_GPIO_Init+0x304>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f aea2 	bls.w	8002770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40013c00 	.word	0x40013c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12b      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fc68 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af4:	f001 f898 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a81      	ldr	r2, [pc, #516]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d807      	bhi.n	8002b14 <HAL_I2C_Init+0x84>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a80      	ldr	r2, [pc, #512]	; (8002d08 <HAL_I2C_Init+0x278>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e006      	b.n	8002b22 <HAL_I2C_Init+0x92>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a7d      	ldr	r2, [pc, #500]	; (8002d0c <HAL_I2C_Init+0x27c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0e7      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a78      	ldr	r2, [pc, #480]	; (8002d10 <HAL_I2C_Init+0x280>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <HAL_I2C_Init+0xd4>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e009      	b.n	8002b78 <HAL_I2C_Init+0xe8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a69      	ldr	r2, [pc, #420]	; (8002d14 <HAL_I2C_Init+0x284>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	495c      	ldr	r1, [pc, #368]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d819      	bhi.n	8002bcc <HAL_I2C_Init+0x13c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e59      	subs	r1, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bac:	400b      	ands	r3, r1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_I2C_Init+0x138>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e59      	subs	r1, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc6:	e051      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e04f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <HAL_I2C_Init+0x168>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e012      	b.n	8002c1e <HAL_I2C_Init+0x18e>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x196>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e022      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_I2C_Init+0x1bc>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e58      	subs	r0, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	440b      	add	r3, r1
 8002c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6809      	ldr	r1, [r1, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6911      	ldr	r1, [r2, #16]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000186a0 	.word	0x000186a0
 8002d08:	001e847f 	.word	0x001e847f
 8002d0c:	003d08ff 	.word	0x003d08ff
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d32:	f7fe fcc9 	bl	80016c8 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	f040 80d9 	bne.w	8002ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	496d      	ldr	r1, [pc, #436]	; (8002f04 <HAL_I2C_Mem_Write+0x1ec>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f971 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0cc      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Mem_Write+0x56>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0c5      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d007      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	; 0x21
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_I2C_Mem_Write+0x1f0>)
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd6:	88f8      	ldrh	r0, [r7, #6]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f890 	bl	8002f0c <I2C_RequestMemoryWrite>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e081      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f9f2 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06b      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11b      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x180>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d017      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1aa      	bne.n	8002df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f9de 	bl	8003266 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e016      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00100002 	.word	0x00100002
 8002f08:	ffff0000 	.word	0xffff0000

08002f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f878 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5c:	d103      	bne.n	8002f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e05f      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	492d      	ldr	r1, [pc, #180]	; (8003034 <I2C_RequestMemoryWrite+0x128>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f8b0 	bl	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04c      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f91a 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02b      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e021      	b.n	8003028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe4:	893b      	ldrh	r3, [r7, #8]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8f4 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b04      	cmp	r3, #4
 8003008:	d107      	bne.n	800301a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e005      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800301e:	893b      	ldrh	r3, [r7, #8]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00010002 	.word	0x00010002

08003038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003048:	e025      	b.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d021      	beq.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fb39 	bl	80016c8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e023      	b.n	80030de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	e00c      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d0b6      	beq.n	800304a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f4:	e051      	b.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d123      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 0204 	orr.w	r2, r3, #4
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e046      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d021      	beq.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fab7 	bl	80016c8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e020      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e00b      	b.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d18d      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f0:	e02d      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f878 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02d      	b.n	800325e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d021      	beq.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fa5d 	bl	80016c8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d1ca      	bne.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003272:	e02d      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f837 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e02d      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d021      	beq.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7fe fa1c 	bl	80016c8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d1ca      	bne.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d11b      	bne.n	8003338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e267      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b85      	ldr	r3, [pc, #532]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e242      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6f      	ldr	r2, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6c      	ldr	r2, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b69      	ldr	r3, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe f962 	bl	80016c8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe f95e 	bl	80016c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e207      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe f94e 	bl	80016c8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe f94a 	bl	80016c8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f3      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b44      	ldr	r3, [pc, #272]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c7      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4937      	ldr	r1, [pc, #220]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCC_OscConfig+0x244>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe f903 	bl	80016c8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe f8ff 	bl	80016c8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a8      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4925      	ldr	r1, [pc, #148]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_OscConfig+0x244>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f8e2 	bl	80016c8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f8de 	bl	80016c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e187      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_RCC_OscConfig+0x248>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe f8c2 	bl	80016c8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe f8be 	bl	80016c8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e167      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x248>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe f8ab 	bl	80016c8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe f8a7 	bl	80016c8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e150      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 8003588:	40023800 	.word	0x40023800
 800358c:	42470000 	.word	0x42470000
 8003590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b7d      	ldr	r3, [pc, #500]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a7c      	ldr	r2, [pc, #496]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b74      	ldr	r3, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a73      	ldr	r2, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f867 	bl	80016c8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe f863 	bl	80016c8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x2ea>
 8003624:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a63      	ldr	r2, [pc, #396]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x30c>
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a57      	ldr	r2, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a54      	ldr	r2, [pc, #336]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fe f828 	bl	80016c8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f824 	bl	80016c8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0cb      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <HAL_RCC_OscConfig+0x334>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe f812 	bl	80016c8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f80e 	bl	80016c8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0b5      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ee      	bne.n	80036a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4a38      	ldr	r2, [pc, #224]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a1 	beq.w	8003828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d05c      	beq.n	80037ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d141      	bne.n	800377e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fd ffe2 	bl	80016c8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd ffde 	bl	80016c8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e087      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	491b      	ldr	r1, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fd ffb7 	bl	80016c8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375e:	f7fd ffb3 	bl	80016c8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x416>
 800377c:	e054      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd ffa0 	bl	80016c8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd ff9c 	bl	80016c8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e045      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e038      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d028      	beq.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d121      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fece 	bl	80016c8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd feca 	bl	80016c8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fd64 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	0800617c 	.word	0x0800617c
 80039fc:	20000008 	.word	0x20000008
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b094      	sub	sp, #80	; 0x50
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a10:	2300      	movs	r3, #0
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	2300      	movs	r3, #0
 8003a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80e1 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0db      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a3c:	e0db      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b73      	ldr	r3, [pc, #460]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a42:	e0d8      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	2200      	movs	r2, #0
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
 8003a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	f04f 0000 	mov.w	r0, #0
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a88:	0150      	lsls	r0, r2, #5
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4621      	mov	r1, r4
 8003a90:	1a51      	subs	r1, r2, r1
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	018b      	lsls	r3, r1, #6
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	018a      	lsls	r2, r1, #6
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8003abc:	4659      	mov	r1, fp
 8003abe:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad6:	4690      	mov	r8, r2
 8003ad8:	4699      	mov	r9, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	eb18 0303 	adds.w	r3, r8, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	eb49 0303 	adc.w	r3, r9, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003af6:	4629      	mov	r1, r5
 8003af8:	024b      	lsls	r3, r1, #9
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b00:	4621      	mov	r1, r4
 8003b02:	024a      	lsls	r2, r1, #9
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b14:	f7fc fb64 	bl	80001e0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4e:	0150      	lsls	r0, r2, #5
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4641      	mov	r1, r8
 8003b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b74:	ebb2 040a 	subs.w	r4, r2, sl
 8003b78:	eb63 050b 	sbc.w	r5, r3, fp
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	464b      	mov	r3, r9
 8003b98:	eb45 0303 	adc.w	r3, r5, r3
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003baa:	4629      	mov	r1, r5
 8003bac:	028b      	lsls	r3, r1, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	028a      	lsls	r2, r1, #10
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc8:	f7fc fb0a 	bl	80001e0 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3750      	adds	r7, #80	; 0x50
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000008 	.word	0x20000008

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	0800618c 	.word	0x0800618c

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffdc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	0800618c 	.word	0x0800618c

08003c78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	220f      	movs	r2, #15
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_RCC_GetClockConfig+0x60>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0207 	and.w	r2, r3, #7
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e041      	b.n	8003d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f839 	bl	8003d7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 f9ca 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d001      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e044      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x6c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d013      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x6c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <HAL_TIM_Base_Start_IT+0xb4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x6c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_TIM_Base_Start_IT+0xb8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x6c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_TIM_Base_Start_IT+0xbc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x6c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_TIM_Base_Start_IT+0xc0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d010      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e007      	b.n	8003e30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40014000 	.word	0x40014000

08003e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f8ee 	bl	8004078 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8e0 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8f1 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0204 	mvn.w	r2, #4
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8c4 	bl	8004078 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8b6 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8c7 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0208 	mvn.w	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f89a 	bl	8004078 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f88c 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f89d 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f870 	bl	8004078 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f862 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f873 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0201 	mvn.w	r2, #1
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe44 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e2 	bl	80041c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f838 	bl	80040a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d10e      	bne.n	800405c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b20      	cmp	r3, #32
 800404a:	d107      	bne.n	800405c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0220 	mvn.w	r2, #32
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8ac 	bl	80041b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a34      	ldr	r2, [pc, #208]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a31      	ldr	r2, [pc, #196]	; (800419c <TIM_Base_SetConfig+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <TIM_Base_SetConfig+0xec>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <TIM_Base_SetConfig+0xf0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d017      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <TIM_Base_SetConfig+0xe8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <TIM_Base_SetConfig+0xec>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00f      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <TIM_Base_SetConfig+0xf0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <TIM_Base_SetConfig+0xf4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <TIM_Base_SetConfig+0xf8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <TIM_Base_SetConfig+0xfc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d108      	bne.n	8004150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <TIM_Base_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	615a      	str	r2, [r3, #20]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e03f      	b.n	800426e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd f90a 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f829 	bl	8004278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b0c0      	sub	sp, #256	; 0x100
 800427e:	af00      	add	r7, sp, #0
 8004280:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	ea40 0301 	orr.w	r3, r0, r1
 80042a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042d0:	f021 010c 	bic.w	r1, r1, #12
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042de:	430b      	orrs	r3, r1
 80042e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	6999      	ldr	r1, [r3, #24]
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	ea40 0301 	orr.w	r3, r0, r1
 80042fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <UART_SetConfig+0x2cc>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d005      	beq.n	8004318 <UART_SetConfig+0xa0>
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b8d      	ldr	r3, [pc, #564]	; (8004548 <UART_SetConfig+0x2d0>)
 8004314:	429a      	cmp	r2, r3
 8004316:	d104      	bne.n	8004322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff fc9a 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 800431c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004320:	e003      	b.n	800432a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004322:	f7ff fc81 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004326:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	f040 810c 	bne.w	8004550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004342:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	1891      	adds	r1, r2, r2
 8004350:	65b9      	str	r1, [r7, #88]	; 0x58
 8004352:	415b      	adcs	r3, r3
 8004354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800435a:	4621      	mov	r1, r4
 800435c:	eb12 0801 	adds.w	r8, r2, r1
 8004360:	4629      	mov	r1, r5
 8004362:	eb43 0901 	adc.w	r9, r3, r1
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437a:	4690      	mov	r8, r2
 800437c:	4699      	mov	r9, r3
 800437e:	4623      	mov	r3, r4
 8004380:	eb18 0303 	adds.w	r3, r8, r3
 8004384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004388:	462b      	mov	r3, r5
 800438a:	eb49 0303 	adc.w	r3, r9, r3
 800438e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800439e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043a6:	460b      	mov	r3, r1
 80043a8:	18db      	adds	r3, r3, r3
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
 80043ac:	4613      	mov	r3, r2
 80043ae:	eb42 0303 	adc.w	r3, r2, r3
 80043b2:	657b      	str	r3, [r7, #84]	; 0x54
 80043b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043bc:	f7fb ff10 	bl	80001e0 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <UART_SetConfig+0x2d4>)
 80043c6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	011c      	lsls	r4, r3, #4
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80043e8:	415b      	adcs	r3, r3
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043f0:	4641      	mov	r1, r8
 80043f2:	eb12 0a01 	adds.w	sl, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0b01 	adc.w	fp, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800440c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004410:	4692      	mov	sl, r2
 8004412:	469b      	mov	fp, r3
 8004414:	4643      	mov	r3, r8
 8004416:	eb1a 0303 	adds.w	r3, sl, r3
 800441a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800441e:	464b      	mov	r3, r9
 8004420:	eb4b 0303 	adc.w	r3, fp, r3
 8004424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004434:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800443c:	460b      	mov	r3, r1
 800443e:	18db      	adds	r3, r3, r3
 8004440:	643b      	str	r3, [r7, #64]	; 0x40
 8004442:	4613      	mov	r3, r2
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
 800444a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800444e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004452:	f7fb fec5 	bl	80001e0 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4611      	mov	r1, r2
 800445c:	4b3b      	ldr	r3, [pc, #236]	; (800454c <UART_SetConfig+0x2d4>)
 800445e:	fba3 2301 	umull	r2, r3, r3, r1
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2264      	movs	r2, #100	; 0x64
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	1acb      	subs	r3, r1, r3
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <UART_SetConfig+0x2d4>)
 8004474:	fba3 2302 	umull	r2, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004480:	441c      	add	r4, r3
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800448c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	1891      	adds	r1, r2, r2
 800449a:	63b9      	str	r1, [r7, #56]	; 0x38
 800449c:	415b      	adcs	r3, r3
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044a4:	4641      	mov	r1, r8
 80044a6:	1851      	adds	r1, r2, r1
 80044a8:	6339      	str	r1, [r7, #48]	; 0x30
 80044aa:	4649      	mov	r1, r9
 80044ac:	414b      	adcs	r3, r1
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044bc:	4659      	mov	r1, fp
 80044be:	00cb      	lsls	r3, r1, #3
 80044c0:	4651      	mov	r1, sl
 80044c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c6:	4651      	mov	r1, sl
 80044c8:	00ca      	lsls	r2, r1, #3
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	4642      	mov	r2, r8
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d8:	464b      	mov	r3, r9
 80044da:	460a      	mov	r2, r1
 80044dc:	eb42 0303 	adc.w	r3, r2, r3
 80044e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044f8:	460b      	mov	r3, r1
 80044fa:	18db      	adds	r3, r3, r3
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	4613      	mov	r3, r2
 8004500:	eb42 0303 	adc.w	r3, r2, r3
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800450a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800450e:	f7fb fe67 	bl	80001e0 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <UART_SetConfig+0x2d4>)
 8004518:	fba3 1302 	umull	r1, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	2164      	movs	r1, #100	; 0x64
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3332      	adds	r3, #50	; 0x32
 800452a:	4a08      	ldr	r2, [pc, #32]	; (800454c <UART_SetConfig+0x2d4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	f003 0207 	and.w	r2, r3, #7
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4422      	add	r2, r4
 800453e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004540:	e105      	b.n	800474e <UART_SetConfig+0x4d6>
 8004542:	bf00      	nop
 8004544:	40011000 	.word	0x40011000
 8004548:	40011400 	.word	0x40011400
 800454c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800455a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800455e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004562:	4642      	mov	r2, r8
 8004564:	464b      	mov	r3, r9
 8004566:	1891      	adds	r1, r2, r2
 8004568:	6239      	str	r1, [r7, #32]
 800456a:	415b      	adcs	r3, r3
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004572:	4641      	mov	r1, r8
 8004574:	1854      	adds	r4, r2, r1
 8004576:	4649      	mov	r1, r9
 8004578:	eb43 0501 	adc.w	r5, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	00eb      	lsls	r3, r5, #3
 8004586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	4614      	mov	r4, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4643      	mov	r3, r8
 8004592:	18e3      	adds	r3, r4, r3
 8004594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004598:	464b      	mov	r3, r9
 800459a:	eb45 0303 	adc.w	r3, r5, r3
 800459e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045be:	4629      	mov	r1, r5
 80045c0:	008b      	lsls	r3, r1, #2
 80045c2:	4621      	mov	r1, r4
 80045c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c8:	4621      	mov	r1, r4
 80045ca:	008a      	lsls	r2, r1, #2
 80045cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045d0:	f7fb fe06 	bl	80001e0 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b60      	ldr	r3, [pc, #384]	; (800475c <UART_SetConfig+0x4e4>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011c      	lsls	r4, r3, #4
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	61b9      	str	r1, [r7, #24]
 80045fc:	415b      	adcs	r3, r3
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6139      	str	r1, [r7, #16]
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	67bb      	str	r3, [r7, #120]	; 0x78
 800464e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800465c:	4649      	mov	r1, r9
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	4641      	mov	r1, r8
 8004662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004666:	4641      	mov	r1, r8
 8004668:	008a      	lsls	r2, r1, #2
 800466a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800466e:	f7fb fdb7 	bl	80001e0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b39      	ldr	r3, [pc, #228]	; (800475c <UART_SetConfig+0x4e4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	; 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	3332      	adds	r3, #50	; 0x32
 800468a:	4a34      	ldr	r2, [pc, #208]	; (800475c <UART_SetConfig+0x4e4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004696:	441c      	add	r4, r3
 8004698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469c:	2200      	movs	r2, #0
 800469e:	673b      	str	r3, [r7, #112]	; 0x70
 80046a0:	677a      	str	r2, [r7, #116]	; 0x74
 80046a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046a6:	4642      	mov	r2, r8
 80046a8:	464b      	mov	r3, r9
 80046aa:	1891      	adds	r1, r2, r2
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b6:	4641      	mov	r1, r8
 80046b8:	1851      	adds	r1, r2, r1
 80046ba:	6039      	str	r1, [r7, #0]
 80046bc:	4649      	mov	r1, r9
 80046be:	414b      	adcs	r3, r1
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ce:	4659      	mov	r1, fp
 80046d0:	00cb      	lsls	r3, r1, #3
 80046d2:	4651      	mov	r1, sl
 80046d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d8:	4651      	mov	r1, sl
 80046da:	00ca      	lsls	r2, r1, #3
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	4603      	mov	r3, r0
 80046e2:	4642      	mov	r2, r8
 80046e4:	189b      	adds	r3, r3, r2
 80046e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e8:	464b      	mov	r3, r9
 80046ea:	460a      	mov	r2, r1
 80046ec:	eb42 0303 	adc.w	r3, r2, r3
 80046f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	663b      	str	r3, [r7, #96]	; 0x60
 80046fc:	667a      	str	r2, [r7, #100]	; 0x64
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800470a:	4649      	mov	r1, r9
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	4641      	mov	r1, r8
 8004710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004714:	4641      	mov	r1, r8
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800471c:	f7fb fd60 	bl	80001e0 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <UART_SetConfig+0x4e4>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2164      	movs	r1, #100	; 0x64
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <UART_SetConfig+0x4e4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4422      	add	r2, r4
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	bf00      	nop
 8004750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475a:	bf00      	nop
 800475c:	51eb851f 	.word	0x51eb851f

08004760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f103 0208 	add.w	r2, r3, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 0208 	add.w	r2, r3, #8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d103      	bne.n	8004822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e00c      	b.n	800483c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3308      	adds	r3, #8
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e002      	b.n	8004830 <vListInsert+0x2e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d2f6      	bcs.n	800482a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6852      	ldr	r2, [r2, #4]
 8004894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d103      	bne.n	80048a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1e5a      	subs	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08e      	sub	sp, #56	; 0x38
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xTaskCreateStatic+0x46>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fb      	str	r3, [r7, #28]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800490e:	2354      	movs	r3, #84	; 0x54
 8004910:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b54      	cmp	r3, #84	; 0x54
 8004916:	d00a      	beq.n	800492e <xTaskCreateStatic+0x66>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61bb      	str	r3, [r7, #24]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800492e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01e      	beq.n	8004974 <xTaskCreateStatic+0xac>
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800494e:	2300      	movs	r3, #0
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f850 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800496c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800496e:	f000 f8d5 	bl	8004b1c <prvAddNewTaskToReadyList>
 8004972:	e001      	b.n	8004978 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004978:	697b      	ldr	r3, [r7, #20]
	}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08c      	sub	sp, #48	; 0x30
 8004986:	af04      	add	r7, sp, #16
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fec6 	bl	8005728 <pvPortMalloc>
 800499c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049a4:	2054      	movs	r0, #84	; 0x54
 80049a6:	f000 febf 	bl	8005728 <pvPortMalloc>
 80049aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
 80049b8:	e005      	b.n	80049c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f000 ff80 	bl	80058c0 <vPortFree>
 80049c0:	e001      	b.n	80049c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d017      	beq.n	80049fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f80e 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049f0:	69f8      	ldr	r0, [r7, #28]
 80049f2:	f000 f893 	bl	8004b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e002      	b.n	8004a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a02:	69bb      	ldr	r3, [r7, #24]
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a24:	3b01      	subs	r3, #1
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	617b      	str	r3, [r7, #20]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01f      	beq.n	8004a9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e012      	b.n	8004a86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	7819      	ldrb	r1, [r3, #0]
 8004a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3334      	adds	r3, #52	; 0x34
 8004a70:	460a      	mov	r2, r1
 8004a72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d9e9      	bls.n	8004a60 <prvInitialiseNewTask+0x54>
 8004a8c:	e000      	b.n	8004a90 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a98:	e003      	b.n	8004aa2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d901      	bls.n	8004aac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aa8:	2306      	movs	r3, #6
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2200      	movs	r2, #0
 8004abc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fe6c 	bl	80047a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	3318      	adds	r3, #24
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fe67 	bl	80047a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f1c3 0207 	rsb	r2, r3, #7
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	2200      	movs	r2, #0
 8004aec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f000 fc06 	bl	800530c <pxPortInitialiseStack>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b12:	bf00      	nop
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b24:	f000 fd1e 	bl	8005564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b3a:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b40:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d110      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b48:	f000 fabc 	bl	80050c4 <prvInitialiseTaskLists>
 8004b4c:	e00d      	b.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <prvAddNewTaskToReadyList+0xc0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d802      	bhi.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b64:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <prvAddNewTaskToReadyList+0xcc>)
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7ff fe0c 	bl	80047ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ba2:	f000 fd0f 	bl	80055c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <prvAddNewTaskToReadyList+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d207      	bcs.n	8004bcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvAddNewTaskToReadyList+0xd0>)
 8004bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000c48 	.word	0x20000c48
 8004bd8:	20000b48 	.word	0x20000b48
 8004bdc:	20000c54 	.word	0x20000c54
 8004be0:	20000c64 	.word	0x20000c64
 8004be4:	20000c50 	.word	0x20000c50
 8004be8:	20000b4c 	.word	0x20000b4c
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d017      	beq.n	8004c32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <vTaskDelay+0x60>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <vTaskDelay+0x30>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60bb      	str	r3, [r7, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c20:	f000 f87a 	bl	8004d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c24:	2100      	movs	r1, #0
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb0a 	bl	8005240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c2c:	f000 f882 	bl	8004d34 <xTaskResumeAll>
 8004c30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <vTaskDelay+0x64>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000c70 	.word	0x20000c70
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c66:	463a      	mov	r2, r7
 8004c68:	1d39      	adds	r1, r7, #4
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fb fc38 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	9202      	str	r2, [sp, #8]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2300      	movs	r3, #0
 8004c84:	460a      	mov	r2, r1
 8004c86:	491e      	ldr	r1, [pc, #120]	; (8004d00 <vTaskStartScheduler+0xa8>)
 8004c88:	481e      	ldr	r0, [pc, #120]	; (8004d04 <vTaskStartScheduler+0xac>)
 8004c8a:	f7ff fe1d 	bl	80048c8 <xTaskCreateStatic>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <vTaskStartScheduler+0xb0>)
 8004c92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <vTaskStartScheduler+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e001      	b.n	8004ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d116      	bne.n	8004cda <vTaskStartScheduler+0x82>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	613b      	str	r3, [r7, #16]
}
 8004cbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <vTaskStartScheduler+0xb4>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <vTaskStartScheduler+0xb8>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <vTaskStartScheduler+0xbc>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cd4:	f000 fba4 	bl	8005420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cd8:	e00e      	b.n	8004cf8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d10a      	bne.n	8004cf8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vTaskStartScheduler+0x9e>
}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	08005b84 	.word	0x08005b84
 8004d04:	08005095 	.word	0x08005095
 8004d08:	20000c6c 	.word	0x20000c6c
 8004d0c:	20000c68 	.word	0x20000c68
 8004d10:	20000c54 	.word	0x20000c54
 8004d14:	20000c4c 	.word	0x20000c4c

08004d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <vTaskSuspendAll+0x18>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3301      	adds	r3, #1
 8004d22:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <vTaskSuspendAll+0x18>)
 8004d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000c70 	.word	0x20000c70

08004d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d60:	f000 fc00 	bl	8005564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d161      	bne.n	8004e3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <xTaskResumeAll+0x118>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d05d      	beq.n	8004e3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d7e:	e02e      	b.n	8004dde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <xTaskResumeAll+0x11c>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fd71 	bl	8004874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fd6c 	bl	8004874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <xTaskResumeAll+0x120>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <xTaskResumeAll+0x120>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <xTaskResumeAll+0x124>)
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7ff fcf8 	bl	80047ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <xTaskResumeAll+0x128>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <xTaskResumeAll+0x11c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1cc      	bne.n	8004d80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dec:	f000 fa08 	bl	8005200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <xTaskResumeAll+0x130>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d010      	beq.n	8004e1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dfc:	f000 f836 	bl	8004e6c <xTaskIncrementTick>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f1      	bne.n	8004dfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <xTaskResumeAll+0x130>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e26:	2301      	movs	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <xTaskResumeAll+0x134>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f000 fbc3 	bl	80055c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000c70 	.word	0x20000c70
 8004e4c:	20000c48 	.word	0x20000c48
 8004e50:	20000c08 	.word	0x20000c08
 8004e54:	20000c50 	.word	0x20000c50
 8004e58:	20000b4c 	.word	0x20000b4c
 8004e5c:	20000b48 	.word	0x20000b48
 8004e60:	20000c5c 	.word	0x20000c5c
 8004e64:	20000c58 	.word	0x20000c58
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <xTaskIncrementTick+0x144>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 808e 	bne.w	8004f9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d120      	bne.n	8004ed6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e94:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskIncrementTick+0x46>
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4a3e      	ldr	r2, [pc, #248]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	f000 f995 	bl	8005200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d348      	bcc.n	8004f72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eea:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	601a      	str	r2, [r3, #0]
					break;
 8004ef2:	e03e      	b.n	8004f72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d203      	bcs.n	8004f14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f12:	e02e      	b.n	8004f72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fcab 	bl	8004874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3318      	adds	r3, #24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fca2 	bl	8004874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f50:	441a      	add	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7ff fc2e 	bl	80047ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3b9      	bcc.n	8004ee0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f70:	e7b6      	b.n	8004ee0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4914      	ldr	r1, [pc, #80]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d901      	bls.n	8004f8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <xTaskIncrementTick+0x168>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e004      	b.n	8004fa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000c70 	.word	0x20000c70
 8004fb4:	20000c4c 	.word	0x20000c4c
 8004fb8:	20000c00 	.word	0x20000c00
 8004fbc:	20000c04 	.word	0x20000c04
 8004fc0:	20000c60 	.word	0x20000c60
 8004fc4:	20000c68 	.word	0x20000c68
 8004fc8:	20000c50 	.word	0x20000c50
 8004fcc:	20000b4c 	.word	0x20000b4c
 8004fd0:	20000b48 	.word	0x20000b48
 8004fd4:	20000c5c 	.word	0x20000c5c
 8004fd8:	20000c58 	.word	0x20000c58

08004fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <vTaskSwitchContext+0xa4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fea:	4b26      	ldr	r3, [pc, #152]	; (8005084 <vTaskSwitchContext+0xa8>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ff0:	e03f      	b.n	8005072 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <vTaskSwitchContext+0xa8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	4b23      	ldr	r3, [pc, #140]	; (8005088 <vTaskSwitchContext+0xac>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	f1c3 031f 	rsb	r3, r3, #31
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	491f      	ldr	r1, [pc, #124]	; (800508c <vTaskSwitchContext+0xb0>)
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <vTaskSwitchContext+0x5a>
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a12      	ldr	r2, [pc, #72]	; (800508c <vTaskSwitchContext+0xb0>)
 8005044:	4413      	add	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3308      	adds	r3, #8
 800505a:	429a      	cmp	r2, r3
 800505c:	d104      	bne.n	8005068 <vTaskSwitchContext+0x8c>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4a08      	ldr	r2, [pc, #32]	; (8005090 <vTaskSwitchContext+0xb4>)
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000c70 	.word	0x20000c70
 8005084:	20000c5c 	.word	0x20000c5c
 8005088:	20000c50 	.word	0x20000c50
 800508c:	20000b4c 	.word	0x20000b4c
 8005090:	20000b48 	.word	0x20000b48

08005094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800509c:	f000 f852 	bl	8005144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <prvIdleTask+0x28>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d9f9      	bls.n	800509c <prvIdleTask+0x8>
			{
				taskYIELD();
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <prvIdleTask+0x2c>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050b8:	e7f0      	b.n	800509c <prvIdleTask+0x8>
 80050ba:	bf00      	nop
 80050bc:	20000b4c 	.word	0x20000b4c
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	e00c      	b.n	80050ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <prvInitialiseTaskLists+0x60>)
 80050dc:	4413      	add	r3, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fb3e 	bl	8004760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3301      	adds	r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d9ef      	bls.n	80050d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050f0:	480d      	ldr	r0, [pc, #52]	; (8005128 <prvInitialiseTaskLists+0x64>)
 80050f2:	f7ff fb35 	bl	8004760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050f6:	480d      	ldr	r0, [pc, #52]	; (800512c <prvInitialiseTaskLists+0x68>)
 80050f8:	f7ff fb32 	bl	8004760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050fc:	480c      	ldr	r0, [pc, #48]	; (8005130 <prvInitialiseTaskLists+0x6c>)
 80050fe:	f7ff fb2f 	bl	8004760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005102:	480c      	ldr	r0, [pc, #48]	; (8005134 <prvInitialiseTaskLists+0x70>)
 8005104:	f7ff fb2c 	bl	8004760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005108:	480b      	ldr	r0, [pc, #44]	; (8005138 <prvInitialiseTaskLists+0x74>)
 800510a:	f7ff fb29 	bl	8004760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800510e:	4b0b      	ldr	r3, [pc, #44]	; (800513c <prvInitialiseTaskLists+0x78>)
 8005110:	4a05      	ldr	r2, [pc, #20]	; (8005128 <prvInitialiseTaskLists+0x64>)
 8005112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <prvInitialiseTaskLists+0x7c>)
 8005116:	4a05      	ldr	r2, [pc, #20]	; (800512c <prvInitialiseTaskLists+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000b4c 	.word	0x20000b4c
 8005128:	20000bd8 	.word	0x20000bd8
 800512c:	20000bec 	.word	0x20000bec
 8005130:	20000c08 	.word	0x20000c08
 8005134:	20000c1c 	.word	0x20000c1c
 8005138:	20000c34 	.word	0x20000c34
 800513c:	20000c00 	.word	0x20000c00
 8005140:	20000c04 	.word	0x20000c04

08005144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800514a:	e019      	b.n	8005180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800514c:	f000 fa0a 	bl	8005564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <prvCheckTasksWaitingTermination+0x50>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fb89 	bl	8004874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <prvCheckTasksWaitingTermination+0x54>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3b01      	subs	r3, #1
 8005168:	4a0b      	ldr	r2, [pc, #44]	; (8005198 <prvCheckTasksWaitingTermination+0x54>)
 800516a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <prvCheckTasksWaitingTermination+0x58>)
 8005174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005176:	f000 fa25 	bl	80055c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f810 	bl	80051a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <prvCheckTasksWaitingTermination+0x58>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e1      	bne.n	800514c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000c1c 	.word	0x20000c1c
 8005198:	20000c48 	.word	0x20000c48
 800519c:	20000c30 	.word	0x20000c30

080051a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d108      	bne.n	80051c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb82 	bl	80058c0 <vPortFree>
				vPortFree( pxTCB );
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fb7f 	bl	80058c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051c2:	e018      	b.n	80051f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d103      	bne.n	80051d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb76 	bl	80058c0 <vPortFree>
	}
 80051d4:	e00f      	b.n	80051f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d00a      	beq.n	80051f6 <prvDeleteTCB+0x56>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <prvDeleteTCB+0x54>
	}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <prvResetNextTaskUnblockTime+0x38>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvResetNextTaskUnblockTime+0x3c>)
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005218:	e008      	b.n	800522c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <prvResetNextTaskUnblockTime+0x38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <prvResetNextTaskUnblockTime+0x3c>)
 800522a:	6013      	str	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20000c00 	.word	0x20000c00
 800523c:	20000c68 	.word	0x20000c68

08005240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005250:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fb0c 	bl	8004874 <uxListRemove>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2201      	movs	r2, #1
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43da      	mvns	r2, r3
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4013      	ands	r3, r2
 8005276:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005278:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d10a      	bne.n	8005298 <prvAddCurrentTaskToDelayedList+0x58>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	481a      	ldr	r0, [pc, #104]	; (80052fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005292:	f7ff fa92 	bl	80047ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005296:	e026      	b.n	80052e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d209      	bcs.n	80052c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b0:	4b13      	ldr	r3, [pc, #76]	; (8005300 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7ff faa0 	bl	8004802 <vListInsert>
}
 80052c2:	e010      	b.n	80052e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7ff fa96 	bl	8004802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d202      	bcs.n	80052e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052e0:	4a09      	ldr	r2, [pc, #36]	; (8005308 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000c4c 	.word	0x20000c4c
 80052f4:	20000b48 	.word	0x20000b48
 80052f8:	20000c50 	.word	0x20000c50
 80052fc:	20000c34 	.word	0x20000c34
 8005300:	20000c04 	.word	0x20000c04
 8005304:	20000c00 	.word	0x20000c00
 8005308:	20000c68 	.word	0x20000c68

0800530c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b04      	subs	r3, #4
 800531c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b04      	subs	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b04      	subs	r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800533c:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <pxPortInitialiseStack+0x64>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b14      	subs	r3, #20
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b04      	subs	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f06f 0202 	mvn.w	r2, #2
 800535a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3b20      	subs	r3, #32
 8005360:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	08005375 	.word	0x08005375

08005374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <prvTaskExitError+0x54>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d00a      	beq.n	800539e <prvTaskExitError+0x2a>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <prvTaskExitError+0x28>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60bb      	str	r3, [r7, #8]
}
 80053b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053b2:	bf00      	nop
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0fc      	beq.n	80053b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	20000014 	.word	0x20000014
 80053cc:	00000000 	.word	0x00000000

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	20000b48 	.word	0x20000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053f8:	4808      	ldr	r0, [pc, #32]	; (800541c <prvPortStartFirstTask+0x24>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8814 	msr	CONTROL, r0
 800540a:	b662      	cpsie	i
 800540c:	b661      	cpsie	f
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	df00      	svc	0
 8005418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800541a:	bf00      	nop
 800541c:	e000ed08 	.word	0xe000ed08

08005420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <xPortStartScheduler+0x120>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a46      	ldr	r2, [pc, #280]	; (8005544 <xPortStartScheduler+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10a      	bne.n	8005446 <xPortStartScheduler+0x26>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <xPortStartScheduler+0x120>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10a      	bne.n	8005466 <xPortStartScheduler+0x46>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <xPortStartScheduler+0x12c>)
 8005468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <xPortStartScheduler+0x130>)
 800548c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <xPortStartScheduler+0x134>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005494:	e009      	b.n	80054aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <xPortStartScheduler+0x134>)
 800549e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d0ef      	beq.n	8005496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <xPortStartScheduler+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d00a      	beq.n	80054d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60bb      	str	r3, [r7, #8]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <xPortStartScheduler+0x134>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <xPortStartScheduler+0x134>)
 80054e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <xPortStartScheduler+0x134>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ea:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <xPortStartScheduler+0x134>)
 80054ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <xPortStartScheduler+0x138>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <xPortStartScheduler+0x138>)
 80054fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <xPortStartScheduler+0x138>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <xPortStartScheduler+0x138>)
 8005508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800550c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800550e:	f000 f8dd 	bl	80056cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <xPortStartScheduler+0x13c>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005518:	f000 f8fc 	bl	8005714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <xPortStartScheduler+0x140>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0f      	ldr	r2, [pc, #60]	; (8005560 <xPortStartScheduler+0x140>)
 8005522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005528:	f7ff ff66 	bl	80053f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800552c:	f7ff fd56 	bl	8004fdc <vTaskSwitchContext>
	prvTaskExitError();
 8005530:	f7ff ff20 	bl	8005374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000ed00 	.word	0xe000ed00
 8005544:	410fc271 	.word	0x410fc271
 8005548:	410fc270 	.word	0x410fc270
 800554c:	e000e400 	.word	0xe000e400
 8005550:	20000c74 	.word	0x20000c74
 8005554:	20000c78 	.word	0x20000c78
 8005558:	e000ed20 	.word	0xe000ed20
 800555c:	20000014 	.word	0x20000014
 8005560:	e000ef34 	.word	0xe000ef34

08005564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
}
 800557c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <vPortEnterCritical+0x58>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <vPortEnterCritical+0x58>)
 8005586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <vPortEnterCritical+0x58>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10f      	bne.n	80055b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <vPortEnterCritical+0x5c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <vPortEnterCritical+0x4a>
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	20000014 	.word	0x20000014
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <vPortExitCritical+0x50>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <vPortExitCritical+0x24>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	607b      	str	r3, [r7, #4]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <vPortExitCritical+0x50>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vPortExitCritical+0x50>)
 80055f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <vPortExitCritical+0x42>
 80055fa:	2300      	movs	r3, #0
 80055fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000014 	.word	0x20000014
	...

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005644:	f380 8811 	msr	BASEPRI, r0
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f7ff fcc4 	bl	8004fdc <vTaskSwitchContext>
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f380 8811 	msr	BASEPRI, r0
 800565c:	bc09      	pop	{r0, r3}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005666:	f01e 0f10 	tst.w	lr, #16
 800566a:	bf08      	it	eq
 800566c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005670:	f380 8809 	msr	PSP, r0
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst>:
 8005680:	20000b48 	.word	0x20000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7ff fbe3 	bl	8004e6c <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <SysTick_Handler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <vPortSetupTimerInterrupt+0x38>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <vPortSetupTimerInterrupt+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x40>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vPortSetupTimerInterrupt+0x44>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ee:	4b04      	ldr	r3, [pc, #16]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000e010 	.word	0xe000e010
 8005704:	e000e018 	.word	0xe000e018
 8005708:	20000008 	.word	0x20000008
 800570c:	10624dd3 	.word	0x10624dd3
 8005710:	e000e014 	.word	0xe000e014

08005714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005724 <vPortEnableVFP+0x10>
 8005718:	6801      	ldr	r1, [r0, #0]
 800571a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800571e:	6001      	str	r1, [r0, #0]
 8005720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005722:	bf00      	nop
 8005724:	e000ed88 	.word	0xe000ed88

08005728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005734:	f7ff faf0 	bl	8004d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <pvPortMalloc+0x180>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005740:	f000 f920 	bl	8005984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <pvPortMalloc+0x184>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 8093 	bne.w	8005878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01d      	beq.n	8005794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005758:	2208      	movs	r2, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d014      	beq.n	8005794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <pvPortMalloc+0x6c>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06e      	beq.n	8005878 <pvPortMalloc+0x150>
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <pvPortMalloc+0x188>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d869      	bhi.n	8005878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <pvPortMalloc+0x18c>)
 80057a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057a8:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <pvPortMalloc+0x18c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ae:	e004      	b.n	80057ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d903      	bls.n	80057cc <pvPortMalloc+0xa4>
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f1      	bne.n	80057b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <pvPortMalloc+0x180>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d050      	beq.n	8005878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2208      	movs	r2, #8
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	2308      	movs	r3, #8
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d91f      	bls.n	8005838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <pvPortMalloc+0xf8>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	613b      	str	r3, [r7, #16]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 f908 	bl	8005a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <pvPortMalloc+0x188>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <pvPortMalloc+0x188>)
 8005844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <pvPortMalloc+0x188>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <pvPortMalloc+0x190>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d203      	bcs.n	800585a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <pvPortMalloc+0x188>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <pvPortMalloc+0x190>)
 8005858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x184>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	431a      	orrs	r2, r3
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <pvPortMalloc+0x194>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a11      	ldr	r2, [pc, #68]	; (80058bc <pvPortMalloc+0x194>)
 8005876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005878:	f7ff fa5c 	bl	8004d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <pvPortMalloc+0x174>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <pvPortMalloc+0x172>
	return pvReturn;
 800589c:	69fb      	ldr	r3, [r7, #28]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20004884 	.word	0x20004884
 80058ac:	20004898 	.word	0x20004898
 80058b0:	20004888 	.word	0x20004888
 80058b4:	2000487c 	.word	0x2000487c
 80058b8:	2000488c 	.word	0x2000488c
 80058bc:	20004890 	.word	0x20004890

080058c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04d      	beq.n	800596e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058d2:	2308      	movs	r3, #8
 80058d4:	425b      	negs	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <vPortFree+0xb8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vPortFree+0x44>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <vPortFree+0x62>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60bb      	str	r3, [r7, #8]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <vPortFree+0xb8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <vPortFree+0xb8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005948:	f7ff f9e6 	bl	8004d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <vPortFree+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4413      	add	r3, r2
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <vPortFree+0xbc>)
 8005958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800595a:	6938      	ldr	r0, [r7, #16]
 800595c:	f000 f874 	bl	8005a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <vPortFree+0xc0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a06      	ldr	r2, [pc, #24]	; (8005980 <vPortFree+0xc0>)
 8005968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800596a:	f7ff f9e3 	bl	8004d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800596e:	bf00      	nop
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20004898 	.word	0x20004898
 800597c:	20004888 	.word	0x20004888
 8005980:	20004894 	.word	0x20004894

08005984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800598e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <prvHeapInit+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <prvHeapInit+0xac>)
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <prvHeapInit+0xb0>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <prvHeapInit+0xb0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d0:	2208      	movs	r2, #8
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvHeapInit+0xb4>)
 80059e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvHeapInit+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <prvHeapInit+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvHeapInit+0xb4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <prvHeapInit+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <prvHeapInit+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <prvHeapInit+0xc0>)
 8005a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000c7c 	.word	0x20000c7c
 8005a34:	2000487c 	.word	0x2000487c
 8005a38:	20004884 	.word	0x20004884
 8005a3c:	2000488c 	.word	0x2000488c
 8005a40:	20004888 	.word	0x20004888
 8005a44:	20004898 	.word	0x20004898

08005a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <prvInsertBlockIntoFreeList+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <prvInsertBlockIntoFreeList+0x14>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f7      	bhi.n	8005a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d118      	bne.n	8005ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d00d      	beq.n	8005ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e008      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000487c 	.word	0x2000487c
 8005af8:	20004884 	.word	0x20004884

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 f820 	bl	8005b54 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	080061a4 	.word	0x080061a4
 8005b38:	080061a4 	.word	0x080061a4
 8005b3c:	080061a4 	.word	0x080061a4
 8005b40:	080061a8 	.word	0x080061a8

08005b44 <memset>:
 8005b44:	4402      	add	r2, r0
 8005b46:	4603      	mov	r3, r0
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memset+0xa>
 8005b4c:	4770      	bx	lr
 8005b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b52:	e7f9      	b.n	8005b48 <memset+0x4>

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
