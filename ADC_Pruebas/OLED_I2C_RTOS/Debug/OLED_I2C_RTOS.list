
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006958  08006958  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051b4  20000020  08006980  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051d4  08006980  000251d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fcf  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc1  00000000  00000000  0003301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00037000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019441  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001533e  00000000  00000000  00051519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1443  00000000  00000000  00066857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  00107cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006274 	.word	0x08006274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	08006274 	.word	0x08006274

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000090 	.word	0x20000090

08000518 <map>:
		texto[pos] = digito + '0';
		pos--;
	}
}

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000522:	edc7 0a04 	vstr	s1, [r7, #16]
 8000526:	ed87 1a03 	vstr	s2, [r7, #12]
 800052a:	edc7 1a02 	vstr	s3, [r7, #8]
 800052e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	edd7 7a04 	vldr	s15, [r7, #16]
 800053a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800053e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000542:	edd7 7a02 	vldr	s15, [r7, #8]
 8000546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800054a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800054e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000552:	edd7 7a04 	vldr	s15, [r7, #16]
 8000556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800055e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000562:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000566:	eeb0 0a67 	vmov.f32	s0, s15
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <actualizar_escala>:
void actualizar_escala()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
switch(contador)
 8000578:	4baf      	ldr	r3, [pc, #700]	; (8000838 <actualizar_escala+0x2c4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	f200 8191 	bhi.w	80008a4 <actualizar_escala+0x330>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <actualizar_escala+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	080005a9 	.word	0x080005a9
 800058c:	080005fb 	.word	0x080005fb
 8000590:	0800064d 	.word	0x0800064d
 8000594:	0800069f 	.word	0x0800069f
 8000598:	080006f1 	.word	0x080006f1
 800059c:	08000743 	.word	0x08000743
 80005a0:	08000795 	.word	0x08000795
 80005a4:	080007e7 	.word	0x080007e7
	{
		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 80005a8:	2137      	movs	r1, #55	; 0x37
 80005aa:	2073      	movs	r0, #115	; 0x73
 80005ac:	f001 f8f4 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80005b0:	4aa2      	ldr	r2, [pc, #648]	; (800083c <actualizar_escala+0x2c8>)
 80005b2:	2301      	movs	r3, #1
 80005b4:	ca06      	ldmia	r2, {r1, r2}
 80005b6:	48a2      	ldr	r0, [pc, #648]	; (8000840 <actualizar_escala+0x2cc>)
 80005b8:	f001 f8c8 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80005bc:	2109      	movs	r1, #9
 80005be:	2006      	movs	r0, #6
 80005c0:	f001 f8ea 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80005c4:	4a9d      	ldr	r2, [pc, #628]	; (800083c <actualizar_escala+0x2c8>)
 80005c6:	2301      	movs	r3, #1
 80005c8:	ca06      	ldmia	r2, {r1, r2}
 80005ca:	489e      	ldr	r0, [pc, #632]	; (8000844 <actualizar_escala+0x2d0>)
 80005cc:	f001 f8be 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80005d0:	2121      	movs	r1, #33	; 0x21
 80005d2:	2011      	movs	r0, #17
 80005d4:	f001 f8e0 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80005d8:	4a98      	ldr	r2, [pc, #608]	; (800083c <actualizar_escala+0x2c8>)
 80005da:	2301      	movs	r3, #1
 80005dc:	ca06      	ldmia	r2, {r1, r2}
 80005de:	489a      	ldr	r0, [pc, #616]	; (8000848 <actualizar_escala+0x2d4>)
 80005e0:	f001 f8b4 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80005e4:	2138      	movs	r1, #56	; 0x38
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f8d6 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80005ec:	4a93      	ldr	r2, [pc, #588]	; (800083c <actualizar_escala+0x2c8>)
 80005ee:	2301      	movs	r3, #1
 80005f0:	ca06      	ldmia	r2, {r1, r2}
 80005f2:	4896      	ldr	r0, [pc, #600]	; (800084c <actualizar_escala+0x2d8>)
 80005f4:	f001 f8aa 	bl	800174c <ssd1306_WriteString>
		break;
 80005f8:	e17d      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 80005fa:	2137      	movs	r1, #55	; 0x37
 80005fc:	2073      	movs	r0, #115	; 0x73
 80005fe:	f001 f8cb 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 8000602:	4a8e      	ldr	r2, [pc, #568]	; (800083c <actualizar_escala+0x2c8>)
 8000604:	2301      	movs	r3, #1
 8000606:	ca06      	ldmia	r2, {r1, r2}
 8000608:	4891      	ldr	r0, [pc, #580]	; (8000850 <actualizar_escala+0x2dc>)
 800060a:	f001 f89f 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800060e:	2109      	movs	r1, #9
 8000610:	2006      	movs	r0, #6
 8000612:	f001 f8c1 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8000616:	4a89      	ldr	r2, [pc, #548]	; (800083c <actualizar_escala+0x2c8>)
 8000618:	2301      	movs	r3, #1
 800061a:	ca06      	ldmia	r2, {r1, r2}
 800061c:	488d      	ldr	r0, [pc, #564]	; (8000854 <actualizar_escala+0x2e0>)
 800061e:	f001 f895 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000622:	2121      	movs	r1, #33	; 0x21
 8000624:	2011      	movs	r0, #17
 8000626:	f001 f8b7 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800062a:	4a84      	ldr	r2, [pc, #528]	; (800083c <actualizar_escala+0x2c8>)
 800062c:	2301      	movs	r3, #1
 800062e:	ca06      	ldmia	r2, {r1, r2}
 8000630:	4885      	ldr	r0, [pc, #532]	; (8000848 <actualizar_escala+0x2d4>)
 8000632:	f001 f88b 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000636:	2138      	movs	r1, #56	; 0x38
 8000638:	2000      	movs	r0, #0
 800063a:	f001 f8ad 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800063e:	4a7f      	ldr	r2, [pc, #508]	; (800083c <actualizar_escala+0x2c8>)
 8000640:	2301      	movs	r3, #1
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <actualizar_escala+0x2e4>)
 8000646:	f001 f881 	bl	800174c <ssd1306_WriteString>
		break;
 800064a:	e154      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 800064c:	2137      	movs	r1, #55	; 0x37
 800064e:	2073      	movs	r0, #115	; 0x73
 8000650:	f001 f8a2 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 8000654:	4a79      	ldr	r2, [pc, #484]	; (800083c <actualizar_escala+0x2c8>)
 8000656:	2301      	movs	r3, #1
 8000658:	ca06      	ldmia	r2, {r1, r2}
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <actualizar_escala+0x2e8>)
 800065c:	f001 f876 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000660:	2109      	movs	r1, #9
 8000662:	2006      	movs	r0, #6
 8000664:	f001 f898 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 8000668:	4a74      	ldr	r2, [pc, #464]	; (800083c <actualizar_escala+0x2c8>)
 800066a:	2301      	movs	r3, #1
 800066c:	ca06      	ldmia	r2, {r1, r2}
 800066e:	487c      	ldr	r0, [pc, #496]	; (8000860 <actualizar_escala+0x2ec>)
 8000670:	f001 f86c 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000674:	2121      	movs	r1, #33	; 0x21
 8000676:	2011      	movs	r0, #17
 8000678:	f001 f88e 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800067c:	4a6f      	ldr	r2, [pc, #444]	; (800083c <actualizar_escala+0x2c8>)
 800067e:	2301      	movs	r3, #1
 8000680:	ca06      	ldmia	r2, {r1, r2}
 8000682:	4871      	ldr	r0, [pc, #452]	; (8000848 <actualizar_escala+0x2d4>)
 8000684:	f001 f862 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000688:	2138      	movs	r1, #56	; 0x38
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f884 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 8000690:	4a6a      	ldr	r2, [pc, #424]	; (800083c <actualizar_escala+0x2c8>)
 8000692:	2301      	movs	r3, #1
 8000694:	ca06      	ldmia	r2, {r1, r2}
 8000696:	4873      	ldr	r0, [pc, #460]	; (8000864 <actualizar_escala+0x2f0>)
 8000698:	f001 f858 	bl	800174c <ssd1306_WriteString>
		break;
 800069c:	e12b      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 800069e:	2137      	movs	r1, #55	; 0x37
 80006a0:	206d      	movs	r0, #109	; 0x6d
 80006a2:	f001 f879 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 80006a6:	4a65      	ldr	r2, [pc, #404]	; (800083c <actualizar_escala+0x2c8>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	486e      	ldr	r0, [pc, #440]	; (8000868 <actualizar_escala+0x2f4>)
 80006ae:	f001 f84d 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80006b2:	2109      	movs	r1, #9
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 f86f 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 80006ba:	4a60      	ldr	r2, [pc, #384]	; (800083c <actualizar_escala+0x2c8>)
 80006bc:	2301      	movs	r3, #1
 80006be:	ca06      	ldmia	r2, {r1, r2}
 80006c0:	486a      	ldr	r0, [pc, #424]	; (800086c <actualizar_escala+0x2f8>)
 80006c2:	f001 f843 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	2011      	movs	r0, #17
 80006ca:	f001 f865 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80006ce:	4a5b      	ldr	r2, [pc, #364]	; (800083c <actualizar_escala+0x2c8>)
 80006d0:	2301      	movs	r3, #1
 80006d2:	ca06      	ldmia	r2, {r1, r2}
 80006d4:	485c      	ldr	r0, [pc, #368]	; (8000848 <actualizar_escala+0x2d4>)
 80006d6:	f001 f839 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f85b 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 80006e2:	4a56      	ldr	r2, [pc, #344]	; (800083c <actualizar_escala+0x2c8>)
 80006e4:	2301      	movs	r3, #1
 80006e6:	ca06      	ldmia	r2, {r1, r2}
 80006e8:	4861      	ldr	r0, [pc, #388]	; (8000870 <actualizar_escala+0x2fc>)
 80006ea:	f001 f82f 	bl	800174c <ssd1306_WriteString>
		break;
 80006ee:	e102      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 80006f0:	2137      	movs	r1, #55	; 0x37
 80006f2:	206d      	movs	r0, #109	; 0x6d
 80006f4:	f001 f850 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <actualizar_escala+0x2c8>)
 80006fa:	2301      	movs	r3, #1
 80006fc:	ca06      	ldmia	r2, {r1, r2}
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <actualizar_escala+0x300>)
 8000700:	f001 f824 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000704:	2109      	movs	r1, #9
 8000706:	2006      	movs	r0, #6
 8000708:	f001 f846 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <actualizar_escala+0x2c8>)
 800070e:	2301      	movs	r3, #1
 8000710:	ca06      	ldmia	r2, {r1, r2}
 8000712:	4859      	ldr	r0, [pc, #356]	; (8000878 <actualizar_escala+0x304>)
 8000714:	f001 f81a 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000718:	2121      	movs	r1, #33	; 0x21
 800071a:	2011      	movs	r0, #17
 800071c:	f001 f83c 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000720:	4a46      	ldr	r2, [pc, #280]	; (800083c <actualizar_escala+0x2c8>)
 8000722:	2301      	movs	r3, #1
 8000724:	ca06      	ldmia	r2, {r1, r2}
 8000726:	4848      	ldr	r0, [pc, #288]	; (8000848 <actualizar_escala+0x2d4>)
 8000728:	f001 f810 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800072c:	2138      	movs	r1, #56	; 0x38
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f832 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <actualizar_escala+0x2c8>)
 8000736:	2301      	movs	r3, #1
 8000738:	ca06      	ldmia	r2, {r1, r2}
 800073a:	4850      	ldr	r0, [pc, #320]	; (800087c <actualizar_escala+0x308>)
 800073c:	f001 f806 	bl	800174c <ssd1306_WriteString>
		break;
 8000740:	e0d9      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 8000742:	2137      	movs	r1, #55	; 0x37
 8000744:	206d      	movs	r0, #109	; 0x6d
 8000746:	f001 f827 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <actualizar_escala+0x2c8>)
 800074c:	2301      	movs	r3, #1
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <actualizar_escala+0x30c>)
 8000752:	f000 fffb 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000756:	2109      	movs	r1, #9
 8000758:	2006      	movs	r0, #6
 800075a:	f001 f81d 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <actualizar_escala+0x2c8>)
 8000760:	2301      	movs	r3, #1
 8000762:	ca06      	ldmia	r2, {r1, r2}
 8000764:	4847      	ldr	r0, [pc, #284]	; (8000884 <actualizar_escala+0x310>)
 8000766:	f000 fff1 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800076a:	2121      	movs	r1, #33	; 0x21
 800076c:	2011      	movs	r0, #17
 800076e:	f001 f813 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <actualizar_escala+0x2c8>)
 8000774:	2301      	movs	r3, #1
 8000776:	ca06      	ldmia	r2, {r1, r2}
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <actualizar_escala+0x2d4>)
 800077a:	f000 ffe7 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800077e:	2138      	movs	r1, #56	; 0x38
 8000780:	2000      	movs	r0, #0
 8000782:	f001 f809 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <actualizar_escala+0x2c8>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	483e      	ldr	r0, [pc, #248]	; (8000888 <actualizar_escala+0x314>)
 800078e:	f000 ffdd 	bl	800174c <ssd1306_WriteString>
		break;
 8000792:	e0b0      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 8000794:	2137      	movs	r1, #55	; 0x37
 8000796:	206d      	movs	r0, #109	; 0x6d
 8000798:	f000 fffe 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <actualizar_escala+0x2c8>)
 800079e:	2301      	movs	r3, #1
 80007a0:	ca06      	ldmia	r2, {r1, r2}
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <actualizar_escala+0x318>)
 80007a4:	f000 ffd2 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 80007a8:	2109      	movs	r1, #9
 80007aa:	2011      	movs	r0, #17
 80007ac:	f000 fff4 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <actualizar_escala+0x2c8>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	4836      	ldr	r0, [pc, #216]	; (8000890 <actualizar_escala+0x31c>)
 80007b8:	f000 ffc8 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80007bc:	2121      	movs	r1, #33	; 0x21
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 ffea 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <actualizar_escala+0x2c8>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <actualizar_escala+0x2d4>)
 80007cc:	f000 ffbe 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 80007d0:	2138      	movs	r1, #56	; 0x38
 80007d2:	200b      	movs	r0, #11
 80007d4:	f000 ffe0 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <actualizar_escala+0x2c8>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	482d      	ldr	r0, [pc, #180]	; (8000894 <actualizar_escala+0x320>)
 80007e0:	f000 ffb4 	bl	800174c <ssd1306_WriteString>
		break;
 80007e4:	e087      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 80007e6:	2137      	movs	r1, #55	; 0x37
 80007e8:	206d      	movs	r0, #109	; 0x6d
 80007ea:	f000 ffd5 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <actualizar_escala+0x2c8>)
 80007f0:	2301      	movs	r3, #1
 80007f2:	ca06      	ldmia	r2, {r1, r2}
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <actualizar_escala+0x324>)
 80007f6:	f000 ffa9 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80007fa:	2109      	movs	r1, #9
 80007fc:	2006      	movs	r0, #6
 80007fe:	f000 ffcb 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <actualizar_escala+0x2c8>)
 8000804:	2301      	movs	r3, #1
 8000806:	ca06      	ldmia	r2, {r1, r2}
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <actualizar_escala+0x328>)
 800080a:	f000 ff9f 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	2011      	movs	r0, #17
 8000812:	f000 ffc1 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <actualizar_escala+0x2c8>)
 8000818:	2301      	movs	r3, #1
 800081a:	ca06      	ldmia	r2, {r1, r2}
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <actualizar_escala+0x2d4>)
 800081e:	f000 ff95 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000822:	2138      	movs	r1, #56	; 0x38
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ffb7 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <actualizar_escala+0x2c8>)
 800082c:	2301      	movs	r3, #1
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <actualizar_escala+0x32c>)
 8000832:	f000 ff8b 	bl	800174c <ssd1306_WriteString>
		break;
 8000836:	e05e      	b.n	80008f6 <actualizar_escala+0x382>
 8000838:	20000420 	.word	0x20000420
 800083c:	20000008 	.word	0x20000008
 8000840:	0800628c 	.word	0x0800628c
 8000844:	08006290 	.word	0x08006290
 8000848:	08006294 	.word	0x08006294
 800084c:	08006298 	.word	0x08006298
 8000850:	080062a0 	.word	0x080062a0
 8000854:	080062a4 	.word	0x080062a4
 8000858:	080062a8 	.word	0x080062a8
 800085c:	080062b0 	.word	0x080062b0
 8000860:	080062b4 	.word	0x080062b4
 8000864:	080062b8 	.word	0x080062b8
 8000868:	080062c0 	.word	0x080062c0
 800086c:	080062c4 	.word	0x080062c4
 8000870:	080062c8 	.word	0x080062c8
 8000874:	080062d0 	.word	0x080062d0
 8000878:	080062d4 	.word	0x080062d4
 800087c:	080062d8 	.word	0x080062d8
 8000880:	080062e0 	.word	0x080062e0
 8000884:	080062e4 	.word	0x080062e4
 8000888:	080062e8 	.word	0x080062e8
 800088c:	080062f0 	.word	0x080062f0
 8000890:	080062f4 	.word	0x080062f4
 8000894:	080062f8 	.word	0x080062f8
 8000898:	080062fc 	.word	0x080062fc
 800089c:	08006300 	.word	0x08006300
 80008a0:	08006304 	.word	0x08006304
		default://A2
			ssd1306_SetCursor(115, 55);
 80008a4:	2137      	movs	r1, #55	; 0x37
 80008a6:	2073      	movs	r0, #115	; 0x73
 80008a8:	f000 ff76 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <actualizar_escala+0x388>)
 80008ae:	2301      	movs	r3, #1
 80008b0:	ca06      	ldmia	r2, {r1, r2}
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <actualizar_escala+0x38c>)
 80008b4:	f000 ff4a 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80008b8:	2109      	movs	r1, #9
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 ff6c 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <actualizar_escala+0x388>)
 80008c2:	2301      	movs	r3, #1
 80008c4:	ca06      	ldmia	r2, {r1, r2}
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <actualizar_escala+0x390>)
 80008c8:	f000 ff40 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80008cc:	2121      	movs	r1, #33	; 0x21
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 ff62 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <actualizar_escala+0x388>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	ca06      	ldmia	r2, {r1, r2}
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <actualizar_escala+0x394>)
 80008dc:	f000 ff36 	bl	800174c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80008e0:	2138      	movs	r1, #56	; 0x38
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 ff58 	bl	8001798 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <actualizar_escala+0x388>)
 80008ea:	2301      	movs	r3, #1
 80008ec:	ca06      	ldmia	r2, {r1, r2}
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <actualizar_escala+0x398>)
 80008f0:	f000 ff2c 	bl	800174c <ssd1306_WriteString>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	0800628c 	.word	0x0800628c
 8000904:	08006290 	.word	0x08006290
 8000908:	08006294 	.word	0x08006294
 800090c:	08006298 	.word	0x08006298

08000910 <display_plot_grilla>:

void display_plot_grilla(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

	//ssd1306_Fill(Black);
	ssd1306_SetCursor(0, 0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f000 ff3d 	bl	8001798 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 800091e:	2301      	movs	r3, #1
 8000920:	2237      	movs	r2, #55	; 0x37
 8000922:	2109      	movs	r1, #9
 8000924:	201a      	movs	r0, #26
 8000926:	f000 ffbb 	bl	80018a0 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 800092a:	2301      	movs	r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	2109      	movs	r1, #9
 8000930:	207f      	movs	r0, #127	; 0x7f
 8000932:	f000 ffb5 	bl	80018a0 <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vrtical line bottom
 8000936:	2301      	movs	r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	213c      	movs	r1, #60	; 0x3c
 800093c:	207f      	movs	r0, #127	; 0x7f
 800093e:	f000 ffaf 	bl	80018a0 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000942:	2301      	movs	r3, #1
 8000944:	2207      	movs	r2, #7
 8000946:	2109      	movs	r1, #9
 8000948:	2018      	movs	r0, #24
 800094a:	f000 ffc8 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 800094e:	2301      	movs	r3, #1
 8000950:	2202      	movs	r2, #2
 8000952:	2124      	movs	r1, #36	; 0x24
 8000954:	2018      	movs	r0, #24
 8000956:	f000 ffc2 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 800095a:	2301      	movs	r3, #1
 800095c:	2207      	movs	r2, #7
 800095e:	213f      	movs	r1, #63	; 0x3f
 8000960:	2018      	movs	r0, #24
 8000962:	f000 ffbc 	bl	80018de <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 8000966:	2301      	movs	r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	2109      	movs	r1, #9
 800096c:	2033      	movs	r0, #51	; 0x33
 800096e:	f000 ffb6 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000972:	2301      	movs	r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	213f      	movs	r1, #63	; 0x3f
 8000978:	2033      	movs	r0, #51	; 0x33
 800097a:	f000 ffb0 	bl	80018de <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 800097e:	2301      	movs	r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	2109      	movs	r1, #9
 8000984:	204c      	movs	r0, #76	; 0x4c
 8000986:	f000 ffaa 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 800098a:	2301      	movs	r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	213f      	movs	r1, #63	; 0x3f
 8000990:	204c      	movs	r0, #76	; 0x4c
 8000992:	f000 ffa4 	bl	80018de <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 8000996:	2301      	movs	r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	2109      	movs	r1, #9
 800099c:	2065      	movs	r0, #101	; 0x65
 800099e:	f000 ff9e 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80009a2:	2301      	movs	r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	213f      	movs	r1, #63	; 0x3f
 80009a8:	2065      	movs	r0, #101	; 0x65
 80009aa:	f000 ff98 	bl	80018de <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80009ae:	2301      	movs	r3, #1
 80009b0:	2205      	movs	r2, #5
 80009b2:	2109      	movs	r1, #9
 80009b4:	207b      	movs	r0, #123	; 0x7b
 80009b6:	f000 ff92 	bl	80018de <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80009ba:	2301      	movs	r3, #1
 80009bc:	2205      	movs	r2, #5
 80009be:	213f      	movs	r1, #63	; 0x3f
 80009c0:	207b      	movs	r0, #123	; 0x7b
 80009c2:	f000 ff8c 	bl	80018de <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 80009c6:	231a      	movs	r3, #26
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e009      	b.n	80009e0 <display_plot_grilla+0xd0>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	2301      	movs	r3, #1
 80009d2:	2202      	movs	r2, #2
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	f000 ff82 	bl	80018de <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3305      	adds	r3, #5
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	ddf2      	ble.n	80009cc <display_plot_grilla+0xbc>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 80009e6:	2366      	movs	r3, #102	; 0x66
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e013      	b.n	8000a14 <display_plot_grilla+0x104>
		for (int y = 10; y < 63; y += 5){
 80009ec:	230a      	movs	r3, #10
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e00a      	b.n	8000a08 <display_plot_grilla+0xf8>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	2301      	movs	r3, #1
 80009fc:	2202      	movs	r2, #2
 80009fe:	f000 ff4f 	bl	80018a0 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3305      	adds	r3, #5
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8000a0c:	ddf1      	ble.n	80009f2 <display_plot_grilla+0xe2>
	for (int x = (127 - 25); x > 30; x -= 25){
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3b19      	subs	r3, #25
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2b1e      	cmp	r3, #30
 8000a18:	dce8      	bgt.n	80009ec <display_plot_grilla+0xdc>
		}
	}
	ssd1306_SetCursor(14, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f000 febb 	bl	8001798 <ssd1306_SetCursor>
	ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <display_plot_grilla+0x128>)
 8000a24:	2301      	movs	r3, #1
 8000a26:	ca06      	ldmia	r2, {r1, r2}
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <display_plot_grilla+0x12c>)
 8000a2a:	f000 fe8f 	bl	800174c <ssd1306_WriteString>
	//
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	0800630c 	.word	0x0800630c

08000a40 <display_plot_signal>:
	else if(Valor_max>2699)
		Cambiar_MUX(AMP_1);
}
*/

void display_plot_signal(void){
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]

	if(flag)
 8000a56:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <display_plot_signal+0x154>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8096 	beq.w	8000b8c <display_plot_signal+0x14c>
	{
		//ssd1306_Fill(Black);
		trigger_point = 1;
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <display_plot_signal+0x158>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<MAX/2; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e00a      	b.n	8000a82 <display_plot_signal+0x42>
				buffer_display[i] = buffer_adc[i];
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <display_plot_signal+0x15c>)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a74:	494a      	ldr	r1, [pc, #296]	; (8000ba0 <display_plot_signal+0x160>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<MAX/2; i++)
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2bff      	cmp	r3, #255	; 0xff
 8000a86:	ddf1      	ble.n	8000a6c <display_plot_signal+0x2c>

		//Analizar_amplitud(buffer_display);
		for(int i = 0; i <= 98; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	e017      	b.n	8000abe <display_plot_signal+0x7e>
		{
			// flanco descendente
			if((buffer_display[i] > trigger_level ) && (buffer_display[i+1]) < trigger_level )
 8000a8e:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <display_plot_signal+0x160>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <display_plot_signal+0x164>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d90c      	bls.n	8000ab8 <display_plot_signal+0x78>
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <display_plot_signal+0x160>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <display_plot_signal+0x164>)
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d203      	bcs.n	8000ab8 <display_plot_signal+0x78>
			{
				trigger_point = i;
 8000ab0:	4a39      	ldr	r2, [pc, #228]	; (8000b98 <display_plot_signal+0x158>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	6013      	str	r3, [r2, #0]
				break;
 8000ab6:	e005      	b.n	8000ac4 <display_plot_signal+0x84>
		for(int i = 0; i <= 98; i++)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	2b62      	cmp	r3, #98	; 0x62
 8000ac2:	dde4      	ble.n	8000a8e <display_plot_signal+0x4e>
			}
		}

		for (int k = 0; k <= 98; k++){
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e050      	b.n	8000b6c <display_plot_signal+0x12c>

			x3 = k + trigger_point;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <display_plot_signal+0x158>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
			x4 = x3 + 1;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]

			y3 = map(buffer_display[x3], 0, 4095, 63, 9); 				// convert to plot
 8000ada:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <display_plot_signal+0x160>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000aee:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8000ba8 <display_plot_signal+0x168>
 8000af2:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8000bac <display_plot_signal+0x16c>
 8000af6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8000bb0 <display_plot_signal+0x170>
 8000afa:	eeb0 0a67 	vmov.f32	s0, s15
 8000afe:	f7ff fd0b 	bl	8000518 <map>
 8000b02:	eef0 7a40 	vmov.f32	s15, s0
 8000b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0a:	ee17 3a90 	vmov	r3, s15
 8000b0e:	613b      	str	r3, [r7, #16]
			y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <display_plot_signal+0x160>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b20:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000b24:	eddf 1a20 	vldr	s3, [pc, #128]	; 8000ba8 <display_plot_signal+0x168>
 8000b28:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8000bac <display_plot_signal+0x16c>
 8000b2c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8000bb0 <display_plot_signal+0x170>
 8000b30:	eeb0 0a67 	vmov.f32	s0, s15
 8000b34:	f7ff fcf0 	bl	8000518 <map>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b40:	ee17 3a90 	vmov	r3, s15
 8000b44:	60fb      	str	r3, [r7, #12]

			ssd1306_Line(k + 27, y3, k + 28, y4, White);
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	331b      	adds	r3, #27
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	b2d9      	uxtb	r1, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	331c      	adds	r3, #28
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2401      	movs	r4, #1
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	f000 fe31 	bl	80017c8 <ssd1306_Line>
		for (int k = 0; k <= 98; k++){
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b62      	cmp	r3, #98	; 0x62
 8000b70:	ddab      	ble.n	8000aca <display_plot_signal+0x8a>

		 }
		//ssd1306_UpdateScreen();
		//ssd1306_Fill(Black);
		if(flag == 2)
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <display_plot_signal+0x154>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d105      	bne.n	8000b86 <display_plot_signal+0x146>
			HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	4907      	ldr	r1, [pc, #28]	; (8000b9c <display_plot_signal+0x15c>)
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <display_plot_signal+0x174>)
 8000b82:	f001 f983 	bl	8001e8c <HAL_ADC_Start_DMA>

		flag = 0;
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <display_plot_signal+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3724      	adds	r7, #36	; 0x24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	2000041c 	.word	0x2000041c
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000424 	.word	0x20000424
 8000ba0:	20000c24 	.word	0x20000c24
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	427c0000 	.word	0x427c0000
 8000bac:	457ff000 	.word	0x457ff000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	20000290 	.word	0x20000290

08000bb8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	/*
	trigger_level += 300;
	if(trigger_level > 3800)
		trigger_level = 100;
	*/
	contador++;
 8000bc2:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a61      	ldr	r2, [pc, #388]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bca:	6013      	str	r3, [r2, #0]
	contador %= 8;
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	425a      	negs	r2, r3
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	f002 0207 	and.w	r2, r2, #7
 8000bda:	bf58      	it	pl
 8000bdc:	4253      	negpl	r3, r2
 8000bde:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000be0:	6013      	str	r3, [r2, #0]
	switch(contador)
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	f200 809c 	bhi.w	8000d24 <HAL_GPIO_EXTI_Callback+0x16c>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c15 	.word	0x08000c15
 8000bf8:	08000c37 	.word	0x08000c37
 8000bfc:	08000c59 	.word	0x08000c59
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c9d 	.word	0x08000c9d
 8000c08:	08000cbf 	.word	0x08000cbf
 8000c0c:	08000ce1 	.word	0x08000ce1
 8000c10:	08000d03 	.word	0x08000d03
	{
		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	484e      	ldr	r0, [pc, #312]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c1a:	f002 faa7 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	484c      	ldr	r0, [pc, #304]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c26:	f002 faa1 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4849      	ldr	r0, [pc, #292]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c30:	f002 fa9c 	bl	800316c <HAL_GPIO_WritePin>

		break;
 8000c34:	e087      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4846      	ldr	r0, [pc, #280]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c3c:	f002 fa96 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	4844      	ldr	r0, [pc, #272]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c48:	f002 fa90 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	4840      	ldr	r0, [pc, #256]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c52:	f002 fa8b 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000c56:	e076      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	483d      	ldr	r0, [pc, #244]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c5e:	f002 fa85 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	483b      	ldr	r0, [pc, #236]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c6a:	f002 fa7f 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2120      	movs	r1, #32
 8000c72:	4838      	ldr	r0, [pc, #224]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c74:	f002 fa7a 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000c78:	e065      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4835      	ldr	r0, [pc, #212]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c80:	f002 fa74 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4833      	ldr	r0, [pc, #204]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c8c:	f002 fa6e 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2120      	movs	r1, #32
 8000c94:	482f      	ldr	r0, [pc, #188]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c96:	f002 fa69 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000c9a:	e054      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	482c      	ldr	r0, [pc, #176]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca2:	f002 fa63 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cae:	f002 fa5d 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cb8:	f002 fa58 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000cbc:	e043      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4824      	ldr	r0, [pc, #144]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc4:	f002 fa52 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cd0:	f002 fa4c 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cda:	f002 fa47 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000cde:	e032      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce6:	f002 fa41 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cf2:	f002 fa3b 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cfc:	f002 fa36 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000d00:	e021      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d08:	f002 fa30 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d14:	f002 fa2a 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d1e:	f002 fa25 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000d22:	e010      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d2a:	f002 fa1f 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d36:	f002 fa19 	bl	800316c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d40:	f002 fa14 	bl	800316c <HAL_GPIO_WritePin>
		break;
 8000d44:	bf00      	nop
	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000420 	.word	0x20000420
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40020000 	.word	0x40020000

08000d5c <display_plot_trigger>:

void display_plot_trigger(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

	int trigger_actual = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]

	trigger_actual = map(trigger_level, 0, 4095, 63, 9);
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <display_plot_trigger+0x78>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000d76:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000dd8 <display_plot_trigger+0x7c>
 8000d7a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000ddc <display_plot_trigger+0x80>
 8000d7e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000de0 <display_plot_trigger+0x84>
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	f7ff fbc7 	bl	8000518 <map>
 8000d8a:	eef0 7a40 	vmov.f32	s15, s0
 8000d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d92:	ee17 3a90 	vmov	r3, s15
 8000d96:	607b      	str	r3, [r7, #4]

	//ssd1306_HLine(26, trigger_actual, 100, White);

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	b2d9      	uxtb	r1, r3
 8000da0:	2301      	movs	r3, #1
 8000da2:	2204      	movs	r2, #4
 8000da4:	207f      	movs	r0, #127	; 0x7f
 8000da6:	f000 fd7b 	bl	80018a0 <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	2202      	movs	r2, #2
 8000db6:	207e      	movs	r0, #126	; 0x7e
 8000db8:	f000 fd72 	bl	80018a0 <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	207d      	movs	r0, #125	; 0x7d
 8000dc6:	f000 fbe5 	bl	8001594 <ssd1306_DrawPixel>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	427c0000 	.word	0x427c0000
 8000ddc:	457ff000 	.word	0x457ff000
 8000de0:	00000000 	.word	0x00000000

08000de4 <HAL_ADC_ConvHalfCpltCallback>:


int half, cplt;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	half++;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000df4:	6013      	str	r3, [r2, #0]
	flag = 1;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20001024 	.word	0x20001024
 8000e0c:	2000041c 	.word	0x2000041c

08000e10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	cplt++;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e20:	6013      	str	r3, [r2, #0]
	flag = 2;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x28>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20001028 	.word	0x20001028
 8000e38:	2000041c 	.word	0x2000041c

08000e3c <Init_Sistema>:
}
*/

/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8000e44:	f000 faf4 	bl	8001430 <ssd1306_Init>
	//HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
	HAL_TIM_Base_Start(&htim2);
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <Init_Sistema+0x4c>)
 8000e4a:	f003 fb37 	bl	80044bc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <Init_Sistema+0x50>)
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <Init_Sistema+0x54>)
 8000e56:	f001 f819 	bl	8001e8c <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <Init_Sistema+0x58>)
 8000e60:	f002 f984 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <Init_Sistema+0x5c>)
 8000e6c:	f002 f97e 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <Init_Sistema+0x58>)
 8000e76:	f002 f979 	bl	800316c <HAL_GPIO_WritePin>
	vTaskDelete(NULL);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f004 f9b6 	bl	80051ec <vTaskDelete>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000038c 	.word	0x2000038c
 8000e8c:	20000424 	.word	0x20000424
 8000e90:	20000290 	.word	0x20000290
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020000 	.word	0x40020000

08000e9c <Mostrar_pantalla>:
void Mostrar_pantalla(void *pvParameters){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	while(1){

		ssd1306_Fill(Black);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fb29 	bl	80014fc <ssd1306_Fill>
		display_plot_grilla();
 8000eaa:	f7ff fd31 	bl	8000910 <display_plot_grilla>
		display_plot_trigger();
 8000eae:	f7ff ff55 	bl	8000d5c <display_plot_trigger>
		display_plot_signal();
 8000eb2:	f7ff fdc5 	bl	8000a40 <display_plot_signal>
		actualizar_escala();
 8000eb6:	f7ff fb5d 	bl	8000574 <actualizar_escala>
		ssd1306_UpdateScreen();
 8000eba:	f000 fb43 	bl	8001544 <ssd1306_UpdateScreen>

		vTaskDelay(10/portTICK_RATE_MS);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f004 fa24 	bl	800530c <vTaskDelay>
		ssd1306_Fill(Black);
 8000ec4:	e7ee      	b.n	8000ea4 <Mostrar_pantalla+0x8>
	...

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 ff57 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f82b 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 f9cf 	bl	8001278 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eda:	f000 f9ad 	bl	8001238 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ede:	f000 f891 	bl	8001004 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ee2:	f000 f8e1 	bl	80010a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ee6:	f000 f90d 	bl	8001104 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000eea:	f000 f957 	bl	800119c <MX_TIM5_Init>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <main+0x54>)
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <main+0x58>)
 8000efe:	f004 f83e 	bl	8004f7e <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <main+0x5c>)
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x60>)
 8000f12:	f004 f834 	bl	8004f7e <xTaskCreate>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000f16:	f004 fa2d 	bl	8005374 <vTaskStartScheduler>
  while(1){
 8000f1a:	e7fe      	b.n	8000f1a <main+0x52>
 8000f1c:	08006320 	.word	0x08006320
 8000f20:	08000e3d 	.word	0x08000e3d
 8000f24:	0800632c 	.word	0x0800632c
 8000f28:	08000e9d 	.word	0x08000e9d

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 f992 	bl	8006264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemClock_Config+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SystemClock_Config+0xd4>)
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fd66 	bl	8003a88 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fc2:	f000 f9fd 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 ffc8 	bl	8003f78 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fee:	f000 f9e7 	bl	80013c0 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	; 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <MX_ADC1_Init+0xa0>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800101e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001022:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001048:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001056:	2201      	movs	r2, #1
 8001058:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_ADC1_Init+0x9c>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800106a:	f000 fecb 	bl	8001e04 <HAL_ADC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001074:	f000 f9a4 	bl	80013c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_ADC1_Init+0x9c>)
 800108a:	f000 fff9 	bl	8002080 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001094:	f000 f994 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000290 	.word	0x20000290
 80010a4:	40012000 	.word	0x40012000

080010a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <MX_I2C1_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_I2C1_Init+0x58>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e6:	f002 f873 	bl	80031d0 <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 f966 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000338 	.word	0x20000338
 80010fc:	40005400 	.word	0x40005400
 8001100:	00061a80 	.word	0x00061a80

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	htim3.Init.Period = 10769; fs=3,9KHz fmin = 40Hz fmax = 160Hz
	htim3.Init.Period = 42857; fs=980Hz fmin = 10Hz fmax = 40Hz
	*/
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0x94>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0x94>)
 800112a:	2201      	movs	r2, #1
 800112c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM2_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2675;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM2_Init+0x94>)
 8001136:	f640 2273 	movw	r2, #2675	; 0xa73
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x94>)
 800114a:	f003 f967 	bl	800441c <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f934 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0x94>)
 8001166:	f003 fb6d 	bl	8004844 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f926 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001174:	2320      	movs	r3, #32
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM2_Init+0x94>)
 8001182:	f003 fd69 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f918 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000038c 	.word	0x2000038c

0800119c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM5_Init+0x94>)
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_TIM5_Init+0x98>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM5_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM5_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM5_Init+0x94>)
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_TIM5_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM5_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM5_Init+0x94>)
 80011e0:	f003 f91c 	bl	800441c <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 f8e9 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_TIM5_Init+0x94>)
 80011fc:	f003 fb22 	bl	8004844 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 f8db 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_TIM5_Init+0x94>)
 8001218:	f003 fd1e 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001222:	f000 f8cd 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003d4 	.word	0x200003d4
 8001234:	40000c00 	.word	0x40000c00

08001238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_DMA_Init+0x3c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <MX_DMA_Init+0x3c>)
 8001248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_DMA_Init+0x3c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2105      	movs	r1, #5
 800125e:	2038      	movs	r0, #56	; 0x38
 8001260:	f001 fa66 	bl	8002730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001264:	2038      	movs	r0, #56	; 0x38
 8001266:	f001 fa7f 	bl	8002768 <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <MX_GPIO_Init+0x114>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <MX_GPIO_Init+0x114>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x114>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <MX_GPIO_Init+0x114>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x114>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x114>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x114>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x114>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_GPIO_Init+0x114>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x114>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a28      	ldr	r2, [pc, #160]	; (800138c <MX_GPIO_Init+0x114>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_GPIO_Init+0x114>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2120      	movs	r1, #32
 8001302:	4823      	ldr	r0, [pc, #140]	; (8001390 <MX_GPIO_Init+0x118>)
 8001304:	f001 ff32 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	4820      	ldr	r0, [pc, #128]	; (8001390 <MX_GPIO_Init+0x118>)
 8001310:	f001 ff2c 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2128      	movs	r1, #40	; 0x28
 8001318:	481e      	ldr	r0, [pc, #120]	; (8001394 <MX_GPIO_Init+0x11c>)
 800131a:	f001 ff27 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <MX_GPIO_Init+0x120>)
 8001336:	f001 fd95 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 800133a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	480f      	ldr	r0, [pc, #60]	; (8001390 <MX_GPIO_Init+0x118>)
 8001354:	f001 fd86 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 8001358:	2328      	movs	r3, #40	; 0x28
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x11c>)
 8001370:	f001 fd78 	bl	8002e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f001 f9d9 	bl	8002730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f001 f9f2 	bl	8002768 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800

0800139c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ae:	f000 fd09 	bl	8001dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	2200      	movs	r2, #0
 80013e8:	2178      	movs	r1, #120	; 0x78
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <ssd1306_WriteCommand+0x2c>)
 80013ec:	f002 f834 	bl	8003458 <HAL_I2C_Mem_Write>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000338 	.word	0x20000338

080013fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af04      	add	r7, sp, #16
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	f04f 32ff 	mov.w	r2, #4294967295
 800140e:	9202      	str	r2, [sp, #8]
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2240      	movs	r2, #64	; 0x40
 800141a:	2178      	movs	r1, #120	; 0x78
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <ssd1306_WriteData+0x30>)
 800141e:	f002 f81b 	bl	8003458 <HAL_I2C_Mem_Write>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000338 	.word	0x20000338

08001430 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fa85 	bl	8001944 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800143a:	2020      	movs	r0, #32
 800143c:	f7ff ffc6 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ffc3 	bl	80013cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001446:	20b0      	movs	r0, #176	; 0xb0
 8001448:	f7ff ffc0 	bl	80013cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800144c:	20c8      	movs	r0, #200	; 0xc8
 800144e:	f7ff ffbd 	bl	80013cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff ffba 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001458:	2010      	movs	r0, #16
 800145a:	f7ff ffb7 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800145e:	2040      	movs	r0, #64	; 0x40
 8001460:	f7ff ffb4 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001464:	20ff      	movs	r0, #255	; 0xff
 8001466:	f000 fa59 	bl	800191c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800146a:	20a1      	movs	r0, #161	; 0xa1
 800146c:	f7ff ffae 	bl	80013cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001470:	20a6      	movs	r0, #166	; 0xa6
 8001472:	f7ff ffab 	bl	80013cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001476:	20a8      	movs	r0, #168	; 0xa8
 8001478:	f7ff ffa8 	bl	80013cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800147c:	203f      	movs	r0, #63	; 0x3f
 800147e:	f7ff ffa5 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001482:	20a4      	movs	r0, #164	; 0xa4
 8001484:	f7ff ffa2 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001488:	20d3      	movs	r0, #211	; 0xd3
 800148a:	f7ff ff9f 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff9c 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001494:	20d5      	movs	r0, #213	; 0xd5
 8001496:	f7ff ff99 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800149a:	20f0      	movs	r0, #240	; 0xf0
 800149c:	f7ff ff96 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014a0:	20d9      	movs	r0, #217	; 0xd9
 80014a2:	f7ff ff93 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80014a6:	2022      	movs	r0, #34	; 0x22
 80014a8:	f7ff ff90 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80014ac:	20da      	movs	r0, #218	; 0xda
 80014ae:	f7ff ff8d 	bl	80013cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80014b2:	2012      	movs	r0, #18
 80014b4:	f7ff ff8a 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014b8:	20db      	movs	r0, #219	; 0xdb
 80014ba:	f7ff ff87 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80014be:	2020      	movs	r0, #32
 80014c0:	f7ff ff84 	bl	80013cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80014c4:	208d      	movs	r0, #141	; 0x8d
 80014c6:	f7ff ff81 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014ca:	2014      	movs	r0, #20
 80014cc:	f7ff ff7e 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014d0:	2001      	movs	r0, #1
 80014d2:	f000 fa37 	bl	8001944 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f810 	bl	80014fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014dc:	f000 f832 	bl	8001544 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <ssd1306_Init+0xc8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <ssd1306_Init+0xc8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <ssd1306_Init+0xc8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	711a      	strb	r2, [r3, #4]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000142c 	.word	0x2000142c

080014fc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e00d      	b.n	8001528 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <ssd1306_Fill+0x1a>
 8001512:	2100      	movs	r1, #0
 8001514:	e000      	b.n	8001518 <ssd1306_Fill+0x1c>
 8001516:	21ff      	movs	r1, #255	; 0xff
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <ssd1306_Fill+0x44>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	460a      	mov	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d3ed      	bcc.n	800150c <ssd1306_Fill+0x10>
    }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000102c 	.word	0x2000102c

08001544 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800154a:	2300      	movs	r3, #0
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e016      	b.n	800157e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	3b50      	subs	r3, #80	; 0x50
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff38 	bl	80013cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800155c:	2002      	movs	r0, #2
 800155e:	f7ff ff35 	bl	80013cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001562:	2010      	movs	r0, #16
 8001564:	f7ff ff32 	bl	80013cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <ssd1306_UpdateScreen+0x4c>)
 800156e:	4413      	add	r3, r2
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff42 	bl	80013fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d9e5      	bls.n	8001550 <ssd1306_UpdateScreen+0xc>
    }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000102c 	.word	0x2000102c

08001594 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	460b      	mov	r3, r1
 80015a0:	71bb      	strb	r3, [r7, #6]
 80015a2:	4613      	mov	r3, r2
 80015a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db3d      	blt.n	800162a <ssd1306_DrawPixel+0x96>
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	2b3f      	cmp	r3, #63	; 0x3f
 80015b2:	d83a      	bhi.n	800162a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11a      	bne.n	80015f0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	01db      	lsls	r3, r3, #7
 80015c6:	4413      	add	r3, r2
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <ssd1306_DrawPixel+0xa4>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b259      	sxtb	r1, r3
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	4603      	mov	r3, r0
 80015e4:	01db      	lsls	r3, r3, #7
 80015e6:	4413      	add	r3, r2
 80015e8:	b2c9      	uxtb	r1, r1
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <ssd1306_DrawPixel+0xa4>)
 80015ec:	54d1      	strb	r1, [r2, r3]
 80015ee:	e01d      	b.n	800162c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	b2d8      	uxtb	r0, r3
 80015f8:	4603      	mov	r3, r0
 80015fa:	01db      	lsls	r3, r3, #7
 80015fc:	4413      	add	r3, r2
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <ssd1306_DrawPixel+0xa4>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	b25a      	sxtb	r2, r3
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	b25b      	sxtb	r3, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	b25b      	sxtb	r3, r3
 8001616:	4013      	ands	r3, r2
 8001618:	b259      	sxtb	r1, r3
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	4603      	mov	r3, r0
 800161e:	01db      	lsls	r3, r3, #7
 8001620:	4413      	add	r3, r2
 8001622:	b2c9      	uxtb	r1, r1
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <ssd1306_DrawPixel+0xa4>)
 8001626:	54d1      	strb	r1, [r2, r3]
 8001628:	e000      	b.n	800162c <ssd1306_DrawPixel+0x98>
        return;
 800162a:	bf00      	nop
    }
}
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000102c 	.word	0x2000102c

0800163c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4604      	mov	r4, r0
 8001644:	1d38      	adds	r0, r7, #4
 8001646:	e880 0006 	stmia.w	r0, {r1, r2}
 800164a:	461a      	mov	r2, r3
 800164c:	4623      	mov	r3, r4
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	4613      	mov	r3, r2
 8001652:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b1f      	cmp	r3, #31
 8001658:	d902      	bls.n	8001660 <ssd1306_WriteChar+0x24>
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b7e      	cmp	r3, #126	; 0x7e
 800165e:	d901      	bls.n	8001664 <ssd1306_WriteChar+0x28>
        return 0;
 8001660:	2300      	movs	r3, #0
 8001662:	e06d      	b.n	8001740 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <ssd1306_WriteChar+0x10c>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	dc06      	bgt.n	8001680 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001672:	4b35      	ldr	r3, [pc, #212]	; (8001748 <ssd1306_WriteChar+0x10c>)
 8001674:	885b      	ldrh	r3, [r3, #2]
 8001676:	461a      	mov	r2, r3
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800167c:	2b40      	cmp	r3, #64	; 0x40
 800167e:	dd01      	ble.n	8001684 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e05d      	b.n	8001740 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e04c      	b.n	8001724 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3b20      	subs	r3, #32
 8001690:	7979      	ldrb	r1, [r7, #5]
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4619      	mov	r1, r3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	e034      	b.n	8001714 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d012      	beq.n	80016e0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <ssd1306_WriteChar+0x10c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b2d8      	uxtb	r0, r3
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <ssd1306_WriteChar+0x10c>)
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	7bba      	ldrb	r2, [r7, #14]
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff ff5b 	bl	8001594 <ssd1306_DrawPixel>
 80016de:	e016      	b.n	800170e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <ssd1306_WriteChar+0x10c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	b2d8      	uxtb	r0, r3
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <ssd1306_WriteChar+0x10c>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	b2d9      	uxtb	r1, r3
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	f7ff ff43 	bl	8001594 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	3301      	adds	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4293      	cmp	r3, r2
 800171c:	d3c5      	bcc.n	80016aa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	461a      	mov	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4293      	cmp	r3, r2
 800172c:	d3ad      	bcc.n	800168a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <ssd1306_WriteChar+0x10c>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	793b      	ldrb	r3, [r7, #4]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4413      	add	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <ssd1306_WriteChar+0x10c>)
 800173c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3724      	adds	r7, #36	; 0x24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	2000142c 	.word	0x2000142c

0800174c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	1d38      	adds	r0, r7, #4
 8001756:	e880 0006 	stmia.w	r0, {r1, r2}
 800175a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800175c:	e012      	b.n	8001784 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	7818      	ldrb	r0, [r3, #0]
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	ca06      	ldmia	r2, {r1, r2}
 8001768:	f7ff ff68 	bl	800163c <ssd1306_WriteChar>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d002      	beq.n	800177e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	e008      	b.n	8001790 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e8      	bne.n	800175e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <ssd1306_SetCursor+0x2c>)
 80017ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <ssd1306_SetCursor+0x2c>)
 80017b6:	805a      	strh	r2, [r3, #2]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	2000142c 	.word	0x2000142c

080017c8 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	4603      	mov	r3, r0
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	717b      	strb	r3, [r7, #5]
 80017e2:	4613      	mov	r3, r2
 80017e4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80017e6:	797a      	ldrb	r2, [r7, #5]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfb8      	it	lt
 80017f0:	425b      	neglt	r3, r3
 80017f2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80017f4:	793a      	ldrb	r2, [r7, #4]
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bfb8      	it	lt
 80017fe:	425b      	neglt	r3, r3
 8001800:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	429a      	cmp	r2, r3
 8001808:	d201      	bcs.n	800180e <ssd1306_Line+0x46>
 800180a:	2301      	movs	r3, #1
 800180c:	e001      	b.n	8001812 <ssd1306_Line+0x4a>
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001814:	79ba      	ldrb	r2, [r7, #6]
 8001816:	793b      	ldrb	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	d201      	bcs.n	8001820 <ssd1306_Line+0x58>
 800181c:	2301      	movs	r3, #1
 800181e:	e001      	b.n	8001824 <ssd1306_Line+0x5c>
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 800182e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001832:	7939      	ldrb	r1, [r7, #4]
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff feac 	bl	8001594 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800183c:	e024      	b.n	8001888 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800183e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001842:	79b9      	ldrb	r1, [r7, #6]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fea4 	bl	8001594 <ssd1306_DrawPixel>
    error2 = error * 2;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	425b      	negs	r3, r3
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	dd08      	ble.n	800186e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4413      	add	r3, r2
 800186c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	429a      	cmp	r2, r3
 8001874:	da08      	bge.n	8001888 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4413      	add	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	4413      	add	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	797b      	ldrb	r3, [r7, #5]
 800188c:	429a      	cmp	r2, r3
 800188e:	d1d6      	bne.n	800183e <ssd1306_Line+0x76>
 8001890:	79ba      	ldrb	r2, [r7, #6]
 8001892:	793b      	ldrb	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d1d2      	bne.n	800183e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001898:	bf00      	nop
}
 800189a:	3724      	adds	r7, #36	; 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}

080018a0 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	4603      	mov	r3, r0
 80018b4:	71bb      	strb	r3, [r7, #6]
 80018b6:	460b      	mov	r3, r1
 80018b8:	717b      	strb	r3, [r7, #5]
 80018ba:	4613      	mov	r3, r2
 80018bc:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 80018be:	79ba      	ldrb	r2, [r7, #6]
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2dc      	uxtb	r4, r3
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	79b9      	ldrb	r1, [r7, #6]
 80018ca:	79f8      	ldrb	r0, [r7, #7]
 80018cc:	793b      	ldrb	r3, [r7, #4]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4623      	mov	r3, r4
 80018d2:	f7ff ff79 	bl	80017c8 <ssd1306_Line>
	return;
 80018d6:	bf00      	nop
}
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}

080018de <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 80018de:	b590      	push	{r4, r7, lr}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	4604      	mov	r4, r0
 80018e6:	4608      	mov	r0, r1
 80018e8:	4611      	mov	r1, r2
 80018ea:	461a      	mov	r2, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4603      	mov	r3, r0
 80018f2:	71bb      	strb	r3, [r7, #6]
 80018f4:	460b      	mov	r3, r1
 80018f6:	717b      	strb	r3, [r7, #5]
 80018f8:	4613      	mov	r3, r2
 80018fa:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	797b      	ldrb	r3, [r7, #5]
 8001900:	4413      	add	r3, r2
 8001902:	b2da      	uxtb	r2, r3
 8001904:	79bc      	ldrb	r4, [r7, #6]
 8001906:	79b9      	ldrb	r1, [r7, #6]
 8001908:	79f8      	ldrb	r0, [r7, #7]
 800190a:	793b      	ldrb	r3, [r7, #4]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4623      	mov	r3, r4
 8001910:	f7ff ff5a 	bl	80017c8 <ssd1306_Line>
	return;
 8001914:	bf00      	nop
}
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001926:	2381      	movs	r3, #129	; 0x81
 8001928:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd4d 	bl	80013cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fd49 	bl	80013cc <ssd1306_WriteCommand>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001954:	23af      	movs	r3, #175	; 0xaf
 8001956:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <ssd1306_SetDisplayOn+0x38>)
 800195a:	2201      	movs	r2, #1
 800195c:	715a      	strb	r2, [r3, #5]
 800195e:	e004      	b.n	800196a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001960:	23ae      	movs	r3, #174	; 0xae
 8001962:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <ssd1306_SetDisplayOn+0x38>)
 8001966:	2200      	movs	r2, #0
 8001968:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd2d 	bl	80013cc <ssd1306_WriteCommand>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000142c 	.word	0x2000142c

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_MspInit+0x54>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_MspInit+0x54>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_MspInit+0x54>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_MspInit+0x54>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	210f      	movs	r1, #15
 80019c2:	f06f 0001 	mvn.w	r0, #1
 80019c6:	f000 feb3 	bl	8002730 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_ADC_MspInit+0xd8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d156      	bne.n	8001aa8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a2c      	ldr	r2, [pc, #176]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_ADC_MspInit+0xdc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	481c      	ldr	r0, [pc, #112]	; (8001ab8 <HAL_ADC_MspInit+0xe0>)
 8001a46:	f001 fa0d 	bl	8002e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_ADC_MspInit+0xe8>)
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001a8e:	f000 fe79 	bl	8002784 <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001a98:	f7ff fc92 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_ADC_MspInit+0xe4>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40012000 	.word	0x40012000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	200002d8 	.word	0x200002d8
 8001ac0:	40026410 	.word	0x40026410

08001ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_I2C_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12c      	bne.n	8001b40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b14:	2304      	movs	r3, #4
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <HAL_I2C_MspInit+0x8c>)
 8001b20:	f001 f9a0 	bl	8002e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b82:	e012      	b.n	8001baa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_TIM_Base_MspInit+0x68>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10d      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40000c00 	.word	0x40000c00

08001bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <HAL_InitTick+0xd0>)
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	4a2d      	ldr	r2, [pc, #180]	; (8001c90 <HAL_InitTick+0xd0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6453      	str	r3, [r2, #68]	; 0x44
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_InitTick+0xd0>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fbde 	bl	80043b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bfc:	f002 fbc8 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8001c00:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_InitTick+0xd4>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0c9b      	lsrs	r3, r3, #18
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c38:	f002 fbf0 	bl	800441c <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11b      	bne.n	8001c82 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c4a:	4813      	ldr	r0, [pc, #76]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c4c:	f002 fc90 	bl	8004570 <HAL_TIM_Base_Start_IT>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d111      	bne.n	8001c82 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f000 fd82 	bl	8002768 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d808      	bhi.n	8001c7c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f000 fd5e 	bl	8002730 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_InitTick+0xe0>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e002      	b.n	8001c82 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3730      	adds	r7, #48	; 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	20001434 	.word	0x20001434
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	20000014 	.word	0x20000014

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cd6:	f002 fcad 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20001434 	.word	0x20001434

08001ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cec:	f001 fa58 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA2_Stream0_IRQHandler+0x10>)
 8001cfa:	f000 fe49 	bl	8002990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002d8 	.word	0x200002d8

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd7 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f004 fa5f 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff f8b3 	bl	8000ec8 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001d70:	08006960 	.word	0x08006960
  ldr r2, =_sbss
 8001d74:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001d78:	200051d4 	.word	0x200051d4

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 fcb6 	bl	800271a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f7ff ff06 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fde4 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000018 	.word	0x20000018
 8001de8:	2000147c 	.word	0x2000147c

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000147c 	.word	0x2000147c

08001e04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e033      	b.n	8001e82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fdd8 	bl	80019d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e4a:	f023 0302 	bic.w	r3, r3, #2
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa34 	bl	80022c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
 8001e72:	e001      	b.n	8001e78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Start_DMA+0x1e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0ce      	b.n	8002048 <HAL_ADC_Start_DMA+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d018      	beq.n	8001ef2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_ADC_Start_DMA+0x1c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5f      	ldr	r2, [pc, #380]	; (8002054 <HAL_ADC_Start_DMA+0x1c8>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9a      	lsrs	r2, r3, #18
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f00:	d107      	bne.n	8001f12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 8086 	bne.w	800202e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f60:	d106      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f023 0206 	bic.w	r2, r3, #6
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f6e:	e002      	b.n	8001f76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_ADC_Start_DMA+0x1cc>)
 8001f80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	4a35      	ldr	r2, [pc, #212]	; (800205c <HAL_ADC_Start_DMA+0x1d0>)
 8001f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_ADC_Start_DMA+0x1d4>)
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a33      	ldr	r2, [pc, #204]	; (8002064 <HAL_ADC_Start_DMA+0x1d8>)
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	334c      	adds	r3, #76	; 0x4c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f000 fc84 	bl	80028e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d129      	bne.n	8002046 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	e020      	b.n	8002046 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_ADC_Start_DMA+0x1dc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11b      	bne.n	8002046 <HAL_ADC_Start_DMA+0x1ba>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d114      	bne.n	8002046 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	e00b      	b.n	8002046 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000010 	.word	0x20000010
 8002054:	431bde83 	.word	0x431bde83
 8002058:	40012300 	.word	0x40012300
 800205c:	080024bd 	.word	0x080024bd
 8002060:	08002577 	.word	0x08002577
 8002064:	08002593 	.word	0x08002593
 8002068:	40012000 	.word	0x40012000

0800206c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1c>
 8002098:	2302      	movs	r3, #2
 800209a:	e105      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x228>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d925      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4403      	add	r3, r0
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	409a      	lsls	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	e022      	b.n	800213e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	2207      	movs	r2, #7
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4403      	add	r3, r0
 8002134:	409a      	lsls	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d824      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b05      	subs	r3, #5
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b05      	subs	r3, #5
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
 800218e:	e04c      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d824      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b23      	subs	r3, #35	; 0x23
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43da      	mvns	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	400a      	ands	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b23      	subs	r3, #35	; 0x23
 80021d4:	fa00 f203 	lsl.w	r2, r0, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e023      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	; 0x41
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b41      	subs	r3, #65	; 0x41
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_ADC_ConfigChannel+0x234>)
 800222c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d105      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d123      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d003      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x1e6>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b11      	cmp	r3, #17
 8002264:	d11b      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d111      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_ADC_ConfigChannel+0x23c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_ADC_ConfigChannel+0x240>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9a      	lsrs	r2, r3, #18
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40012300 	.word	0x40012300
 80022b8:	40012000 	.word	0x40012000
 80022bc:	20000010 	.word	0x20000010
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022cc:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <ADC_Init+0x1f0>)
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	021a      	lsls	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800231c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <ADC_Init+0x1f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e00f      	b.n	80023c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0202 	bic.w	r2, r2, #2
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	005a      	lsls	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800240e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	3b01      	subs	r3, #1
 800241c:	035a      	lsls	r2, r3, #13
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e007      	b.n	8002438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	3b01      	subs	r3, #1
 8002454:	051a      	lsls	r2, r3, #20
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247a:	025a      	lsls	r2, r3, #9
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	029a      	lsls	r2, r3, #10
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40012300 	.word	0x40012300
 80024b8:	0f000001 	.word	0x0f000001

080024bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13c      	bne.n	8002550 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d12b      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d127      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002510:	2b00      	cmp	r3, #0
 8002512:	d119      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0220 	bic.w	r2, r2, #32
 8002522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7fe fc61 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800254e:	e00e      	b.n	800256e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fd85 	bl	800206c <HAL_ADC_ErrorCallback>
}
 8002562:	e004      	b.n	800256e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7fe fc2d 	bl	8000de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7ff fd5a 	bl	800206c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60d3      	str	r3, [r2, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <__NVIC_GetPriorityGrouping+0x18>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	f003 0307 	and.w	r3, r3, #7
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db0b      	blt.n	800264e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <__NVIC_EnableIRQ+0x38>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2001      	movs	r0, #1
 8002646:	fa00 f202 	lsl.w	r2, r0, r2
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff4c 	bl	80025c0 <__NVIC_SetPriorityGrouping>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002742:	f7ff ff61 	bl	8002608 <__NVIC_GetPriorityGrouping>
 8002746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	6978      	ldr	r0, [r7, #20]
 800274e:	f7ff ffb1 	bl	80026b4 <NVIC_EncodePriority>
 8002752:	4602      	mov	r2, r0
 8002754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff80 	bl	8002660 <__NVIC_SetPriority>
}
 8002760:	bf00      	nop
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff54 	bl	8002624 <__NVIC_EnableIRQ>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fb2c 	bl	8001dec <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e099      	b.n	80028d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c0:	e00f      	b.n	80027e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c2:	f7ff fb13 	bl	8001dec <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d908      	bls.n	80027e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2203      	movs	r2, #3
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e078      	b.n	80028d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e8      	bne.n	80027c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_DMA_Init+0x158>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b04      	cmp	r3, #4
 800283a:	d107      	bne.n	800284c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0307 	bic.w	r3, r3, #7
 8002862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b04      	cmp	r3, #4
 8002874:	d117      	bne.n	80028a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fa6f 	bl	8002d6c <DMA_CheckFifoParam>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028a2:	2301      	movs	r3, #1
 80028a4:	e016      	b.n	80028d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa26 	bl	8002d00 <DMA_CalcBaseAndBitshift>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	f010803f 	.word	0xf010803f

080028e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Start_IT+0x26>
 8002902:	2302      	movs	r3, #2
 8002904:	e040      	b.n	8002988 <HAL_DMA_Start_IT+0xa8>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d12f      	bne.n	800297a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f9b8 	bl	8002ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	223f      	movs	r2, #63	; 0x3f
 800293a:	409a      	lsls	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0216 	orr.w	r2, r2, #22
 800294e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0208 	orr.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e005      	b.n	8002986 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800299c:	4b8e      	ldr	r3, [pc, #568]	; (8002bd8 <HAL_DMA_IRQHandler+0x248>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a8e      	ldr	r2, [pc, #568]	; (8002bdc <HAL_DMA_IRQHandler+0x24c>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2208      	movs	r2, #8
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2208      	movs	r2, #8
 80029ea:	409a      	lsls	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2201      	movs	r2, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2201      	movs	r2, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2204      	movs	r2, #4
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2204      	movs	r2, #4
 8002a56:	409a      	lsls	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d043      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03c      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d024      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
 8002abe:	e01f      	b.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
 8002ad0:	e016      	b.n	8002b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0208 	bic.w	r2, r2, #8
 8002aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2220      	movs	r2, #32
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 808f 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8087 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2220      	movs	r2, #32
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d136      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0216 	bic.w	r2, r2, #22
 8002b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <HAL_DMA_IRQHandler+0x1da>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0208 	bic.w	r2, r2, #8
 8002b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	223f      	movs	r2, #63	; 0x3f
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d07e      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
        }
        return;
 8002ba6:	e079      	b.n	8002c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d031      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e02c      	b.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
 8002bd6:	bf00      	nop
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e01e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0210 	bic.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d032      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2205      	movs	r2, #5
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d307      	bcc.n	8002c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f2      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x2cc>
 8002c76:	e000      	b.n	8002c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e000      	b.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c9c:	bf00      	nop
    }
  }
}
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d108      	bne.n	8002ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ce2:	e007      	b.n	8002cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3b10      	subs	r3, #16
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <DMA_CalcBaseAndBitshift+0x64>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <DMA_CalcBaseAndBitshift+0x68>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d909      	bls.n	8002d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d40:	e007      	b.n	8002d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	aaaaaaab 	.word	0xaaaaaaab
 8002d68:	08006948 	.word	0x08006948

08002d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11f      	bne.n	8002dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d856      	bhi.n	8002e3a <DMA_CheckFifoParam+0xce>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <DMA_CheckFifoParam+0x28>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002da5 	.word	0x08002da5
 8002d98:	08002db7 	.word	0x08002db7
 8002d9c:	08002da5 	.word	0x08002da5
 8002da0:	08002e3b 	.word	0x08002e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d046      	beq.n	8002e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e043      	b.n	8002e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dbe:	d140      	bne.n	8002e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e03d      	b.n	8002e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d121      	bne.n	8002e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d837      	bhi.n	8002e46 <DMA_CheckFifoParam+0xda>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <DMA_CheckFifoParam+0x70>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002df3 	.word	0x08002df3
 8002de4:	08002ded 	.word	0x08002ded
 8002de8:	08002e05 	.word	0x08002e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e030      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d025      	beq.n	8002e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e02:	e022      	b.n	8002e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e0c:	d11f      	bne.n	8002e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e12:	e01c      	b.n	8002e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d903      	bls.n	8002e22 <DMA_CheckFifoParam+0xb6>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e20:	e018      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      break;
 8002e26:	e015      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e00b      	b.n	8002e52 <DMA_CheckFifoParam+0xe6>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e00a      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e008      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e42:	bf00      	nop
 8002e44:	e006      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
    }
  } 
  
  return status; 
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e159      	b.n	8003134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 8148 	bne.w	800312e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d005      	beq.n	8002eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d130      	bne.n	8002f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 0201 	and.w	r2, r3, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d017      	beq.n	8002f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d123      	bne.n	8002fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a2 	beq.w	800312e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_GPIO_Init+0x2f0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x202>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x1fe>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x1fa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_GPIO_Init+0x2fc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x1f6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_GPIO_Init+0x300>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x1f2>
 8003052:	2304      	movs	r3, #4
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003056:	2307      	movs	r3, #7
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_GPIO_Init+0x304>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f aea2 	bls.w	8002e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fcfa 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e12b      	b.n	800343a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fc64 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003234:	f001 f898 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a81      	ldr	r2, [pc, #516]	; (8003444 <HAL_I2C_Init+0x274>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d807      	bhi.n	8003254 <HAL_I2C_Init+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_I2C_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e006      	b.n	8003262 <HAL_I2C_Init+0x92>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_I2C_Init+0x27c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0e7      	b.n	800343a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a78      	ldr	r2, [pc, #480]	; (8003450 <HAL_I2C_Init+0x280>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a6a      	ldr	r2, [pc, #424]	; (8003444 <HAL_I2C_Init+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d802      	bhi.n	80032a4 <HAL_I2C_Init+0xd4>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e009      	b.n	80032b8 <HAL_I2C_Init+0xe8>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	4a69      	ldr	r2, [pc, #420]	; (8003454 <HAL_I2C_Init+0x284>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	3301      	adds	r3, #1
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	495c      	ldr	r1, [pc, #368]	; (8003444 <HAL_I2C_Init+0x274>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d819      	bhi.n	800330c <HAL_I2C_Init+0x13c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032ec:	400b      	ands	r3, r1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_I2C_Init+0x138>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e59      	subs	r1, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	e051      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003308:	2304      	movs	r3, #4
 800330a:	e04f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_I2C_Init+0x168>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e012      	b.n	800335e <HAL_I2C_Init+0x18e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	0099      	lsls	r1, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x196>
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10e      	bne.n	800338c <HAL_I2C_Init+0x1bc>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e58      	subs	r0, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	440b      	add	r3, r1
 800337c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003380:	3301      	adds	r3, #1
 8003382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6911      	ldr	r1, [r2, #16]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	000186a0 	.word	0x000186a0
 8003448:	001e847f 	.word	0x001e847f
 800344c:	003d08ff 	.word	0x003d08ff
 8003450:	431bde83 	.word	0x431bde83
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003472:	f7fe fcbb 	bl	8001dec <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	f040 80d9 	bne.w	8003638 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2319      	movs	r3, #25
 800348c:	2201      	movs	r2, #1
 800348e:	496d      	ldr	r1, [pc, #436]	; (8003644 <HAL_I2C_Mem_Write+0x1ec>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f971 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	e0cc      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Write+0x56>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0c5      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a4d      	ldr	r2, [pc, #308]	; (8003648 <HAL_I2C_Mem_Write+0x1f0>)
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003516:	88f8      	ldrh	r0, [r7, #6]
 8003518:	893a      	ldrh	r2, [r7, #8]
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f890 	bl	800364c <I2C_RequestMemoryWrite>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d052      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e081      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f9f2 	bl	8003924 <I2C_WaitOnTXEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b04      	cmp	r3, #4
 800354c:	d107      	bne.n	800355e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06b      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_I2C_Mem_Write+0x180>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1aa      	bne.n	8003536 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f9de 	bl	80039a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d107      	bne.n	8003608 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e016      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00100002 	.word	0x00100002
 8003648:	ffff0000 	.word	0xffff0000

0800364c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2200      	movs	r2, #0
 800367e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f878 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369c:	d103      	bne.n	80036a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e05f      	b.n	800376a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	492d      	ldr	r1, [pc, #180]	; (8003774 <I2C_RequestMemoryWrite+0x128>)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8b0 	bl	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e04c      	b.n	800376a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f91a 	bl	8003924 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e02b      	b.n	800376a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]
 8003722:	e021      	b.n	8003768 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	6a39      	ldr	r1, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8f4 	bl	8003924 <I2C_WaitOnTXEFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b04      	cmp	r3, #4
 8003748:	d107      	bne.n	800375a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e005      	b.n	800376a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375e:	893b      	ldrh	r3, [r7, #8]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	00010002 	.word	0x00010002

08003778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	e025      	b.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d021      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fb2b 	bl	8001dec <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d116      	bne.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e023      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10d      	bne.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	e00c      	b.n	8003816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d0b6      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003834:	e051      	b.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d123      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e046      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d021      	beq.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe faa9 	bl	8001dec <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e020      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d18d      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003930:	e02d      	b.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f878 	bl	8003a28 <I2C_IsAcknowledgeFailed>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e02d      	b.n	800399e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fa4f 	bl	8001dec <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d1ca      	bne.n	8003932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b2:	e02d      	b.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f837 	bl	8003a28 <I2C_IsAcknowledgeFailed>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e02d      	b.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d021      	beq.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039cc:	f7fe fa0e 	bl	8001dec <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d302      	bcc.n	80039e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e007      	b.n	8003a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d1ca      	bne.n	80039b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3e:	d11b      	bne.n	8003a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e267      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e242      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6f      	ldr	r2, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6c      	ldr	r2, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a68      	ldr	r2, [pc, #416]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe f954 	bl	8001dec <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe f950 	bl	8001dec <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e207      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe f940 	bl	8001dec <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f93c 	bl	8001dec <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f3      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c7      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4937      	ldr	r1, [pc, #220]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fe f8f5 	bl	8001dec <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fe f8f1 	bl	8001dec <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a8      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4925      	ldr	r1, [pc, #148]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f8d4 	bl	8001dec <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fe f8d0 	bl	8001dec <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e187      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe f8b4 	bl	8001dec <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fe f8b0 	bl	8001dec <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e167      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e01b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fe f89d 	bl	8001dec <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f899 	bl	8001dec <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d907      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e150      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ea      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8097 	beq.w	8003e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b77      	ldr	r3, [pc, #476]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b74      	ldr	r3, [pc, #464]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a73      	ldr	r2, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fe f859 	bl	8001dec <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe f855 	bl	8001dec <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e10c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ea>
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a63      	ldr	r2, [pc, #396]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	e01c      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x30c>
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d94:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0304 	bic.w	r3, r3, #4
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fe f81a 	bl	8001dec <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fe f816 	bl	8001dec <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0cb      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ee      	beq.n	8003dbc <HAL_RCC_OscConfig+0x334>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f804 	bl	8001dec <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fe f800 	bl	8001dec <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0b5      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a1 	beq.w	8003f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d05c      	beq.n	8003eec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d141      	bne.n	8003ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd ffd4 	bl	8001dec <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fd ffd0 	bl	8001dec <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e087      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	491b      	ldr	r1, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fd ffa9 	bl	8001dec <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd ffa5 	bl	8001dec <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e05c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x416>
 8003ebc:	e054      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd ff92 	bl	8001dec <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd ff8e 	bl	8001dec <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e045      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x444>
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e038      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d028      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fec0 	bl	8001dec <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd febc 	bl	8001dec <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd fd4e 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08006930 	.word	0x08006930
 800413c:	20000010 	.word	0x20000010
 8004140:	20000014 	.word	0x20000014

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b094      	sub	sp, #80	; 0x50
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	2300      	movs	r3, #0
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	2300      	movs	r3, #0
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80e1 	bhi.w	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e0db      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800417c:	e0db      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x208>)
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004182:	e0d8      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
 80041b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f04f 0000 	mov.w	r0, #0
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	0159      	lsls	r1, r3, #5
 80041c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c8:	0150      	lsls	r0, r2, #5
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4621      	mov	r1, r4
 80041d0:	1a51      	subs	r1, r2, r1
 80041d2:	6139      	str	r1, [r7, #16]
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb63 0301 	sbc.w	r3, r3, r1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e8:	4659      	mov	r1, fp
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f2:	4651      	mov	r1, sl
 80041f4:	018a      	lsls	r2, r1, #6
 80041f6:	4651      	mov	r1, sl
 80041f8:	ebb2 0801 	subs.w	r8, r2, r1
 80041fc:	4659      	mov	r1, fp
 80041fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004216:	4690      	mov	r8, r2
 8004218:	4699      	mov	r9, r3
 800421a:	4623      	mov	r3, r4
 800421c:	eb18 0303 	adds.w	r3, r8, r3
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	462b      	mov	r3, r5
 8004224:	eb49 0303 	adc.w	r3, r9, r3
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004236:	4629      	mov	r1, r5
 8004238:	024b      	lsls	r3, r1, #9
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004240:	4621      	mov	r1, r4
 8004242:	024a      	lsls	r2, r1, #9
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
 800424e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004254:	f7fb ffc4 	bl	80001e0 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	e058      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	2200      	movs	r2, #0
 800426a:	4618      	mov	r0, r3
 800426c:	4611      	mov	r1, r2
 800426e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	0159      	lsls	r1, r3, #5
 800428a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428e:	0150      	lsls	r0, r2, #5
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4641      	mov	r1, r8
 8004296:	ebb2 0a01 	subs.w	sl, r2, r1
 800429a:	4649      	mov	r1, r9
 800429c:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b4:	ebb2 040a 	subs.w	r4, r2, sl
 80042b8:	eb63 050b 	sbc.w	r5, r3, fp
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	00eb      	lsls	r3, r5, #3
 80042c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ca:	00e2      	lsls	r2, r4, #3
 80042cc:	4614      	mov	r4, r2
 80042ce:	461d      	mov	r5, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	18e3      	adds	r3, r4, r3
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	464b      	mov	r3, r9
 80042d8:	eb45 0303 	adc.w	r3, r5, r3
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f4:	4621      	mov	r1, r4
 80042f6:	028a      	lsls	r2, r1, #10
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	61fa      	str	r2, [r7, #28]
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004308:	f7fb ff6a 	bl	80001e0 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004338:	4618      	mov	r0, r3
 800433a:	3750      	adds	r7, #80	; 0x50
 800433c:	46bd      	mov	sp, r7
 800433e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000010 	.word	0x20000010

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	08006940 	.word	0x08006940

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffdc 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08006940 	.word	0x08006940

080043b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	220f      	movs	r2, #15
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0203 	and.w	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <HAL_RCC_GetClockConfig+0x60>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40023c00 	.word	0x40023c00

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fb86 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fae2 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e03c      	b.n	800454e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_Base_Start+0xa0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start+0x5c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start+0x5c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_TIM_Base_Start+0xa4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start+0x5c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_TIM_Base_Start+0xa8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start+0x5c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a17      	ldr	r2, [pc, #92]	; (8004568 <HAL_TIM_Base_Start+0xac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start+0x5c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_TIM_Base_Start+0xb0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d111      	bne.n	800453c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d010      	beq.n	800454c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	e007      	b.n	800454c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40014000 	.word	0x40014000

08004570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d001      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e044      	b.n	8004612 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <HAL_TIM_Base_Start_IT+0xb0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x6c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d013      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x6c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <HAL_TIM_Base_Start_IT+0xb4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x6c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_Base_Start_IT+0xb8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x6c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a17      	ldr	r2, [pc, #92]	; (800462c <HAL_TIM_Base_Start_IT+0xbc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x6c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIM_Base_Start_IT+0xc0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d111      	bne.n	8004600 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d010      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	e007      	b.n	8004610 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40014000 	.word	0x40014000

08004634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0202 	mvn.w	r2, #2
 8004660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9b5 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9a7 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9b8 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0204 	mvn.w	r2, #4
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f98b 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f97d 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f98e 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0208 	mvn.w	r2, #8
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2204      	movs	r2, #4
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f961 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f953 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f964 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b10      	cmp	r3, #16
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0210 	mvn.w	r2, #16
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2208      	movs	r2, #8
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f937 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f929 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f93a 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0201 	mvn.w	r2, #1
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fdf2 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fab2 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8ff 	bl	8004a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b20      	cmp	r3, #32
 800481c:	d10e      	bne.n	800483c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d107      	bne.n	800483c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0220 	mvn.w	r2, #32
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa7c 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_TIM_ConfigClockSource+0x1c>
 800485c:	2302      	movs	r3, #2
 800485e:	e0b4      	b.n	80049ca <HAL_TIM_ConfigClockSource+0x186>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d03e      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0xd4>
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	f200 8087 	bhi.w	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	f000 8086 	beq.w	80049b6 <HAL_TIM_ConfigClockSource+0x172>
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d87f      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d01a      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xa6>
 80048b4:	2b70      	cmp	r3, #112	; 0x70
 80048b6:	d87b      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d050      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x11a>
 80048bc:	2b60      	cmp	r3, #96	; 0x60
 80048be:	d877      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b50      	cmp	r3, #80	; 0x50
 80048c2:	d03c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xfa>
 80048c4:	2b50      	cmp	r3, #80	; 0x50
 80048c6:	d873      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d058      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x13a>
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d86f      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d064      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b30      	cmp	r3, #48	; 0x30
 80048d6:	d86b      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d060      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d867      	bhi.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d05c      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d05a      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	e062      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6899      	ldr	r1, [r3, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f000 f98d 	bl	8004c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800490c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	609a      	str	r2, [r3, #8]
      break;
 8004916:	e04f      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f000 f976 	bl	8004c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493a:	609a      	str	r2, [r3, #8]
      break;
 800493c:	e03c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 f8ea 	bl	8004b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2150      	movs	r1, #80	; 0x50
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f943 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800495c:	e02c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f000 f909 	bl	8004b82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2160      	movs	r1, #96	; 0x60
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f933 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800497c:	e01c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	f000 f8ca 	bl	8004b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f923 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800499c:	e00c      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 f91a 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80049ae:	e003      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e000      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <TIM_Base_SetConfig+0xe4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00f      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d00b      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a31      	ldr	r2, [pc, #196]	; (8004b0c <TIM_Base_SetConfig+0xe8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d007      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a30      	ldr	r2, [pc, #192]	; (8004b10 <TIM_Base_SetConfig+0xec>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <TIM_Base_SetConfig+0xf0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d108      	bne.n	8004a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <TIM_Base_SetConfig+0xe4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01b      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d017      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <TIM_Base_SetConfig+0xe8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <TIM_Base_SetConfig+0xec>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <TIM_Base_SetConfig+0xf0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <TIM_Base_SetConfig+0xf4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <TIM_Base_SetConfig+0xf8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <TIM_Base_SetConfig+0xfc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <TIM_Base_SetConfig+0xe4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800

08004b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 030a 	bic.w	r3, r3, #10
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 0210 	bic.w	r2, r3, #16
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f043 0307 	orr.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e050      	b.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d018      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f103 0208 	add.w	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f103 0208 	add.w	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 0208 	add.w	r2, r3, #8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d103      	bne.n	8004e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e00c      	b.n	8004e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3308      	adds	r3, #8
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <vListInsert+0x2e>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d2f6      	bcs.n	8004e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6852      	ldr	r2, [r2, #4]
 8004e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d103      	bne.n	8004ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af04      	add	r7, sp, #16
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <xTaskCreateStatic+0x46>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	61fb      	str	r3, [r7, #28]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f0a:	2354      	movs	r3, #84	; 0x54
 8004f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b54      	cmp	r3, #84	; 0x54
 8004f12:	d00a      	beq.n	8004f2a <xTaskCreateStatic+0x66>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	61bb      	str	r3, [r7, #24]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01e      	beq.n	8004f70 <xTaskCreateStatic+0xac>
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9303      	str	r3, [sp, #12]
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	f107 0314 	add.w	r3, r7, #20
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f850 	bl	8005008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6a:	f000 f8d5 	bl	8005118 <prvAddNewTaskToReadyList>
 8004f6e:	e001      	b.n	8004f74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f74:	697b      	ldr	r3, [r7, #20]
	}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b08c      	sub	sp, #48	; 0x30
 8004f82:	af04      	add	r7, sp, #16
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 ff58 	bl	8005e48 <pvPortMalloc>
 8004f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00e      	beq.n	8004fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fa0:	2054      	movs	r0, #84	; 0x54
 8004fa2:	f000 ff51 	bl	8005e48 <pvPortMalloc>
 8004fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb4:	e005      	b.n	8004fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f001 f812 	bl	8005fe0 <vPortFree>
 8004fbc:	e001      	b.n	8004fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fd0:	88fa      	ldrh	r2, [r7, #6]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	9302      	str	r3, [sp, #8]
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f80e 	bl	8005008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fec:	69f8      	ldr	r0, [r7, #28]
 8004fee:	f000 f893 	bl	8005118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e002      	b.n	8004ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005020:	3b01      	subs	r3, #1
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <prvInitialiseNewTask+0x48>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	617b      	str	r3, [r7, #20]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01f      	beq.n	8005096 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e012      	b.n	8005082 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	7819      	ldrb	r1, [r3, #0]
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	3334      	adds	r3, #52	; 0x34
 800506c:	460a      	mov	r2, r1
 800506e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d9e9      	bls.n	800505c <prvInitialiseNewTask+0x54>
 8005088:	e000      	b.n	800508c <prvInitialiseNewTask+0x84>
			{
				break;
 800508a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005094:	e003      	b.n	800509e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d901      	bls.n	80050a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050a4:	2306      	movs	r3, #6
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fe6c 	bl	8004d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	3318      	adds	r3, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fe67 	bl	8004d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f1c3 0207 	rsb	r2, r3, #7
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2200      	movs	r2, #0
 80050e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	69b8      	ldr	r0, [r7, #24]
 80050f8:	f000 fc96 	bl	8005a28 <pxPortInitialiseStack>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005120:	f000 fdb0 	bl	8005c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005136:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800513c:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d110      	bne.n	8005166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005144:	f000 fb4c 	bl	80057e0 <prvInitialiseTaskLists>
 8005148:	e00d      	b.n	8005166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <prvAddNewTaskToReadyList+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d802      	bhi.n	8005166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <prvAddNewTaskToReadyList+0xc4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <prvAddNewTaskToReadyList+0xc4>)
 800516e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <prvAddNewTaskToReadyList+0xc8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <prvAddNewTaskToReadyList+0xc8>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <prvAddNewTaskToReadyList+0xcc>)
 8005190:	441a      	add	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7ff fe0c 	bl	8004db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800519e:	f000 fda1 	bl	8005ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <prvAddNewTaskToReadyList+0xc0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00e      	beq.n	80051c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d207      	bcs.n	80051c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvAddNewTaskToReadyList+0xd0>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20001580 	.word	0x20001580
 80051d4:	20001480 	.word	0x20001480
 80051d8:	2000158c 	.word	0x2000158c
 80051dc:	2000159c 	.word	0x2000159c
 80051e0:	20001588 	.word	0x20001588
 80051e4:	20001484 	.word	0x20001484
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80051f4:	f000 fd46 	bl	8005c84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <vTaskDelete+0x18>
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <vTaskDelete+0xf8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	e000      	b.n	8005206 <vTaskDelete+0x1a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3304      	adds	r3, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fe2f 	bl	8004e70 <uxListRemove>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d115      	bne.n	8005244 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	4932      	ldr	r1, [pc, #200]	; (80052e8 <vTaskDelete+0xfc>)
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <vTaskDelete+0x58>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	2201      	movs	r2, #1
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43da      	mvns	r2, r3
 800523a:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <vTaskDelete+0x100>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4013      	ands	r3, r2
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <vTaskDelete+0x100>)
 8005242:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3318      	adds	r3, #24
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fe0d 	bl	8004e70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <vTaskDelete+0x104>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <vTaskDelete+0x104>)
 800525e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <vTaskDelete+0xf8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d10b      	bne.n	8005282 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4820      	ldr	r0, [pc, #128]	; (80052f4 <vTaskDelete+0x108>)
 8005272:	f7ff fda0 	bl	8004db6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <vTaskDelete+0x10c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3301      	adds	r3, #1
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <vTaskDelete+0x10c>)
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e009      	b.n	8005296 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005282:	4b1e      	ldr	r3, [pc, #120]	; (80052fc <vTaskDelete+0x110>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <vTaskDelete+0x110>)
 800528a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb15 	bl	80058bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005292:	f000 fb43 	bl	800591c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005296:	f000 fd25 	bl	8005ce4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <vTaskDelete+0x114>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01b      	beq.n	80052da <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <vTaskDelete+0xf8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d116      	bne.n	80052da <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <vTaskDelete+0x118>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <vTaskDelete+0xde>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	60bb      	str	r3, [r7, #8]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <vTaskDelete+0x11c>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20001480 	.word	0x20001480
 80052e8:	20001484 	.word	0x20001484
 80052ec:	20001588 	.word	0x20001588
 80052f0:	2000159c 	.word	0x2000159c
 80052f4:	20001554 	.word	0x20001554
 80052f8:	20001568 	.word	0x20001568
 80052fc:	20001580 	.word	0x20001580
 8005300:	2000158c 	.word	0x2000158c
 8005304:	200015a8 	.word	0x200015a8
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d017      	beq.n	800534e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <vTaskDelay+0x60>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <vTaskDelay+0x30>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800533c:	f000 f87a 	bl	8005434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005340:	2100      	movs	r1, #0
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fb0a 	bl	800595c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005348:	f000 f882 	bl	8005450 <xTaskResumeAll>
 800534c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <vTaskDelay+0x64>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200015a8 	.word	0x200015a8
 8005370:	e000ed04 	.word	0xe000ed04

08005374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005382:	463a      	mov	r2, r7
 8005384:	1d39      	adds	r1, r7, #4
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb f8aa 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	9202      	str	r2, [sp, #8]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	2300      	movs	r3, #0
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	2300      	movs	r3, #0
 80053a0:	460a      	mov	r2, r1
 80053a2:	491e      	ldr	r1, [pc, #120]	; (800541c <vTaskStartScheduler+0xa8>)
 80053a4:	481e      	ldr	r0, [pc, #120]	; (8005420 <vTaskStartScheduler+0xac>)
 80053a6:	f7ff fd8d 	bl	8004ec4 <xTaskCreateStatic>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <vTaskStartScheduler+0xb0>)
 80053ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053b0:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <vTaskStartScheduler+0xb0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e001      	b.n	80053c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d116      	bne.n	80053f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	613b      	str	r3, [r7, #16]
}
 80053da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053dc:	4b12      	ldr	r3, [pc, #72]	; (8005428 <vTaskStartScheduler+0xb4>)
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <vTaskStartScheduler+0xb8>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <vTaskStartScheduler+0xbc>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053f0:	f000 fba6 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053f4:	e00e      	b.n	8005414 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d10a      	bne.n	8005414 <vTaskStartScheduler+0xa0>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60fb      	str	r3, [r7, #12]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <vTaskStartScheduler+0x9e>
}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	08006338 	.word	0x08006338
 8005420:	080057b1 	.word	0x080057b1
 8005424:	200015a4 	.word	0x200015a4
 8005428:	200015a0 	.word	0x200015a0
 800542c:	2000158c 	.word	0x2000158c
 8005430:	20001584 	.word	0x20001584

08005434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <vTaskSuspendAll+0x18>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a03      	ldr	r2, [pc, #12]	; (800544c <vTaskSuspendAll+0x18>)
 8005440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	200015a8 	.word	0x200015a8

08005450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545e:	4b41      	ldr	r3, [pc, #260]	; (8005564 <xTaskResumeAll+0x114>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <xTaskResumeAll+0x2c>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	603b      	str	r3, [r7, #0]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800547c:	f000 fc02 	bl	8005c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005480:	4b38      	ldr	r3, [pc, #224]	; (8005564 <xTaskResumeAll+0x114>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3b01      	subs	r3, #1
 8005486:	4a37      	ldr	r2, [pc, #220]	; (8005564 <xTaskResumeAll+0x114>)
 8005488:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548a:	4b36      	ldr	r3, [pc, #216]	; (8005564 <xTaskResumeAll+0x114>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d161      	bne.n	8005556 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005492:	4b35      	ldr	r3, [pc, #212]	; (8005568 <xTaskResumeAll+0x118>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d05d      	beq.n	8005556 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800549a:	e02e      	b.n	80054fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <xTaskResumeAll+0x11c>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3318      	adds	r3, #24
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fce1 	bl	8004e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fcdc 	bl	8004e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <xTaskResumeAll+0x120>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <xTaskResumeAll+0x120>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <xTaskResumeAll+0x124>)
 80054d8:	441a      	add	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7ff fc68 	bl	8004db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <xTaskResumeAll+0x128>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054f4:	4b21      	ldr	r3, [pc, #132]	; (800557c <xTaskResumeAll+0x12c>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <xTaskResumeAll+0x11c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1cc      	bne.n	800549c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005508:	f000 fa08 	bl	800591c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTaskResumeAll+0x130>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005518:	f000 f836 	bl	8005588 <xTaskIncrementTick>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005522:	4b16      	ldr	r3, [pc, #88]	; (800557c <xTaskResumeAll+0x12c>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f1      	bne.n	8005518 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005534:	4b12      	ldr	r3, [pc, #72]	; (8005580 <xTaskResumeAll+0x130>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <xTaskResumeAll+0x12c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <xTaskResumeAll+0x134>)
 8005548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005556:	f000 fbc5 	bl	8005ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800555a:	68bb      	ldr	r3, [r7, #8]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200015a8 	.word	0x200015a8
 8005568:	20001580 	.word	0x20001580
 800556c:	20001540 	.word	0x20001540
 8005570:	20001588 	.word	0x20001588
 8005574:	20001484 	.word	0x20001484
 8005578:	20001480 	.word	0x20001480
 800557c:	20001594 	.word	0x20001594
 8005580:	20001590 	.word	0x20001590
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005592:	4b4e      	ldr	r3, [pc, #312]	; (80056cc <xTaskIncrementTick+0x144>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f040 808e 	bne.w	80056b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800559c:	4b4c      	ldr	r3, [pc, #304]	; (80056d0 <xTaskIncrementTick+0x148>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055a4:	4a4a      	ldr	r2, [pc, #296]	; (80056d0 <xTaskIncrementTick+0x148>)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d120      	bne.n	80055f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055b0:	4b48      	ldr	r3, [pc, #288]	; (80056d4 <xTaskIncrementTick+0x14c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	603b      	str	r3, [r7, #0]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <xTaskIncrementTick+0x46>
 80055d0:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <xTaskIncrementTick+0x14c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	4b40      	ldr	r3, [pc, #256]	; (80056d8 <xTaskIncrementTick+0x150>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a3e      	ldr	r2, [pc, #248]	; (80056d4 <xTaskIncrementTick+0x14c>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4a3e      	ldr	r2, [pc, #248]	; (80056d8 <xTaskIncrementTick+0x150>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	4b3d      	ldr	r3, [pc, #244]	; (80056dc <xTaskIncrementTick+0x154>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <xTaskIncrementTick+0x154>)
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	f000 f995 	bl	800591c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055f2:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <xTaskIncrementTick+0x158>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d348      	bcc.n	800568e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fc:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <xTaskIncrementTick+0x14c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <xTaskIncrementTick+0x158>)
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	601a      	str	r2, [r3, #0]
					break;
 800560e:	e03e      	b.n	800568e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005610:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <xTaskIncrementTick+0x14c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d203      	bcs.n	8005630 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <xTaskIncrementTick+0x158>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800562e:	e02e      	b.n	800568e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	3304      	adds	r3, #4
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fc1b 	bl	8004e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3318      	adds	r3, #24
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fc12 	bl	8004e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <xTaskIncrementTick+0x15c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <xTaskIncrementTick+0x15c>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <xTaskIncrementTick+0x160>)
 800566c:	441a      	add	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff fb9e 	bl	8004db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <xTaskIncrementTick+0x164>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d3b9      	bcc.n	80055fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800568c:	e7b6      	b.n	80055fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800568e:	4b17      	ldr	r3, [pc, #92]	; (80056ec <xTaskIncrementTick+0x164>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4914      	ldr	r1, [pc, #80]	; (80056e8 <xTaskIncrementTick+0x160>)
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d901      	bls.n	80056aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <xTaskIncrementTick+0x168>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e004      	b.n	80056c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <xTaskIncrementTick+0x16c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <xTaskIncrementTick+0x16c>)
 80056c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200015a8 	.word	0x200015a8
 80056d0:	20001584 	.word	0x20001584
 80056d4:	20001538 	.word	0x20001538
 80056d8:	2000153c 	.word	0x2000153c
 80056dc:	20001598 	.word	0x20001598
 80056e0:	200015a0 	.word	0x200015a0
 80056e4:	20001588 	.word	0x20001588
 80056e8:	20001484 	.word	0x20001484
 80056ec:	20001480 	.word	0x20001480
 80056f0:	20001594 	.word	0x20001594
 80056f4:	20001590 	.word	0x20001590

080056f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056fe:	4b27      	ldr	r3, [pc, #156]	; (800579c <vTaskSwitchContext+0xa4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005706:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <vTaskSwitchContext+0xa8>)
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800570c:	e03f      	b.n	800578e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800570e:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <vTaskSwitchContext+0xa8>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005714:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <vTaskSwitchContext+0xac>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	fab3 f383 	clz	r3, r3
 8005720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	f1c3 031f 	rsb	r3, r3, #31
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	491f      	ldr	r1, [pc, #124]	; (80057a8 <vTaskSwitchContext+0xb0>)
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <vTaskSwitchContext+0x5c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <vTaskSwitchContext+0x5a>
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <vTaskSwitchContext+0xb0>)
 8005760:	4413      	add	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3308      	adds	r3, #8
 8005776:	429a      	cmp	r2, r3
 8005778:	d104      	bne.n	8005784 <vTaskSwitchContext+0x8c>
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <vTaskSwitchContext+0xb4>)
 800578c:	6013      	str	r3, [r2, #0]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	200015a8 	.word	0x200015a8
 80057a0:	20001594 	.word	0x20001594
 80057a4:	20001588 	.word	0x20001588
 80057a8:	20001484 	.word	0x20001484
 80057ac:	20001480 	.word	0x20001480

080057b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057b8:	f000 f852 	bl	8005860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <prvIdleTask+0x28>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d9f9      	bls.n	80057b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <prvIdleTask+0x2c>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057d4:	e7f0      	b.n	80057b8 <prvIdleTask+0x8>
 80057d6:	bf00      	nop
 80057d8:	20001484 	.word	0x20001484
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	e00c      	b.n	8005806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <prvInitialiseTaskLists+0x60>)
 80057f8:	4413      	add	r3, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff faae 	bl	8004d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3301      	adds	r3, #1
 8005804:	607b      	str	r3, [r7, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d9ef      	bls.n	80057ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800580c:	480d      	ldr	r0, [pc, #52]	; (8005844 <prvInitialiseTaskLists+0x64>)
 800580e:	f7ff faa5 	bl	8004d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005812:	480d      	ldr	r0, [pc, #52]	; (8005848 <prvInitialiseTaskLists+0x68>)
 8005814:	f7ff faa2 	bl	8004d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005818:	480c      	ldr	r0, [pc, #48]	; (800584c <prvInitialiseTaskLists+0x6c>)
 800581a:	f7ff fa9f 	bl	8004d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800581e:	480c      	ldr	r0, [pc, #48]	; (8005850 <prvInitialiseTaskLists+0x70>)
 8005820:	f7ff fa9c 	bl	8004d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005824:	480b      	ldr	r0, [pc, #44]	; (8005854 <prvInitialiseTaskLists+0x74>)
 8005826:	f7ff fa99 	bl	8004d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <prvInitialiseTaskLists+0x78>)
 800582c:	4a05      	ldr	r2, [pc, #20]	; (8005844 <prvInitialiseTaskLists+0x64>)
 800582e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <prvInitialiseTaskLists+0x7c>)
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <prvInitialiseTaskLists+0x68>)
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20001484 	.word	0x20001484
 8005844:	20001510 	.word	0x20001510
 8005848:	20001524 	.word	0x20001524
 800584c:	20001540 	.word	0x20001540
 8005850:	20001554 	.word	0x20001554
 8005854:	2000156c 	.word	0x2000156c
 8005858:	20001538 	.word	0x20001538
 800585c:	2000153c 	.word	0x2000153c

08005860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005866:	e019      	b.n	800589c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005868:	f000 fa0c 	bl	8005c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <prvCheckTasksWaitingTermination+0x50>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff faf9 	bl	8004e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <prvCheckTasksWaitingTermination+0x54>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <prvCheckTasksWaitingTermination+0x54>)
 8005886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 8005890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005892:	f000 fa27 	bl	8005ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f810 	bl	80058bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e1      	bne.n	8005868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20001554 	.word	0x20001554
 80058b4:	20001580 	.word	0x20001580
 80058b8:	20001568 	.word	0x20001568

080058bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d108      	bne.n	80058e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fb84 	bl	8005fe0 <vPortFree>
				vPortFree( pxTCB );
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb81 	bl	8005fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058de:	e018      	b.n	8005912 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d103      	bne.n	80058f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb78 	bl	8005fe0 <vPortFree>
	}
 80058f0:	e00f      	b.n	8005912 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d00a      	beq.n	8005912 <prvDeleteTCB+0x56>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <prvDeleteTCB+0x54>
	}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005922:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <prvResetNextTaskUnblockTime+0x38>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <prvResetNextTaskUnblockTime+0x3c>)
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005934:	e008      	b.n	8005948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <prvResetNextTaskUnblockTime+0x38>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <prvResetNextTaskUnblockTime+0x3c>)
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20001538 	.word	0x20001538
 8005958:	200015a0 	.word	0x200015a0

0800595c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005966:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596c:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fa7c 	bl	8004e70 <uxListRemove>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43da      	mvns	r2, r3
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4013      	ands	r3, r2
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005994:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d10a      	bne.n	80059b4 <prvAddCurrentTaskToDelayedList+0x58>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	481a      	ldr	r0, [pc, #104]	; (8005a18 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059ae:	f7ff fa02 	bl	8004db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059b2:	e026      	b.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d209      	bcs.n	80059e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <prvAddCurrentTaskToDelayedList+0xc0>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7ff fa10 	bl	8004dfe <vListInsert>
}
 80059de:	e010      	b.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7ff fa06 	bl	8004dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d202      	bcs.n	8005a02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20001584 	.word	0x20001584
 8005a10:	20001480 	.word	0x20001480
 8005a14:	20001588 	.word	0x20001588
 8005a18:	2000156c 	.word	0x2000156c
 8005a1c:	2000153c 	.word	0x2000153c
 8005a20:	20001538 	.word	0x20001538
 8005a24:	200015a0 	.word	0x200015a0

08005a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <pxPortInitialiseStack+0x64>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b14      	subs	r3, #20
 8005a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 0202 	mvn.w	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b20      	subs	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	08005a91 	.word	0x08005a91

08005a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <prvTaskExitError+0x54>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d00a      	beq.n	8005aba <prvTaskExitError+0x2a>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <prvTaskExitError+0x28>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60bb      	str	r3, [r7, #8]
}
 8005acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ace:	bf00      	nop
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0fc      	beq.n	8005ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	2000001c 	.word	0x2000001c
	...

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20001480 	.word	0x20001480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <xPortStartScheduler+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x26>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <xPortStartScheduler+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10a      	bne.n	8005b86 <xPortStartScheduler+0x46>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <xPortStartScheduler+0x130>)
 8005bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bae:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb4:	e009      	b.n	8005bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d0ef      	beq.n	8005bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bd6:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1c3 0307 	rsb	r3, r3, #7
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00a      	beq.n	8005bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c2e:	f000 f8dd 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <xPortStartScheduler+0x13c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c38:	f000 f8fc 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c48:	f7ff ff66 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c4c:	f7ff fd54 	bl	80056f8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c50:	f7ff ff1e 	bl	8005a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed00 	.word	0xe000ed00
 8005c64:	410fc271 	.word	0x410fc271
 8005c68:	410fc270 	.word	0x410fc270
 8005c6c:	e000e400 	.word	0xe000e400
 8005c70:	200015ac 	.word	0x200015ac
 8005c74:	200015b0 	.word	0x200015b0
 8005c78:	e000ed20 	.word	0xe000ed20
 8005c7c:	2000001c 	.word	0x2000001c
 8005c80:	e000ef34 	.word	0xe000ef34

08005c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
}
 8005c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <vPortEnterCritical+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10f      	bne.n	8005cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <vPortEnterCritical+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vPortEnterCritical+0x4a>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	2000001c 	.word	0x2000001c
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vPortExitCritical+0x50>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vPortExitCritical+0x24>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	607b      	str	r3, [r7, #4]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortExitCritical+0x50>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <vPortExitCritical+0x50>)
 8005d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <vPortExitCritical+0x42>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000001c 	.word	0x2000001c
	...

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7ff fcc2 	bl	80056f8 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	20001480 	.word	0x20001480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7ff fbe1 	bl	8005588 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <SysTick_Handler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000010 	.word	0x20000010
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e54:	f7ff faee 	bl	8005434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e58:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <pvPortMalloc+0x180>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e60:	f000 f920 	bl	80060a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <pvPortMalloc+0x184>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 8093 	bne.w	8005f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01d      	beq.n	8005eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e78:	2208      	movs	r2, #8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d014      	beq.n	8005eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	3308      	adds	r3, #8
 8005e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	617b      	str	r3, [r7, #20]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d06e      	beq.n	8005f98 <pvPortMalloc+0x150>
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <pvPortMalloc+0x188>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d869      	bhi.n	8005f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ec4:	4b43      	ldr	r3, [pc, #268]	; (8005fd4 <pvPortMalloc+0x18c>)
 8005ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ec8:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <pvPortMalloc+0x18c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ece:	e004      	b.n	8005eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <pvPortMalloc+0xa4>
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f1      	bne.n	8005ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <pvPortMalloc+0x180>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d050      	beq.n	8005f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2208      	movs	r2, #8
 8005efc:	4413      	add	r3, r2
 8005efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	2308      	movs	r3, #8
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d91f      	bls.n	8005f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <pvPortMalloc+0xf8>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	613b      	str	r3, [r7, #16]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f52:	69b8      	ldr	r0, [r7, #24]
 8005f54:	f000 f908 	bl	8006168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f66:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <pvPortMalloc+0x190>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d203      	bcs.n	8005f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <pvPortMalloc+0x190>)
 8005f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <pvPortMalloc+0x184>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <pvPortMalloc+0x194>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <pvPortMalloc+0x194>)
 8005f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f98:	f7ff fa5a 	bl	8005450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <pvPortMalloc+0x174>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60fb      	str	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <pvPortMalloc+0x172>
	return pvReturn;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200051bc 	.word	0x200051bc
 8005fcc:	200051d0 	.word	0x200051d0
 8005fd0:	200051c0 	.word	0x200051c0
 8005fd4:	200051b4 	.word	0x200051b4
 8005fd8:	200051c4 	.word	0x200051c4
 8005fdc:	200051c8 	.word	0x200051c8

08005fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04d      	beq.n	800608e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	425b      	negs	r3, r3
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4b24      	ldr	r3, [pc, #144]	; (8006098 <vPortFree+0xb8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <vPortFree+0x44>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <vPortFree+0x62>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60bb      	str	r3, [r7, #8]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <vPortFree+0xb8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11a      	bne.n	800608e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <vPortFree+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006068:	f7ff f9e4 	bl	8005434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vPortFree+0xbc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	4a09      	ldr	r2, [pc, #36]	; (800609c <vPortFree+0xbc>)
 8006078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 f874 	bl	8006168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <vPortFree+0xc0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vPortFree+0xc0>)
 8006088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800608a:	f7ff f9e1 	bl	8005450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200051d0 	.word	0x200051d0
 800609c:	200051c0 	.word	0x200051c0
 80060a0:	200051cc 	.word	0x200051cc

080060a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <prvHeapInit+0xac>)
 80060b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3307      	adds	r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <prvHeapInit+0xac>)
 80060d4:	4413      	add	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <prvHeapInit+0xb0>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <prvHeapInit+0xb0>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060f0:	2208      	movs	r2, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <prvHeapInit+0xb4>)
 8006104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <prvHeapInit+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <prvHeapInit+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvHeapInit+0xb4>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <prvHeapInit+0xb8>)
 8006132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <prvHeapInit+0xbc>)
 800613a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <prvHeapInit+0xc0>)
 800613e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	200015b4 	.word	0x200015b4
 8006154:	200051b4 	.word	0x200051b4
 8006158:	200051bc 	.word	0x200051bc
 800615c:	200051c4 	.word	0x200051c4
 8006160:	200051c0 	.word	0x200051c0
 8006164:	200051d0 	.word	0x200051d0

08006168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <prvInsertBlockIntoFreeList+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e002      	b.n	800617c <prvInsertBlockIntoFreeList+0x14>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d8f7      	bhi.n	8006176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d108      	bne.n	80061aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d118      	bne.n	80061f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d00d      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e008      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e003      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d002      	beq.n	8006206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	200051b4 	.word	0x200051b4
 8006218:	200051bc 	.word	0x200051bc

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4d0d      	ldr	r5, [pc, #52]	; (8006254 <__libc_init_array+0x38>)
 8006220:	4c0d      	ldr	r4, [pc, #52]	; (8006258 <__libc_init_array+0x3c>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	2600      	movs	r6, #0
 8006228:	42a6      	cmp	r6, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	4d0b      	ldr	r5, [pc, #44]	; (800625c <__libc_init_array+0x40>)
 800622e:	4c0c      	ldr	r4, [pc, #48]	; (8006260 <__libc_init_array+0x44>)
 8006230:	f000 f820 	bl	8006274 <_init>
 8006234:	1b64      	subs	r4, r4, r5
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2600      	movs	r6, #0
 800623a:	42a6      	cmp	r6, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f855 3b04 	ldr.w	r3, [r5], #4
 8006244:	4798      	blx	r3
 8006246:	3601      	adds	r6, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f855 3b04 	ldr.w	r3, [r5], #4
 800624e:	4798      	blx	r3
 8006250:	3601      	adds	r6, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08006958 	.word	0x08006958
 8006258:	08006958 	.word	0x08006958
 800625c:	08006958 	.word	0x08006958
 8006260:	0800695c 	.word	0x0800695c

08006264 <memset>:
 8006264:	4402      	add	r2, r0
 8006266:	4603      	mov	r3, r0
 8006268:	4293      	cmp	r3, r2
 800626a:	d100      	bne.n	800626e <memset+0xa>
 800626c:	4770      	bx	lr
 800626e:	f803 1b01 	strb.w	r1, [r3], #1
 8006272:	e7f9      	b.n	8006268 <memset+0x4>

08006274 <_init>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr

08006280 <_fini>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr
