
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c0  080070c0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c8  080070c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080070d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c34  20000020  080070f0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  080070f0  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013135  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc1  00000000  00000000  00033185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00037180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019441  00000000  00000000  00038270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015908  00000000  00000000  000516b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a147c  00000000  00000000  00066fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  00108488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069e4 	.word	0x080069e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	080069e4 	.word	0x080069e4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000090 	.word	0x20000090

08000518 <map>:
		texto[pos] = digito + '0';
		pos--;
	}
}

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000522:	edc7 0a04 	vstr	s1, [r7, #16]
 8000526:	ed87 1a03 	vstr	s2, [r7, #12]
 800052a:	edc7 1a02 	vstr	s3, [r7, #8]
 800052e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	edd7 7a04 	vldr	s15, [r7, #16]
 800053a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800053e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000542:	edd7 7a02 	vldr	s15, [r7, #8]
 8000546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800054a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800054e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000552:	edd7 7a04 	vldr	s15, [r7, #16]
 8000556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800055e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000562:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000566:	eeb0 0a67 	vmov.f32	s0, s15
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <actualizar_escala>:
void actualizar_escala()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
switch(contador)
 8000578:	4baf      	ldr	r3, [pc, #700]	; (8000838 <actualizar_escala+0x2c4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	f200 8191 	bhi.w	80008a4 <actualizar_escala+0x330>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <actualizar_escala+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	080005a9 	.word	0x080005a9
 800058c:	080005fb 	.word	0x080005fb
 8000590:	0800064d 	.word	0x0800064d
 8000594:	0800069f 	.word	0x0800069f
 8000598:	080006f1 	.word	0x080006f1
 800059c:	08000743 	.word	0x08000743
 80005a0:	08000795 	.word	0x08000795
 80005a4:	080007e7 	.word	0x080007e7
	{
		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 80005a8:	2137      	movs	r1, #55	; 0x37
 80005aa:	2073      	movs	r0, #115	; 0x73
 80005ac:	f001 f93a 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80005b0:	4aa2      	ldr	r2, [pc, #648]	; (800083c <actualizar_escala+0x2c8>)
 80005b2:	2301      	movs	r3, #1
 80005b4:	ca06      	ldmia	r2, {r1, r2}
 80005b6:	48a2      	ldr	r0, [pc, #648]	; (8000840 <actualizar_escala+0x2cc>)
 80005b8:	f001 f90e 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80005bc:	2109      	movs	r1, #9
 80005be:	2006      	movs	r0, #6
 80005c0:	f001 f930 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80005c4:	4a9d      	ldr	r2, [pc, #628]	; (800083c <actualizar_escala+0x2c8>)
 80005c6:	2301      	movs	r3, #1
 80005c8:	ca06      	ldmia	r2, {r1, r2}
 80005ca:	489e      	ldr	r0, [pc, #632]	; (8000844 <actualizar_escala+0x2d0>)
 80005cc:	f001 f904 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80005d0:	2121      	movs	r1, #33	; 0x21
 80005d2:	2011      	movs	r0, #17
 80005d4:	f001 f926 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80005d8:	4a98      	ldr	r2, [pc, #608]	; (800083c <actualizar_escala+0x2c8>)
 80005da:	2301      	movs	r3, #1
 80005dc:	ca06      	ldmia	r2, {r1, r2}
 80005de:	489a      	ldr	r0, [pc, #616]	; (8000848 <actualizar_escala+0x2d4>)
 80005e0:	f001 f8fa 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80005e4:	2138      	movs	r1, #56	; 0x38
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f91c 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80005ec:	4a93      	ldr	r2, [pc, #588]	; (800083c <actualizar_escala+0x2c8>)
 80005ee:	2301      	movs	r3, #1
 80005f0:	ca06      	ldmia	r2, {r1, r2}
 80005f2:	4896      	ldr	r0, [pc, #600]	; (800084c <actualizar_escala+0x2d8>)
 80005f4:	f001 f8f0 	bl	80017d8 <ssd1306_WriteString>
		break;
 80005f8:	e17d      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 80005fa:	2137      	movs	r1, #55	; 0x37
 80005fc:	2073      	movs	r0, #115	; 0x73
 80005fe:	f001 f911 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 8000602:	4a8e      	ldr	r2, [pc, #568]	; (800083c <actualizar_escala+0x2c8>)
 8000604:	2301      	movs	r3, #1
 8000606:	ca06      	ldmia	r2, {r1, r2}
 8000608:	4891      	ldr	r0, [pc, #580]	; (8000850 <actualizar_escala+0x2dc>)
 800060a:	f001 f8e5 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800060e:	2109      	movs	r1, #9
 8000610:	2006      	movs	r0, #6
 8000612:	f001 f907 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8000616:	4a89      	ldr	r2, [pc, #548]	; (800083c <actualizar_escala+0x2c8>)
 8000618:	2301      	movs	r3, #1
 800061a:	ca06      	ldmia	r2, {r1, r2}
 800061c:	488d      	ldr	r0, [pc, #564]	; (8000854 <actualizar_escala+0x2e0>)
 800061e:	f001 f8db 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000622:	2121      	movs	r1, #33	; 0x21
 8000624:	2011      	movs	r0, #17
 8000626:	f001 f8fd 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800062a:	4a84      	ldr	r2, [pc, #528]	; (800083c <actualizar_escala+0x2c8>)
 800062c:	2301      	movs	r3, #1
 800062e:	ca06      	ldmia	r2, {r1, r2}
 8000630:	4885      	ldr	r0, [pc, #532]	; (8000848 <actualizar_escala+0x2d4>)
 8000632:	f001 f8d1 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000636:	2138      	movs	r1, #56	; 0x38
 8000638:	2000      	movs	r0, #0
 800063a:	f001 f8f3 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800063e:	4a7f      	ldr	r2, [pc, #508]	; (800083c <actualizar_escala+0x2c8>)
 8000640:	2301      	movs	r3, #1
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <actualizar_escala+0x2e4>)
 8000646:	f001 f8c7 	bl	80017d8 <ssd1306_WriteString>
		break;
 800064a:	e154      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 800064c:	2137      	movs	r1, #55	; 0x37
 800064e:	2073      	movs	r0, #115	; 0x73
 8000650:	f001 f8e8 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 8000654:	4a79      	ldr	r2, [pc, #484]	; (800083c <actualizar_escala+0x2c8>)
 8000656:	2301      	movs	r3, #1
 8000658:	ca06      	ldmia	r2, {r1, r2}
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <actualizar_escala+0x2e8>)
 800065c:	f001 f8bc 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000660:	2109      	movs	r1, #9
 8000662:	2006      	movs	r0, #6
 8000664:	f001 f8de 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 8000668:	4a74      	ldr	r2, [pc, #464]	; (800083c <actualizar_escala+0x2c8>)
 800066a:	2301      	movs	r3, #1
 800066c:	ca06      	ldmia	r2, {r1, r2}
 800066e:	487c      	ldr	r0, [pc, #496]	; (8000860 <actualizar_escala+0x2ec>)
 8000670:	f001 f8b2 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000674:	2121      	movs	r1, #33	; 0x21
 8000676:	2011      	movs	r0, #17
 8000678:	f001 f8d4 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800067c:	4a6f      	ldr	r2, [pc, #444]	; (800083c <actualizar_escala+0x2c8>)
 800067e:	2301      	movs	r3, #1
 8000680:	ca06      	ldmia	r2, {r1, r2}
 8000682:	4871      	ldr	r0, [pc, #452]	; (8000848 <actualizar_escala+0x2d4>)
 8000684:	f001 f8a8 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000688:	2138      	movs	r1, #56	; 0x38
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f8ca 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 8000690:	4a6a      	ldr	r2, [pc, #424]	; (800083c <actualizar_escala+0x2c8>)
 8000692:	2301      	movs	r3, #1
 8000694:	ca06      	ldmia	r2, {r1, r2}
 8000696:	4873      	ldr	r0, [pc, #460]	; (8000864 <actualizar_escala+0x2f0>)
 8000698:	f001 f89e 	bl	80017d8 <ssd1306_WriteString>
		break;
 800069c:	e12b      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 800069e:	2137      	movs	r1, #55	; 0x37
 80006a0:	206d      	movs	r0, #109	; 0x6d
 80006a2:	f001 f8bf 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 80006a6:	4a65      	ldr	r2, [pc, #404]	; (800083c <actualizar_escala+0x2c8>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	486e      	ldr	r0, [pc, #440]	; (8000868 <actualizar_escala+0x2f4>)
 80006ae:	f001 f893 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80006b2:	2109      	movs	r1, #9
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 f8b5 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 80006ba:	4a60      	ldr	r2, [pc, #384]	; (800083c <actualizar_escala+0x2c8>)
 80006bc:	2301      	movs	r3, #1
 80006be:	ca06      	ldmia	r2, {r1, r2}
 80006c0:	486a      	ldr	r0, [pc, #424]	; (800086c <actualizar_escala+0x2f8>)
 80006c2:	f001 f889 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	2011      	movs	r0, #17
 80006ca:	f001 f8ab 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80006ce:	4a5b      	ldr	r2, [pc, #364]	; (800083c <actualizar_escala+0x2c8>)
 80006d0:	2301      	movs	r3, #1
 80006d2:	ca06      	ldmia	r2, {r1, r2}
 80006d4:	485c      	ldr	r0, [pc, #368]	; (8000848 <actualizar_escala+0x2d4>)
 80006d6:	f001 f87f 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f8a1 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 80006e2:	4a56      	ldr	r2, [pc, #344]	; (800083c <actualizar_escala+0x2c8>)
 80006e4:	2301      	movs	r3, #1
 80006e6:	ca06      	ldmia	r2, {r1, r2}
 80006e8:	4861      	ldr	r0, [pc, #388]	; (8000870 <actualizar_escala+0x2fc>)
 80006ea:	f001 f875 	bl	80017d8 <ssd1306_WriteString>
		break;
 80006ee:	e102      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 80006f0:	2137      	movs	r1, #55	; 0x37
 80006f2:	206d      	movs	r0, #109	; 0x6d
 80006f4:	f001 f896 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <actualizar_escala+0x2c8>)
 80006fa:	2301      	movs	r3, #1
 80006fc:	ca06      	ldmia	r2, {r1, r2}
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <actualizar_escala+0x300>)
 8000700:	f001 f86a 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000704:	2109      	movs	r1, #9
 8000706:	2006      	movs	r0, #6
 8000708:	f001 f88c 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <actualizar_escala+0x2c8>)
 800070e:	2301      	movs	r3, #1
 8000710:	ca06      	ldmia	r2, {r1, r2}
 8000712:	4859      	ldr	r0, [pc, #356]	; (8000878 <actualizar_escala+0x304>)
 8000714:	f001 f860 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000718:	2121      	movs	r1, #33	; 0x21
 800071a:	2011      	movs	r0, #17
 800071c:	f001 f882 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000720:	4a46      	ldr	r2, [pc, #280]	; (800083c <actualizar_escala+0x2c8>)
 8000722:	2301      	movs	r3, #1
 8000724:	ca06      	ldmia	r2, {r1, r2}
 8000726:	4848      	ldr	r0, [pc, #288]	; (8000848 <actualizar_escala+0x2d4>)
 8000728:	f001 f856 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800072c:	2138      	movs	r1, #56	; 0x38
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f878 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <actualizar_escala+0x2c8>)
 8000736:	2301      	movs	r3, #1
 8000738:	ca06      	ldmia	r2, {r1, r2}
 800073a:	4850      	ldr	r0, [pc, #320]	; (800087c <actualizar_escala+0x308>)
 800073c:	f001 f84c 	bl	80017d8 <ssd1306_WriteString>
		break;
 8000740:	e0d9      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 8000742:	2137      	movs	r1, #55	; 0x37
 8000744:	206d      	movs	r0, #109	; 0x6d
 8000746:	f001 f86d 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <actualizar_escala+0x2c8>)
 800074c:	2301      	movs	r3, #1
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <actualizar_escala+0x30c>)
 8000752:	f001 f841 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000756:	2109      	movs	r1, #9
 8000758:	2006      	movs	r0, #6
 800075a:	f001 f863 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <actualizar_escala+0x2c8>)
 8000760:	2301      	movs	r3, #1
 8000762:	ca06      	ldmia	r2, {r1, r2}
 8000764:	4847      	ldr	r0, [pc, #284]	; (8000884 <actualizar_escala+0x310>)
 8000766:	f001 f837 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800076a:	2121      	movs	r1, #33	; 0x21
 800076c:	2011      	movs	r0, #17
 800076e:	f001 f859 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <actualizar_escala+0x2c8>)
 8000774:	2301      	movs	r3, #1
 8000776:	ca06      	ldmia	r2, {r1, r2}
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <actualizar_escala+0x2d4>)
 800077a:	f001 f82d 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800077e:	2138      	movs	r1, #56	; 0x38
 8000780:	2000      	movs	r0, #0
 8000782:	f001 f84f 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <actualizar_escala+0x2c8>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	483e      	ldr	r0, [pc, #248]	; (8000888 <actualizar_escala+0x314>)
 800078e:	f001 f823 	bl	80017d8 <ssd1306_WriteString>
		break;
 8000792:	e0b0      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 8000794:	2137      	movs	r1, #55	; 0x37
 8000796:	206d      	movs	r0, #109	; 0x6d
 8000798:	f001 f844 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <actualizar_escala+0x2c8>)
 800079e:	2301      	movs	r3, #1
 80007a0:	ca06      	ldmia	r2, {r1, r2}
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <actualizar_escala+0x318>)
 80007a4:	f001 f818 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 80007a8:	2109      	movs	r1, #9
 80007aa:	2011      	movs	r0, #17
 80007ac:	f001 f83a 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <actualizar_escala+0x2c8>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	4836      	ldr	r0, [pc, #216]	; (8000890 <actualizar_escala+0x31c>)
 80007b8:	f001 f80e 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80007bc:	2121      	movs	r1, #33	; 0x21
 80007be:	2011      	movs	r0, #17
 80007c0:	f001 f830 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <actualizar_escala+0x2c8>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <actualizar_escala+0x2d4>)
 80007cc:	f001 f804 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 80007d0:	2138      	movs	r1, #56	; 0x38
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 f826 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <actualizar_escala+0x2c8>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	482d      	ldr	r0, [pc, #180]	; (8000894 <actualizar_escala+0x320>)
 80007e0:	f000 fffa 	bl	80017d8 <ssd1306_WriteString>
		break;
 80007e4:	e087      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 80007e6:	2137      	movs	r1, #55	; 0x37
 80007e8:	206d      	movs	r0, #109	; 0x6d
 80007ea:	f001 f81b 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <actualizar_escala+0x2c8>)
 80007f0:	2301      	movs	r3, #1
 80007f2:	ca06      	ldmia	r2, {r1, r2}
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <actualizar_escala+0x324>)
 80007f6:	f000 ffef 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80007fa:	2109      	movs	r1, #9
 80007fc:	2006      	movs	r0, #6
 80007fe:	f001 f811 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <actualizar_escala+0x2c8>)
 8000804:	2301      	movs	r3, #1
 8000806:	ca06      	ldmia	r2, {r1, r2}
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <actualizar_escala+0x328>)
 800080a:	f000 ffe5 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	2011      	movs	r0, #17
 8000812:	f001 f807 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <actualizar_escala+0x2c8>)
 8000818:	2301      	movs	r3, #1
 800081a:	ca06      	ldmia	r2, {r1, r2}
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <actualizar_escala+0x2d4>)
 800081e:	f000 ffdb 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000822:	2138      	movs	r1, #56	; 0x38
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fffd 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <actualizar_escala+0x2c8>)
 800082c:	2301      	movs	r3, #1
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <actualizar_escala+0x32c>)
 8000832:	f000 ffd1 	bl	80017d8 <ssd1306_WriteString>
		break;
 8000836:	e05e      	b.n	80008f6 <actualizar_escala+0x382>
 8000838:	20000468 	.word	0x20000468
 800083c:	20000008 	.word	0x20000008
 8000840:	080069fc 	.word	0x080069fc
 8000844:	08006a00 	.word	0x08006a00
 8000848:	08006a04 	.word	0x08006a04
 800084c:	08006a08 	.word	0x08006a08
 8000850:	08006a10 	.word	0x08006a10
 8000854:	08006a14 	.word	0x08006a14
 8000858:	08006a18 	.word	0x08006a18
 800085c:	08006a20 	.word	0x08006a20
 8000860:	08006a24 	.word	0x08006a24
 8000864:	08006a28 	.word	0x08006a28
 8000868:	08006a30 	.word	0x08006a30
 800086c:	08006a34 	.word	0x08006a34
 8000870:	08006a38 	.word	0x08006a38
 8000874:	08006a40 	.word	0x08006a40
 8000878:	08006a44 	.word	0x08006a44
 800087c:	08006a48 	.word	0x08006a48
 8000880:	08006a50 	.word	0x08006a50
 8000884:	08006a54 	.word	0x08006a54
 8000888:	08006a58 	.word	0x08006a58
 800088c:	08006a60 	.word	0x08006a60
 8000890:	08006a64 	.word	0x08006a64
 8000894:	08006a68 	.word	0x08006a68
 8000898:	08006a6c 	.word	0x08006a6c
 800089c:	08006a70 	.word	0x08006a70
 80008a0:	08006a74 	.word	0x08006a74
		default://A2
			ssd1306_SetCursor(115, 55);
 80008a4:	2137      	movs	r1, #55	; 0x37
 80008a6:	2073      	movs	r0, #115	; 0x73
 80008a8:	f000 ffbc 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <actualizar_escala+0x388>)
 80008ae:	2301      	movs	r3, #1
 80008b0:	ca06      	ldmia	r2, {r1, r2}
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <actualizar_escala+0x38c>)
 80008b4:	f000 ff90 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80008b8:	2109      	movs	r1, #9
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 ffb2 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <actualizar_escala+0x388>)
 80008c2:	2301      	movs	r3, #1
 80008c4:	ca06      	ldmia	r2, {r1, r2}
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <actualizar_escala+0x390>)
 80008c8:	f000 ff86 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80008cc:	2121      	movs	r1, #33	; 0x21
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 ffa8 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <actualizar_escala+0x388>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	ca06      	ldmia	r2, {r1, r2}
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <actualizar_escala+0x394>)
 80008dc:	f000 ff7c 	bl	80017d8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80008e0:	2138      	movs	r1, #56	; 0x38
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 ff9e 	bl	8001824 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <actualizar_escala+0x388>)
 80008ea:	2301      	movs	r3, #1
 80008ec:	ca06      	ldmia	r2, {r1, r2}
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <actualizar_escala+0x398>)
 80008f0:	f000 ff72 	bl	80017d8 <ssd1306_WriteString>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	080069fc 	.word	0x080069fc
 8000904:	08006a00 	.word	0x08006a00
 8000908:	08006a04 	.word	0x08006a04
 800090c:	08006a08 	.word	0x08006a08

08000910 <display_plot_grilla>:

void display_plot_grilla(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fe36 	bl	8001588 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f000 ff80 	bl	8001824 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 8000924:	2301      	movs	r3, #1
 8000926:	2237      	movs	r2, #55	; 0x37
 8000928:	2109      	movs	r1, #9
 800092a:	201a      	movs	r0, #26
 800092c:	f000 fffe 	bl	800192c <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 8000930:	2301      	movs	r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	2109      	movs	r1, #9
 8000936:	207f      	movs	r0, #127	; 0x7f
 8000938:	f000 fff8 	bl	800192c <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vrtical line bottom
 800093c:	2301      	movs	r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	213c      	movs	r1, #60	; 0x3c
 8000942:	207f      	movs	r0, #127	; 0x7f
 8000944:	f000 fff2 	bl	800192c <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000948:	2301      	movs	r3, #1
 800094a:	2207      	movs	r2, #7
 800094c:	2109      	movs	r1, #9
 800094e:	2018      	movs	r0, #24
 8000950:	f001 f80b 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 8000954:	2301      	movs	r3, #1
 8000956:	2202      	movs	r2, #2
 8000958:	2124      	movs	r1, #36	; 0x24
 800095a:	2018      	movs	r0, #24
 800095c:	f001 f805 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 8000960:	2301      	movs	r3, #1
 8000962:	2207      	movs	r2, #7
 8000964:	213f      	movs	r1, #63	; 0x3f
 8000966:	2018      	movs	r0, #24
 8000968:	f000 ffff 	bl	800196a <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 800096c:	2301      	movs	r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	2109      	movs	r1, #9
 8000972:	2033      	movs	r0, #51	; 0x33
 8000974:	f000 fff9 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000978:	2301      	movs	r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	213f      	movs	r1, #63	; 0x3f
 800097e:	2033      	movs	r0, #51	; 0x33
 8000980:	f000 fff3 	bl	800196a <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 8000984:	2301      	movs	r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	2109      	movs	r1, #9
 800098a:	204c      	movs	r0, #76	; 0x4c
 800098c:	f000 ffed 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 8000990:	2301      	movs	r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	213f      	movs	r1, #63	; 0x3f
 8000996:	204c      	movs	r0, #76	; 0x4c
 8000998:	f000 ffe7 	bl	800196a <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 800099c:	2301      	movs	r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	2109      	movs	r1, #9
 80009a2:	2065      	movs	r0, #101	; 0x65
 80009a4:	f000 ffe1 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80009a8:	2301      	movs	r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	213f      	movs	r1, #63	; 0x3f
 80009ae:	2065      	movs	r0, #101	; 0x65
 80009b0:	f000 ffdb 	bl	800196a <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80009b4:	2301      	movs	r3, #1
 80009b6:	2205      	movs	r2, #5
 80009b8:	2109      	movs	r1, #9
 80009ba:	207b      	movs	r0, #123	; 0x7b
 80009bc:	f000 ffd5 	bl	800196a <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80009c0:	2301      	movs	r3, #1
 80009c2:	2205      	movs	r2, #5
 80009c4:	213f      	movs	r1, #63	; 0x3f
 80009c6:	207b      	movs	r0, #123	; 0x7b
 80009c8:	f000 ffcf 	bl	800196a <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 80009cc:	231a      	movs	r3, #26
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e009      	b.n	80009e6 <display_plot_grilla+0xd6>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	2301      	movs	r3, #1
 80009d8:	2202      	movs	r2, #2
 80009da:	2124      	movs	r1, #36	; 0x24
 80009dc:	f000 ffc5 	bl	800196a <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3305      	adds	r3, #5
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b80      	cmp	r3, #128	; 0x80
 80009ea:	ddf2      	ble.n	80009d2 <display_plot_grilla+0xc2>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 80009ec:	2366      	movs	r3, #102	; 0x66
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	e013      	b.n	8000a1a <display_plot_grilla+0x10a>
		for (int y = 10; y < 63; y += 5){
 80009f2:	230a      	movs	r3, #10
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e00a      	b.n	8000a0e <display_plot_grilla+0xfe>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b2d8      	uxtb	r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b2d9      	uxtb	r1, r3
 8000a00:	2301      	movs	r3, #1
 8000a02:	2202      	movs	r2, #2
 8000a04:	f000 ff92 	bl	800192c <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3305      	adds	r3, #5
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b3e      	cmp	r3, #62	; 0x3e
 8000a12:	ddf1      	ble.n	80009f8 <display_plot_grilla+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25){
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3b19      	subs	r3, #25
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b1e      	cmp	r3, #30
 8000a1e:	dce8      	bgt.n	80009f2 <display_plot_grilla+0xe2>
		}
	}
	ssd1306_SetCursor(14, 0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	200e      	movs	r0, #14
 8000a24:	f000 fefe 	bl	8001824 <ssd1306_SetCursor>
	ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <display_plot_grilla+0x138>)
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	ca06      	ldmia	r2, {r1, r2}
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <display_plot_grilla+0x13c>)
 8000a30:	f000 fed2 	bl	80017d8 <ssd1306_WriteString>
	actualizar_escala(contador);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <display_plot_grilla+0x140>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fd9b 	bl	8000574 <actualizar_escala>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	08006a7c 	.word	0x08006a7c
 8000a50:	20000468 	.word	0x20000468

08000a54 <display_plot_signal>:
	else if(Valor_max>2699)
		Cambiar_MUX(AMP_1);
}
*/

void display_plot_signal(void){
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]

	if(flag == 1)
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <display_plot_signal+0x14c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 8091 	bne.w	8000b96 <display_plot_signal+0x142>
	{
		//ssd1306_Fill(Black);
		trigger_point = 1;
 8000a74:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <display_plot_signal+0x150>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<MAX; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	e00a      	b.n	8000a96 <display_plot_signal+0x42>
				buffer_display[i] = buffer_adc[i];
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <display_plot_signal+0x154>)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a88:	4948      	ldr	r1, [pc, #288]	; (8000bac <display_plot_signal+0x158>)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<MAX; i++)
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	3301      	adds	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	2bc7      	cmp	r3, #199	; 0xc7
 8000a9a:	ddf1      	ble.n	8000a80 <display_plot_signal+0x2c>

		//Analizar_amplitud(buffer_display);
		for(int i = 0; i <= 98; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	e017      	b.n	8000ad2 <display_plot_signal+0x7e>
		{
			// flanco descendente
			if((buffer_display[i] > trigger_level ) && (buffer_display[i+1]) < trigger_level )
 8000aa2:	4a42      	ldr	r2, [pc, #264]	; (8000bac <display_plot_signal+0x158>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <display_plot_signal+0x15c>)
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d90c      	bls.n	8000acc <display_plot_signal+0x78>
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <display_plot_signal+0x158>)
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	4a3c      	ldr	r2, [pc, #240]	; (8000bb0 <display_plot_signal+0x15c>)
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d203      	bcs.n	8000acc <display_plot_signal+0x78>
			{
				trigger_point = i;
 8000ac4:	4a37      	ldr	r2, [pc, #220]	; (8000ba4 <display_plot_signal+0x150>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6013      	str	r3, [r2, #0]
				break;
 8000aca:	e005      	b.n	8000ad8 <display_plot_signal+0x84>
		for(int i = 0; i <= 98; i++)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b62      	cmp	r3, #98	; 0x62
 8000ad6:	dde4      	ble.n	8000aa2 <display_plot_signal+0x4e>
			}
		}

		for (int k = 0; k <= 98; k++){
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e050      	b.n	8000b80 <display_plot_signal+0x12c>

			x3 = k + trigger_point;
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <display_plot_signal+0x150>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
			x4 = x3 + 1;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]

			y3 = map(buffer_display[x3], 0, 4095, 63, 9); 				// convert to plot
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <display_plot_signal+0x158>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000afe:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000b02:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8000bb4 <display_plot_signal+0x160>
 8000b06:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8000bb8 <display_plot_signal+0x164>
 8000b0a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8000bbc <display_plot_signal+0x168>
 8000b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b12:	f7ff fd01 	bl	8000518 <map>
 8000b16:	eef0 7a40 	vmov.f32	s15, s0
 8000b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b1e:	ee17 3a90 	vmov	r3, s15
 8000b22:	613b      	str	r3, [r7, #16]
			y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <display_plot_signal+0x158>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000b38:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8000bb4 <display_plot_signal+0x160>
 8000b3c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8000bb8 <display_plot_signal+0x164>
 8000b40:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8000bbc <display_plot_signal+0x168>
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	f7ff fce6 	bl	8000518 <map>
 8000b4c:	eef0 7a40 	vmov.f32	s15, s0
 8000b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b54:	ee17 3a90 	vmov	r3, s15
 8000b58:	60fb      	str	r3, [r7, #12]

			ssd1306_Line(k + 27, y3, k + 28, y4, White);
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	331b      	adds	r3, #27
 8000b60:	b2d8      	uxtb	r0, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	b2d9      	uxtb	r1, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	331c      	adds	r3, #28
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2401      	movs	r4, #1
 8000b74:	9400      	str	r4, [sp, #0]
 8000b76:	f000 fe6d 	bl	8001854 <ssd1306_Line>
		for (int k = 0; k <= 98; k++){
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b62      	cmp	r3, #98	; 0x62
 8000b84:	ddab      	ble.n	8000ade <display_plot_signal+0x8a>
		 }
		flag = 0;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <display_plot_signal+0x14c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000b8c:	22c8      	movs	r2, #200	; 0xc8
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <display_plot_signal+0x154>)
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <display_plot_signal+0x16c>)
 8000b92:	f001 fa1b 	bl	8001fcc <HAL_ADC_Start_DMA>
	}
}
 8000b96:	bf00      	nop
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000464 	.word	0x20000464
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	2000046c 	.word	0x2000046c
 8000bac:	2000078c 	.word	0x2000078c
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	427c0000 	.word	0x427c0000
 8000bb8:	457ff000 	.word	0x457ff000
 8000bbc:	00000000 	.word	0x00000000
 8000bc0:	20000290 	.word	0x20000290

08000bc4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	//trigger_level += 300;
	//if(trigger_level > 3800)
		//trigger_level = 100;
	switch(contador)
 8000bce:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b07      	cmp	r3, #7
 8000bd4:	f200 809c 	bhi.w	8000d10 <HAL_GPIO_EXTI_Callback+0x14c>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000c01 	.word	0x08000c01
 8000be4:	08000c23 	.word	0x08000c23
 8000be8:	08000c45 	.word	0x08000c45
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c89 	.word	0x08000c89
 8000bf4:	08000cab 	.word	0x08000cab
 8000bf8:	08000ccd 	.word	0x08000ccd
 8000bfc:	08000cef 	.word	0x08000cef
	{
		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4856      	ldr	r0, [pc, #344]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c06:	f002 fb5b 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c12:	f002 fb55 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4851      	ldr	r0, [pc, #324]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c1c:	f002 fb50 	bl	80032c0 <HAL_GPIO_WritePin>

		break;
 8000c20:	e087      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2108      	movs	r1, #8
 8000c26:	484e      	ldr	r0, [pc, #312]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c28:	f002 fb4a 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	484c      	ldr	r0, [pc, #304]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c34:	f002 fb44 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	4848      	ldr	r0, [pc, #288]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c3e:	f002 fb3f 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000c42:	e076      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2108      	movs	r1, #8
 8000c48:	4845      	ldr	r0, [pc, #276]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c4a:	f002 fb39 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4843      	ldr	r0, [pc, #268]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c56:	f002 fb33 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4840      	ldr	r0, [pc, #256]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c60:	f002 fb2e 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000c64:	e065      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	483d      	ldr	r0, [pc, #244]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c6c:	f002 fb28 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c76:	483b      	ldr	r0, [pc, #236]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c78:	f002 fb22 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4837      	ldr	r0, [pc, #220]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c82:	f002 fb1d 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000c86:	e054      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4834      	ldr	r0, [pc, #208]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c8e:	f002 fb17 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c9a:	f002 fb11 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	482f      	ldr	r0, [pc, #188]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca4:	f002 fb0c 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000ca8:	e043      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2108      	movs	r1, #8
 8000cae:	482c      	ldr	r0, [pc, #176]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cb0:	f002 fb06 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cbc:	f002 fb00 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	4826      	ldr	r0, [pc, #152]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc6:	f002 fafb 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000cca:	e032      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4823      	ldr	r0, [pc, #140]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cd2:	f002 faf5 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cde:	f002 faef 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	481e      	ldr	r0, [pc, #120]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce8:	f002 faea 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	481b      	ldr	r0, [pc, #108]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cf4:	f002 fae4 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	4819      	ldr	r0, [pc, #100]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d00:	f002 fade 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	4815      	ldr	r0, [pc, #84]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d0a:	f002 fad9 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000d0e:	e010      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x16e>
		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d16:	f002 fad3 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	4810      	ldr	r0, [pc, #64]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d22:	f002 facd 	bl	80032c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d2c:	f002 fac8 	bl	80032c0 <HAL_GPIO_WritePin>
		break;
 8000d30:	bf00      	nop
	}
	contador++;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x198>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x198>)
 8000d3a:	6013      	str	r3, [r2, #0]
	contador %= 8;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x198>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	425a      	negs	r2, r3
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	f002 0207 	and.w	r2, r2, #7
 8000d4a:	bf58      	it	pl
 8000d4c:	4253      	negpl	r3, r2
 8000d4e:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x198>)
 8000d50:	6013      	str	r3, [r2, #0]

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000468 	.word	0x20000468
 8000d60:	40020400 	.word	0x40020400
 8000d64:	40020000 	.word	0x40020000

08000d68 <display_plot_trigger>:

void display_plot_trigger(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

	int trigger_actual = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]

	trigger_actual = map(trigger_level, 0, 4095, 63, 9);
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <display_plot_trigger+0x78>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000d82:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000de4 <display_plot_trigger+0x7c>
 8000d86:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000de8 <display_plot_trigger+0x80>
 8000d8a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000dec <display_plot_trigger+0x84>
 8000d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d92:	f7ff fbc1 	bl	8000518 <map>
 8000d96:	eef0 7a40 	vmov.f32	s15, s0
 8000d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d9e:	ee17 3a90 	vmov	r3, s15
 8000da2:	607b      	str	r3, [r7, #4]

	//ssd1306_HLine(26, trigger_actual, 100, White);

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3b02      	subs	r3, #2
 8000daa:	b2d9      	uxtb	r1, r3
 8000dac:	2301      	movs	r3, #1
 8000dae:	2204      	movs	r2, #4
 8000db0:	207f      	movs	r0, #127	; 0x7f
 8000db2:	f000 fdbb 	bl	800192c <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	207e      	movs	r0, #126	; 0x7e
 8000dc4:	f000 fdb2 	bl	800192c <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	207d      	movs	r0, #125	; 0x7d
 8000dd2:	f000 fc25 	bl	8001620 <ssd1306_DrawPixel>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000004 	.word	0x20000004
 8000de4:	427c0000 	.word	0x427c0000
 8000de8:	457ff000 	.word	0x457ff000
 8000dec:	00000000 	.word	0x00000000

08000df0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
		flag = 1;
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000464 	.word	0x20000464

08000e10 <Init_Sistema>:
}
*/

/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8000e18:	f000 fb50 	bl	80014bc <ssd1306_Init>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <Init_Sistema+0x54>)
 8000e20:	f003 fd02 	bl	8004828 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim3);
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <Init_Sistema+0x58>)
 8000e26:	f003 fbf3 	bl	8004610 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000e2a:	22c8      	movs	r2, #200	; 0xc8
 8000e2c:	490f      	ldr	r1, [pc, #60]	; (8000e6c <Init_Sistema+0x5c>)
 8000e2e:	4810      	ldr	r0, [pc, #64]	; (8000e70 <Init_Sistema+0x60>)
 8000e30:	f001 f8cc 	bl	8001fcc <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2108      	movs	r1, #8
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <Init_Sistema+0x64>)
 8000e3a:	f002 fa41 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <Init_Sistema+0x68>)
 8000e46:	f002 fa3b 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <Init_Sistema+0x64>)
 8000e50:	f002 fa36 	bl	80032c0 <HAL_GPIO_WritePin>
	vTaskDelete(NULL);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f004 fd81 	bl	800595c <vTaskDelete>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000038c 	.word	0x2000038c
 8000e68:	200003d4 	.word	0x200003d4
 8000e6c:	2000046c 	.word	0x2000046c
 8000e70:	20000290 	.word	0x20000290
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40020000 	.word	0x40020000

08000e7c <Mostrar_pantalla>:
void Mostrar_pantalla(void *pvParameters){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

	while(1){
		display_plot_grilla();
 8000e84:	f7ff fd44 	bl	8000910 <display_plot_grilla>
		display_plot_signal();
 8000e88:	f7ff fde4 	bl	8000a54 <display_plot_signal>
		display_plot_trigger();
 8000e8c:	f7ff ff6c 	bl	8000d68 <display_plot_trigger>
		ssd1306_UpdateScreen();
 8000e90:	f000 fb9e 	bl	80015d0 <ssd1306_UpdateScreen>
		vTaskDelay(17/portTICK_RATE_MS);
 8000e94:	2011      	movs	r0, #17
 8000e96:	f004 fdf1 	bl	8005a7c <vTaskDelay>
		display_plot_grilla();
 8000e9a:	e7f3      	b.n	8000e84 <Mostrar_pantalla+0x8>

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea2:	f001 f80d 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea6:	f000 f82d 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eaa:	f000 fa2b 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eae:	f000 fa09 	bl	80012c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eb2:	f000 f893 	bl	8000fdc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eb6:	f000 f8e3 	bl	8001080 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000eba:	f000 f90f 	bl	80010dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ebe:	f000 f965 	bl	800118c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ec2:	f000 f9b1 	bl	8001228 <MX_TIM5_Init>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <main+0x58>)
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <main+0x5c>)
 8000ed6:	f004 fc0a 	bl	80056ee <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000eda:	2300      	movs	r3, #0
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	4905      	ldr	r1, [pc, #20]	; (8000efc <main+0x60>)
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <main+0x64>)
 8000eea:	f004 fc00 	bl	80056ee <xTaskCreate>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000eee:	f004 fdf9 	bl	8005ae4 <vTaskStartScheduler>
  while(1){
 8000ef2:	e7fe      	b.n	8000ef2 <main+0x56>
 8000ef4:	08006a90 	.word	0x08006a90
 8000ef8:	08000e11 	.word	0x08000e11
 8000efc:	08006a9c 	.word	0x08006a9c
 8000f00:	08000e7d 	.word	0x08000e7d

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	; 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fd5e 	bl	80069d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <SystemClock_Config+0xd0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f86:	2307      	movs	r3, #7
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fe24 	bl	8003bdc <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f9a:	f000 fa57 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 f886 	bl	80040cc <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fc6:	f000 fa41 	bl	800144c <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3750      	adds	r7, #80	; 0x50
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_ADC1_Init+0x98>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <MX_ADC1_Init+0x9c>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_ADC1_Init+0x98>)
 8000ff6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_ADC1_Init+0x98>)
 800100a:	2201      	movs	r2, #1
 800100c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_ADC1_Init+0x98>)
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <MX_ADC1_Init+0xa0>)
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_ADC1_Init+0x98>)
 800102a:	2201      	movs	r2, #1
 800102c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_ADC1_Init+0x98>)
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_ADC1_Init+0x98>)
 800103e:	f000 ff81 	bl	8001f44 <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 fa00 	bl	800144c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_ADC1_Init+0x98>)
 800105e:	f001 f8b9 	bl	80021d4 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001068:	f000 f9f0 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000290 	.word	0x20000290
 8001078:	40012000 	.word	0x40012000
 800107c:	0f000001 	.word	0x0f000001

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f002 f931 	bl	8003324 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 f9c0 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000338 	.word	0x20000338
 80010d4:	40005400 	.word	0x40005400
 80010d8:	00061a80 	.word	0x00061a80

080010dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <MX_TIM2_Init+0xac>)
 8001100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001104:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_TIM2_Init+0xac>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM2_Init+0xac>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_TIM2_Init+0xac>)
 8001114:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001118:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_TIM2_Init+0xac>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_TIM2_Init+0xac>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001126:	4818      	ldr	r0, [pc, #96]	; (8001188 <MX_TIM2_Init+0xac>)
 8001128:	f003 fb2e 	bl	8004788 <HAL_TIM_OC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001132:	f000 f98b 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	4619      	mov	r1, r3
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <MX_TIM2_Init+0xac>)
 8001146:	f004 f93f 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001150:	f000 f97c 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001154:	2330      	movs	r3, #48	; 0x30
 8001156:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM2_Init+0xac>)
 800116c:	f003 fd14 	bl	8004b98 <HAL_TIM_OC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001176:	f000 f969 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM2_Init+0xac>)
 800117c:	f000 fd88 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000038c 	.word	0x2000038c

0800118c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
		//TIMER TRIGGER
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_TIM3_Init+0x94>)
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_TIM3_Init+0x98>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_TIM3_Init+0x94>)
 80011b0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_TIM3_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_TIM3_Init+0x94>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_TIM3_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_TIM3_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_TIM3_Init+0x94>)
 80011d2:	f003 f9cd 	bl	8004570 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011dc:	f000 f936 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_TIM3_Init+0x94>)
 80011ee:	f003 fd2f 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011f8:	f000 f928 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011fc:	2320      	movs	r3, #32
 80011fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_TIM3_Init+0x94>)
 800120a:	f004 f8dd 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001214:	f000 f91a 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003d4 	.word	0x200003d4
 8001224:	40000400 	.word	0x40000400

08001228 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_TIM5_Init+0x94>)
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <MX_TIM5_Init+0x98>)
 8001248:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM5_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM5_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM5_Init+0x94>)
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_TIM5_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM5_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_TIM5_Init+0x94>)
 800126c:	f003 f980 	bl	8004570 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f8e9 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM5_Init+0x94>)
 8001288:	f003 fce2 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001292:	f000 f8db 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM5_Init+0x94>)
 80012a4:	f004 f890 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012ae:	f000 f8cd 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000041c 	.word	0x2000041c
 80012c0:	40000c00 	.word	0x40000c00

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <MX_DMA_Init+0x3c>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_DMA_Init+0x3c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2038      	movs	r0, #56	; 0x38
 80012ec:	f001 faca 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f0:	2038      	movs	r0, #56	; 0x38
 80012f2:	f001 fae3 	bl	80028bc <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <MX_GPIO_Init+0x114>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <MX_GPIO_Init+0x114>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <MX_GPIO_Init+0x114>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_GPIO_Init+0x114>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a36      	ldr	r2, [pc, #216]	; (8001418 <MX_GPIO_Init+0x114>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_GPIO_Init+0x114>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <MX_GPIO_Init+0x114>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <MX_GPIO_Init+0x114>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MX_GPIO_Init+0x114>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_GPIO_Init+0x114>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <MX_GPIO_Init+0x114>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_GPIO_Init+0x114>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <MX_GPIO_Init+0x118>)
 8001390:	f001 ff96 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139a:	4820      	ldr	r0, [pc, #128]	; (800141c <MX_GPIO_Init+0x118>)
 800139c:	f001 ff90 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2128      	movs	r1, #40	; 0x28
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_GPIO_Init+0x11c>)
 80013a6:	f001 ff8b 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_GPIO_Init+0x120>)
 80013c2:	f001 fdf9 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 80013c6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <MX_GPIO_Init+0x118>)
 80013e0:	f001 fdea 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 80013e4:	2328      	movs	r3, #40	; 0x28
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <MX_GPIO_Init+0x11c>)
 80013fc:	f001 fddc 	bl	8002fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	2028      	movs	r0, #40	; 0x28
 8001406:	f001 fa3d 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140a:	2028      	movs	r0, #40	; 0x28
 800140c:	f001 fa56 	bl	80028bc <HAL_NVIC_EnableIRQ>

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020800 	.word	0x40020800

08001428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800143a:	f000 fd63 	bl	8001f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010000 	.word	0x40010000

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	e7fe      	b.n	8001454 <Error_Handler+0x8>
	...

08001458 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af04      	add	r7, sp, #16
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	2200      	movs	r2, #0
 8001474:	2178      	movs	r1, #120	; 0x78
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <ssd1306_WriteCommand+0x2c>)
 8001478:	f002 f898 	bl	80035ac <HAL_I2C_Mem_Write>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000338 	.word	0x20000338

08001488 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af04      	add	r7, sp, #16
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	9202      	str	r2, [sp, #8]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	2178      	movs	r1, #120	; 0x78
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <ssd1306_WriteData+0x30>)
 80014aa:	f002 f87f 	bl	80035ac <HAL_I2C_Mem_Write>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000338 	.word	0x20000338

080014bc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 fa85 	bl	80019d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014c6:	2020      	movs	r0, #32
 80014c8:	f7ff ffc6 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ffc3 	bl	8001458 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014d2:	20b0      	movs	r0, #176	; 0xb0
 80014d4:	f7ff ffc0 	bl	8001458 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014d8:	20c8      	movs	r0, #200	; 0xc8
 80014da:	f7ff ffbd 	bl	8001458 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ffba 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014e4:	2010      	movs	r0, #16
 80014e6:	f7ff ffb7 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014ea:	2040      	movs	r0, #64	; 0x40
 80014ec:	f7ff ffb4 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014f0:	20ff      	movs	r0, #255	; 0xff
 80014f2:	f000 fa59 	bl	80019a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014f6:	20a1      	movs	r0, #161	; 0xa1
 80014f8:	f7ff ffae 	bl	8001458 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014fc:	20a6      	movs	r0, #166	; 0xa6
 80014fe:	f7ff ffab 	bl	8001458 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001502:	20a8      	movs	r0, #168	; 0xa8
 8001504:	f7ff ffa8 	bl	8001458 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001508:	203f      	movs	r0, #63	; 0x3f
 800150a:	f7ff ffa5 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800150e:	20a4      	movs	r0, #164	; 0xa4
 8001510:	f7ff ffa2 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001514:	20d3      	movs	r0, #211	; 0xd3
 8001516:	f7ff ff9f 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ff9c 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001520:	20d5      	movs	r0, #213	; 0xd5
 8001522:	f7ff ff99 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001526:	20f0      	movs	r0, #240	; 0xf0
 8001528:	f7ff ff96 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800152c:	20d9      	movs	r0, #217	; 0xd9
 800152e:	f7ff ff93 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001532:	2022      	movs	r0, #34	; 0x22
 8001534:	f7ff ff90 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001538:	20da      	movs	r0, #218	; 0xda
 800153a:	f7ff ff8d 	bl	8001458 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800153e:	2012      	movs	r0, #18
 8001540:	f7ff ff8a 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001544:	20db      	movs	r0, #219	; 0xdb
 8001546:	f7ff ff87 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800154a:	2020      	movs	r0, #32
 800154c:	f7ff ff84 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001550:	208d      	movs	r0, #141	; 0x8d
 8001552:	f7ff ff81 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001556:	2014      	movs	r0, #20
 8001558:	f7ff ff7e 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800155c:	2001      	movs	r0, #1
 800155e:	f000 fa37 	bl	80019d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f810 	bl	8001588 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001568:	f000 f832 	bl	80015d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <ssd1306_Init+0xc8>)
 800156e:	2200      	movs	r2, #0
 8001570:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <ssd1306_Init+0xc8>)
 8001574:	2200      	movs	r2, #0
 8001576:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <ssd1306_Init+0xc8>)
 800157a:	2201      	movs	r2, #1
 800157c:	711a      	strb	r2, [r3, #4]
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000eac 	.word	0x20000eac

08001588 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e00d      	b.n	80015b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <ssd1306_Fill+0x1a>
 800159e:	2100      	movs	r1, #0
 80015a0:	e000      	b.n	80015a4 <ssd1306_Fill+0x1c>
 80015a2:	21ff      	movs	r1, #255	; 0xff
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <ssd1306_Fill+0x44>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d3ed      	bcc.n	8001598 <ssd1306_Fill+0x10>
    }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000aac 	.word	0x20000aac

080015d0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	e016      	b.n	800160a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	3b50      	subs	r3, #80	; 0x50
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff38 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff ff35 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015ee:	2010      	movs	r0, #16
 80015f0:	f7ff ff32 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <ssd1306_UpdateScreen+0x4c>)
 80015fa:	4413      	add	r3, r2
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff42 	bl	8001488 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3301      	adds	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b07      	cmp	r3, #7
 800160e:	d9e5      	bls.n	80015dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000aac 	.word	0x20000aac

08001620 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	460b      	mov	r3, r1
 800162c:	71bb      	strb	r3, [r7, #6]
 800162e:	4613      	mov	r3, r2
 8001630:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db3d      	blt.n	80016b6 <ssd1306_DrawPixel+0x96>
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	2b3f      	cmp	r3, #63	; 0x3f
 800163e:	d83a      	bhi.n	80016b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11a      	bne.n	800167c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	4603      	mov	r3, r0
 8001650:	01db      	lsls	r3, r3, #7
 8001652:	4413      	add	r3, r2
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <ssd1306_DrawPixel+0xa4>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	b25a      	sxtb	r2, r3
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b259      	sxtb	r1, r3
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	4603      	mov	r3, r0
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	4413      	add	r3, r2
 8001674:	b2c9      	uxtb	r1, r1
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <ssd1306_DrawPixel+0xa4>)
 8001678:	54d1      	strb	r1, [r2, r3]
 800167a:	e01d      	b.n	80016b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	4603      	mov	r3, r0
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4413      	add	r3, r2
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <ssd1306_DrawPixel+0xa4>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	b25a      	sxtb	r2, r3
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	b25b      	sxtb	r3, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	4013      	ands	r3, r2
 80016a4:	b259      	sxtb	r1, r3
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	4603      	mov	r3, r0
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4413      	add	r3, r2
 80016ae:	b2c9      	uxtb	r1, r1
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <ssd1306_DrawPixel+0xa4>)
 80016b2:	54d1      	strb	r1, [r2, r3]
 80016b4:	e000      	b.n	80016b8 <ssd1306_DrawPixel+0x98>
        return;
 80016b6:	bf00      	nop
    }
}
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000aac 	.word	0x20000aac

080016c8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	1d38      	adds	r0, r7, #4
 80016d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80016d6:	461a      	mov	r2, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	4613      	mov	r3, r2
 80016de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b1f      	cmp	r3, #31
 80016e4:	d902      	bls.n	80016ec <ssd1306_WriteChar+0x24>
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ea:	d901      	bls.n	80016f0 <ssd1306_WriteChar+0x28>
        return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e06d      	b.n	80017cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	2b80      	cmp	r3, #128	; 0x80
 80016fc:	dc06      	bgt.n	800170c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	461a      	mov	r2, r3
 8001704:	797b      	ldrb	r3, [r7, #5]
 8001706:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001708:	2b40      	cmp	r3, #64	; 0x40
 800170a:	dd01      	ble.n	8001710 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e05d      	b.n	80017cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	e04c      	b.n	80017b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	3b20      	subs	r3, #32
 800171c:	7979      	ldrb	r1, [r7, #5]
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4619      	mov	r1, r3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	440b      	add	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	e034      	b.n	80017a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	7bba      	ldrb	r2, [r7, #14]
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff ff5b 	bl	8001620 <ssd1306_DrawPixel>
 800176a:	e016      	b.n	800179a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4413      	add	r3, r2
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2d9      	uxtb	r1, r3
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	f7ff ff43 	bl	8001620 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3301      	adds	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d3c5      	bcc.n	8001736 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	797b      	ldrb	r3, [r7, #5]
 80017b2:	461a      	mov	r2, r3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d3ad      	bcc.n	8001716 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 80017bc:	881a      	ldrh	r2, [r3, #0]
 80017be:	793b      	ldrb	r3, [r7, #4]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <ssd1306_WriteChar+0x10c>)
 80017c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3724      	adds	r7, #36	; 0x24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	20000eac 	.word	0x20000eac

080017d8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	1d38      	adds	r0, r7, #4
 80017e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80017e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80017e8:	e012      	b.n	8001810 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	7818      	ldrb	r0, [r3, #0]
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	1d3a      	adds	r2, r7, #4
 80017f2:	ca06      	ldmia	r2, {r1, r2}
 80017f4:	f7ff ff68 	bl	80016c8 <ssd1306_WriteChar>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d002      	beq.n	800180a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	e008      	b.n	800181c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <ssd1306_SetCursor+0x2c>)
 800183a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <ssd1306_SetCursor+0x2c>)
 8001842:	805a      	strh	r2, [r3, #2]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000eac 	.word	0x20000eac

08001854 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	4603      	mov	r3, r0
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	717b      	strb	r3, [r7, #5]
 800186e:	4613      	mov	r3, r2
 8001870:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001872:	797a      	ldrb	r2, [r7, #5]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	425b      	neglt	r3, r3
 800187e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001880:	793a      	ldrb	r2, [r7, #4]
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	bfb8      	it	lt
 800188a:	425b      	neglt	r3, r3
 800188c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	429a      	cmp	r2, r3
 8001894:	d201      	bcs.n	800189a <ssd1306_Line+0x46>
 8001896:	2301      	movs	r3, #1
 8001898:	e001      	b.n	800189e <ssd1306_Line+0x4a>
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80018a0:	79ba      	ldrb	r2, [r7, #6]
 80018a2:	793b      	ldrb	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d201      	bcs.n	80018ac <ssd1306_Line+0x58>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e001      	b.n	80018b0 <ssd1306_Line+0x5c>
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80018ba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018be:	7939      	ldrb	r1, [r7, #4]
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff feac 	bl	8001620 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80018c8:	e024      	b.n	8001914 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80018ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018ce:	79b9      	ldrb	r1, [r7, #6]
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fea4 	bl	8001620 <ssd1306_DrawPixel>
    error2 = error * 2;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	425b      	negs	r3, r3
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd08      	ble.n	80018fa <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4413      	add	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	429a      	cmp	r2, r3
 8001900:	da08      	bge.n	8001914 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	4413      	add	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	797b      	ldrb	r3, [r7, #5]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1d6      	bne.n	80018ca <ssd1306_Line+0x76>
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1d2      	bne.n	80018ca <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001924:	bf00      	nop
}
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af02      	add	r7, sp, #8
 8001932:	4604      	mov	r4, r0
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	4603      	mov	r3, r0
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	460b      	mov	r3, r1
 8001944:	717b      	strb	r3, [r7, #5]
 8001946:	4613      	mov	r3, r2
 8001948:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	4413      	add	r3, r2
 8001950:	b2dc      	uxtb	r4, r3
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	79b9      	ldrb	r1, [r7, #6]
 8001956:	79f8      	ldrb	r0, [r7, #7]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4623      	mov	r3, r4
 800195e:	f7ff ff79 	bl	8001854 <ssd1306_Line>
	return;
 8001962:	bf00      	nop
}
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}

0800196a <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800196a:	b590      	push	{r4, r7, lr}
 800196c:	b085      	sub	sp, #20
 800196e:	af02      	add	r7, sp, #8
 8001970:	4604      	mov	r4, r0
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	461a      	mov	r2, r3
 8001978:	4623      	mov	r3, r4
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	4603      	mov	r3, r0
 800197e:	71bb      	strb	r3, [r7, #6]
 8001980:	460b      	mov	r3, r1
 8001982:	717b      	strb	r3, [r7, #5]
 8001984:	4613      	mov	r3, r2
 8001986:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	4413      	add	r3, r2
 800198e:	b2da      	uxtb	r2, r3
 8001990:	79bc      	ldrb	r4, [r7, #6]
 8001992:	79b9      	ldrb	r1, [r7, #6]
 8001994:	79f8      	ldrb	r0, [r7, #7]
 8001996:	793b      	ldrb	r3, [r7, #4]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4623      	mov	r3, r4
 800199c:	f7ff ff5a 	bl	8001854 <ssd1306_Line>
	return;
 80019a0:	bf00      	nop
}
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019b2:	2381      	movs	r3, #129	; 0x81
 80019b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fd4d 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fd49 	bl	8001458 <ssd1306_WriteCommand>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019e0:	23af      	movs	r3, #175	; 0xaf
 80019e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <ssd1306_SetDisplayOn+0x38>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	715a      	strb	r2, [r3, #5]
 80019ea:	e004      	b.n	80019f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019ec:	23ae      	movs	r3, #174	; 0xae
 80019ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <ssd1306_SetDisplayOn+0x38>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fd2d 	bl	8001458 <ssd1306_WriteCommand>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000eac 	.word	0x20000eac

08001a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_MspInit+0x54>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_MspInit+0x54>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_MspInit+0x54>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_MspInit+0x54>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_MspInit+0x54>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_MspInit+0x54>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	f06f 0001 	mvn.w	r0, #1
 8001a52:	f000 ff17 	bl	8002884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2e      	ldr	r2, [pc, #184]	; (8001b3c <HAL_ADC_MspInit+0xd8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d156      	bne.n	8001b34 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a2c      	ldr	r2, [pc, #176]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_ADC_MspInit+0xdc>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481c      	ldr	r0, [pc, #112]	; (8001b44 <HAL_ADC_MspInit+0xe0>)
 8001ad2:	f001 fa71 	bl	8002fb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_ADC_MspInit+0xe8>)
 8001ada:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b1a:	f000 fedd 	bl	80028d8 <HAL_DMA_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b24:	f7ff fc92 	bl	800144c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_ADC_MspInit+0xe4>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	200002d8 	.word	0x200002d8
 8001b4c:	40026410 	.word	0x40026410

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_I2C_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480c      	ldr	r0, [pc, #48]	; (8001bdc <HAL_I2C_MspInit+0x8c>)
 8001bac:	f001 fa04 	bl	8002fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400

08001be0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d10d      	bne.n	8001c0e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_TIM_OC_MspInit+0x3c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_TIM_OC_MspInit+0x3c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_TIM_OC_MspInit+0x3c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <HAL_TIM_Base_MspInit+0x64>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c4e:	e012      	b.n	8001c76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_TIM_Base_MspInit+0x6c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10d      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_TIM_Base_MspInit+0x68>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40000c00 	.word	0x40000c00

08001c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_TIM_MspPostInit+0x68>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_TIM_MspPostInit+0x68>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_TIM_MspPostInit+0x68>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cec:	f001 f964 	bl	8002fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2c:	f107 020c 	add.w	r2, r7, #12
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fbe8 	bl	800450c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d3c:	f002 fbd2 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8001d40:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_InitTick+0xd4>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9b      	lsrs	r3, r3, #18
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d52:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <HAL_InitTick+0xdc>)
 8001d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d76:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d78:	f002 fbfa 	bl	8004570 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11b      	bne.n	8001dc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d8a:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001d8c:	f002 fc9a 	bl	80046c4 <HAL_TIM_Base_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d111      	bne.n	8001dc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d9e:	2019      	movs	r0, #25
 8001da0:	f000 fd8c 	bl	80028bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d808      	bhi.n	8001dbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001daa:	2200      	movs	r2, #0
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	2019      	movs	r0, #25
 8001db0:	f000 fd68 	bl	8002884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_InitTick+0xe0>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e002      	b.n	8001dc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3730      	adds	r7, #48	; 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	20000eb4 	.word	0x20000eb4
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	20000014 	.word	0x20000014

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x4>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e16:	f002 fdb7 	bl	8004988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000eb4 	.word	0x20000eb4

08001e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e2c:	f001 fa62 	bl	80032f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA2_Stream0_IRQHandler+0x10>)
 8001e3a:	f000 fe53 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002d8 	.word	0x200002d8

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffd7 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f004 fd77 	bl	800698c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7fe fffd 	bl	8000e9c <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001eb0:	080070d0 	.word	0x080070d0
  ldr r2, =_sbss
 8001eb4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001eb8:	20004c54 	.word	0x20004c54

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 fcc0 	bl	800286e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff ff06 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fd8a 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000018 	.word	0x20000018
 8001f28:	20000efc 	.word	0x20000efc

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000efc 	.word	0x20000efc

08001f44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e033      	b.n	8001fc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fd7e 	bl	8001a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d118      	bne.n	8001fb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa3e 	bl	8002418 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Start_DMA+0x1e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0ce      	b.n	8002188 <HAL_ADC_Start_DMA+0x1bc>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d018      	beq.n	8002032 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002010:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_ADC_Start_DMA+0x1c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5f      	ldr	r2, [pc, #380]	; (8002194 <HAL_ADC_Start_DMA+0x1c8>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9a      	lsrs	r2, r3, #18
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002024:	e002      	b.n	800202c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3b01      	subs	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f9      	bne.n	8002026 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002040:	d107      	bne.n	8002052 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002050:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 8086 	bne.w	800216e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800208c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d106      	bne.n	80020b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f023 0206 	bic.w	r2, r3, #6
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
 80020ae:	e002      	b.n	80020b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_ADC_Start_DMA+0x1cc>)
 80020c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_ADC_Start_DMA+0x1d0>)
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_ADC_Start_DMA+0x1d4>)
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_ADC_Start_DMA+0x1d8>)
 80020d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002102:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	334c      	adds	r3, #76	; 0x4c
 800210e:	4619      	mov	r1, r3
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f000 fc8e 	bl	8002a34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d129      	bne.n	8002186 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e020      	b.n	8002186 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_ADC_Start_DMA+0x1dc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11b      	bne.n	8002186 <HAL_ADC_Start_DMA+0x1ba>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d114      	bne.n	8002186 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00b      	b.n	8002186 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000010 	.word	0x20000010
 8002194:	431bde83 	.word	0x431bde83
 8002198:	40012300 	.word	0x40012300
 800219c:	08002611 	.word	0x08002611
 80021a0:	080026cb 	.word	0x080026cb
 80021a4:	080026e7 	.word	0x080026e7
 80021a8:	40012000 	.word	0x40012000

080021ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1c>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e105      	b.n	80023fc <HAL_ADC_ConfigChannel+0x228>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d925      	bls.n	800224c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	3b1e      	subs	r3, #30
 8002216:	2207      	movs	r2, #7
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68d9      	ldr	r1, [r3, #12]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	4603      	mov	r3, r0
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4403      	add	r3, r0
 800223e:	3b1e      	subs	r3, #30
 8002240:	409a      	lsls	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	e022      	b.n	8002292 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6919      	ldr	r1, [r3, #16]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	2207      	movs	r2, #7
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	4603      	mov	r3, r0
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4403      	add	r3, r0
 8002288:	409a      	lsls	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b06      	cmp	r3, #6
 8002298:	d824      	bhi.n	80022e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b05      	subs	r3, #5
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b05      	subs	r3, #5
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
 80022e2:	e04c      	b.n	800237e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d824      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b23      	subs	r3, #35	; 0x23
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43da      	mvns	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	400a      	ands	r2, r1
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b23      	subs	r3, #35	; 0x23
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
 8002334:	e023      	b.n	800237e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b41      	subs	r3, #65	; 0x41
 8002348:	221f      	movs	r2, #31
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	400a      	ands	r2, r1
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b41      	subs	r3, #65	; 0x41
 8002372:	fa00 f203 	lsl.w	r2, r0, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_ADC_ConfigChannel+0x234>)
 8002380:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_ADC_ConfigChannel+0x238>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1cc>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_ADC_ConfigChannel+0x238>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d123      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d003      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x1e6>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b11      	cmp	r3, #17
 80023b8:	d11b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_ADC_ConfigChannel+0x23c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_ADC_ConfigChannel+0x240>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012300 	.word	0x40012300
 800240c:	40012000 	.word	0x40012000
 8002410:	20000010 	.word	0x20000010
 8002414:	431bde83 	.word	0x431bde83

08002418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <ADC_Init+0x1f0>)
 8002422:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	4a58      	ldr	r2, [pc, #352]	; (800260c <ADC_Init+0x1f4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	e00f      	b.n	8002516 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002514:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0202 	bic.w	r2, r2, #2
 8002524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
 8002530:	005a      	lsls	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002552:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002562:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	3b01      	subs	r3, #1
 8002570:	035a      	lsls	r2, r3, #13
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e007      	b.n	800258c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	051a      	lsls	r2, r3, #20
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ce:	025a      	lsls	r2, r3, #9
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6899      	ldr	r1, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	029a      	lsls	r2, r3, #10
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40012300 	.word	0x40012300
 800260c:	0f000001 	.word	0x0f000001

08002610 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13c      	bne.n	80026a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12b      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d127      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002664:	2b00      	cmp	r3, #0
 8002666:	d119      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0220 	bic.w	r2, r2, #32
 8002676:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fe fba7 	bl	8000df0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026a2:	e00e      	b.n	80026c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff fd85 	bl	80021c0 <HAL_ADC_ErrorCallback>
}
 80026b6:	e004      	b.n	80026c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fd67 	bl	80021ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	; 0x40
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fd5a 	bl	80021c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff4c 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002896:	f7ff ff61 	bl	800275c <__NVIC_GetPriorityGrouping>
 800289a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7ff ffb1 	bl	8002808 <NVIC_EncodePriority>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff80 	bl	80027b4 <__NVIC_SetPriority>
}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff54 	bl	8002778 <__NVIC_EnableIRQ>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fb22 	bl	8001f2c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e099      	b.n	8002a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002914:	e00f      	b.n	8002936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002916:	f7ff fb09 	bl	8001f2c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b05      	cmp	r3, #5
 8002922:	d908      	bls.n	8002936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e078      	b.n	8002a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e8      	bne.n	8002916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_DMA_Init+0x158>)
 8002950:	4013      	ands	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2b04      	cmp	r3, #4
 800298e:	d107      	bne.n	80029a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4313      	orrs	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f023 0307 	bic.w	r3, r3, #7
 80029b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d117      	bne.n	80029fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00e      	beq.n	80029fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa6f 	bl	8002ec0 <DMA_CheckFifoParam>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029f6:	2301      	movs	r3, #1
 80029f8:	e016      	b.n	8002a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa26 	bl	8002e54 <DMA_CalcBaseAndBitshift>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	223f      	movs	r2, #63	; 0x3f
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	f010803f 	.word	0xf010803f

08002a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Start_IT+0x26>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e040      	b.n	8002adc <HAL_DMA_Start_IT+0xa8>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d12f      	bne.n	8002ace <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f9b8 	bl	8002df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	223f      	movs	r2, #63	; 0x3f
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0216 	orr.w	r2, r2, #22
 8002aa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0208 	orr.w	r2, r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e005      	b.n	8002ada <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002af0:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <HAL_DMA_IRQHandler+0x248>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a8e      	ldr	r2, [pc, #568]	; (8002d30 <HAL_DMA_IRQHandler+0x24c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a9b      	lsrs	r3, r3, #10
 8002afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2208      	movs	r2, #8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2201      	movs	r2, #1
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d012      	beq.n	8002bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2204      	movs	r2, #4
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d043      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03c      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	2210      	movs	r2, #16
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d024      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
 8002c12:	e01f      	b.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e016      	b.n	8002c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0208 	bic.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	2220      	movs	r2, #32
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 808f 	beq.w	8002d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8087 	beq.w	8002d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d136      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0216 	bic.w	r2, r2, #22
 8002c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x1da>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0208 	bic.w	r2, r2, #8
 8002ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	223f      	movs	r2, #63	; 0x3f
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d07e      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
        }
        return;
 8002cfa:	e079      	b.n	8002df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01d      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d031      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
 8002d28:	e02c      	b.n	8002d84 <HAL_DMA_IRQHandler+0x2a0>
 8002d2a:	bf00      	nop
 8002d2c:	20000010 	.word	0x20000010
 8002d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
 8002d44:	e01e      	b.n	8002d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0210 	bic.w	r2, r2, #16
 8002d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d032      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d022      	beq.n	8002dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2205      	movs	r2, #5
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3301      	adds	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d307      	bcc.n	8002dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f2      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x2cc>
 8002dca:	e000      	b.n	8002dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
 8002dee:	e000      	b.n	8002df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002df0:	bf00      	nop
    }
  }
}
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d108      	bne.n	8002e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e36:	e007      	b.n	8002e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3b10      	subs	r3, #16
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <DMA_CalcBaseAndBitshift+0x68>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d909      	bls.n	8002e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	1d1a      	adds	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	659a      	str	r2, [r3, #88]	; 0x58
 8002e94:	e007      	b.n	8002ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	aaaaaaab 	.word	0xaaaaaaab
 8002ebc:	080070b8 	.word	0x080070b8

08002ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d856      	bhi.n	8002f8e <DMA_CheckFifoParam+0xce>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x28>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f0b 	.word	0x08002f0b
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f8f 	.word	0x08002f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d046      	beq.n	8002f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e043      	b.n	8002f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f12:	d140      	bne.n	8002f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e03d      	b.n	8002f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d121      	bne.n	8002f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d837      	bhi.n	8002f9a <DMA_CheckFifoParam+0xda>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <DMA_CheckFifoParam+0x70>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f47 	.word	0x08002f47
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002f59 	.word	0x08002f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e030      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d025      	beq.n	8002f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f56:	e022      	b.n	8002f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f60:	d11f      	bne.n	8002fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f66:	e01c      	b.n	8002fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d903      	bls.n	8002f76 <DMA_CheckFifoParam+0xb6>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d003      	beq.n	8002f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f74:	e018      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7a:	e015      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e00b      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e00a      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e008      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e006      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e004      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e159      	b.n	8003288 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8148 	bne.w	8003282 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a2 	beq.w	8003282 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315a:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_GPIO_Init+0x2ec>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a49      	ldr	r2, [pc, #292]	; (80032a8 <HAL_GPIO_Init+0x2f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d019      	beq.n	80031ba <HAL_GPIO_Init+0x202>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a48      	ldr	r2, [pc, #288]	; (80032ac <HAL_GPIO_Init+0x2f4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_GPIO_Init+0x1fe>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a47      	ldr	r2, [pc, #284]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00d      	beq.n	80031b2 <HAL_GPIO_Init+0x1fa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a46      	ldr	r2, [pc, #280]	; (80032b4 <HAL_GPIO_Init+0x2fc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x1f6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a45      	ldr	r2, [pc, #276]	; (80032b8 <HAL_GPIO_Init+0x300>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_GPIO_Init+0x1f2>
 80031a6:	2304      	movs	r3, #4
 80031a8:	e008      	b.n	80031bc <HAL_GPIO_Init+0x204>
 80031aa:	2307      	movs	r3, #7
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x204>
 80031ae:	2303      	movs	r3, #3
 80031b0:	e004      	b.n	80031bc <HAL_GPIO_Init+0x204>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e002      	b.n	80031bc <HAL_GPIO_Init+0x204>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_GPIO_Init+0x204>
 80031ba:	2300      	movs	r3, #0
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f002 0203 	and.w	r2, r2, #3
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	4093      	lsls	r3, r2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031cc:	4935      	ldr	r1, [pc, #212]	; (80032a4 <HAL_GPIO_Init+0x2ec>)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b38      	ldr	r3, [pc, #224]	; (80032bc <HAL_GPIO_Init+0x304>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a2f      	ldr	r2, [pc, #188]	; (80032bc <HAL_GPIO_Init+0x304>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_GPIO_Init+0x304>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_GPIO_Init+0x304>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_GPIO_Init+0x304>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_GPIO_Init+0x304>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_GPIO_Init+0x304>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327c:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_GPIO_Init+0x304>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f aea2 	bls.w	8002fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40020000 	.word	0x40020000
 80032ac:	40020400 	.word	0x40020400
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fc56 	bl	8000bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e12b      	b.n	800358e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fc00 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003388:	f001 f898 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 800338c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a81      	ldr	r2, [pc, #516]	; (8003598 <HAL_I2C_Init+0x274>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d807      	bhi.n	80033a8 <HAL_I2C_Init+0x84>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a80      	ldr	r2, [pc, #512]	; (800359c <HAL_I2C_Init+0x278>)
 800339c:	4293      	cmp	r3, r2
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e006      	b.n	80033b6 <HAL_I2C_Init+0x92>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a7d      	ldr	r2, [pc, #500]	; (80035a0 <HAL_I2C_Init+0x27c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	bf94      	ite	ls
 80033b0:	2301      	movls	r3, #1
 80033b2:	2300      	movhi	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0e7      	b.n	800358e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a78      	ldr	r2, [pc, #480]	; (80035a4 <HAL_I2C_Init+0x280>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0c9b      	lsrs	r3, r3, #18
 80033c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a6a      	ldr	r2, [pc, #424]	; (8003598 <HAL_I2C_Init+0x274>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d802      	bhi.n	80033f8 <HAL_I2C_Init+0xd4>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	e009      	b.n	800340c <HAL_I2C_Init+0xe8>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_I2C_Init+0x284>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	3301      	adds	r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800341e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	495c      	ldr	r1, [pc, #368]	; (8003598 <HAL_I2C_Init+0x274>)
 8003428:	428b      	cmp	r3, r1
 800342a:	d819      	bhi.n	8003460 <HAL_I2C_Init+0x13c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e59      	subs	r1, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fbb1 f3f3 	udiv	r3, r1, r3
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003440:	400b      	ands	r3, r1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_I2C_Init+0x138>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e59      	subs	r1, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fbb1 f3f3 	udiv	r3, r1, r3
 8003454:	3301      	adds	r3, #1
 8003456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345a:	e051      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 800345c:	2304      	movs	r3, #4
 800345e:	e04f      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <HAL_I2C_Init+0x168>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1e58      	subs	r0, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e012      	b.n	80034b2 <HAL_I2C_Init+0x18e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	0099      	lsls	r1, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Init+0x196>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e022      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10e      	bne.n	80034e0 <HAL_I2C_Init+0x1bc>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1e58      	subs	r0, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	440b      	add	r3, r1
 80034d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	e00f      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	0099      	lsls	r1, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	6809      	ldr	r1, [r1, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800352e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6911      	ldr	r1, [r2, #16]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	430b      	orrs	r3, r1
 8003542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	000186a0 	.word	0x000186a0
 800359c:	001e847f 	.word	0x001e847f
 80035a0:	003d08ff 	.word	0x003d08ff
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	10624dd3 	.word	0x10624dd3

080035ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c6:	f7fe fcb1 	bl	8001f2c <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f040 80d9 	bne.w	800378c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2319      	movs	r3, #25
 80035e0:	2201      	movs	r2, #1
 80035e2:	496d      	ldr	r1, [pc, #436]	; (8003798 <HAL_I2C_Mem_Write+0x1ec>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f971 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0cc      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Mem_Write+0x56>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0c5      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d007      	beq.n	8003628 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2221      	movs	r2, #33	; 0x21
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a4d      	ldr	r2, [pc, #308]	; (800379c <HAL_I2C_Mem_Write+0x1f0>)
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800366a:	88f8      	ldrh	r0, [r7, #6]
 800366c:	893a      	ldrh	r2, [r7, #8]
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4603      	mov	r3, r0
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f890 	bl	80037a0 <I2C_RequestMemoryWrite>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d052      	beq.n	800372c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e081      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f9f2 	bl	8003a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d107      	bne.n	80036b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d11b      	bne.n	800372c <HAL_I2C_Mem_Write+0x180>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d017      	beq.n	800372c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1aa      	bne.n	800368a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f9de 	bl	8003afa <I2C_WaitOnBTFFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e016      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	00100002 	.word	0x00100002
 800379c:	ffff0000 	.word	0xffff0000

080037a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f878 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d103      	bne.n	80037fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e05f      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	492d      	ldr	r1, [pc, #180]	; (80038c8 <I2C_RequestMemoryWrite+0x128>)
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8b0 	bl	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e04c      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f91a 	bl	8003a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b04      	cmp	r3, #4
 8003850:	d107      	bne.n	8003862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e02b      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]
 8003876:	e021      	b.n	80038bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003878:	893b      	ldrh	r3, [r7, #8]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29b      	uxth	r3, r3
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8f4 	bl	8003a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e005      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b2:	893b      	ldrh	r3, [r7, #8]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	00010002 	.word	0x00010002

080038cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038dc:	e025      	b.n	800392a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d021      	beq.n	800392a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fb21 	bl	8001f2c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e023      	b.n	8003972 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10d      	bne.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	e00c      	b.n	800396a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	429a      	cmp	r2, r3
 800396e:	d0b6      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003988:	e051      	b.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d123      	bne.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e046      	b.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d021      	beq.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe fa9f 	bl	8001f2c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e020      	b.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10c      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e00b      	b.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d18d      	bne.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a84:	e02d      	b.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f878 	bl	8003b7c <I2C_IsAcknowledgeFailed>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e02d      	b.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d021      	beq.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe fa45 	bl	8001f2c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e007      	b.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	d1ca      	bne.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b06:	e02d      	b.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f837 	bl	8003b7c <I2C_IsAcknowledgeFailed>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e02d      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d021      	beq.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7fe fa04 	bl	8001f2c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e007      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d1ca      	bne.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b92:	d11b      	bne.n	8003bcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e267      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e242      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b69      	ldr	r3, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a68      	ldr	r2, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe f94a 	bl	8001f2c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe f946 	bl	8001f2c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e207      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f936 	bl	8001f2c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe f932 	bl	8001f2c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f3      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b51      	ldr	r3, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe f8eb 	bl	8001f2c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe f8e7 	bl	8001f2c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f8ca 	bl	8001f2c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fe f8c6 	bl	8001f2c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e187      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fe f8aa 	bl	8001f2c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fe f8a6 	bl	8001f2c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e167      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fe f893 	bl	8001f2c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00e      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fe f88f 	bl	8001f2c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d907      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e150      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ea      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8097 	beq.w	8003f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b77      	ldr	r3, [pc, #476]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b74      	ldr	r3, [pc, #464]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a73      	ldr	r2, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe f84f 	bl	8001f2c <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fe f84b 	bl	8001f2c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e10c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ea>
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a63      	ldr	r2, [pc, #396]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x30c>
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a5b      	ldr	r2, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ee8:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	4b55      	ldr	r3, [pc, #340]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a54      	ldr	r2, [pc, #336]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fe f810 	bl	8001f2c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fe f80c 	bl	8001f2c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0cb      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCC_OscConfig+0x334>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd fffa 	bl	8001f2c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fff6 	bl	8001f2c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0b5      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	4b3e      	ldr	r3, [pc, #248]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a1 	beq.w	80040bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d05c      	beq.n	8004040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d141      	bne.n	8004012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd ffca 	bl	8001f2c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd ffc6 	bl	8001f2c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e087      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fd ff9f 	bl	8001f2c <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd ff9b 	bl	8001f2c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e05c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x416>
 8004010:	e054      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd ff88 	bl	8001f2c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ff84 	bl	8001f2c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x444>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d121      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fd feb6 	bl	8001f2c <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd feb2 	bl	8001f2c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd fd44 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	080070a0 	.word	0x080070a0
 8004290:	20000010 	.word	0x20000010
 8004294:	20000014 	.word	0x20000014

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b094      	sub	sp, #80	; 0x50
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	2300      	movs	r3, #0
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80e1 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e0db      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042d0:	e0db      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d6:	e0d8      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4621      	mov	r1, r4
 8004324:	1a51      	subs	r1, r2, r1
 8004326:	6139      	str	r1, [r7, #16]
 8004328:	4629      	mov	r1, r5
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800433c:	4659      	mov	r1, fp
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4651      	mov	r1, sl
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4651      	mov	r1, sl
 800434c:	ebb2 0801 	subs.w	r8, r2, r1
 8004350:	4659      	mov	r1, fp
 8004352:	eb63 0901 	sbc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	462b      	mov	r3, r5
 8004378:	eb49 0303 	adc.w	r3, r9, r3
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438a:	4629      	mov	r1, r5
 800438c:	024b      	lsls	r3, r1, #9
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004394:	4621      	mov	r1, r4
 8004396:	024a      	lsls	r2, r1, #9
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a8:	f7fb ff1a 	bl	80001e0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e058      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	4611      	mov	r1, r2
 80043c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0159      	lsls	r1, r3, #5
 80043de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e2:	0150      	lsls	r0, r2, #5
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4641      	mov	r1, r8
 80043ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ee:	4649      	mov	r1, r9
 80043f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004408:	ebb2 040a 	subs.w	r4, r2, sl
 800440c:	eb63 050b 	sbc.w	r5, r3, fp
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	00eb      	lsls	r3, r5, #3
 800441a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441e:	00e2      	lsls	r2, r4, #3
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	4643      	mov	r3, r8
 8004426:	18e3      	adds	r3, r4, r3
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	464b      	mov	r3, r9
 800442c:	eb45 0303 	adc.w	r3, r5, r3
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443e:	4629      	mov	r1, r5
 8004440:	028b      	lsls	r3, r1, #10
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004448:	4621      	mov	r1, r4
 800444a:	028a      	lsls	r2, r1, #10
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fb fec0 	bl	80001e0 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004482:	e002      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800448c:	4618      	mov	r0, r3
 800448e:	3750      	adds	r7, #80	; 0x50
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000010 	.word	0x20000010

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	080070b0 	.word	0x080070b0

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffdc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	080070b0 	.word	0x080070b0

0800450c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	220f      	movs	r2, #15
 800451a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	08db      	lsrs	r3, r3, #3
 8004546:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <HAL_RCC_GetClockConfig+0x60>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	40023c00 	.word	0x40023c00

08004570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e041      	b.n	8004606 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fb42 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 fc3e 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d001      	beq.n	8004628 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e03c      	b.n	80046a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_TIM_Base_Start+0xa0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_Base_Start+0x5c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d013      	beq.n	800466c <HAL_TIM_Base_Start+0x5c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_TIM_Base_Start+0xa4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start+0x5c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_TIM_Base_Start+0xa8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start+0x5c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a17      	ldr	r2, [pc, #92]	; (80046bc <HAL_TIM_Base_Start+0xac>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start+0x5c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <HAL_TIM_Base_Start+0xb0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000

080046c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e044      	b.n	8004766 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_TIM_Base_Start_IT+0xb0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x6c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x6c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_TIM_Base_Start_IT+0xb4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x6c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_Base_Start_IT+0xb8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x6c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a17      	ldr	r2, [pc, #92]	; (8004780 <HAL_TIM_Base_Start_IT+0xbc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x6c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_TIM_Base_Start_IT+0xc0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d111      	bne.n	8004754 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d010      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e007      	b.n	8004764 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40014000 	.word	0x40014000

08004788 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e041      	b.n	800481e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fa16 	bl	8001be0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 fb32 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_TIM_OC_Start+0x24>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e022      	b.n	8004892 <HAL_TIM_OC_Start+0x6a>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d109      	bne.n	8004866 <HAL_TIM_OC_Start+0x3e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	bf14      	ite	ne
 800485e:	2301      	movne	r3, #1
 8004860:	2300      	moveq	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e015      	b.n	8004892 <HAL_TIM_OC_Start+0x6a>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d109      	bne.n	8004880 <HAL_TIM_OC_Start+0x58>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e008      	b.n	8004892 <HAL_TIM_OC_Start+0x6a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e068      	b.n	800496c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_OC_Start+0x82>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	e013      	b.n	80048d2 <HAL_TIM_OC_Start+0xaa>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_OC_Start+0x92>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b8:	e00b      	b.n	80048d2 <HAL_TIM_OC_Start+0xaa>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_OC_Start+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	e003      	b.n	80048d2 <HAL_TIM_OC_Start+0xaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fd4e 	bl	800537c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <HAL_TIM_OC_Start+0x14c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d107      	bne.n	80048fa <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_TIM_OC_Start+0x14c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_TIM_OC_Start+0x10e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d013      	beq.n	8004936 <HAL_TIM_OC_Start+0x10e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_TIM_OC_Start+0x150>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIM_OC_Start+0x10e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <HAL_TIM_OC_Start+0x154>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_TIM_OC_Start+0x10e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_TIM_OC_Start+0x158>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIM_OC_Start+0x10e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <HAL_TIM_OC_Start+0x15c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d111      	bne.n	800495a <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d010      	beq.n	800496a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e007      	b.n	800496a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40010000 	.word	0x40010000
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40000c00 	.word	0x40000c00
 8004984:	40014000 	.word	0x40014000

08004988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0202 	mvn.w	r2, #2
 80049b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fa11 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa03 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fa14 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0204 	mvn.w	r2, #4
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9e7 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9d9 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9ea 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0208 	mvn.w	r2, #8
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2204      	movs	r2, #4
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9bd 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9af 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f9c0 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f993 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f985 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f996 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0201 	mvn.w	r2, #1
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc fc8e 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fcc0 	bl	80054b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f95b 	bl	8004e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0220 	mvn.w	r2, #32
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fc8a 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e048      	b.n	8004c48 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d839      	bhi.n	8004c38 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c39 	.word	0x08004c39
 8004bd8:	08004c39 	.word	0x08004c39
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c39 	.word	0x08004c39
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c2b 	.word	0x08004c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f992 	bl	8004f30 <TIM_OC1_SetConfig>
      break;
 8004c0c:	e017      	b.n	8004c3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f9f1 	bl	8004ffc <TIM_OC2_SetConfig>
      break;
 8004c1a:	e010      	b.n	8004c3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fa56 	bl	80050d4 <TIM_OC3_SetConfig>
      break;
 8004c28:	e009      	b.n	8004c3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fab9 	bl	80051a8 <TIM_OC4_SetConfig>
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0b4      	b.n	8004dd6 <HAL_TIM_ConfigClockSource+0x186>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca4:	d03e      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004caa:	f200 8087 	bhi.w	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	f000 8086 	beq.w	8004dc2 <HAL_TIM_ConfigClockSource+0x172>
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d87f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b70      	cmp	r3, #112	; 0x70
 8004cbe:	d01a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d87b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b60      	cmp	r3, #96	; 0x60
 8004cc6:	d050      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x11a>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d877      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b50      	cmp	r3, #80	; 0x50
 8004cce:	d03c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xfa>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d873      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d058      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x13a>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d86f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b30      	cmp	r3, #48	; 0x30
 8004cde:	d064      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d86b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d060      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d867      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d05a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	e062      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f000 fb19 	bl	800533c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	609a      	str	r2, [r3, #8]
      break;
 8004d22:	e04f      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f000 fb02 	bl	800533c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e03c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa76 	bl	8005248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2150      	movs	r1, #80	; 0x50
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 facf 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d68:	e02c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 fa95 	bl	80052a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2160      	movs	r1, #96	; 0x60
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fabf 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d88:	e01c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fa56 	bl	8005248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 faaf 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e00c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f000 faa6 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004dba:	e003      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <TIM_Base_SetConfig+0xe4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <TIM_Base_SetConfig+0xe8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a30      	ldr	r2, [pc, #192]	; (8004f1c <TIM_Base_SetConfig+0xec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <TIM_Base_SetConfig+0xf0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <TIM_Base_SetConfig+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <TIM_Base_SetConfig+0xe8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <TIM_Base_SetConfig+0xec>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <TIM_Base_SetConfig+0xf0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <TIM_Base_SetConfig+0xf4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <TIM_Base_SetConfig+0xf8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <TIM_Base_SetConfig+0xfc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <TIM_Base_SetConfig+0xe4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	615a      	str	r2, [r3, #20]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d111      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40010000 	.word	0x40010000

08004ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0320 	bic.w	r3, r3, #32
 8005046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <TIM_OC2_SetConfig+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <TIM_OC2_SetConfig+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000

080050d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <TIM_OC3_SetConfig+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10d      	bne.n	800514e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <TIM_OC3_SetConfig+0xd0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40010000 	.word	0x40010000

080051a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <TIM_OC4_SetConfig+0x9c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d109      	bne.n	800521c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000

08005248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 030a 	bic.w	r3, r3, #10
 8005284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0210 	bic.w	r2, r3, #16
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	f043 0307 	orr.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	431a      	orrs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2201      	movs	r2, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1a      	ldr	r2, [r3, #32]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e050      	b.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d013      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a15      	ldr	r2, [pc, #84]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10c      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4313      	orrs	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f103 0208 	add.w	r2, r3, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f103 0208 	add.w	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f103 0208 	add.w	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d103      	bne.n	800558e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e00c      	b.n	80055a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3308      	adds	r3, #8
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <vListInsert+0x2e>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d2f6      	bcs.n	8005596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6852      	ldr	r2, [r2, #4]
 8005600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d103      	bne.n	8005614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1e5a      	subs	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af04      	add	r7, sp, #16
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xTaskCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61fb      	str	r3, [r7, #28]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567a:	2354      	movs	r3, #84	; 0x54
 800567c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b54      	cmp	r3, #84	; 0x54
 8005682:	d00a      	beq.n	800569a <xTaskCreateStatic+0x66>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800569a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <xTaskCreateStatic+0xac>
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ba:	2300      	movs	r3, #0
 80056bc:	9303      	str	r3, [sp, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f850 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056da:	f000 f8d5 	bl	8005888 <prvAddNewTaskToReadyList>
 80056de:	e001      	b.n	80056e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08c      	sub	sp, #48	; 0x30
 80056f2:	af04      	add	r7, sp, #16
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4618      	mov	r0, r3
 8005704:	f000 ff58 	bl	80065b8 <pvPortMalloc>
 8005708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005710:	2054      	movs	r0, #84	; 0x54
 8005712:	f000 ff51 	bl	80065b8 <pvPortMalloc>
 8005716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
 8005724:	e005      	b.n	8005732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f001 f812 	bl	8006750 <vPortFree>
 800572c:	e001      	b.n	8005732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f80e 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575c:	69f8      	ldr	r0, [r7, #28]
 800575e:	f000 f893 	bl	8005888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e002      	b.n	800576e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576e:	69bb      	ldr	r3, [r7, #24]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005790:	3b01      	subs	r3, #1
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	617b      	str	r3, [r7, #20]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01f      	beq.n	8005806 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e012      	b.n	80057f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	7819      	ldrb	r1, [r3, #0]
 80057d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	3334      	adds	r3, #52	; 0x34
 80057dc:	460a      	mov	r2, r1
 80057de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d006      	beq.n	80057fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b0f      	cmp	r3, #15
 80057f6:	d9e9      	bls.n	80057cc <prvInitialiseNewTask+0x54>
 80057f8:	e000      	b.n	80057fc <prvInitialiseNewTask+0x84>
			{
				break;
 80057fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005804:	e003      	b.n	800580e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2b06      	cmp	r3, #6
 8005812:	d901      	bls.n	8005818 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005814:	2306      	movs	r3, #6
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	2200      	movs	r2, #0
 8005828:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe6c 	bl	800550c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fe67 	bl	800550c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f1c3 0207 	rsb	r2, r3, #7
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2200      	movs	r2, #0
 8005858:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	68f9      	ldr	r1, [r7, #12]
 8005866:	69b8      	ldr	r0, [r7, #24]
 8005868:	f000 fc96 	bl	8006198 <pxPortInitialiseStack>
 800586c:	4602      	mov	r2, r0
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800587e:	bf00      	nop
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005890:	f000 fdb0 	bl	80063f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <prvAddNewTaskToReadyList+0xb8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	4a29      	ldr	r2, [pc, #164]	; (8005940 <prvAddNewTaskToReadyList+0xb8>)
 800589c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <prvAddNewTaskToReadyList+0xbc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058a6:	4a27      	ldr	r2, [pc, #156]	; (8005944 <prvAddNewTaskToReadyList+0xbc>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058ac:	4b24      	ldr	r3, [pc, #144]	; (8005940 <prvAddNewTaskToReadyList+0xb8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d110      	bne.n	80058d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058b4:	f000 fb4c 	bl	8005f50 <prvInitialiseTaskLists>
 80058b8:	e00d      	b.n	80058d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <prvAddNewTaskToReadyList+0xc0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058c2:	4b20      	ldr	r3, [pc, #128]	; (8005944 <prvAddNewTaskToReadyList+0xbc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d802      	bhi.n	80058d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <prvAddNewTaskToReadyList+0xbc>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058d6:	4b1d      	ldr	r3, [pc, #116]	; (800594c <prvAddNewTaskToReadyList+0xc4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <prvAddNewTaskToReadyList+0xc4>)
 80058de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	2201      	movs	r2, #1
 80058e6:	409a      	lsls	r2, r3
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <prvAddNewTaskToReadyList+0xc8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	4a18      	ldr	r2, [pc, #96]	; (8005950 <prvAddNewTaskToReadyList+0xc8>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <prvAddNewTaskToReadyList+0xcc>)
 8005900:	441a      	add	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f7ff fe0c 	bl	8005526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800590e:	f000 fda1 	bl	8006454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005912:	4b0d      	ldr	r3, [pc, #52]	; (8005948 <prvAddNewTaskToReadyList+0xc0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <prvAddNewTaskToReadyList+0xbc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	429a      	cmp	r2, r3
 8005926:	d207      	bcs.n	8005938 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <prvAddNewTaskToReadyList+0xd0>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20001000 	.word	0x20001000
 8005944:	20000f00 	.word	0x20000f00
 8005948:	2000100c 	.word	0x2000100c
 800594c:	2000101c 	.word	0x2000101c
 8005950:	20001008 	.word	0x20001008
 8005954:	20000f04 	.word	0x20000f04
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005964:	f000 fd46 	bl	80063f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <vTaskDelete+0x18>
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <vTaskDelete+0xf8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	e000      	b.n	8005976 <vTaskDelete+0x1a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fe2f 	bl	80055e0 <uxListRemove>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d115      	bne.n	80059b4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	4932      	ldr	r1, [pc, #200]	; (8005a58 <vTaskDelete+0xfc>)
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <vTaskDelete+0x58>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43da      	mvns	r2, r3
 80059aa:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <vTaskDelete+0x100>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4013      	ands	r3, r2
 80059b0:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <vTaskDelete+0x100>)
 80059b2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3318      	adds	r3, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fe0d 	bl	80055e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <vTaskDelete+0x104>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <vTaskDelete+0x104>)
 80059ce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80059d0:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <vTaskDelete+0xf8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d10b      	bne.n	80059f2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4820      	ldr	r0, [pc, #128]	; (8005a64 <vTaskDelete+0x108>)
 80059e2:	f7ff fda0 	bl	8005526 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <vTaskDelete+0x10c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <vTaskDelete+0x10c>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e009      	b.n	8005a06 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80059f2:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <vTaskDelete+0x110>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <vTaskDelete+0x110>)
 80059fa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fb15 	bl	800602c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005a02:	f000 fb43 	bl	800608c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005a06:	f000 fd25 	bl	8006454 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005a0a:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <vTaskDelete+0x114>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <vTaskDelete+0xf8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d116      	bne.n	8005a4a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a1c:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <vTaskDelete+0x118>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <vTaskDelete+0xde>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	60bb      	str	r3, [r7, #8]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <vTaskDelete+0x11c>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000f00 	.word	0x20000f00
 8005a58:	20000f04 	.word	0x20000f04
 8005a5c:	20001008 	.word	0x20001008
 8005a60:	2000101c 	.word	0x2000101c
 8005a64:	20000fd4 	.word	0x20000fd4
 8005a68:	20000fe8 	.word	0x20000fe8
 8005a6c:	20001000 	.word	0x20001000
 8005a70:	2000100c 	.word	0x2000100c
 8005a74:	20001028 	.word	0x20001028
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d017      	beq.n	8005abe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <vTaskDelay+0x60>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <vTaskDelay+0x30>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60bb      	str	r3, [r7, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005aac:	f000 f87a 	bl	8005ba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fb0a 	bl	80060cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ab8:	f000 f882 	bl	8005bc0 <xTaskResumeAll>
 8005abc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <vTaskDelay+0x64>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20001028 	.word	0x20001028
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005af2:	463a      	mov	r2, r7
 8005af4:	1d39      	adds	r1, r7, #4
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fa fcf2 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	9202      	str	r2, [sp, #8]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	460a      	mov	r2, r1
 8005b12:	491e      	ldr	r1, [pc, #120]	; (8005b8c <vTaskStartScheduler+0xa8>)
 8005b14:	481e      	ldr	r0, [pc, #120]	; (8005b90 <vTaskStartScheduler+0xac>)
 8005b16:	f7ff fd8d 	bl	8005634 <xTaskCreateStatic>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <vTaskStartScheduler+0xb0>)
 8005b1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b20:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <vTaskStartScheduler+0xb0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e001      	b.n	8005b32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d116      	bne.n	8005b66 <vTaskStartScheduler+0x82>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	613b      	str	r3, [r7, #16]
}
 8005b4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b4c:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <vTaskStartScheduler+0xb4>)
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b54:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <vTaskStartScheduler+0xb8>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <vTaskStartScheduler+0xbc>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b60:	f000 fba6 	bl	80062b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b64:	e00e      	b.n	8005b84 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d10a      	bne.n	8005b84 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60fb      	str	r3, [r7, #12]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vTaskStartScheduler+0x9e>
}
 8005b84:	bf00      	nop
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	08006aa8 	.word	0x08006aa8
 8005b90:	08005f21 	.word	0x08005f21
 8005b94:	20001024 	.word	0x20001024
 8005b98:	20001020 	.word	0x20001020
 8005b9c:	2000100c 	.word	0x2000100c
 8005ba0:	20001004 	.word	0x20001004

08005ba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <vTaskSuspendAll+0x18>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	4a03      	ldr	r2, [pc, #12]	; (8005bbc <vTaskSuspendAll+0x18>)
 8005bb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bb2:	bf00      	nop
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	20001028 	.word	0x20001028

08005bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <xTaskResumeAll+0x114>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <xTaskResumeAll+0x2c>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	603b      	str	r3, [r7, #0]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bec:	f000 fc02 	bl	80063f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bf0:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <xTaskResumeAll+0x114>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	4a37      	ldr	r2, [pc, #220]	; (8005cd4 <xTaskResumeAll+0x114>)
 8005bf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <xTaskResumeAll+0x114>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d161      	bne.n	8005cc6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c02:	4b35      	ldr	r3, [pc, #212]	; (8005cd8 <xTaskResumeAll+0x118>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d05d      	beq.n	8005cc6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c0a:	e02e      	b.n	8005c6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0c:	4b33      	ldr	r3, [pc, #204]	; (8005cdc <xTaskResumeAll+0x11c>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3318      	adds	r3, #24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fce1 	bl	80055e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fcdc 	bl	80055e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <xTaskResumeAll+0x120>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <xTaskResumeAll+0x120>)
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a27      	ldr	r2, [pc, #156]	; (8005ce4 <xTaskResumeAll+0x124>)
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7ff fc68 	bl	8005526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4b23      	ldr	r3, [pc, #140]	; (8005ce8 <xTaskResumeAll+0x128>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <xTaskResumeAll+0x12c>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c6a:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <xTaskResumeAll+0x11c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1cc      	bne.n	8005c0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c78:	f000 fa08 	bl	800608c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <xTaskResumeAll+0x130>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c88:	f000 f836 	bl	8005cf8 <xTaskIncrementTick>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c92:	4b16      	ldr	r3, [pc, #88]	; (8005cec <xTaskResumeAll+0x12c>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f1      	bne.n	8005c88 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ca4:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <xTaskResumeAll+0x130>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <xTaskResumeAll+0x12c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <xTaskResumeAll+0x134>)
 8005cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f000 fbc5 	bl	8006454 <vPortExitCritical>

	return xAlreadyYielded;
 8005cca:	68bb      	ldr	r3, [r7, #8]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20001028 	.word	0x20001028
 8005cd8:	20001000 	.word	0x20001000
 8005cdc:	20000fc0 	.word	0x20000fc0
 8005ce0:	20001008 	.word	0x20001008
 8005ce4:	20000f04 	.word	0x20000f04
 8005ce8:	20000f00 	.word	0x20000f00
 8005cec:	20001014 	.word	0x20001014
 8005cf0:	20001010 	.word	0x20001010
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d02:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <xTaskIncrementTick+0x144>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 808e 	bne.w	8005e28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d0c:	4b4c      	ldr	r3, [pc, #304]	; (8005e40 <xTaskIncrementTick+0x148>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d14:	4a4a      	ldr	r2, [pc, #296]	; (8005e40 <xTaskIncrementTick+0x148>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d120      	bne.n	8005d62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d20:	4b48      	ldr	r3, [pc, #288]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <xTaskIncrementTick+0x46>
 8005d40:	4b40      	ldr	r3, [pc, #256]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <xTaskIncrementTick+0x150>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <xTaskIncrementTick+0x154>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <xTaskIncrementTick+0x154>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	f000 f995 	bl	800608c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <xTaskIncrementTick+0x158>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d348      	bcc.n	8005dfe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6c:	4b35      	ldr	r3, [pc, #212]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <xTaskIncrementTick+0x158>)
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	601a      	str	r2, [r3, #0]
					break;
 8005d7e:	e03e      	b.n	8005dfe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <xTaskIncrementTick+0x14c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d203      	bcs.n	8005da0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d98:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <xTaskIncrementTick+0x158>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d9e:	e02e      	b.n	8005dfe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fc1b 	bl	80055e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3318      	adds	r3, #24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fc12 	bl	80055e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <xTaskIncrementTick+0x15c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	4a22      	ldr	r2, [pc, #136]	; (8005e54 <xTaskIncrementTick+0x15c>)
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <xTaskIncrementTick+0x160>)
 8005ddc:	441a      	add	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7ff fb9e 	bl	8005526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <xTaskIncrementTick+0x164>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3b9      	bcc.n	8005d6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfc:	e7b6      	b.n	8005d6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dfe:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <xTaskIncrementTick+0x164>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4914      	ldr	r1, [pc, #80]	; (8005e58 <xTaskIncrementTick+0x160>)
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d901      	bls.n	8005e1a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <xTaskIncrementTick+0x168>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e004      	b.n	8005e32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <xTaskIncrementTick+0x16c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <xTaskIncrementTick+0x16c>)
 8005e30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e32:	697b      	ldr	r3, [r7, #20]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20001028 	.word	0x20001028
 8005e40:	20001004 	.word	0x20001004
 8005e44:	20000fb8 	.word	0x20000fb8
 8005e48:	20000fbc 	.word	0x20000fbc
 8005e4c:	20001018 	.word	0x20001018
 8005e50:	20001020 	.word	0x20001020
 8005e54:	20001008 	.word	0x20001008
 8005e58:	20000f04 	.word	0x20000f04
 8005e5c:	20000f00 	.word	0x20000f00
 8005e60:	20001014 	.word	0x20001014
 8005e64:	20001010 	.word	0x20001010

08005e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <vTaskSwitchContext+0xa4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e76:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <vTaskSwitchContext+0xa8>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e7c:	e03f      	b.n	8005efe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <vTaskSwitchContext+0xa8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e84:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <vTaskSwitchContext+0xac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	fab3 f383 	clz	r3, r3
 8005e90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	f1c3 031f 	rsb	r3, r3, #31
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	491f      	ldr	r1, [pc, #124]	; (8005f18 <vTaskSwitchContext+0xb0>)
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vTaskSwitchContext+0x5a>
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <vTaskSwitchContext+0xb0>)
 8005ed0:	4413      	add	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d104      	bne.n	8005ef4 <vTaskSwitchContext+0x8c>
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <vTaskSwitchContext+0xb4>)
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20001028 	.word	0x20001028
 8005f10:	20001014 	.word	0x20001014
 8005f14:	20001008 	.word	0x20001008
 8005f18:	20000f04 	.word	0x20000f04
 8005f1c:	20000f00 	.word	0x20000f00

08005f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f28:	f000 f852 	bl	8005fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <prvIdleTask+0x28>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d9f9      	bls.n	8005f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <prvIdleTask+0x2c>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f44:	e7f0      	b.n	8005f28 <prvIdleTask+0x8>
 8005f46:	bf00      	nop
 8005f48:	20000f04 	.word	0x20000f04
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f56:	2300      	movs	r3, #0
 8005f58:	607b      	str	r3, [r7, #4]
 8005f5a:	e00c      	b.n	8005f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <prvInitialiseTaskLists+0x60>)
 8005f68:	4413      	add	r3, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff faae 	bl	80054cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3301      	adds	r3, #1
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b06      	cmp	r3, #6
 8005f7a:	d9ef      	bls.n	8005f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <prvInitialiseTaskLists+0x64>)
 8005f7e:	f7ff faa5 	bl	80054cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f82:	480d      	ldr	r0, [pc, #52]	; (8005fb8 <prvInitialiseTaskLists+0x68>)
 8005f84:	f7ff faa2 	bl	80054cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f88:	480c      	ldr	r0, [pc, #48]	; (8005fbc <prvInitialiseTaskLists+0x6c>)
 8005f8a:	f7ff fa9f 	bl	80054cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f8e:	480c      	ldr	r0, [pc, #48]	; (8005fc0 <prvInitialiseTaskLists+0x70>)
 8005f90:	f7ff fa9c 	bl	80054cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f94:	480b      	ldr	r0, [pc, #44]	; (8005fc4 <prvInitialiseTaskLists+0x74>)
 8005f96:	f7ff fa99 	bl	80054cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <prvInitialiseTaskLists+0x78>)
 8005f9c:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <prvInitialiseTaskLists+0x64>)
 8005f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <prvInitialiseTaskLists+0x7c>)
 8005fa2:	4a05      	ldr	r2, [pc, #20]	; (8005fb8 <prvInitialiseTaskLists+0x68>)
 8005fa4:	601a      	str	r2, [r3, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000f04 	.word	0x20000f04
 8005fb4:	20000f90 	.word	0x20000f90
 8005fb8:	20000fa4 	.word	0x20000fa4
 8005fbc:	20000fc0 	.word	0x20000fc0
 8005fc0:	20000fd4 	.word	0x20000fd4
 8005fc4:	20000fec 	.word	0x20000fec
 8005fc8:	20000fb8 	.word	0x20000fb8
 8005fcc:	20000fbc 	.word	0x20000fbc

08005fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd6:	e019      	b.n	800600c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fd8:	f000 fa0c 	bl	80063f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <prvCheckTasksWaitingTermination+0x50>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff faf9 	bl	80055e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <prvCheckTasksWaitingTermination+0x54>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	4a0b      	ldr	r2, [pc, #44]	; (8006024 <prvCheckTasksWaitingTermination+0x54>)
 8005ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <prvCheckTasksWaitingTermination+0x58>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <prvCheckTasksWaitingTermination+0x58>)
 8006000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006002:	f000 fa27 	bl	8006454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f810 	bl	800602c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <prvCheckTasksWaitingTermination+0x58>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e1      	bne.n	8005fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000fd4 	.word	0x20000fd4
 8006024:	20001000 	.word	0x20001000
 8006028:	20000fe8 	.word	0x20000fe8

0800602c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fb84 	bl	8006750 <vPortFree>
				vPortFree( pxTCB );
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb81 	bl	8006750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800604e:	e018      	b.n	8006082 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006056:	2b01      	cmp	r3, #1
 8006058:	d103      	bne.n	8006062 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb78 	bl	8006750 <vPortFree>
	}
 8006060:	e00f      	b.n	8006082 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006068:	2b02      	cmp	r3, #2
 800606a:	d00a      	beq.n	8006082 <prvDeleteTCB+0x56>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60fb      	str	r3, [r7, #12]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <prvDeleteTCB+0x54>
	}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <prvResetNextTaskUnblockTime+0x38>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvResetNextTaskUnblockTime+0x3c>)
 800609e:	f04f 32ff 	mov.w	r2, #4294967295
 80060a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060a4:	e008      	b.n	80060b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <prvResetNextTaskUnblockTime+0x38>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <prvResetNextTaskUnblockTime+0x3c>)
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000fb8 	.word	0x20000fb8
 80060c8:	20001020 	.word	0x20001020

080060cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <prvAddCurrentTaskToDelayedList+0xb0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fa7c 	bl	80055e0 <uxListRemove>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060ee:	4b24      	ldr	r3, [pc, #144]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	2201      	movs	r2, #1
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43da      	mvns	r2, r3
 80060fc:	4b21      	ldr	r3, [pc, #132]	; (8006184 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4013      	ands	r3, r2
 8006102:	4a20      	ldr	r2, [pc, #128]	; (8006184 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006104:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d10a      	bne.n	8006124 <prvAddCurrentTaskToDelayedList+0x58>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006114:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3304      	adds	r3, #4
 800611a:	4619      	mov	r1, r3
 800611c:	481a      	ldr	r0, [pc, #104]	; (8006188 <prvAddCurrentTaskToDelayedList+0xbc>)
 800611e:	f7ff fa02 	bl	8005526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006122:	e026      	b.n	8006172 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800612c:	4b14      	ldr	r3, [pc, #80]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	429a      	cmp	r2, r3
 800613a:	d209      	bcs.n	8006150 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613c:	4b13      	ldr	r3, [pc, #76]	; (800618c <prvAddCurrentTaskToDelayedList+0xc0>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7ff fa10 	bl	800556e <vListInsert>
}
 800614e:	e010      	b.n	8006172 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006150:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7ff fa06 	bl	800556e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	429a      	cmp	r2, r3
 800616a:	d202      	bcs.n	8006172 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800616c:	4a09      	ldr	r2, [pc, #36]	; (8006194 <prvAddCurrentTaskToDelayedList+0xc8>)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20001004 	.word	0x20001004
 8006180:	20000f00 	.word	0x20000f00
 8006184:	20001008 	.word	0x20001008
 8006188:	20000fec 	.word	0x20000fec
 800618c:	20000fbc 	.word	0x20000fbc
 8006190:	20000fb8 	.word	0x20000fb8
 8006194:	20001020 	.word	0x20001020

08006198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0201 	bic.w	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061c8:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <pxPortInitialiseStack+0x64>)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b14      	subs	r3, #20
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b04      	subs	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f06f 0202 	mvn.w	r2, #2
 80061e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b20      	subs	r3, #32
 80061ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	08006201 	.word	0x08006201

08006200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <prvTaskExitError+0x54>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d00a      	beq.n	800622a <prvTaskExitError+0x2a>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <prvTaskExitError+0x28>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60bb      	str	r3, [r7, #8]
}
 800623c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800623e:	bf00      	nop
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0fc      	beq.n	8006240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	2000001c 	.word	0x2000001c
	...

08006260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <pxCurrentTCBConst2>)
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	6808      	ldr	r0, [r1, #0]
 8006266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	f380 8809 	msr	PSP, r0
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8811 	msr	BASEPRI, r0
 800627a:	4770      	bx	lr
 800627c:	f3af 8000 	nop.w

08006280 <pxCurrentTCBConst2>:
 8006280:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop

08006288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006288:	4808      	ldr	r0, [pc, #32]	; (80062ac <prvPortStartFirstTask+0x24>)
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	6800      	ldr	r0, [r0, #0]
 800628e:	f380 8808 	msr	MSP, r0
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8814 	msr	CONTROL, r0
 800629a:	b662      	cpsie	i
 800629c:	b661      	cpsie	f
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	df00      	svc	0
 80062a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062aa:	bf00      	nop
 80062ac:	e000ed08 	.word	0xe000ed08

080062b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062b6:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <xPortStartScheduler+0x120>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a46      	ldr	r2, [pc, #280]	; (80063d4 <xPortStartScheduler+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10a      	bne.n	80062d6 <xPortStartScheduler+0x26>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	613b      	str	r3, [r7, #16]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <xPortStartScheduler+0x120>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3f      	ldr	r2, [pc, #252]	; (80063d8 <xPortStartScheduler+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10a      	bne.n	80062f6 <xPortStartScheduler+0x46>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <xPortStartScheduler+0x12c>)
 80062f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006318:	b2da      	uxtb	r2, r3
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <xPortStartScheduler+0x130>)
 800631c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800631e:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <xPortStartScheduler+0x134>)
 8006320:	2207      	movs	r2, #7
 8006322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006324:	e009      	b.n	800633a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006326:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <xPortStartScheduler+0x134>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3b01      	subs	r3, #1
 800632c:	4a2d      	ldr	r2, [pc, #180]	; (80063e4 <xPortStartScheduler+0x134>)
 800632e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	b2db      	uxtb	r3, r3
 8006338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	2b80      	cmp	r3, #128	; 0x80
 8006344:	d0ef      	beq.n	8006326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <xPortStartScheduler+0x134>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1c3 0307 	rsb	r3, r3, #7
 800634e:	2b04      	cmp	r3, #4
 8006350:	d00a      	beq.n	8006368 <xPortStartScheduler+0xb8>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60bb      	str	r3, [r7, #8]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <xPortStartScheduler+0x134>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <xPortStartScheduler+0x134>)
 8006370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006372:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <xPortStartScheduler+0x134>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <xPortStartScheduler+0x134>)
 800637c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <xPortStartScheduler+0x138>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <xPortStartScheduler+0x138>)
 800638c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <xPortStartScheduler+0x138>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <xPortStartScheduler+0x138>)
 8006398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800639c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800639e:	f000 f8dd 	bl	800655c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <xPortStartScheduler+0x13c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063a8:	f000 f8fc 	bl	80065a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063ac:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <xPortStartScheduler+0x140>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <xPortStartScheduler+0x140>)
 80063b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063b8:	f7ff ff66 	bl	8006288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063bc:	f7ff fd54 	bl	8005e68 <vTaskSwitchContext>
	prvTaskExitError();
 80063c0:	f7ff ff1e 	bl	8006200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	e000ed00 	.word	0xe000ed00
 80063d4:	410fc271 	.word	0x410fc271
 80063d8:	410fc270 	.word	0x410fc270
 80063dc:	e000e400 	.word	0xe000e400
 80063e0:	2000102c 	.word	0x2000102c
 80063e4:	20001030 	.word	0x20001030
 80063e8:	e000ed20 	.word	0xe000ed20
 80063ec:	2000001c 	.word	0x2000001c
 80063f0:	e000ef34 	.word	0xe000ef34

080063f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	607b      	str	r3, [r7, #4]
}
 800640c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <vPortEnterCritical+0x58>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3301      	adds	r3, #1
 8006414:	4a0d      	ldr	r2, [pc, #52]	; (800644c <vPortEnterCritical+0x58>)
 8006416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <vPortEnterCritical+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10f      	bne.n	8006440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortEnterCritical+0x5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <vPortEnterCritical+0x4c>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <vPortEnterCritical+0x4a>
	}
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	2000001c 	.word	0x2000001c
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <vPortExitCritical+0x50>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <vPortExitCritical+0x24>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <vPortExitCritical+0x50>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3b01      	subs	r3, #1
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <vPortExitCritical+0x50>)
 8006480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <vPortExitCritical+0x50>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <vPortExitCritical+0x42>
 800648a:	2300      	movs	r3, #0
 800648c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000001c 	.word	0x2000001c
	...

080064b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064b0:	f3ef 8009 	mrs	r0, PSP
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	4b15      	ldr	r3, [pc, #84]	; (8006510 <pxCurrentTCBConst>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f01e 0f10 	tst.w	lr, #16
 80064c0:	bf08      	it	eq
 80064c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ca:	6010      	str	r0, [r2, #0]
 80064cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064d4:	f380 8811 	msr	BASEPRI, r0
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f7ff fcc2 	bl	8005e68 <vTaskSwitchContext>
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f380 8811 	msr	BASEPRI, r0
 80064ec:	bc09      	pop	{r0, r3}
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	f01e 0f10 	tst.w	lr, #16
 80064fa:	bf08      	it	eq
 80064fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006500:	f380 8809 	msr	PSP, r0
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst>:
 8006510:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
}
 8006530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006532:	f7ff fbe1 	bl	8005cf8 <xTaskIncrementTick>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800653c:	4b06      	ldr	r3, [pc, #24]	; (8006558 <SysTick_Handler+0x40>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortSetupTimerInterrupt+0x34>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <vPortSetupTimerInterrupt+0x38>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <vPortSetupTimerInterrupt+0x3c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <vPortSetupTimerInterrupt+0x40>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <vPortSetupTimerInterrupt+0x44>)
 800657a:	3b01      	subs	r3, #1
 800657c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <vPortSetupTimerInterrupt+0x34>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	e000e010 	.word	0xe000e010
 8006594:	e000e018 	.word	0xe000e018
 8006598:	20000010 	.word	0x20000010
 800659c:	10624dd3 	.word	0x10624dd3
 80065a0:	e000e014 	.word	0xe000e014

080065a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065b4 <vPortEnableVFP+0x10>
 80065a8:	6801      	ldr	r1, [r0, #0]
 80065aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ae:	6001      	str	r1, [r0, #0]
 80065b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065b2:	bf00      	nop
 80065b4:	e000ed88 	.word	0xe000ed88

080065b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065c4:	f7ff faee 	bl	8005ba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065c8:	4b5b      	ldr	r3, [pc, #364]	; (8006738 <pvPortMalloc+0x180>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065d0:	f000 f920 	bl	8006814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <pvPortMalloc+0x184>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 8093 	bne.w	8006708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01d      	beq.n	8006624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065e8:	2208      	movs	r2, #8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d014      	beq.n	8006624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f023 0307 	bic.w	r3, r3, #7
 8006600:	3308      	adds	r3, #8
 8006602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <pvPortMalloc+0x6c>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	617b      	str	r3, [r7, #20]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06e      	beq.n	8006708 <pvPortMalloc+0x150>
 800662a:	4b45      	ldr	r3, [pc, #276]	; (8006740 <pvPortMalloc+0x188>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d869      	bhi.n	8006708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006634:	4b43      	ldr	r3, [pc, #268]	; (8006744 <pvPortMalloc+0x18c>)
 8006636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006638:	4b42      	ldr	r3, [pc, #264]	; (8006744 <pvPortMalloc+0x18c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800663e:	e004      	b.n	800664a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <pvPortMalloc+0xa4>
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f1      	bne.n	8006640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800665c:	4b36      	ldr	r3, [pc, #216]	; (8006738 <pvPortMalloc+0x180>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	429a      	cmp	r2, r3
 8006664:	d050      	beq.n	8006708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2208      	movs	r2, #8
 800666c:	4413      	add	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	2308      	movs	r3, #8
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	d91f      	bls.n	80066c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4413      	add	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <pvPortMalloc+0xf8>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	613b      	str	r3, [r7, #16]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066c2:	69b8      	ldr	r0, [r7, #24]
 80066c4:	f000 f908 	bl	80068d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066c8:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <pvPortMalloc+0x188>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <pvPortMalloc+0x188>)
 80066d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066d6:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <pvPortMalloc+0x188>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <pvPortMalloc+0x190>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d203      	bcs.n	80066ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066e2:	4b17      	ldr	r3, [pc, #92]	; (8006740 <pvPortMalloc+0x188>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <pvPortMalloc+0x190>)
 80066e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <pvPortMalloc+0x184>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <pvPortMalloc+0x194>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	4a11      	ldr	r2, [pc, #68]	; (800674c <pvPortMalloc+0x194>)
 8006706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006708:	f7ff fa5a 	bl	8005bc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <pvPortMalloc+0x174>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60fb      	str	r3, [r7, #12]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <pvPortMalloc+0x172>
	return pvReturn;
 800672c:	69fb      	ldr	r3, [r7, #28]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20004c3c 	.word	0x20004c3c
 800673c:	20004c50 	.word	0x20004c50
 8006740:	20004c40 	.word	0x20004c40
 8006744:	20004c34 	.word	0x20004c34
 8006748:	20004c44 	.word	0x20004c44
 800674c:	20004c48 	.word	0x20004c48

08006750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d04d      	beq.n	80067fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006762:	2308      	movs	r3, #8
 8006764:	425b      	negs	r3, r3
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4413      	add	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	4b24      	ldr	r3, [pc, #144]	; (8006808 <vPortFree+0xb8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <vPortFree+0x44>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60fb      	str	r3, [r7, #12]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <vPortFree+0x62>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	60bb      	str	r3, [r7, #8]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <vPortFree+0xb8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01e      	beq.n	80067fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11a      	bne.n	80067fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <vPortFree+0xb8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	401a      	ands	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067d8:	f7ff f9e4 	bl	8005ba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <vPortFree+0xbc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4413      	add	r3, r2
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <vPortFree+0xbc>)
 80067e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ea:	6938      	ldr	r0, [r7, #16]
 80067ec:	f000 f874 	bl	80068d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <vPortFree+0xc0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	4a06      	ldr	r2, [pc, #24]	; (8006810 <vPortFree+0xc0>)
 80067f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067fa:	f7ff f9e1 	bl	8005bc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20004c50 	.word	0x20004c50
 800680c:	20004c40 	.word	0x20004c40
 8006810:	20004c4c 	.word	0x20004c4c

08006814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800681a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800681e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <prvHeapInit+0xac>)
 8006822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3307      	adds	r3, #7
 8006832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0307 	bic.w	r3, r3, #7
 800683a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <prvHeapInit+0xac>)
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <prvHeapInit+0xb0>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <prvHeapInit+0xb0>)
 8006854:	2200      	movs	r2, #0
 8006856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4413      	add	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006860:	2208      	movs	r2, #8
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0307 	bic.w	r3, r3, #7
 800686e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <prvHeapInit+0xb4>)
 8006874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <prvHeapInit+0xb4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <prvHeapInit+0xb4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <prvHeapInit+0xb4>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <prvHeapInit+0xb8>)
 80068a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <prvHeapInit+0xbc>)
 80068aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <prvHeapInit+0xc0>)
 80068ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20001034 	.word	0x20001034
 80068c4:	20004c34 	.word	0x20004c34
 80068c8:	20004c3c 	.word	0x20004c3c
 80068cc:	20004c44 	.word	0x20004c44
 80068d0:	20004c40 	.word	0x20004c40
 80068d4:	20004c50 	.word	0x20004c50

080068d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <prvInsertBlockIntoFreeList+0xac>)
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <prvInsertBlockIntoFreeList+0x14>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d8f7      	bhi.n	80068e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d108      	bne.n	800691a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d118      	bne.n	8006960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <prvInsertBlockIntoFreeList+0xb0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d00d      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e008      	b.n	8006968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvInsertBlockIntoFreeList+0xb0>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e003      	b.n	8006968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d002      	beq.n	8006976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20004c34 	.word	0x20004c34
 8006988:	20004c3c 	.word	0x20004c3c

0800698c <__libc_init_array>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4d0d      	ldr	r5, [pc, #52]	; (80069c4 <__libc_init_array+0x38>)
 8006990:	4c0d      	ldr	r4, [pc, #52]	; (80069c8 <__libc_init_array+0x3c>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	2600      	movs	r6, #0
 8006998:	42a6      	cmp	r6, r4
 800699a:	d109      	bne.n	80069b0 <__libc_init_array+0x24>
 800699c:	4d0b      	ldr	r5, [pc, #44]	; (80069cc <__libc_init_array+0x40>)
 800699e:	4c0c      	ldr	r4, [pc, #48]	; (80069d0 <__libc_init_array+0x44>)
 80069a0:	f000 f820 	bl	80069e4 <_init>
 80069a4:	1b64      	subs	r4, r4, r5
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	2600      	movs	r6, #0
 80069aa:	42a6      	cmp	r6, r4
 80069ac:	d105      	bne.n	80069ba <__libc_init_array+0x2e>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b4:	4798      	blx	r3
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7ee      	b.n	8006998 <__libc_init_array+0xc>
 80069ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80069be:	4798      	blx	r3
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7f2      	b.n	80069aa <__libc_init_array+0x1e>
 80069c4:	080070c8 	.word	0x080070c8
 80069c8:	080070c8 	.word	0x080070c8
 80069cc:	080070c8 	.word	0x080070c8
 80069d0:	080070cc 	.word	0x080070cc

080069d4 <memset>:
 80069d4:	4402      	add	r2, r0
 80069d6:	4603      	mov	r3, r0
 80069d8:	4293      	cmp	r3, r2
 80069da:	d100      	bne.n	80069de <memset+0xa>
 80069dc:	4770      	bx	lr
 80069de:	f803 1b01 	strb.w	r1, [r3], #1
 80069e2:	e7f9      	b.n	80069d8 <memset+0x4>

080069e4 <_init>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr

080069f0 <_fini>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr
