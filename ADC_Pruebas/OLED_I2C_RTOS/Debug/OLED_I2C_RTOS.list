
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b0  080070b0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b8  080070b8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080070c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c34  20000020  080070e0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  080070e0  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013135  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc1  00000000  00000000  00033185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00037180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019441  00000000  00000000  00038270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153d5  00000000  00000000  000516b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1455  00000000  00000000  00066a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  00107f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069d4 	.word	0x080069d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	080069d4 	.word	0x080069d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000090 	.word	0x20000090

08000518 <map>:
		texto[pos] = digito + '0';
		pos--;
	}
}

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000522:	edc7 0a04 	vstr	s1, [r7, #16]
 8000526:	ed87 1a03 	vstr	s2, [r7, #12]
 800052a:	edc7 1a02 	vstr	s3, [r7, #8]
 800052e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	edd7 7a04 	vldr	s15, [r7, #16]
 800053a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800053e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000542:	edd7 7a02 	vldr	s15, [r7, #8]
 8000546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800054a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800054e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000552:	edd7 7a04 	vldr	s15, [r7, #16]
 8000556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800055e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000562:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000566:	eeb0 0a67 	vmov.f32	s0, s15
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <actualizar_escala>:
void actualizar_escala()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
switch(contador)
 8000578:	4baf      	ldr	r3, [pc, #700]	; (8000838 <actualizar_escala+0x2c4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	f200 8191 	bhi.w	80008a4 <actualizar_escala+0x330>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <actualizar_escala+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	080005a9 	.word	0x080005a9
 800058c:	080005fb 	.word	0x080005fb
 8000590:	0800064d 	.word	0x0800064d
 8000594:	0800069f 	.word	0x0800069f
 8000598:	080006f1 	.word	0x080006f1
 800059c:	08000743 	.word	0x08000743
 80005a0:	08000795 	.word	0x08000795
 80005a4:	080007e7 	.word	0x080007e7
	{
		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 80005a8:	2137      	movs	r1, #55	; 0x37
 80005aa:	2073      	movs	r0, #115	; 0x73
 80005ac:	f001 f934 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80005b0:	4aa2      	ldr	r2, [pc, #648]	; (800083c <actualizar_escala+0x2c8>)
 80005b2:	2301      	movs	r3, #1
 80005b4:	ca06      	ldmia	r2, {r1, r2}
 80005b6:	48a2      	ldr	r0, [pc, #648]	; (8000840 <actualizar_escala+0x2cc>)
 80005b8:	f001 f908 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80005bc:	2109      	movs	r1, #9
 80005be:	2006      	movs	r0, #6
 80005c0:	f001 f92a 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80005c4:	4a9d      	ldr	r2, [pc, #628]	; (800083c <actualizar_escala+0x2c8>)
 80005c6:	2301      	movs	r3, #1
 80005c8:	ca06      	ldmia	r2, {r1, r2}
 80005ca:	489e      	ldr	r0, [pc, #632]	; (8000844 <actualizar_escala+0x2d0>)
 80005cc:	f001 f8fe 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80005d0:	2121      	movs	r1, #33	; 0x21
 80005d2:	2011      	movs	r0, #17
 80005d4:	f001 f920 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80005d8:	4a98      	ldr	r2, [pc, #608]	; (800083c <actualizar_escala+0x2c8>)
 80005da:	2301      	movs	r3, #1
 80005dc:	ca06      	ldmia	r2, {r1, r2}
 80005de:	489a      	ldr	r0, [pc, #616]	; (8000848 <actualizar_escala+0x2d4>)
 80005e0:	f001 f8f4 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80005e4:	2138      	movs	r1, #56	; 0x38
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f916 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80005ec:	4a93      	ldr	r2, [pc, #588]	; (800083c <actualizar_escala+0x2c8>)
 80005ee:	2301      	movs	r3, #1
 80005f0:	ca06      	ldmia	r2, {r1, r2}
 80005f2:	4896      	ldr	r0, [pc, #600]	; (800084c <actualizar_escala+0x2d8>)
 80005f4:	f001 f8ea 	bl	80017cc <ssd1306_WriteString>
		break;
 80005f8:	e17d      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 80005fa:	2137      	movs	r1, #55	; 0x37
 80005fc:	2073      	movs	r0, #115	; 0x73
 80005fe:	f001 f90b 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 8000602:	4a8e      	ldr	r2, [pc, #568]	; (800083c <actualizar_escala+0x2c8>)
 8000604:	2301      	movs	r3, #1
 8000606:	ca06      	ldmia	r2, {r1, r2}
 8000608:	4891      	ldr	r0, [pc, #580]	; (8000850 <actualizar_escala+0x2dc>)
 800060a:	f001 f8df 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800060e:	2109      	movs	r1, #9
 8000610:	2006      	movs	r0, #6
 8000612:	f001 f901 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8000616:	4a89      	ldr	r2, [pc, #548]	; (800083c <actualizar_escala+0x2c8>)
 8000618:	2301      	movs	r3, #1
 800061a:	ca06      	ldmia	r2, {r1, r2}
 800061c:	488d      	ldr	r0, [pc, #564]	; (8000854 <actualizar_escala+0x2e0>)
 800061e:	f001 f8d5 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000622:	2121      	movs	r1, #33	; 0x21
 8000624:	2011      	movs	r0, #17
 8000626:	f001 f8f7 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800062a:	4a84      	ldr	r2, [pc, #528]	; (800083c <actualizar_escala+0x2c8>)
 800062c:	2301      	movs	r3, #1
 800062e:	ca06      	ldmia	r2, {r1, r2}
 8000630:	4885      	ldr	r0, [pc, #532]	; (8000848 <actualizar_escala+0x2d4>)
 8000632:	f001 f8cb 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000636:	2138      	movs	r1, #56	; 0x38
 8000638:	2000      	movs	r0, #0
 800063a:	f001 f8ed 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800063e:	4a7f      	ldr	r2, [pc, #508]	; (800083c <actualizar_escala+0x2c8>)
 8000640:	2301      	movs	r3, #1
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <actualizar_escala+0x2e4>)
 8000646:	f001 f8c1 	bl	80017cc <ssd1306_WriteString>
		break;
 800064a:	e154      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 800064c:	2137      	movs	r1, #55	; 0x37
 800064e:	2073      	movs	r0, #115	; 0x73
 8000650:	f001 f8e2 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 8000654:	4a79      	ldr	r2, [pc, #484]	; (800083c <actualizar_escala+0x2c8>)
 8000656:	2301      	movs	r3, #1
 8000658:	ca06      	ldmia	r2, {r1, r2}
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <actualizar_escala+0x2e8>)
 800065c:	f001 f8b6 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000660:	2109      	movs	r1, #9
 8000662:	2006      	movs	r0, #6
 8000664:	f001 f8d8 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 8000668:	4a74      	ldr	r2, [pc, #464]	; (800083c <actualizar_escala+0x2c8>)
 800066a:	2301      	movs	r3, #1
 800066c:	ca06      	ldmia	r2, {r1, r2}
 800066e:	487c      	ldr	r0, [pc, #496]	; (8000860 <actualizar_escala+0x2ec>)
 8000670:	f001 f8ac 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000674:	2121      	movs	r1, #33	; 0x21
 8000676:	2011      	movs	r0, #17
 8000678:	f001 f8ce 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800067c:	4a6f      	ldr	r2, [pc, #444]	; (800083c <actualizar_escala+0x2c8>)
 800067e:	2301      	movs	r3, #1
 8000680:	ca06      	ldmia	r2, {r1, r2}
 8000682:	4871      	ldr	r0, [pc, #452]	; (8000848 <actualizar_escala+0x2d4>)
 8000684:	f001 f8a2 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000688:	2138      	movs	r1, #56	; 0x38
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f8c4 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 8000690:	4a6a      	ldr	r2, [pc, #424]	; (800083c <actualizar_escala+0x2c8>)
 8000692:	2301      	movs	r3, #1
 8000694:	ca06      	ldmia	r2, {r1, r2}
 8000696:	4873      	ldr	r0, [pc, #460]	; (8000864 <actualizar_escala+0x2f0>)
 8000698:	f001 f898 	bl	80017cc <ssd1306_WriteString>
		break;
 800069c:	e12b      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 800069e:	2137      	movs	r1, #55	; 0x37
 80006a0:	206d      	movs	r0, #109	; 0x6d
 80006a2:	f001 f8b9 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 80006a6:	4a65      	ldr	r2, [pc, #404]	; (800083c <actualizar_escala+0x2c8>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	486e      	ldr	r0, [pc, #440]	; (8000868 <actualizar_escala+0x2f4>)
 80006ae:	f001 f88d 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80006b2:	2109      	movs	r1, #9
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 f8af 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 80006ba:	4a60      	ldr	r2, [pc, #384]	; (800083c <actualizar_escala+0x2c8>)
 80006bc:	2301      	movs	r3, #1
 80006be:	ca06      	ldmia	r2, {r1, r2}
 80006c0:	486a      	ldr	r0, [pc, #424]	; (800086c <actualizar_escala+0x2f8>)
 80006c2:	f001 f883 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	2011      	movs	r0, #17
 80006ca:	f001 f8a5 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80006ce:	4a5b      	ldr	r2, [pc, #364]	; (800083c <actualizar_escala+0x2c8>)
 80006d0:	2301      	movs	r3, #1
 80006d2:	ca06      	ldmia	r2, {r1, r2}
 80006d4:	485c      	ldr	r0, [pc, #368]	; (8000848 <actualizar_escala+0x2d4>)
 80006d6:	f001 f879 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f89b 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 80006e2:	4a56      	ldr	r2, [pc, #344]	; (800083c <actualizar_escala+0x2c8>)
 80006e4:	2301      	movs	r3, #1
 80006e6:	ca06      	ldmia	r2, {r1, r2}
 80006e8:	4861      	ldr	r0, [pc, #388]	; (8000870 <actualizar_escala+0x2fc>)
 80006ea:	f001 f86f 	bl	80017cc <ssd1306_WriteString>
		break;
 80006ee:	e102      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 80006f0:	2137      	movs	r1, #55	; 0x37
 80006f2:	206d      	movs	r0, #109	; 0x6d
 80006f4:	f001 f890 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <actualizar_escala+0x2c8>)
 80006fa:	2301      	movs	r3, #1
 80006fc:	ca06      	ldmia	r2, {r1, r2}
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <actualizar_escala+0x300>)
 8000700:	f001 f864 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000704:	2109      	movs	r1, #9
 8000706:	2006      	movs	r0, #6
 8000708:	f001 f886 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <actualizar_escala+0x2c8>)
 800070e:	2301      	movs	r3, #1
 8000710:	ca06      	ldmia	r2, {r1, r2}
 8000712:	4859      	ldr	r0, [pc, #356]	; (8000878 <actualizar_escala+0x304>)
 8000714:	f001 f85a 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000718:	2121      	movs	r1, #33	; 0x21
 800071a:	2011      	movs	r0, #17
 800071c:	f001 f87c 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000720:	4a46      	ldr	r2, [pc, #280]	; (800083c <actualizar_escala+0x2c8>)
 8000722:	2301      	movs	r3, #1
 8000724:	ca06      	ldmia	r2, {r1, r2}
 8000726:	4848      	ldr	r0, [pc, #288]	; (8000848 <actualizar_escala+0x2d4>)
 8000728:	f001 f850 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800072c:	2138      	movs	r1, #56	; 0x38
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f872 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <actualizar_escala+0x2c8>)
 8000736:	2301      	movs	r3, #1
 8000738:	ca06      	ldmia	r2, {r1, r2}
 800073a:	4850      	ldr	r0, [pc, #320]	; (800087c <actualizar_escala+0x308>)
 800073c:	f001 f846 	bl	80017cc <ssd1306_WriteString>
		break;
 8000740:	e0d9      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 8000742:	2137      	movs	r1, #55	; 0x37
 8000744:	206d      	movs	r0, #109	; 0x6d
 8000746:	f001 f867 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <actualizar_escala+0x2c8>)
 800074c:	2301      	movs	r3, #1
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <actualizar_escala+0x30c>)
 8000752:	f001 f83b 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000756:	2109      	movs	r1, #9
 8000758:	2006      	movs	r0, #6
 800075a:	f001 f85d 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <actualizar_escala+0x2c8>)
 8000760:	2301      	movs	r3, #1
 8000762:	ca06      	ldmia	r2, {r1, r2}
 8000764:	4847      	ldr	r0, [pc, #284]	; (8000884 <actualizar_escala+0x310>)
 8000766:	f001 f831 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800076a:	2121      	movs	r1, #33	; 0x21
 800076c:	2011      	movs	r0, #17
 800076e:	f001 f853 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <actualizar_escala+0x2c8>)
 8000774:	2301      	movs	r3, #1
 8000776:	ca06      	ldmia	r2, {r1, r2}
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <actualizar_escala+0x2d4>)
 800077a:	f001 f827 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800077e:	2138      	movs	r1, #56	; 0x38
 8000780:	2000      	movs	r0, #0
 8000782:	f001 f849 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <actualizar_escala+0x2c8>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	483e      	ldr	r0, [pc, #248]	; (8000888 <actualizar_escala+0x314>)
 800078e:	f001 f81d 	bl	80017cc <ssd1306_WriteString>
		break;
 8000792:	e0b0      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 8000794:	2137      	movs	r1, #55	; 0x37
 8000796:	206d      	movs	r0, #109	; 0x6d
 8000798:	f001 f83e 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <actualizar_escala+0x2c8>)
 800079e:	2301      	movs	r3, #1
 80007a0:	ca06      	ldmia	r2, {r1, r2}
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <actualizar_escala+0x318>)
 80007a4:	f001 f812 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 80007a8:	2109      	movs	r1, #9
 80007aa:	2011      	movs	r0, #17
 80007ac:	f001 f834 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <actualizar_escala+0x2c8>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	4836      	ldr	r0, [pc, #216]	; (8000890 <actualizar_escala+0x31c>)
 80007b8:	f001 f808 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80007bc:	2121      	movs	r1, #33	; 0x21
 80007be:	2011      	movs	r0, #17
 80007c0:	f001 f82a 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <actualizar_escala+0x2c8>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <actualizar_escala+0x2d4>)
 80007cc:	f000 fffe 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 80007d0:	2138      	movs	r1, #56	; 0x38
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 f820 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <actualizar_escala+0x2c8>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	482d      	ldr	r0, [pc, #180]	; (8000894 <actualizar_escala+0x320>)
 80007e0:	f000 fff4 	bl	80017cc <ssd1306_WriteString>
		break;
 80007e4:	e087      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 80007e6:	2137      	movs	r1, #55	; 0x37
 80007e8:	206d      	movs	r0, #109	; 0x6d
 80007ea:	f001 f815 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <actualizar_escala+0x2c8>)
 80007f0:	2301      	movs	r3, #1
 80007f2:	ca06      	ldmia	r2, {r1, r2}
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <actualizar_escala+0x324>)
 80007f6:	f000 ffe9 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80007fa:	2109      	movs	r1, #9
 80007fc:	2006      	movs	r0, #6
 80007fe:	f001 f80b 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <actualizar_escala+0x2c8>)
 8000804:	2301      	movs	r3, #1
 8000806:	ca06      	ldmia	r2, {r1, r2}
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <actualizar_escala+0x328>)
 800080a:	f000 ffdf 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	2011      	movs	r0, #17
 8000812:	f001 f801 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <actualizar_escala+0x2c8>)
 8000818:	2301      	movs	r3, #1
 800081a:	ca06      	ldmia	r2, {r1, r2}
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <actualizar_escala+0x2d4>)
 800081e:	f000 ffd5 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000822:	2138      	movs	r1, #56	; 0x38
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fff7 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <actualizar_escala+0x2c8>)
 800082c:	2301      	movs	r3, #1
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <actualizar_escala+0x32c>)
 8000832:	f000 ffcb 	bl	80017cc <ssd1306_WriteString>
		break;
 8000836:	e05e      	b.n	80008f6 <actualizar_escala+0x382>
 8000838:	20000468 	.word	0x20000468
 800083c:	20000008 	.word	0x20000008
 8000840:	080069ec 	.word	0x080069ec
 8000844:	080069f0 	.word	0x080069f0
 8000848:	080069f4 	.word	0x080069f4
 800084c:	080069f8 	.word	0x080069f8
 8000850:	08006a00 	.word	0x08006a00
 8000854:	08006a04 	.word	0x08006a04
 8000858:	08006a08 	.word	0x08006a08
 800085c:	08006a10 	.word	0x08006a10
 8000860:	08006a14 	.word	0x08006a14
 8000864:	08006a18 	.word	0x08006a18
 8000868:	08006a20 	.word	0x08006a20
 800086c:	08006a24 	.word	0x08006a24
 8000870:	08006a28 	.word	0x08006a28
 8000874:	08006a30 	.word	0x08006a30
 8000878:	08006a34 	.word	0x08006a34
 800087c:	08006a38 	.word	0x08006a38
 8000880:	08006a40 	.word	0x08006a40
 8000884:	08006a44 	.word	0x08006a44
 8000888:	08006a48 	.word	0x08006a48
 800088c:	08006a50 	.word	0x08006a50
 8000890:	08006a54 	.word	0x08006a54
 8000894:	08006a58 	.word	0x08006a58
 8000898:	08006a5c 	.word	0x08006a5c
 800089c:	08006a60 	.word	0x08006a60
 80008a0:	08006a64 	.word	0x08006a64
		default://A2
			ssd1306_SetCursor(115, 55);
 80008a4:	2137      	movs	r1, #55	; 0x37
 80008a6:	2073      	movs	r0, #115	; 0x73
 80008a8:	f000 ffb6 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <actualizar_escala+0x388>)
 80008ae:	2301      	movs	r3, #1
 80008b0:	ca06      	ldmia	r2, {r1, r2}
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <actualizar_escala+0x38c>)
 80008b4:	f000 ff8a 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80008b8:	2109      	movs	r1, #9
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 ffac 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <actualizar_escala+0x388>)
 80008c2:	2301      	movs	r3, #1
 80008c4:	ca06      	ldmia	r2, {r1, r2}
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <actualizar_escala+0x390>)
 80008c8:	f000 ff80 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80008cc:	2121      	movs	r1, #33	; 0x21
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 ffa2 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <actualizar_escala+0x388>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	ca06      	ldmia	r2, {r1, r2}
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <actualizar_escala+0x394>)
 80008dc:	f000 ff76 	bl	80017cc <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80008e0:	2138      	movs	r1, #56	; 0x38
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 ff98 	bl	8001818 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <actualizar_escala+0x388>)
 80008ea:	2301      	movs	r3, #1
 80008ec:	ca06      	ldmia	r2, {r1, r2}
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <actualizar_escala+0x398>)
 80008f0:	f000 ff6c 	bl	80017cc <ssd1306_WriteString>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	080069ec 	.word	0x080069ec
 8000904:	080069f0 	.word	0x080069f0
 8000908:	080069f4 	.word	0x080069f4
 800090c:	080069f8 	.word	0x080069f8

08000910 <display_plot_grilla>:

void display_plot_grilla(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fe30 	bl	800157c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f000 ff7a 	bl	8001818 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 8000924:	2301      	movs	r3, #1
 8000926:	2237      	movs	r2, #55	; 0x37
 8000928:	2109      	movs	r1, #9
 800092a:	201a      	movs	r0, #26
 800092c:	f000 fff8 	bl	8001920 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 8000930:	2301      	movs	r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	2109      	movs	r1, #9
 8000936:	207f      	movs	r0, #127	; 0x7f
 8000938:	f000 fff2 	bl	8001920 <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vrtical line bottom
 800093c:	2301      	movs	r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	213c      	movs	r1, #60	; 0x3c
 8000942:	207f      	movs	r0, #127	; 0x7f
 8000944:	f000 ffec 	bl	8001920 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000948:	2301      	movs	r3, #1
 800094a:	2207      	movs	r2, #7
 800094c:	2109      	movs	r1, #9
 800094e:	2018      	movs	r0, #24
 8000950:	f001 f805 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 8000954:	2301      	movs	r3, #1
 8000956:	2202      	movs	r2, #2
 8000958:	2124      	movs	r1, #36	; 0x24
 800095a:	2018      	movs	r0, #24
 800095c:	f000 ffff 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 8000960:	2301      	movs	r3, #1
 8000962:	2207      	movs	r2, #7
 8000964:	213f      	movs	r1, #63	; 0x3f
 8000966:	2018      	movs	r0, #24
 8000968:	f000 fff9 	bl	800195e <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 800096c:	2301      	movs	r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	2109      	movs	r1, #9
 8000972:	2033      	movs	r0, #51	; 0x33
 8000974:	f000 fff3 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000978:	2301      	movs	r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	213f      	movs	r1, #63	; 0x3f
 800097e:	2033      	movs	r0, #51	; 0x33
 8000980:	f000 ffed 	bl	800195e <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 8000984:	2301      	movs	r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	2109      	movs	r1, #9
 800098a:	204c      	movs	r0, #76	; 0x4c
 800098c:	f000 ffe7 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 8000990:	2301      	movs	r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	213f      	movs	r1, #63	; 0x3f
 8000996:	204c      	movs	r0, #76	; 0x4c
 8000998:	f000 ffe1 	bl	800195e <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 800099c:	2301      	movs	r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	2109      	movs	r1, #9
 80009a2:	2065      	movs	r0, #101	; 0x65
 80009a4:	f000 ffdb 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80009a8:	2301      	movs	r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	213f      	movs	r1, #63	; 0x3f
 80009ae:	2065      	movs	r0, #101	; 0x65
 80009b0:	f000 ffd5 	bl	800195e <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80009b4:	2301      	movs	r3, #1
 80009b6:	2205      	movs	r2, #5
 80009b8:	2109      	movs	r1, #9
 80009ba:	207b      	movs	r0, #123	; 0x7b
 80009bc:	f000 ffcf 	bl	800195e <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80009c0:	2301      	movs	r3, #1
 80009c2:	2205      	movs	r2, #5
 80009c4:	213f      	movs	r1, #63	; 0x3f
 80009c6:	207b      	movs	r0, #123	; 0x7b
 80009c8:	f000 ffc9 	bl	800195e <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 80009cc:	231a      	movs	r3, #26
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e009      	b.n	80009e6 <display_plot_grilla+0xd6>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	2301      	movs	r3, #1
 80009d8:	2202      	movs	r2, #2
 80009da:	2124      	movs	r1, #36	; 0x24
 80009dc:	f000 ffbf 	bl	800195e <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3305      	adds	r3, #5
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b80      	cmp	r3, #128	; 0x80
 80009ea:	ddf2      	ble.n	80009d2 <display_plot_grilla+0xc2>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 80009ec:	2366      	movs	r3, #102	; 0x66
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	e013      	b.n	8000a1a <display_plot_grilla+0x10a>
		for (int y = 10; y < 63; y += 5){
 80009f2:	230a      	movs	r3, #10
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e00a      	b.n	8000a0e <display_plot_grilla+0xfe>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b2d8      	uxtb	r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b2d9      	uxtb	r1, r3
 8000a00:	2301      	movs	r3, #1
 8000a02:	2202      	movs	r2, #2
 8000a04:	f000 ff8c 	bl	8001920 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3305      	adds	r3, #5
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b3e      	cmp	r3, #62	; 0x3e
 8000a12:	ddf1      	ble.n	80009f8 <display_plot_grilla+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25){
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3b19      	subs	r3, #25
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b1e      	cmp	r3, #30
 8000a1e:	dce8      	bgt.n	80009f2 <display_plot_grilla+0xe2>
		}
	}
	ssd1306_SetCursor(14, 0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	200e      	movs	r0, #14
 8000a24:	f000 fef8 	bl	8001818 <ssd1306_SetCursor>
	ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <display_plot_grilla+0x12c>)
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	ca06      	ldmia	r2, {r1, r2}
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <display_plot_grilla+0x130>)
 8000a30:	f000 fecc 	bl	80017cc <ssd1306_WriteString>
	//
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	08006a6c 	.word	0x08006a6c

08000a44 <display_plot_signal>:
	else if(Valor_max>2699)
		Cambiar_MUX(AMP_1);
}
*/

void display_plot_signal(void){
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]

	if(flag == 1)
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <display_plot_signal+0x14c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	f040 8091 	bne.w	8000b86 <display_plot_signal+0x142>
	{
		//ssd1306_Fill(Black);
		trigger_point = 1;
 8000a64:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <display_plot_signal+0x150>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<MAX; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	e00a      	b.n	8000a86 <display_plot_signal+0x42>
				buffer_display[i] = buffer_adc[i];
 8000a70:	4a49      	ldr	r2, [pc, #292]	; (8000b98 <display_plot_signal+0x154>)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a78:	4948      	ldr	r1, [pc, #288]	; (8000b9c <display_plot_signal+0x158>)
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<MAX; i++)
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	2bc7      	cmp	r3, #199	; 0xc7
 8000a8a:	ddf1      	ble.n	8000a70 <display_plot_signal+0x2c>

		//Analizar_amplitud(buffer_display);
		for(int i = 0; i <= 98; i++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	e017      	b.n	8000ac2 <display_plot_signal+0x7e>
		{
			// flanco descendente
			if((buffer_display[i] > trigger_level ) && (buffer_display[i+1]) < trigger_level )
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <display_plot_signal+0x158>)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	4a41      	ldr	r2, [pc, #260]	; (8000ba0 <display_plot_signal+0x15c>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d90c      	bls.n	8000abc <display_plot_signal+0x78>
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a3d      	ldr	r2, [pc, #244]	; (8000b9c <display_plot_signal+0x158>)
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <display_plot_signal+0x15c>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d203      	bcs.n	8000abc <display_plot_signal+0x78>
			{
				trigger_point = i;
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <display_plot_signal+0x150>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	6013      	str	r3, [r2, #0]
				break;
 8000aba:	e005      	b.n	8000ac8 <display_plot_signal+0x84>
		for(int i = 0; i <= 98; i++)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	2b62      	cmp	r3, #98	; 0x62
 8000ac6:	dde4      	ble.n	8000a92 <display_plot_signal+0x4e>
			}
		}

		for (int k = 0; k <= 98; k++){
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e050      	b.n	8000b70 <display_plot_signal+0x12c>

			x3 = k + trigger_point;
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <display_plot_signal+0x150>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
			x4 = x3 + 1;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]

			y3 = map(buffer_display[x3], 0, 4095, 63, 9); 				// convert to plot
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <display_plot_signal+0x158>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aee:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000af2:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8000ba4 <display_plot_signal+0x160>
 8000af6:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8000ba8 <display_plot_signal+0x164>
 8000afa:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8000bac <display_plot_signal+0x168>
 8000afe:	eeb0 0a67 	vmov.f32	s0, s15
 8000b02:	f7ff fd09 	bl	8000518 <map>
 8000b06:	eef0 7a40 	vmov.f32	s15, s0
 8000b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0e:	ee17 3a90 	vmov	r3, s15
 8000b12:	613b      	str	r3, [r7, #16]
			y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <display_plot_signal+0x158>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b24:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000b28:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8000ba4 <display_plot_signal+0x160>
 8000b2c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8000ba8 <display_plot_signal+0x164>
 8000b30:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8000bac <display_plot_signal+0x168>
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	f7ff fcee 	bl	8000518 <map>
 8000b3c:	eef0 7a40 	vmov.f32	s15, s0
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	ee17 3a90 	vmov	r3, s15
 8000b48:	60fb      	str	r3, [r7, #12]

			ssd1306_Line(k + 27, y3, k + 28, y4, White);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	331b      	adds	r3, #27
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	b2d9      	uxtb	r1, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	331c      	adds	r3, #28
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2401      	movs	r4, #1
 8000b64:	9400      	str	r4, [sp, #0]
 8000b66:	f000 fe6f 	bl	8001848 <ssd1306_Line>
		for (int k = 0; k <= 98; k++){
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b62      	cmp	r3, #98	; 0x62
 8000b74:	ddab      	ble.n	8000ace <display_plot_signal+0x8a>
		 }
		flag = 0;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <display_plot_signal+0x14c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000b7c:	22c8      	movs	r2, #200	; 0xc8
 8000b7e:	4906      	ldr	r1, [pc, #24]	; (8000b98 <display_plot_signal+0x154>)
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <display_plot_signal+0x16c>)
 8000b82:	f001 fa1d 	bl	8001fc0 <HAL_ADC_Start_DMA>
	}
}
 8000b86:	bf00      	nop
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000464 	.word	0x20000464
 8000b94:	20000000 	.word	0x20000000
 8000b98:	2000046c 	.word	0x2000046c
 8000b9c:	2000078c 	.word	0x2000078c
 8000ba0:	20000004 	.word	0x20000004
 8000ba4:	427c0000 	.word	0x427c0000
 8000ba8:	457ff000 	.word	0x457ff000
 8000bac:	00000000 	.word	0x00000000
 8000bb0:	20000290 	.word	0x20000290

08000bb4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	//trigger_level += 300;
	//if(trigger_level > 3800)
		//trigger_level = 100;
	contador++;
 8000bbe:	4b63      	ldr	r3, [pc, #396]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a61      	ldr	r2, [pc, #388]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bc6:	6013      	str	r3, [r2, #0]
	contador %= 8;
 8000bc8:	4b60      	ldr	r3, [pc, #384]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	425a      	negs	r2, r3
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	f002 0207 	and.w	r2, r2, #7
 8000bd6:	bf58      	it	pl
 8000bd8:	4253      	negpl	r3, r2
 8000bda:	4a5c      	ldr	r2, [pc, #368]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bdc:	6013      	str	r3, [r2, #0]
	switch(contador)
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b07      	cmp	r3, #7
 8000be4:	f200 809c 	bhi.w	8000d20 <HAL_GPIO_EXTI_Callback+0x16c>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c33 	.word	0x08000c33
 8000bf8:	08000c55 	.word	0x08000c55
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c99 	.word	0x08000c99
 8000c04:	08000cbb 	.word	0x08000cbb
 8000c08:	08000cdd 	.word	0x08000cdd
 8000c0c:	08000cff 	.word	0x08000cff
	{
		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	484e      	ldr	r0, [pc, #312]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c16:	f002 fb4d 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	484c      	ldr	r0, [pc, #304]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c22:	f002 fb47 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4849      	ldr	r0, [pc, #292]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c2c:	f002 fb42 	bl	80032b4 <HAL_GPIO_WritePin>

		break;
 8000c30:	e087      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2108      	movs	r1, #8
 8000c36:	4846      	ldr	r0, [pc, #280]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c38:	f002 fb3c 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4844      	ldr	r0, [pc, #272]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c44:	f002 fb36 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	4840      	ldr	r0, [pc, #256]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c4e:	f002 fb31 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000c52:	e076      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	483d      	ldr	r0, [pc, #244]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c5a:	f002 fb2b 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c64:	483b      	ldr	r0, [pc, #236]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c66:	f002 fb25 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	4838      	ldr	r0, [pc, #224]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c70:	f002 fb20 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000c74:	e065      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4835      	ldr	r0, [pc, #212]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c7c:	f002 fb1a 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c86:	4833      	ldr	r0, [pc, #204]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c88:	f002 fb14 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2120      	movs	r1, #32
 8000c90:	482f      	ldr	r0, [pc, #188]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c92:	f002 fb0f 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000c96:	e054      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	482c      	ldr	r0, [pc, #176]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c9e:	f002 fb09 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	482a      	ldr	r0, [pc, #168]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000caa:	f002 fb03 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4827      	ldr	r0, [pc, #156]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cb4:	f002 fafe 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000cb8:	e043      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	4824      	ldr	r0, [pc, #144]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc0:	f002 faf8 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000ccc:	f002 faf2 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	481e      	ldr	r0, [pc, #120]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cd6:	f002 faed 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000cda:	e032      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	481b      	ldr	r0, [pc, #108]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce2:	f002 fae7 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cee:	f002 fae1 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4816      	ldr	r0, [pc, #88]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cf8:	f002 fadc 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000cfc:	e021      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2108      	movs	r1, #8
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d04:	f002 fad6 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d10:	f002 fad0 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d1a:	f002 facb 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000d1e:	e010      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2108      	movs	r1, #8
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d26:	f002 fac5 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d32:	f002 fabf 	bl	80032b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d3c:	f002 faba 	bl	80032b4 <HAL_GPIO_WritePin>
		break;
 8000d40:	bf00      	nop
	}
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000468 	.word	0x20000468
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40020000 	.word	0x40020000

08000d58 <display_plot_trigger>:

void display_plot_trigger(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

	int trigger_actual = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]

	trigger_actual = map(trigger_level, 0, 4095, 63, 9);
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <display_plot_trigger+0x78>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000d72:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000dd4 <display_plot_trigger+0x7c>
 8000d76:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000dd8 <display_plot_trigger+0x80>
 8000d7a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000ddc <display_plot_trigger+0x84>
 8000d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d82:	f7ff fbc9 	bl	8000518 <map>
 8000d86:	eef0 7a40 	vmov.f32	s15, s0
 8000d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8e:	ee17 3a90 	vmov	r3, s15
 8000d92:	607b      	str	r3, [r7, #4]

	//ssd1306_HLine(26, trigger_actual, 100, White);

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	b2d9      	uxtb	r1, r3
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	2204      	movs	r2, #4
 8000da0:	207f      	movs	r0, #127	; 0x7f
 8000da2:	f000 fdbd 	bl	8001920 <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	2301      	movs	r3, #1
 8000db0:	2202      	movs	r2, #2
 8000db2:	207e      	movs	r0, #126	; 0x7e
 8000db4:	f000 fdb4 	bl	8001920 <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	207d      	movs	r0, #125	; 0x7d
 8000dc2:	f000 fc27 	bl	8001614 <ssd1306_DrawPixel>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	427c0000 	.word	0x427c0000
 8000dd8:	457ff000 	.word	0x457ff000
 8000ddc:	00000000 	.word	0x00000000

08000de0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
		flag = 1;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000464 	.word	0x20000464

08000e00 <Init_Sistema>:
}
*/

/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8000e08:	f000 fb52 	bl	80014b0 <ssd1306_Init>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <Init_Sistema+0x54>)
 8000e10:	f003 fd04 	bl	800481c <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim3);
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <Init_Sistema+0x58>)
 8000e16:	f003 fbf5 	bl	8004604 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000e1a:	22c8      	movs	r2, #200	; 0xc8
 8000e1c:	490f      	ldr	r1, [pc, #60]	; (8000e5c <Init_Sistema+0x5c>)
 8000e1e:	4810      	ldr	r0, [pc, #64]	; (8000e60 <Init_Sistema+0x60>)
 8000e20:	f001 f8ce 	bl	8001fc0 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2108      	movs	r1, #8
 8000e28:	480e      	ldr	r0, [pc, #56]	; (8000e64 <Init_Sistema+0x64>)
 8000e2a:	f002 fa43 	bl	80032b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <Init_Sistema+0x68>)
 8000e36:	f002 fa3d 	bl	80032b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <Init_Sistema+0x64>)
 8000e40:	f002 fa38 	bl	80032b4 <HAL_GPIO_WritePin>
	vTaskDelete(NULL);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f004 fd83 	bl	8005950 <vTaskDelete>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000038c 	.word	0x2000038c
 8000e58:	200003d4 	.word	0x200003d4
 8000e5c:	2000046c 	.word	0x2000046c
 8000e60:	20000290 	.word	0x20000290
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40020000 	.word	0x40020000

08000e6c <Mostrar_pantalla>:
void Mostrar_pantalla(void *pvParameters){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

	while(1){
		display_plot_grilla();
 8000e74:	f7ff fd4c 	bl	8000910 <display_plot_grilla>
		display_plot_signal();
 8000e78:	f7ff fde4 	bl	8000a44 <display_plot_signal>
		display_plot_trigger();
 8000e7c:	f7ff ff6c 	bl	8000d58 <display_plot_trigger>
		actualizar_escala();
 8000e80:	f7ff fb78 	bl	8000574 <actualizar_escala>
		ssd1306_UpdateScreen();
 8000e84:	f000 fb9e 	bl	80015c4 <ssd1306_UpdateScreen>
		vTaskDelay(17/portTICK_RATE_MS);
 8000e88:	2011      	movs	r0, #17
 8000e8a:	f004 fdf1 	bl	8005a70 <vTaskDelay>
		display_plot_grilla();
 8000e8e:	e7f1      	b.n	8000e74 <Mostrar_pantalla+0x8>

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f001 f80d 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f82d 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 fa2b 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea2:	f000 fa09 	bl	80012b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ea6:	f000 f893 	bl	8000fd0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eaa:	f000 f8e3 	bl	8001074 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000eae:	f000 f90f 	bl	80010d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb2:	f000 f965 	bl	8001180 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000eb6:	f000 f9b1 	bl	800121c <MX_TIM5_Init>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <main+0x58>)
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <main+0x5c>)
 8000eca:	f004 fc0a 	bl	80056e2 <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <main+0x60>)
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <main+0x64>)
 8000ede:	f004 fc00 	bl	80056e2 <xTaskCreate>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000ee2:	f004 fdf9 	bl	8005ad8 <vTaskStartScheduler>
  while(1){
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x56>
 8000ee8:	08006a80 	.word	0x08006a80
 8000eec:	08000e01 	.word	0x08000e01
 8000ef0:	08006a8c 	.word	0x08006a8c
 8000ef4:	08000e6d 	.word	0x08000e6d

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2230      	movs	r2, #48	; 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 fd5c 	bl	80069c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <SystemClock_Config+0xd4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <SystemClock_Config+0xd4>)
 8000f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <SystemClock_Config+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f60:	2310      	movs	r3, #16
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fe24 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f8e:	f000 fa57 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f886 	bl	80040c0 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fba:	f000 fa41 	bl	8001440 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_ADC1_Init+0x98>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <MX_ADC1_Init+0x9c>)
 8000fe6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_ADC1_Init+0x98>)
 8000fea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC1_Init+0x98>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_ADC1_Init+0x98>)
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MX_ADC1_Init+0xa0>)
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_ADC1_Init+0x98>)
 800101e:	2201      	movs	r2, #1
 8001020:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_ADC1_Init+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_ADC1_Init+0x98>)
 8001032:	f000 ff81 	bl	8001f38 <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800103c:	f000 fa00 	bl	8001440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0x98>)
 8001052:	f001 f8b9 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800105c:	f000 f9f0 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000290 	.word	0x20000290
 800106c:	40012000 	.word	0x40012000
 8001070:	0f000001 	.word	0x0f000001

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x50>)
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <MX_I2C1_Init+0x54>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_I2C1_Init+0x58>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010b2:	f002 f931 	bl	8003318 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010bc:	f000 f9c0 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000338 	.word	0x20000338
 80010c8:	40005400 	.word	0x40005400
 80010cc:	00061a80 	.word	0x00061a80

080010d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	615a      	str	r2, [r3, #20]
 80010f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_TIM2_Init+0xac>)
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_TIM2_Init+0xac>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_TIM2_Init+0xac>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_TIM2_Init+0xac>)
 8001108:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800110c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_TIM2_Init+0xac>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_TIM2_Init+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_TIM2_Init+0xac>)
 800111c:	f003 fb2e 	bl	800477c <HAL_TIM_OC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001126:	f000 f98b 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	4619      	mov	r1, r3
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_TIM2_Init+0xac>)
 800113a:	f004 f93f 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001144:	f000 f97c 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001148:	2330      	movs	r3, #48	; 0x30
 800114a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM2_Init+0xac>)
 8001160:	f003 fd14 	bl	8004b8c <HAL_TIM_OC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800116a:	f000 f969 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM2_Init+0xac>)
 8001170:	f000 fd88 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000038c 	.word	0x2000038c

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
		//TIMER TRIGGER
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_TIM3_Init+0x94>)
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <MX_TIM3_Init+0x98>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM3_Init+0x94>)
 80011a4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM3_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_TIM3_Init+0x94>)
 80011b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_TIM3_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM3_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c4:	4813      	ldr	r0, [pc, #76]	; (8001214 <MX_TIM3_Init+0x94>)
 80011c6:	f003 f9cd 	bl	8004564 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011d0:	f000 f936 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_TIM3_Init+0x94>)
 80011e2:	f003 fd2f 	bl	8004c44 <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 f928 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f0:	2320      	movs	r3, #32
 80011f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM3_Init+0x94>)
 80011fe:	f004 f8dd 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001208:	f000 f91a 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200003d4 	.word	0x200003d4
 8001218:	40000400 	.word	0x40000400

0800121c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_TIM5_Init+0x94>)
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <MX_TIM5_Init+0x98>)
 800123c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_TIM5_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_TIM5_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_TIM5_Init+0x94>)
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_TIM5_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM5_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800125e:	4814      	ldr	r0, [pc, #80]	; (80012b0 <MX_TIM5_Init+0x94>)
 8001260:	f003 f980 	bl	8004564 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800126a:	f000 f8e9 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM5_Init+0x94>)
 800127c:	f003 fce2 	bl	8004c44 <HAL_TIM_ConfigClockSource>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 f8db 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_TIM5_Init+0x94>)
 8001298:	f004 f890 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012a2:	f000 f8cd 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000041c 	.word	0x2000041c
 80012b4:	40000c00 	.word	0x40000c00

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2105      	movs	r1, #5
 80012de:	2038      	movs	r0, #56	; 0x38
 80012e0:	f001 faca 	bl	8002878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e4:	2038      	movs	r0, #56	; 0x38
 80012e6:	f001 fae3 	bl	80028b0 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b3e      	ldr	r3, [pc, #248]	; (800140c <MX_GPIO_Init+0x114>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a3d      	ldr	r2, [pc, #244]	; (800140c <MX_GPIO_Init+0x114>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <MX_GPIO_Init+0x114>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <MX_GPIO_Init+0x114>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a36      	ldr	r2, [pc, #216]	; (800140c <MX_GPIO_Init+0x114>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <MX_GPIO_Init+0x114>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <MX_GPIO_Init+0x114>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2f      	ldr	r2, [pc, #188]	; (800140c <MX_GPIO_Init+0x114>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_GPIO_Init+0x114>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_GPIO_Init+0x114>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a28      	ldr	r2, [pc, #160]	; (800140c <MX_GPIO_Init+0x114>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_GPIO_Init+0x114>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_GPIO_Init+0x118>)
 8001384:	f001 ff96 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	4820      	ldr	r0, [pc, #128]	; (8001410 <MX_GPIO_Init+0x118>)
 8001390:	f001 ff90 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2128      	movs	r1, #40	; 0x28
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <MX_GPIO_Init+0x11c>)
 800139a:	f001 ff8b 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <MX_GPIO_Init+0x120>)
 80013b6:	f001 fdf9 	bl	8002fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 80013ba:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480f      	ldr	r0, [pc, #60]	; (8001410 <MX_GPIO_Init+0x118>)
 80013d4:	f001 fdea 	bl	8002fac <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 80013d8:	2328      	movs	r3, #40	; 0x28
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_GPIO_Init+0x11c>)
 80013f0:	f001 fddc 	bl	8002fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2105      	movs	r1, #5
 80013f8:	2028      	movs	r0, #40	; 0x28
 80013fa:	f001 fa3d 	bl	8002878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013fe:	2028      	movs	r0, #40	; 0x28
 8001400:	f001 fa56 	bl	80028b0 <HAL_NVIC_EnableIRQ>

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800

0800141c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800142e:	f000 fd63 	bl	8001ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af04      	add	r7, sp, #16
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2301      	movs	r3, #1
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	2200      	movs	r2, #0
 8001468:	2178      	movs	r1, #120	; 0x78
 800146a:	4803      	ldr	r0, [pc, #12]	; (8001478 <ssd1306_WriteCommand+0x2c>)
 800146c:	f002 f898 	bl	80035a0 <HAL_I2C_Mem_Write>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000338 	.word	0x20000338

0800147c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af04      	add	r7, sp, #16
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	9202      	str	r2, [sp, #8]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	2240      	movs	r2, #64	; 0x40
 800149a:	2178      	movs	r1, #120	; 0x78
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <ssd1306_WriteData+0x30>)
 800149e:	f002 f87f 	bl	80035a0 <HAL_I2C_Mem_Write>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000338 	.word	0x20000338

080014b0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fa85 	bl	80019c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014ba:	2020      	movs	r0, #32
 80014bc:	f7ff ffc6 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ffc3 	bl	800144c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014c6:	20b0      	movs	r0, #176	; 0xb0
 80014c8:	f7ff ffc0 	bl	800144c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014cc:	20c8      	movs	r0, #200	; 0xc8
 80014ce:	f7ff ffbd 	bl	800144c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ffba 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014d8:	2010      	movs	r0, #16
 80014da:	f7ff ffb7 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014de:	2040      	movs	r0, #64	; 0x40
 80014e0:	f7ff ffb4 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014e4:	20ff      	movs	r0, #255	; 0xff
 80014e6:	f000 fa59 	bl	800199c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014ea:	20a1      	movs	r0, #161	; 0xa1
 80014ec:	f7ff ffae 	bl	800144c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014f0:	20a6      	movs	r0, #166	; 0xa6
 80014f2:	f7ff ffab 	bl	800144c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80014f6:	20a8      	movs	r0, #168	; 0xa8
 80014f8:	f7ff ffa8 	bl	800144c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80014fc:	203f      	movs	r0, #63	; 0x3f
 80014fe:	f7ff ffa5 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001502:	20a4      	movs	r0, #164	; 0xa4
 8001504:	f7ff ffa2 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001508:	20d3      	movs	r0, #211	; 0xd3
 800150a:	f7ff ff9f 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff ff9c 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001514:	20d5      	movs	r0, #213	; 0xd5
 8001516:	f7ff ff99 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800151a:	20f0      	movs	r0, #240	; 0xf0
 800151c:	f7ff ff96 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001520:	20d9      	movs	r0, #217	; 0xd9
 8001522:	f7ff ff93 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001526:	2022      	movs	r0, #34	; 0x22
 8001528:	f7ff ff90 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800152c:	20da      	movs	r0, #218	; 0xda
 800152e:	f7ff ff8d 	bl	800144c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001532:	2012      	movs	r0, #18
 8001534:	f7ff ff8a 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001538:	20db      	movs	r0, #219	; 0xdb
 800153a:	f7ff ff87 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800153e:	2020      	movs	r0, #32
 8001540:	f7ff ff84 	bl	800144c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001544:	208d      	movs	r0, #141	; 0x8d
 8001546:	f7ff ff81 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800154a:	2014      	movs	r0, #20
 800154c:	f7ff ff7e 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001550:	2001      	movs	r0, #1
 8001552:	f000 fa37 	bl	80019c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f810 	bl	800157c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800155c:	f000 f832 	bl	80015c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <ssd1306_Init+0xc8>)
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <ssd1306_Init+0xc8>)
 8001568:	2200      	movs	r2, #0
 800156a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <ssd1306_Init+0xc8>)
 800156e:	2201      	movs	r2, #1
 8001570:	711a      	strb	r2, [r3, #4]
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000eac 	.word	0x20000eac

0800157c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e00d      	b.n	80015a8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <ssd1306_Fill+0x1a>
 8001592:	2100      	movs	r1, #0
 8001594:	e000      	b.n	8001598 <ssd1306_Fill+0x1c>
 8001596:	21ff      	movs	r1, #255	; 0xff
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <ssd1306_Fill+0x44>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	460a      	mov	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	d3ed      	bcc.n	800158c <ssd1306_Fill+0x10>
    }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000aac 	.word	0x20000aac

080015c4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e016      	b.n	80015fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	3b50      	subs	r3, #80	; 0x50
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff38 	bl	800144c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff ff35 	bl	800144c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015e2:	2010      	movs	r0, #16
 80015e4:	f7ff ff32 	bl	800144c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <ssd1306_UpdateScreen+0x4c>)
 80015ee:	4413      	add	r3, r2
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff42 	bl	800147c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	3301      	adds	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b07      	cmp	r3, #7
 8001602:	d9e5      	bls.n	80015d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000aac 	.word	0x20000aac

08001614 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	460b      	mov	r3, r1
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db3d      	blt.n	80016aa <ssd1306_DrawPixel+0x96>
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	2b3f      	cmp	r3, #63	; 0x3f
 8001632:	d83a      	bhi.n	80016aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11a      	bne.n	8001670 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	4603      	mov	r3, r0
 8001644:	01db      	lsls	r3, r3, #7
 8001646:	4413      	add	r3, r2
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <ssd1306_DrawPixel+0xa4>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	b25a      	sxtb	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b259      	sxtb	r1, r3
 8001660:	79fa      	ldrb	r2, [r7, #7]
 8001662:	4603      	mov	r3, r0
 8001664:	01db      	lsls	r3, r3, #7
 8001666:	4413      	add	r3, r2
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <ssd1306_DrawPixel+0xa4>)
 800166c:	54d1      	strb	r1, [r2, r3]
 800166e:	e01d      	b.n	80016ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b2d8      	uxtb	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	01db      	lsls	r3, r3, #7
 800167c:	4413      	add	r3, r2
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <ssd1306_DrawPixel+0xa4>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	b25a      	sxtb	r2, r3
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	b25b      	sxtb	r3, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4013      	ands	r3, r2
 8001698:	b259      	sxtb	r1, r3
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	4603      	mov	r3, r0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4413      	add	r3, r2
 80016a2:	b2c9      	uxtb	r1, r1
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <ssd1306_DrawPixel+0xa4>)
 80016a6:	54d1      	strb	r1, [r2, r3]
 80016a8:	e000      	b.n	80016ac <ssd1306_DrawPixel+0x98>
        return;
 80016aa:	bf00      	nop
    }
}
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000aac 	.word	0x20000aac

080016bc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	1d38      	adds	r0, r7, #4
 80016c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80016ca:	461a      	mov	r2, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	4613      	mov	r3, r2
 80016d2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b1f      	cmp	r3, #31
 80016d8:	d902      	bls.n	80016e0 <ssd1306_WriteChar+0x24>
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b7e      	cmp	r3, #126	; 0x7e
 80016de:	d901      	bls.n	80016e4 <ssd1306_WriteChar+0x28>
        return 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e06d      	b.n	80017c0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	793b      	ldrb	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	2b80      	cmp	r3, #128	; 0x80
 80016f0:	dc06      	bgt.n	8001700 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 80016f4:	885b      	ldrh	r3, [r3, #2]
 80016f6:	461a      	mov	r2, r3
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	dd01      	ble.n	8001704 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001700:	2300      	movs	r3, #0
 8001702:	e05d      	b.n	80017c0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e04c      	b.n	80017a4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	3b20      	subs	r3, #32
 8001710:	7979      	ldrb	r1, [r7, #5]
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4619      	mov	r1, r3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	440b      	add	r3, r1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	e034      	b.n	8001794 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d012      	beq.n	8001760 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 800174a:	885b      	ldrh	r3, [r3, #2]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	7bba      	ldrb	r2, [r7, #14]
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff ff5b 	bl	8001614 <ssd1306_DrawPixel>
 800175e:	e016      	b.n	800178e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b2d8      	uxtb	r0, r3
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 8001770:	885b      	ldrh	r3, [r3, #2]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4413      	add	r3, r2
 800177a:	b2d9      	uxtb	r1, r3
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	f7ff ff43 	bl	8001614 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3301      	adds	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	793b      	ldrb	r3, [r7, #4]
 8001796:	461a      	mov	r2, r3
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4293      	cmp	r3, r2
 800179c:	d3c5      	bcc.n	800172a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	797b      	ldrb	r3, [r7, #5]
 80017a6:	461a      	mov	r2, r3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d3ad      	bcc.n	800170a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	793b      	ldrb	r3, [r7, #4]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <ssd1306_WriteChar+0x10c>)
 80017bc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3724      	adds	r7, #36	; 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	20000eac 	.word	0x20000eac

080017cc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	1d38      	adds	r0, r7, #4
 80017d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80017da:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80017dc:	e012      	b.n	8001804 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	7818      	ldrb	r0, [r3, #0]
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	1d3a      	adds	r2, r7, #4
 80017e6:	ca06      	ldmia	r2, {r1, r2}
 80017e8:	f7ff ff68 	bl	80016bc <ssd1306_WriteChar>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d002      	beq.n	80017fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	e008      	b.n	8001810 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e8      	bne.n	80017de <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <ssd1306_SetCursor+0x2c>)
 800182e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <ssd1306_SetCursor+0x2c>)
 8001836:	805a      	strh	r2, [r3, #2]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000eac 	.word	0x20000eac

08001848 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	4603      	mov	r3, r0
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	460b      	mov	r3, r1
 8001860:	717b      	strb	r3, [r7, #5]
 8001862:	4613      	mov	r3, r2
 8001864:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001866:	797a      	ldrb	r2, [r7, #5]
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	bfb8      	it	lt
 8001870:	425b      	neglt	r3, r3
 8001872:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001874:	793a      	ldrb	r2, [r7, #4]
 8001876:	79bb      	ldrb	r3, [r7, #6]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	bfb8      	it	lt
 800187e:	425b      	neglt	r3, r3
 8001880:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	429a      	cmp	r2, r3
 8001888:	d201      	bcs.n	800188e <ssd1306_Line+0x46>
 800188a:	2301      	movs	r3, #1
 800188c:	e001      	b.n	8001892 <ssd1306_Line+0x4a>
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001894:	79ba      	ldrb	r2, [r7, #6]
 8001896:	793b      	ldrb	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d201      	bcs.n	80018a0 <ssd1306_Line+0x58>
 800189c:	2301      	movs	r3, #1
 800189e:	e001      	b.n	80018a4 <ssd1306_Line+0x5c>
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80018ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018b2:	7939      	ldrb	r1, [r7, #4]
 80018b4:	797b      	ldrb	r3, [r7, #5]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff feac 	bl	8001614 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80018bc:	e024      	b.n	8001908 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80018be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018c2:	79b9      	ldrb	r1, [r7, #6]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fea4 	bl	8001614 <ssd1306_DrawPixel>
    error2 = error * 2;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	425b      	negs	r3, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dd08      	ble.n	80018ee <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4413      	add	r3, r2
 80018ec:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	da08      	bge.n	8001908 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	797b      	ldrb	r3, [r7, #5]
 800190c:	429a      	cmp	r2, r3
 800190e:	d1d6      	bne.n	80018be <ssd1306_Line+0x76>
 8001910:	79ba      	ldrb	r2, [r7, #6]
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d1d2      	bne.n	80018be <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001918:	bf00      	nop
}
 800191a:	3724      	adds	r7, #36	; 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}

08001920 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	af02      	add	r7, sp, #8
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	4603      	mov	r3, r0
 8001934:	71bb      	strb	r3, [r7, #6]
 8001936:	460b      	mov	r3, r1
 8001938:	717b      	strb	r3, [r7, #5]
 800193a:	4613      	mov	r3, r2
 800193c:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 800193e:	79ba      	ldrb	r2, [r7, #6]
 8001940:	797b      	ldrb	r3, [r7, #5]
 8001942:	4413      	add	r3, r2
 8001944:	b2dc      	uxtb	r4, r3
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	79b9      	ldrb	r1, [r7, #6]
 800194a:	79f8      	ldrb	r0, [r7, #7]
 800194c:	793b      	ldrb	r3, [r7, #4]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4623      	mov	r3, r4
 8001952:	f7ff ff79 	bl	8001848 <ssd1306_Line>
	return;
 8001956:	bf00      	nop
}
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}

0800195e <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	b085      	sub	sp, #20
 8001962:	af02      	add	r7, sp, #8
 8001964:	4604      	mov	r4, r0
 8001966:	4608      	mov	r0, r1
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	4623      	mov	r3, r4
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4603      	mov	r3, r0
 8001972:	71bb      	strb	r3, [r7, #6]
 8001974:	460b      	mov	r3, r1
 8001976:	717b      	strb	r3, [r7, #5]
 8001978:	4613      	mov	r3, r2
 800197a:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	4413      	add	r3, r2
 8001982:	b2da      	uxtb	r2, r3
 8001984:	79bc      	ldrb	r4, [r7, #6]
 8001986:	79b9      	ldrb	r1, [r7, #6]
 8001988:	79f8      	ldrb	r0, [r7, #7]
 800198a:	793b      	ldrb	r3, [r7, #4]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4623      	mov	r3, r4
 8001990:	f7ff ff5a 	bl	8001848 <ssd1306_Line>
	return;
 8001994:	bf00      	nop
}
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}

0800199c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019a6:	2381      	movs	r3, #129	; 0x81
 80019a8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fd4d 	bl	800144c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd49 	bl	800144c <ssd1306_WriteCommand>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019d4:	23af      	movs	r3, #175	; 0xaf
 80019d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <ssd1306_SetDisplayOn+0x38>)
 80019da:	2201      	movs	r2, #1
 80019dc:	715a      	strb	r2, [r3, #5]
 80019de:	e004      	b.n	80019ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019e0:	23ae      	movs	r3, #174	; 0xae
 80019e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <ssd1306_SetDisplayOn+0x38>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fd2d 	bl	800144c <ssd1306_WriteCommand>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000eac 	.word	0x20000eac

08001a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_MspInit+0x54>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_MspInit+0x54>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_MspInit+0x54>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_MspInit+0x54>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_MspInit+0x54>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_MspInit+0x54>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	210f      	movs	r1, #15
 8001a42:	f06f 0001 	mvn.w	r0, #1
 8001a46:	f000 ff17 	bl	8002878 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_ADC_MspInit+0xd8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d156      	bne.n	8001b28 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_ADC_MspInit+0xdc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <HAL_ADC_MspInit+0xe0>)
 8001ac6:	f001 fa71 	bl	8002fac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_ADC_MspInit+0xe8>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001af4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001b0e:	f000 fedd 	bl	80028cc <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b18:	f7ff fc92 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
 8001b22:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_ADC_MspInit+0xe4>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40012000 	.word	0x40012000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	200002d8 	.word	0x200002d8
 8001b40:	40026410 	.word	0x40026410

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_I2C_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12c      	bne.n	8001bc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b88:	2312      	movs	r3, #18
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b94:	2304      	movs	r3, #4
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <HAL_I2C_MspInit+0x8c>)
 8001ba0:	f001 fa04 	bl	8002fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d10d      	bne.n	8001c02 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_TIM_OC_MspInit+0x3c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_TIM_OC_MspInit+0x3c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_TIM_OC_MspInit+0x3c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_TIM_Base_MspInit+0x64>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c42:	e012      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <HAL_TIM_Base_MspInit+0x6c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10d      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40000c00 	.word	0x40000c00

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca4:	d11e      	bne.n	8001ce4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	f001 f964 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6453      	str	r3, [r2, #68]	; 0x44
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d20:	f107 020c 	add.w	r2, r7, #12
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fbe8 	bl	8004500 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d30:	f002 fbd2 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8001d34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_InitTick+0xd4>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3b01      	subs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d46:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_InitTick+0xdc>)
 8001d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d6c:	f002 fbfa 	bl	8004564 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11b      	bne.n	8001db6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d7e:	4813      	ldr	r0, [pc, #76]	; (8001dcc <HAL_InitTick+0xd8>)
 8001d80:	f002 fc9a 	bl	80046b8 <HAL_TIM_Base_Start_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d111      	bne.n	8001db6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d92:	2019      	movs	r0, #25
 8001d94:	f000 fd8c 	bl	80028b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d808      	bhi.n	8001db0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	2019      	movs	r0, #25
 8001da4:	f000 fd68 	bl	8002878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0xe0>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e002      	b.n	8001db6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	20000eb4 	.word	0x20000eb4
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	20000014 	.word	0x20000014

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <NMI_Handler+0x4>

08001dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e0a:	f002 fdb7 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000eb4 	.word	0x20000eb4

08001e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e20:	f001 fa62 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <DMA2_Stream0_IRQHandler+0x10>)
 8001e2e:	f000 fe53 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200002d8 	.word	0x200002d8

08001e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e7c:	4c0b      	ldr	r4, [pc, #44]	; (8001eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8a:	f7ff ffd7 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f004 fd75 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7fe fffd 	bl	8000e90 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ea4:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8001ea8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001eac:	20004c54 	.word	0x20004c54

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <HAL_Init+0x40>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_Init+0x40>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_Init+0x40>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 fcc0 	bl	8002862 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	200f      	movs	r0, #15
 8001ee4:	f7ff ff06 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fd8a 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000018 	.word	0x20000018
 8001f1c:	20000efc 	.word	0x20000efc

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000efc 	.word	0x20000efc

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fd7e 	bl	8001a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa3e 	bl	800240c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start_DMA+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0ce      	b.n	800217c <HAL_ADC_Start_DMA+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_ADC_Start_DMA+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5f      	ldr	r2, [pc, #380]	; (8002188 <HAL_ADC_Start_DMA+0x1c8>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3b01      	subs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d107      	bne.n	8002046 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002044:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 8086 	bne.w	8002162 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002094:	d106      	bne.n	80020a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f023 0206 	bic.w	r2, r3, #6
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_ADC_Start_DMA+0x1cc>)
 80020b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_ADC_Start_DMA+0x1d0>)
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <HAL_ADC_Start_DMA+0x1d4>)
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4a33      	ldr	r2, [pc, #204]	; (8002198 <HAL_ADC_Start_DMA+0x1d8>)
 80020cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	334c      	adds	r3, #76	; 0x4c
 8002102:	4619      	mov	r1, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f000 fc8e 	bl	8002a28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10f      	bne.n	8002138 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d129      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e020      	b.n	800217a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_ADC_Start_DMA+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d11b      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d114      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e00b      	b.n	800217a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000010 	.word	0x20000010
 8002188:	431bde83 	.word	0x431bde83
 800218c:	40012300 	.word	0x40012300
 8002190:	08002605 	.word	0x08002605
 8002194:	080026bf 	.word	0x080026bf
 8002198:	080026db 	.word	0x080026db
 800219c:	40012000 	.word	0x40012000

080021a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e105      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x228>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d925      	bls.n	8002240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43da      	mvns	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	400a      	ands	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	4603      	mov	r3, r0
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4403      	add	r3, r0
 8002232:	3b1e      	subs	r3, #30
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e022      	b.n	8002286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	2207      	movs	r2, #7
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	4603      	mov	r3, r0
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4403      	add	r3, r0
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b06      	cmp	r3, #6
 800228c:	d824      	bhi.n	80022d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b05      	subs	r3, #5
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b05      	subs	r3, #5
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
 80022d6:	e04c      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d824      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b23      	subs	r3, #35	; 0x23
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43da      	mvns	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	400a      	ands	r2, r1
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b23      	subs	r3, #35	; 0x23
 800231c:	fa00 f203 	lsl.w	r2, r0, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
 8002328:	e023      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b41      	subs	r3, #65	; 0x41
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b41      	subs	r3, #65	; 0x41
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_ADC_ConfigChannel+0x234>)
 8002374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_ADC_ConfigChannel+0x238>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d109      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1cc>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b12      	cmp	r3, #18
 8002386:	d105      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_ADC_ConfigChannel+0x238>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d123      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d003      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x1e6>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d11b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_ADC_ConfigChannel+0x23c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_ADC_ConfigChannel+0x240>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9a      	lsrs	r2, r3, #18
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40012300 	.word	0x40012300
 8002400:	40012000 	.word	0x40012000
 8002404:	20000010 	.word	0x20000010
 8002408:	431bde83 	.word	0x431bde83

0800240c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002414:	4b79      	ldr	r3, [pc, #484]	; (80025fc <ADC_Init+0x1f0>)
 8002416:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	4a58      	ldr	r2, [pc, #352]	; (8002600 <ADC_Init+0x1f4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e00f      	b.n	800250a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0202 	bic.w	r2, r2, #2
 8002518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	005a      	lsls	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	035a      	lsls	r2, r3, #13
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e007      	b.n	8002580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	3b01      	subs	r3, #1
 800259c:	051a      	lsls	r2, r3, #20
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c2:	025a      	lsls	r2, r3, #9
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	029a      	lsls	r2, r3, #10
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012300 	.word	0x40012300
 8002600:	0f000001 	.word	0x0f000001

08002604 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800261a:	2b00      	cmp	r3, #0
 800261c:	d13c      	bne.n	8002698 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d127      	bne.n	8002690 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0220 	bic.w	r2, r2, #32
 800266a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7fe fba5 	bl	8000de0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002696:	e00e      	b.n	80026b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fd85 	bl	80021b4 <HAL_ADC_ErrorCallback>
}
 80026aa:	e004      	b.n	80026b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7ff fd67 	bl	80021a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2240      	movs	r2, #64	; 0x40
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff fd5a 	bl	80021b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff4c 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288a:	f7ff ff61 	bl	8002750 <__NVIC_GetPriorityGrouping>
 800288e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	6978      	ldr	r0, [r7, #20]
 8002896:	f7ff ffb1 	bl	80027fc <NVIC_EncodePriority>
 800289a:	4602      	mov	r2, r0
 800289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff80 	bl	80027a8 <__NVIC_SetPriority>
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff54 	bl	800276c <__NVIC_EnableIRQ>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fb22 	bl	8001f20 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e099      	b.n	8002a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002908:	e00f      	b.n	800292a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290a:	f7ff fb09 	bl	8001f20 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b05      	cmp	r3, #5
 8002916:	d908      	bls.n	800292a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e078      	b.n	8002a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e8      	bne.n	800290a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_DMA_Init+0x158>)
 8002944:	4013      	ands	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4313      	orrs	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d117      	bne.n	80029ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa6f 	bl	8002eb4 <DMA_CheckFifoParam>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029ea:	2301      	movs	r3, #1
 80029ec:	e016      	b.n	8002a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa26 	bl	8002e48 <DMA_CalcBaseAndBitshift>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	223f      	movs	r2, #63	; 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	f010803f 	.word	0xf010803f

08002a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Start_IT+0x26>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e040      	b.n	8002ad0 <HAL_DMA_Start_IT+0xa8>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d12f      	bne.n	8002ac2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f9b8 	bl	8002dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	223f      	movs	r2, #63	; 0x3f
 8002a82:	409a      	lsls	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0216 	orr.w	r2, r2, #22
 8002a96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0208 	orr.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e005      	b.n	8002ace <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <HAL_DMA_IRQHandler+0x248>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8e      	ldr	r2, [pc, #568]	; (8002d24 <HAL_DMA_IRQHandler+0x24c>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2208      	movs	r2, #8
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2208      	movs	r2, #8
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2204      	movs	r2, #4
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d043      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03c      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e01f      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e016      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0208 	bic.w	r2, r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 808f 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8087 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2220      	movs	r2, #32
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d136      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0216 	bic.w	r2, r2, #22
 8002c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x1da>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0208 	bic.w	r2, r2, #8
 8002cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	223f      	movs	r2, #63	; 0x3f
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d07e      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
        }
        return;
 8002cee:	e079      	b.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d031      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e02c      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
 8002d1e:	bf00      	nop
 8002d20:	20000010 	.word	0x20000010
 8002d24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d023      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e01e      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0210 	bic.w	r2, r2, #16
 8002d56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d032      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d307      	bcc.n	8002dc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f2      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x2cc>
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de4:	bf00      	nop
    }
  }
}
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d108      	bne.n	8002e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e2a:	e007      	b.n	8002e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3b10      	subs	r3, #16
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <DMA_CalcBaseAndBitshift+0x64>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d909      	bls.n	8002e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	1d1a      	adds	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	659a      	str	r2, [r3, #88]	; 0x58
 8002e88:	e007      	b.n	8002e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	aaaaaaab 	.word	0xaaaaaaab
 8002eb0:	080070a8 	.word	0x080070a8

08002eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11f      	bne.n	8002f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d856      	bhi.n	8002f82 <DMA_CheckFifoParam+0xce>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <DMA_CheckFifoParam+0x28>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002eff 	.word	0x08002eff
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f83 	.word	0x08002f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d046      	beq.n	8002f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efc:	e043      	b.n	8002f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f06:	d140      	bne.n	8002f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e03d      	b.n	8002f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d121      	bne.n	8002f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d837      	bhi.n	8002f8e <DMA_CheckFifoParam+0xda>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <DMA_CheckFifoParam+0x70>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f3b 	.word	0x08002f3b
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	08002f4d 	.word	0x08002f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e030      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d025      	beq.n	8002f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4a:	e022      	b.n	8002f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f54:	d11f      	bne.n	8002f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f5a:	e01c      	b.n	8002f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d903      	bls.n	8002f6a <DMA_CheckFifoParam+0xb6>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d003      	beq.n	8002f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f68:	e018      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6e:	e015      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e00b      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f82:	bf00      	nop
 8002f84:	e00a      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e008      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e006      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e004      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e002      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f96:	bf00      	nop
 8002f98:	e000      	b.n	8002f9c <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e159      	b.n	800327c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	f040 8148 	bne.w	8003276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d005      	beq.n	8002ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d130      	bne.n	8003060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 0201 	and.w	r2, r3, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b03      	cmp	r3, #3
 800306a:	d017      	beq.n	800309c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d123      	bne.n	80030f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a2 	beq.w	8003276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 800313c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 8003142:	4b54      	ldr	r3, [pc, #336]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314e:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_GPIO_Init+0x2ec>)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a49      	ldr	r2, [pc, #292]	; (800329c <HAL_GPIO_Init+0x2f0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d019      	beq.n	80031ae <HAL_GPIO_Init+0x202>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a48      	ldr	r2, [pc, #288]	; (80032a0 <HAL_GPIO_Init+0x2f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_GPIO_Init+0x1fe>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_GPIO_Init+0x2f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00d      	beq.n	80031a6 <HAL_GPIO_Init+0x1fa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_GPIO_Init+0x2fc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <HAL_GPIO_Init+0x1f6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a45      	ldr	r2, [pc, #276]	; (80032ac <HAL_GPIO_Init+0x300>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_GPIO_Init+0x1f2>
 800319a:	2304      	movs	r3, #4
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 800319e:	2307      	movs	r3, #7
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031ae:	2300      	movs	r3, #0
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x2ec>)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f2:	4a2f      	ldr	r2, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_GPIO_Init+0x304>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003246:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_GPIO_Init+0x304>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	f67f aea2 	bls.w	8002fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fc54 	bl	8000bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e12b      	b.n	8003582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fc00 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800337a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800337c:	f001 f898 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a81      	ldr	r2, [pc, #516]	; (800358c <HAL_I2C_Init+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d807      	bhi.n	800339c <HAL_I2C_Init+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_I2C_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e006      	b.n	80033aa <HAL_I2C_Init+0x92>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a7d      	ldr	r2, [pc, #500]	; (8003594 <HAL_I2C_Init+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e7      	b.n	8003582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a78      	ldr	r2, [pc, #480]	; (8003598 <HAL_I2C_Init+0x280>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	; (800358c <HAL_I2C_Init+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <HAL_I2C_Init+0xd4>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e009      	b.n	8003400 <HAL_I2C_Init+0xe8>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_I2C_Init+0x284>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003412:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	495c      	ldr	r1, [pc, #368]	; (800358c <HAL_I2C_Init+0x274>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d819      	bhi.n	8003454 <HAL_I2C_Init+0x13c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e59      	subs	r1, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fbb1 f3f3 	udiv	r3, r1, r3
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003434:	400b      	ands	r3, r1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_I2C_Init+0x138>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb1 f3f3 	udiv	r3, r1, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	e051      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003450:	2304      	movs	r3, #4
 8003452:	e04f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <HAL_I2C_Init+0x168>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e012      	b.n	80034a6 <HAL_I2C_Init+0x18e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	0099      	lsls	r1, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x196>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e022      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <HAL_I2C_Init+0x1bc>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e58      	subs	r0, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	0099      	lsls	r1, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6911      	ldr	r1, [r2, #16]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	000186a0 	.word	0x000186a0
 8003590:	001e847f 	.word	0x001e847f
 8003594:	003d08ff 	.word	0x003d08ff
 8003598:	431bde83 	.word	0x431bde83
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ba:	f7fe fcb1 	bl	8001f20 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	f040 80d9 	bne.w	8003780 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2319      	movs	r3, #25
 80035d4:	2201      	movs	r2, #1
 80035d6:	496d      	ldr	r1, [pc, #436]	; (800378c <HAL_I2C_Mem_Write+0x1ec>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f971 	bl	80038c0 <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
 80035e6:	e0cc      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Mem_Write+0x56>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0c5      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d007      	beq.n	800361c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2221      	movs	r2, #33	; 0x21
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a4d      	ldr	r2, [pc, #308]	; (8003790 <HAL_I2C_Mem_Write+0x1f0>)
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365e:	88f8      	ldrh	r0, [r7, #6]
 8003660:	893a      	ldrh	r2, [r7, #8]
 8003662:	8979      	ldrh	r1, [r7, #10]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4603      	mov	r3, r0
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f890 	bl	8003794 <I2C_RequestMemoryWrite>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d052      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e081      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f9f2 	bl	8003a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b04      	cmp	r3, #4
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06b      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11b      	bne.n	8003720 <HAL_I2C_Mem_Write+0x180>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d017      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1aa      	bne.n	800367e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f9de 	bl	8003aee <I2C_WaitOnBTFFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e016      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000

08003794 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f878 	bl	80038c0 <I2C_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d103      	bne.n	80037ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e05f      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003800:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	492d      	ldr	r1, [pc, #180]	; (80038bc <I2C_RequestMemoryWrite+0x128>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f8b0 	bl	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04c      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	6a39      	ldr	r1, [r7, #32]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f91a 	bl	8003a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b04      	cmp	r3, #4
 8003844:	d107      	bne.n	8003856 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e02b      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	e021      	b.n	80038b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b29b      	uxth	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8f4 	bl	8003a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e005      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a6:	893b      	ldrh	r3, [r7, #8]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	00010002 	.word	0x00010002

080038c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d0:	e025      	b.n	800391e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d021      	beq.n	800391e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe fb21 	bl	8001f20 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e023      	b.n	8003966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10d      	bne.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	e00c      	b.n	800395e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d0b6      	beq.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397c:	e051      	b.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d123      	bne.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0204 	orr.w	r2, r3, #4
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e046      	b.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d021      	beq.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fa9f 	bl	8001f20 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d116      	bne.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e020      	b.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10c      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	43da      	mvns	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	e00b      	b.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d18d      	bne.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a78:	e02d      	b.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f878 	bl	8003b70 <I2C_IsAcknowledgeFailed>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02d      	b.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d021      	beq.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fa45 	bl	8001f20 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d1ca      	bne.n	8003a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003afa:	e02d      	b.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f837 	bl	8003b70 <I2C_IsAcknowledgeFailed>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e02d      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d021      	beq.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7fe fa04 	bl	8001f20 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d116      	bne.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e007      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d1ca      	bne.n	8003afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b86:	d11b      	bne.n	8003bc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e267      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e242      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe f94a 	bl	8001f20 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe f946 	bl	8001f20 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e207      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f936 	bl	8001f20 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f932 	bl	8001f20 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f3      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4937      	ldr	r1, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe f8eb 	bl	8001f20 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe f8e7 	bl	8001f20 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a8      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4925      	ldr	r1, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe f8ca 	bl	8001f20 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe f8c6 	bl	8001f20 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e187      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe f8aa 	bl	8001f20 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f8a6 	bl	8001f20 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e167      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f893 	bl	8001f20 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f88f 	bl	8001f20 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d907      	bls.n	8003e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e150      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	42470000 	.word	0x42470000
 8003e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ea      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8097 	beq.w	8003f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b74      	ldr	r3, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f84f 	bl	8001f20 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe f84b 	bl	8001f20 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e10c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x2ea>
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a63      	ldr	r2, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x30c>
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003edc:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a54      	ldr	r2, [pc, #336]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe f810 	bl	8001f20 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f80c 	bl	8001f20 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0cb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fd fffa 	bl	8001f20 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd fff6 	bl	8001f20 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b5      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a1 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d05c      	beq.n	8004034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d141      	bne.n	8004006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd ffca 	bl	8001f20 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd ffc6 	bl	8001f20 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fd ff9f 	bl	8001f20 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd ff9b 	bl	8001f20 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e05c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x416>
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd ff88 	bl	8001f20 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd ff84 	bl	8001f20 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd feb6 	bl	8001f20 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd feb2 	bl	8001f20 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd fd44 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	08007090 	.word	0x08007090
 8004284:	20000010 	.word	0x20000010
 8004288:	20000014 	.word	0x20000014

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b094      	sub	sp, #80	; 0x50
 8004292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
 8004298:	2300      	movs	r3, #0
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	2300      	movs	r3, #0
 800429e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a4:	4b79      	ldr	r3, [pc, #484]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d00d      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x40>
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 80e1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042be:	e0db      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b73      	ldr	r3, [pc, #460]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042c4:	e0db      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b73      	ldr	r3, [pc, #460]	; (8004494 <HAL_RCC_GetSysClockFreq+0x208>)
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ca:	e0d8      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	0159      	lsls	r1, r3, #5
 800430c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004310:	0150      	lsls	r0, r2, #5
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4621      	mov	r1, r4
 8004318:	1a51      	subs	r1, r2, r1
 800431a:	6139      	str	r1, [r7, #16]
 800431c:	4629      	mov	r1, r5
 800431e:	eb63 0301 	sbc.w	r3, r3, r1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004330:	4659      	mov	r1, fp
 8004332:	018b      	lsls	r3, r1, #6
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433a:	4651      	mov	r1, sl
 800433c:	018a      	lsls	r2, r1, #6
 800433e:	4651      	mov	r1, sl
 8004340:	ebb2 0801 	subs.w	r8, r2, r1
 8004344:	4659      	mov	r1, fp
 8004346:	eb63 0901 	sbc.w	r9, r3, r1
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800435e:	4690      	mov	r8, r2
 8004360:	4699      	mov	r9, r3
 8004362:	4623      	mov	r3, r4
 8004364:	eb18 0303 	adds.w	r3, r8, r3
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	462b      	mov	r3, r5
 800436c:	eb49 0303 	adc.w	r3, r9, r3
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800437e:	4629      	mov	r1, r5
 8004380:	024b      	lsls	r3, r1, #9
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004388:	4621      	mov	r1, r4
 800438a:	024a      	lsls	r2, r1, #9
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2200      	movs	r2, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439c:	f7fb ff20 	bl	80001e0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4613      	mov	r3, r2
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	e058      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	4611      	mov	r1, r2
 80043b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	0159      	lsls	r1, r3, #5
 80043d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d6:	0150      	lsls	r0, r2, #5
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4641      	mov	r1, r8
 80043de:	ebb2 0a01 	subs.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004400:	eb63 050b 	sbc.w	r5, r3, fp
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	00eb      	lsls	r3, r5, #3
 800440e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004412:	00e2      	lsls	r2, r4, #3
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4643      	mov	r3, r8
 800441a:	18e3      	adds	r3, r4, r3
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	464b      	mov	r3, r9
 8004420:	eb45 0303 	adc.w	r3, r5, r3
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004432:	4629      	mov	r1, r5
 8004434:	028b      	lsls	r3, r1, #10
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800443c:	4621      	mov	r1, r4
 800443e:	028a      	lsls	r2, r1, #10
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	61fa      	str	r2, [r7, #28]
 800444c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004450:	f7fb fec6 	bl	80001e0 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800446c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004480:	4618      	mov	r0, r3
 8004482:	3750      	adds	r7, #80	; 0x50
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000010 	.word	0x20000010

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	080070a0 	.word	0x080070a0

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044dc:	f7ff ffdc 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0b5b      	lsrs	r3, r3, #13
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	080070a0 	.word	0x080070a0

08004500 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	220f      	movs	r2, #15
 800450e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0203 	and.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_GetClockConfig+0x5c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <HAL_RCC_GetClockConfig+0x60>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	40023c00 	.word	0x40023c00

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fb42 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fc3e 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e03c      	b.n	8004696 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_TIM_Base_Start+0xa0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d013      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_TIM_Base_Start+0xa4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_TIM_Base_Start+0xa8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <HAL_TIM_Base_Start+0xac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIM_Base_Start+0x5c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <HAL_TIM_Base_Start+0xb0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d010      	beq.n	8004694 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e007      	b.n	8004694 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e044      	b.n	800475a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x6c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x6c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_TIM_Base_Start_IT+0xb4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x6c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_TIM_Base_Start_IT+0xb8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x6c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_TIM_Base_Start_IT+0xbc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x6c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_TIM_Base_Start_IT+0xc0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40014000 	.word	0x40014000

0800477c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fa16 	bl	8001bd4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fb32 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_TIM_OC_Start+0x24>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e022      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d109      	bne.n	800485a <HAL_TIM_OC_Start+0x3e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e015      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d109      	bne.n	8004874 <HAL_TIM_OC_Start+0x58>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e008      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e068      	b.n	8004960 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <HAL_TIM_OC_Start+0x82>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	e013      	b.n	80048c6 <HAL_TIM_OC_Start+0xaa>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_OC_Start+0x92>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	e00b      	b.n	80048c6 <HAL_TIM_OC_Start+0xaa>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d104      	bne.n	80048be <HAL_TIM_OC_Start+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_OC_Start+0xaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fd4e 	bl	8005370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <HAL_TIM_OC_Start+0x14c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d107      	bne.n	80048ee <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_TIM_OC_Start+0x14c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d018      	beq.n	800492a <HAL_TIM_OC_Start+0x10e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d013      	beq.n	800492a <HAL_TIM_OC_Start+0x10e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a19      	ldr	r2, [pc, #100]	; (800496c <HAL_TIM_OC_Start+0x150>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_TIM_OC_Start+0x10e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_TIM_OC_Start+0x154>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_TIM_OC_Start+0x10e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <HAL_TIM_OC_Start+0x158>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIM_OC_Start+0x10e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <HAL_TIM_OC_Start+0x15c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d111      	bne.n	800494e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d010      	beq.n	800495e <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	e007      	b.n	800495e <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40014000 	.word	0x40014000

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa11 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa03 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa14 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9e7 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9d9 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f9ea 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9bd 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9af 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f9c0 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f993 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f985 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f996 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fc8e 	bl	800141c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fcc0 	bl	80054ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f95b 	bl	8004e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0220 	mvn.w	r2, #32
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fc8a 	bl	8005498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e048      	b.n	8004c3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d839      	bhi.n	8004c2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c11 	.word	0x08004c11
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c1f 	.word	0x08004c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f992 	bl	8004f24 <TIM_OC1_SetConfig>
      break;
 8004c00:	e017      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f9f1 	bl	8004ff0 <TIM_OC2_SetConfig>
      break;
 8004c0e:	e010      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa56 	bl	80050c8 <TIM_OC3_SetConfig>
      break;
 8004c1c:	e009      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fab9 	bl	800519c <TIM_OC4_SetConfig>
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_ConfigClockSource+0x1c>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e0b4      	b.n	8004dca <HAL_TIM_ConfigClockSource+0x186>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d03e      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xd4>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	f200 8087 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	f000 8086 	beq.w	8004db6 <HAL_TIM_ConfigClockSource+0x172>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d87f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b70      	cmp	r3, #112	; 0x70
 8004cb2:	d01a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0xa6>
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d87b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d050      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x11a>
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d877      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b50      	cmp	r3, #80	; 0x50
 8004cc2:	d03c      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0xfa>
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d873      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d058      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x13a>
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d86f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	d064      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d86b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d060      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d867      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d05a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	e062      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f000 fb19 	bl	8005330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e04f      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f000 fb02 	bl	8005330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
      break;
 8004d3c:	e03c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fa76 	bl	800523c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2150      	movs	r1, #80	; 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 facf 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e02c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 fa95 	bl	800529a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2160      	movs	r1, #96	; 0x60
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fabf 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e01c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 fa56 	bl	800523c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 faaf 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e00c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 faa6 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004dae:	e003      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x38>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x38>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <TIM_Base_SetConfig+0xe8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x38>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <TIM_Base_SetConfig+0xec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x38>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	; (8004f14 <TIM_Base_SetConfig+0xf0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01b      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d017      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <TIM_Base_SetConfig+0xe8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <TIM_Base_SetConfig+0xec>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a20      	ldr	r2, [pc, #128]	; (8004f14 <TIM_Base_SetConfig+0xf0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <TIM_Base_SetConfig+0xf4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <TIM_Base_SetConfig+0xf8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0x8a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <TIM_Base_SetConfig+0xfc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <TIM_Base_SetConfig+0xe4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0302 	bic.w	r3, r3, #2
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <TIM_OC1_SetConfig+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10c      	bne.n	8004f9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0308 	bic.w	r3, r3, #8
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <TIM_OC1_SetConfig+0xc8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40010000 	.word	0x40010000

08004ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0210 	bic.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0320 	bic.w	r3, r3, #32
 800503a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <TIM_OC2_SetConfig+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10d      	bne.n	800506c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <TIM_OC2_SetConfig+0xd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d113      	bne.n	800509c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <TIM_OC3_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10d      	bne.n	8005142 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <TIM_OC3_SetConfig+0xd0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_OC4_SetConfig+0x9c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d109      	bne.n	8005210 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000

0800523c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0201 	bic.w	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 030a 	bic.w	r3, r3, #10
 8005278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0210 	bic.w	r2, r3, #16
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 0307 	orr.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2201      	movs	r2, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e050      	b.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d013      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10c      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4313      	orrs	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40014000 	.word	0x40014000

08005498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f103 0208 	add.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f103 0208 	add.w	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f103 0208 	add.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d103      	bne.n	8005582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e00c      	b.n	800559c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3308      	adds	r3, #8
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e002      	b.n	8005590 <vListInsert+0x2e>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d2f6      	bcs.n	800558a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d103      	bne.n	8005608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	1e5a      	subs	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08e      	sub	sp, #56	; 0x38
 800562c:	af04      	add	r7, sp, #16
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xTaskCreateStatic+0x46>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	61fb      	str	r3, [r7, #28]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800566e:	2354      	movs	r3, #84	; 0x54
 8005670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b54      	cmp	r3, #84	; 0x54
 8005676:	d00a      	beq.n	800568e <xTaskCreateStatic+0x66>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	61bb      	str	r3, [r7, #24]
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800568e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01e      	beq.n	80056d4 <xTaskCreateStatic+0xac>
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ae:	2300      	movs	r3, #0
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f850 	bl	800576c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ce:	f000 f8d5 	bl	800587c <prvAddNewTaskToReadyList>
 80056d2:	e001      	b.n	80056d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056d8:	697b      	ldr	r3, [r7, #20]
	}
 80056da:	4618      	mov	r0, r3
 80056dc:	3728      	adds	r7, #40	; 0x28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08c      	sub	sp, #48	; 0x30
 80056e6:	af04      	add	r7, sp, #16
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff56 	bl	80065a8 <pvPortMalloc>
 80056fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00e      	beq.n	8005722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005704:	2054      	movs	r0, #84	; 0x54
 8005706:	f000 ff4f 	bl	80065a8 <pvPortMalloc>
 800570a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
 8005718:	e005      	b.n	8005726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	f001 f810 	bl	8006740 <vPortFree>
 8005720:	e001      	b.n	8005726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	2300      	movs	r3, #0
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	9302      	str	r3, [sp, #8]
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f80e 	bl	800576c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005750:	69f8      	ldr	r0, [r7, #28]
 8005752:	f000 f893 	bl	800587c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005756:	2301      	movs	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e002      	b.n	8005762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005762:	69bb      	ldr	r3, [r7, #24]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005784:	3b01      	subs	r3, #1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f023 0307 	bic.w	r3, r3, #7
 8005792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01f      	beq.n	80057fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e012      	b.n	80057e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	7819      	ldrb	r1, [r3, #0]
 80057c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	3334      	adds	r3, #52	; 0x34
 80057d0:	460a      	mov	r2, r1
 80057d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	3301      	adds	r3, #1
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d9e9      	bls.n	80057c0 <prvInitialiseNewTask+0x54>
 80057ec:	e000      	b.n	80057f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80057ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f8:	e003      	b.n	8005802 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	2b06      	cmp	r3, #6
 8005806:	d901      	bls.n	800580c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005808:	2306      	movs	r3, #6
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005810:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005816:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	2200      	movs	r2, #0
 800581c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	3304      	adds	r3, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fe6c 	bl	8005500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	3318      	adds	r3, #24
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fe67 	bl	8005500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	f1c3 0207 	rsb	r2, r3, #7
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	69b8      	ldr	r0, [r7, #24]
 800585c:	f000 fc96 	bl	800618c <pxPortInitialiseStack>
 8005860:	4602      	mov	r2, r0
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005872:	bf00      	nop
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005884:	f000 fdae 	bl	80063e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005888:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <prvAddNewTaskToReadyList+0xb8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a29      	ldr	r2, [pc, #164]	; (8005934 <prvAddNewTaskToReadyList+0xb8>)
 8005890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005892:	4b29      	ldr	r3, [pc, #164]	; (8005938 <prvAddNewTaskToReadyList+0xbc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800589a:	4a27      	ldr	r2, [pc, #156]	; (8005938 <prvAddNewTaskToReadyList+0xbc>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058a0:	4b24      	ldr	r3, [pc, #144]	; (8005934 <prvAddNewTaskToReadyList+0xb8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d110      	bne.n	80058ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058a8:	f000 fb4c 	bl	8005f44 <prvInitialiseTaskLists>
 80058ac:	e00d      	b.n	80058ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <prvAddNewTaskToReadyList+0xc0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058b6:	4b20      	ldr	r3, [pc, #128]	; (8005938 <prvAddNewTaskToReadyList+0xbc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d802      	bhi.n	80058ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <prvAddNewTaskToReadyList+0xbc>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <prvAddNewTaskToReadyList+0xc4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <prvAddNewTaskToReadyList+0xc4>)
 80058d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <prvAddNewTaskToReadyList+0xc8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <prvAddNewTaskToReadyList+0xc8>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <prvAddNewTaskToReadyList+0xcc>)
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7ff fe0c 	bl	800551a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005902:	f000 fd9f 	bl	8006444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <prvAddNewTaskToReadyList+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvAddNewTaskToReadyList+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	429a      	cmp	r2, r3
 800591a:	d207      	bcs.n	800592c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <prvAddNewTaskToReadyList+0xd0>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20001000 	.word	0x20001000
 8005938:	20000f00 	.word	0x20000f00
 800593c:	2000100c 	.word	0x2000100c
 8005940:	2000101c 	.word	0x2000101c
 8005944:	20001008 	.word	0x20001008
 8005948:	20000f04 	.word	0x20000f04
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005958:	f000 fd44 	bl	80063e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <vTaskDelete+0x18>
 8005962:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <vTaskDelete+0xf8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	e000      	b.n	800596a <vTaskDelete+0x1a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3304      	adds	r3, #4
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fe2f 	bl	80055d4 <uxListRemove>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4932      	ldr	r1, [pc, #200]	; (8005a4c <vTaskDelete+0xfc>)
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <vTaskDelete+0x58>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	2201      	movs	r2, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43da      	mvns	r2, r3
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <vTaskDelete+0x100>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4013      	ands	r3, r2
 80059a4:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <vTaskDelete+0x100>)
 80059a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fe0d 	bl	80055d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <vTaskDelete+0x104>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	4a24      	ldr	r2, [pc, #144]	; (8005a54 <vTaskDelete+0x104>)
 80059c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80059c4:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <vTaskDelete+0xf8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10b      	bne.n	80059e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4820      	ldr	r0, [pc, #128]	; (8005a58 <vTaskDelete+0x108>)
 80059d6:	f7ff fda0 	bl	800551a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80059da:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <vTaskDelete+0x10c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <vTaskDelete+0x10c>)
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e009      	b.n	80059fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <vTaskDelete+0x110>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <vTaskDelete+0x110>)
 80059ee:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fb15 	bl	8006020 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80059f6:	f000 fb43 	bl	8006080 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80059fa:	f000 fd23 	bl	8006444 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <vTaskDelete+0x114>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <vTaskDelete+0xf8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d116      	bne.n	8005a3e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a10:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <vTaskDelete+0x118>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <vTaskDelete+0xde>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	60bb      	str	r3, [r7, #8]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <vTaskDelete+0x11c>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000f00 	.word	0x20000f00
 8005a4c:	20000f04 	.word	0x20000f04
 8005a50:	20001008 	.word	0x20001008
 8005a54:	2000101c 	.word	0x2000101c
 8005a58:	20000fd4 	.word	0x20000fd4
 8005a5c:	20000fe8 	.word	0x20000fe8
 8005a60:	20001000 	.word	0x20001000
 8005a64:	2000100c 	.word	0x2000100c
 8005a68:	20001028 	.word	0x20001028
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <vTaskDelay+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <vTaskDelay+0x30>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005aa0:	f000 f87a 	bl	8005b98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb0a 	bl	80060c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aac:	f000 f882 	bl	8005bb4 <xTaskResumeAll>
 8005ab0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <vTaskDelay+0x64>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20001028 	.word	0x20001028
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	1d39      	adds	r1, r7, #4
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fa fcf8 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	460a      	mov	r2, r1
 8005b06:	491e      	ldr	r1, [pc, #120]	; (8005b80 <vTaskStartScheduler+0xa8>)
 8005b08:	481e      	ldr	r0, [pc, #120]	; (8005b84 <vTaskStartScheduler+0xac>)
 8005b0a:	f7ff fd8d 	bl	8005628 <xTaskCreateStatic>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <vTaskStartScheduler+0xb0>)
 8005b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b14:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <vTaskStartScheduler+0xb0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e001      	b.n	8005b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d116      	bne.n	8005b5a <vTaskStartScheduler+0x82>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	613b      	str	r3, [r7, #16]
}
 8005b3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <vTaskStartScheduler+0xb4>)
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295
 8005b46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <vTaskStartScheduler+0xb8>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b4e:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <vTaskStartScheduler+0xbc>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b54:	f000 fba4 	bl	80062a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b58:	e00e      	b.n	8005b78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d10a      	bne.n	8005b78 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60fb      	str	r3, [r7, #12]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vTaskStartScheduler+0x9e>
}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08006a98 	.word	0x08006a98
 8005b84:	08005f15 	.word	0x08005f15
 8005b88:	20001024 	.word	0x20001024
 8005b8c:	20001020 	.word	0x20001020
 8005b90:	2000100c 	.word	0x2000100c
 8005b94:	20001004 	.word	0x20001004

08005b98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <vTaskSuspendAll+0x18>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	4a03      	ldr	r2, [pc, #12]	; (8005bb0 <vTaskSuspendAll+0x18>)
 8005ba4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20001028 	.word	0x20001028

08005bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <xTaskResumeAll+0x114>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	603b      	str	r3, [r7, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005be0:	f000 fc00 	bl	80063e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005be4:	4b38      	ldr	r3, [pc, #224]	; (8005cc8 <xTaskResumeAll+0x114>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a37      	ldr	r2, [pc, #220]	; (8005cc8 <xTaskResumeAll+0x114>)
 8005bec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bee:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <xTaskResumeAll+0x114>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d161      	bne.n	8005cba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bf6:	4b35      	ldr	r3, [pc, #212]	; (8005ccc <xTaskResumeAll+0x118>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d05d      	beq.n	8005cba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bfe:	e02e      	b.n	8005c5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	4b33      	ldr	r3, [pc, #204]	; (8005cd0 <xTaskResumeAll+0x11c>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fce1 	bl	80055d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fcdc 	bl	80055d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	4b2b      	ldr	r3, [pc, #172]	; (8005cd4 <xTaskResumeAll+0x120>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <xTaskResumeAll+0x120>)
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <xTaskResumeAll+0x124>)
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7ff fc68 	bl	800551a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <xTaskResumeAll+0x128>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c58:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <xTaskResumeAll+0x12c>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <xTaskResumeAll+0x11c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1cc      	bne.n	8005c00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c6c:	f000 fa08 	bl	8006080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c70:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <xTaskResumeAll+0x130>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c7c:	f000 f836 	bl	8005cec <xTaskIncrementTick>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <xTaskResumeAll+0x12c>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f1      	bne.n	8005c7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c98:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <xTaskResumeAll+0x130>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c9e:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <xTaskResumeAll+0x12c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <xTaskResumeAll+0x134>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cba:	f000 fbc3 	bl	8006444 <vPortExitCritical>

	return xAlreadyYielded;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20001028 	.word	0x20001028
 8005ccc:	20001000 	.word	0x20001000
 8005cd0:	20000fc0 	.word	0x20000fc0
 8005cd4:	20001008 	.word	0x20001008
 8005cd8:	20000f04 	.word	0x20000f04
 8005cdc:	20000f00 	.word	0x20000f00
 8005ce0:	20001014 	.word	0x20001014
 8005ce4:	20001010 	.word	0x20001010
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b4e      	ldr	r3, [pc, #312]	; (8005e30 <xTaskIncrementTick+0x144>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 808e 	bne.w	8005e1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d00:	4b4c      	ldr	r3, [pc, #304]	; (8005e34 <xTaskIncrementTick+0x148>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d08:	4a4a      	ldr	r2, [pc, #296]	; (8005e34 <xTaskIncrementTick+0x148>)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d120      	bne.n	8005d56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d14:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <xTaskIncrementTick+0x46>
 8005d34:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	4b40      	ldr	r3, [pc, #256]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3e      	ldr	r2, [pc, #248]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	4a3e      	ldr	r2, [pc, #248]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4b3d      	ldr	r3, [pc, #244]	; (8005e40 <xTaskIncrementTick+0x154>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a3c      	ldr	r2, [pc, #240]	; (8005e40 <xTaskIncrementTick+0x154>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	f000 f995 	bl	8006080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d56:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <xTaskIncrementTick+0x158>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d348      	bcc.n	8005df2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d60:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <xTaskIncrementTick+0x158>)
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	601a      	str	r2, [r3, #0]
					break;
 8005d72:	e03e      	b.n	8005df2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d203      	bcs.n	8005d94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <xTaskIncrementTick+0x158>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d92:	e02e      	b.n	8005df2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fc1b 	bl	80055d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	3318      	adds	r3, #24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fc12 	bl	80055d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <xTaskIncrementTick+0x15c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <xTaskIncrementTick+0x15c>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <xTaskIncrementTick+0x160>)
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff fb9e 	bl	800551a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <xTaskIncrementTick+0x164>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d3b9      	bcc.n	8005d60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df0:	e7b6      	b.n	8005d60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <xTaskIncrementTick+0x164>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4914      	ldr	r1, [pc, #80]	; (8005e4c <xTaskIncrementTick+0x160>)
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d901      	bls.n	8005e0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <xTaskIncrementTick+0x168>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e004      	b.n	8005e26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <xTaskIncrementTick+0x16c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <xTaskIncrementTick+0x16c>)
 8005e24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e26:	697b      	ldr	r3, [r7, #20]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20001028 	.word	0x20001028
 8005e34:	20001004 	.word	0x20001004
 8005e38:	20000fb8 	.word	0x20000fb8
 8005e3c:	20000fbc 	.word	0x20000fbc
 8005e40:	20001018 	.word	0x20001018
 8005e44:	20001020 	.word	0x20001020
 8005e48:	20001008 	.word	0x20001008
 8005e4c:	20000f04 	.word	0x20000f04
 8005e50:	20000f00 	.word	0x20000f00
 8005e54:	20001014 	.word	0x20001014
 8005e58:	20001010 	.word	0x20001010

08005e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e62:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <vTaskSwitchContext+0xa4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e6a:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <vTaskSwitchContext+0xa8>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e70:	e03f      	b.n	8005ef2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <vTaskSwitchContext+0xa8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <vTaskSwitchContext+0xac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	f1c3 031f 	rsb	r3, r3, #31
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	491f      	ldr	r1, [pc, #124]	; (8005f0c <vTaskSwitchContext+0xb0>)
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vTaskSwitchContext+0x5a>
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <vTaskSwitchContext+0xb0>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d104      	bne.n	8005ee8 <vTaskSwitchContext+0x8c>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <vTaskSwitchContext+0xb4>)
 8005ef0:	6013      	str	r3, [r2, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20001028 	.word	0x20001028
 8005f04:	20001014 	.word	0x20001014
 8005f08:	20001008 	.word	0x20001008
 8005f0c:	20000f04 	.word	0x20000f04
 8005f10:	20000f00 	.word	0x20000f00

08005f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f1c:	f000 f852 	bl	8005fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <prvIdleTask+0x28>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d9f9      	bls.n	8005f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <prvIdleTask+0x2c>)
 8005f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f38:	e7f0      	b.n	8005f1c <prvIdleTask+0x8>
 8005f3a:	bf00      	nop
 8005f3c:	20000f04 	.word	0x20000f04
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	e00c      	b.n	8005f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <prvInitialiseTaskLists+0x60>)
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff faae 	bl	80054c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3301      	adds	r3, #1
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d9ef      	bls.n	8005f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f70:	480d      	ldr	r0, [pc, #52]	; (8005fa8 <prvInitialiseTaskLists+0x64>)
 8005f72:	f7ff faa5 	bl	80054c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f76:	480d      	ldr	r0, [pc, #52]	; (8005fac <prvInitialiseTaskLists+0x68>)
 8005f78:	f7ff faa2 	bl	80054c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f7c:	480c      	ldr	r0, [pc, #48]	; (8005fb0 <prvInitialiseTaskLists+0x6c>)
 8005f7e:	f7ff fa9f 	bl	80054c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f82:	480c      	ldr	r0, [pc, #48]	; (8005fb4 <prvInitialiseTaskLists+0x70>)
 8005f84:	f7ff fa9c 	bl	80054c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f88:	480b      	ldr	r0, [pc, #44]	; (8005fb8 <prvInitialiseTaskLists+0x74>)
 8005f8a:	f7ff fa99 	bl	80054c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <prvInitialiseTaskLists+0x78>)
 8005f90:	4a05      	ldr	r2, [pc, #20]	; (8005fa8 <prvInitialiseTaskLists+0x64>)
 8005f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <prvInitialiseTaskLists+0x7c>)
 8005f96:	4a05      	ldr	r2, [pc, #20]	; (8005fac <prvInitialiseTaskLists+0x68>)
 8005f98:	601a      	str	r2, [r3, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000f04 	.word	0x20000f04
 8005fa8:	20000f90 	.word	0x20000f90
 8005fac:	20000fa4 	.word	0x20000fa4
 8005fb0:	20000fc0 	.word	0x20000fc0
 8005fb4:	20000fd4 	.word	0x20000fd4
 8005fb8:	20000fec 	.word	0x20000fec
 8005fbc:	20000fb8 	.word	0x20000fb8
 8005fc0:	20000fbc 	.word	0x20000fbc

08005fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fca:	e019      	b.n	8006000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fcc:	f000 fa0a 	bl	80063e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <prvCheckTasksWaitingTermination+0x50>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff faf9 	bl	80055d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <prvCheckTasksWaitingTermination+0x54>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <prvCheckTasksWaitingTermination+0x54>)
 8005fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <prvCheckTasksWaitingTermination+0x58>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <prvCheckTasksWaitingTermination+0x58>)
 8005ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ff6:	f000 fa25 	bl	8006444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f810 	bl	8006020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <prvCheckTasksWaitingTermination+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e1      	bne.n	8005fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000fd4 	.word	0x20000fd4
 8006018:	20001000 	.word	0x20001000
 800601c:	20000fe8 	.word	0x20000fe8

08006020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fb82 	bl	8006740 <vPortFree>
				vPortFree( pxTCB );
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fb7f 	bl	8006740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006042:	e018      	b.n	8006076 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800604a:	2b01      	cmp	r3, #1
 800604c:	d103      	bne.n	8006056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb76 	bl	8006740 <vPortFree>
	}
 8006054:	e00f      	b.n	8006076 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605c:	2b02      	cmp	r3, #2
 800605e:	d00a      	beq.n	8006076 <prvDeleteTCB+0x56>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <prvDeleteTCB+0x54>
	}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvResetNextTaskUnblockTime+0x38>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvResetNextTaskUnblockTime+0x3c>)
 8006092:	f04f 32ff 	mov.w	r2, #4294967295
 8006096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006098:	e008      	b.n	80060ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <prvResetNextTaskUnblockTime+0x38>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4a04      	ldr	r2, [pc, #16]	; (80060bc <prvResetNextTaskUnblockTime+0x3c>)
 80060aa:	6013      	str	r3, [r2, #0]
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	20000fb8 	.word	0x20000fb8
 80060bc:	20001020 	.word	0x20001020

080060c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ca:	4b29      	ldr	r3, [pc, #164]	; (8006170 <prvAddCurrentTaskToDelayedList+0xb0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fa7c 	bl	80055d4 <uxListRemove>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	2201      	movs	r2, #1
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43da      	mvns	r2, r3
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4013      	ands	r3, r2
 80060f6:	4a20      	ldr	r2, [pc, #128]	; (8006178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d10a      	bne.n	8006118 <prvAddCurrentTaskToDelayedList+0x58>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006108:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	481a      	ldr	r0, [pc, #104]	; (800617c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006112:	f7ff fa02 	bl	800551a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006116:	e026      	b.n	8006166 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d209      	bcs.n	8006144 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7ff fa10 	bl	8005562 <vListInsert>
}
 8006142:	e010      	b.n	8006166 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006144:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7ff fa06 	bl	8005562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	d202      	bcs.n	8006166 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006160:	4a09      	ldr	r2, [pc, #36]	; (8006188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6013      	str	r3, [r2, #0]
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20001004 	.word	0x20001004
 8006174:	20000f00 	.word	0x20000f00
 8006178:	20001008 	.word	0x20001008
 800617c:	20000fec 	.word	0x20000fec
 8006180:	20000fbc 	.word	0x20000fbc
 8006184:	20000fb8 	.word	0x20000fb8
 8006188:	20001020 	.word	0x20001020

0800618c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3b04      	subs	r3, #4
 800619c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3b04      	subs	r3, #4
 80061aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3b04      	subs	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061bc:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <pxPortInitialiseStack+0x64>)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b14      	subs	r3, #20
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f06f 0202 	mvn.w	r2, #2
 80061da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3b20      	subs	r3, #32
 80061e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	080061f5 	.word	0x080061f5

080061f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <prvTaskExitError+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d00a      	beq.n	800621e <prvTaskExitError+0x2a>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvTaskExitError+0x28>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60bb      	str	r3, [r7, #8]
}
 8006230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006232:	bf00      	nop
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0fc      	beq.n	8006234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	2000001c 	.word	0x2000001c
 800624c:	00000000 	.word	0x00000000

08006250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <pxCurrentTCBConst2>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f380 8809 	msr	PSP, r0
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8811 	msr	BASEPRI, r0
 800626a:	4770      	bx	lr
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst2>:
 8006270:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006278:	4808      	ldr	r0, [pc, #32]	; (800629c <prvPortStartFirstTask+0x24>)
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f380 8808 	msr	MSP, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8814 	msr	CONTROL, r0
 800628a:	b662      	cpsie	i
 800628c:	b661      	cpsie	f
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	df00      	svc	0
 8006298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800629a:	bf00      	nop
 800629c:	e000ed08 	.word	0xe000ed08

080062a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062a6:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <xPortStartScheduler+0x120>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a46      	ldr	r2, [pc, #280]	; (80063c4 <xPortStartScheduler+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10a      	bne.n	80062c6 <xPortStartScheduler+0x26>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	613b      	str	r3, [r7, #16]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062c6:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <xPortStartScheduler+0x120>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a3f      	ldr	r2, [pc, #252]	; (80063c8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10a      	bne.n	80062e6 <xPortStartScheduler+0x46>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <xPortStartScheduler+0x12c>)
 80062e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006308:	b2da      	uxtb	r2, r3
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <xPortStartScheduler+0x130>)
 800630c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800630e:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <xPortStartScheduler+0x134>)
 8006310:	2207      	movs	r2, #7
 8006312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006314:	e009      	b.n	800632a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006316:	4b2f      	ldr	r3, [pc, #188]	; (80063d4 <xPortStartScheduler+0x134>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3b01      	subs	r3, #1
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <xPortStartScheduler+0x134>)
 800631e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d0ef      	beq.n	8006316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006336:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <xPortStartScheduler+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1c3 0307 	rsb	r3, r3, #7
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00a      	beq.n	8006358 <xPortStartScheduler+0xb8>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60bb      	str	r3, [r7, #8]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <xPortStartScheduler+0x134>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <xPortStartScheduler+0x134>)
 8006360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <xPortStartScheduler+0x134>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <xPortStartScheduler+0x134>)
 800636c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <xPortStartScheduler+0x138>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <xPortStartScheduler+0x138>)
 800637c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <xPortStartScheduler+0x138>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <xPortStartScheduler+0x138>)
 8006388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800638c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800638e:	f000 f8dd 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <xPortStartScheduler+0x13c>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006398:	f000 f8fc 	bl	8006594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <xPortStartScheduler+0x140>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <xPortStartScheduler+0x140>)
 80063a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063a8:	f7ff ff66 	bl	8006278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063ac:	f7ff fd56 	bl	8005e5c <vTaskSwitchContext>
	prvTaskExitError();
 80063b0:	f7ff ff20 	bl	80061f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed00 	.word	0xe000ed00
 80063c4:	410fc271 	.word	0x410fc271
 80063c8:	410fc270 	.word	0x410fc270
 80063cc:	e000e400 	.word	0xe000e400
 80063d0:	2000102c 	.word	0x2000102c
 80063d4:	20001030 	.word	0x20001030
 80063d8:	e000ed20 	.word	0xe000ed20
 80063dc:	2000001c 	.word	0x2000001c
 80063e0:	e000ef34 	.word	0xe000ef34

080063e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
}
 80063fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <vPortEnterCritical+0x58>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a0d      	ldr	r2, [pc, #52]	; (800643c <vPortEnterCritical+0x58>)
 8006406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <vPortEnterCritical+0x58>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10f      	bne.n	8006430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <vPortEnterCritical+0x5c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <vPortEnterCritical+0x4c>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	603b      	str	r3, [r7, #0]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <vPortEnterCritical+0x4a>
	}
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	2000001c 	.word	0x2000001c
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <vPortExitCritical+0x50>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <vPortExitCritical+0x24>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	607b      	str	r3, [r7, #4]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <vPortExitCritical+0x50>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <vPortExitCritical+0x50>)
 8006470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <vPortExitCritical+0x42>
 800647a:	2300      	movs	r3, #0
 800647c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000001c 	.word	0x2000001c
	...

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064c4:	f380 8811 	msr	BASEPRI, r0
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f7ff fcc4 	bl	8005e5c <vTaskSwitchContext>
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f380 8811 	msr	BASEPRI, r0
 80064dc:	bc09      	pop	{r0, r3}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f01e 0f10 	tst.w	lr, #16
 80064ea:	bf08      	it	eq
 80064ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f0:	f380 8809 	msr	PSP, r0
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst>:
 8006500:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7ff fbe3 	bl	8005cec <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <SysTick_Handler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <vPortSetupTimerInterrupt+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <vPortSetupTimerInterrupt+0x3c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	; (800658c <vPortSetupTimerInterrupt+0x40>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a09      	ldr	r2, [pc, #36]	; (8006590 <vPortSetupTimerInterrupt+0x44>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b04      	ldr	r3, [pc, #16]	; (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e010 	.word	0xe000e010
 8006584:	e000e018 	.word	0xe000e018
 8006588:	20000010 	.word	0x20000010
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	e000e014 	.word	0xe000e014

08006594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065a4 <vPortEnableVFP+0x10>
 8006598:	6801      	ldr	r1, [r0, #0]
 800659a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800659e:	6001      	str	r1, [r0, #0]
 80065a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed88 	.word	0xe000ed88

080065a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065b4:	f7ff faf0 	bl	8005b98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065b8:	4b5b      	ldr	r3, [pc, #364]	; (8006728 <pvPortMalloc+0x180>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065c0:	f000 f920 	bl	8006804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065c4:	4b59      	ldr	r3, [pc, #356]	; (800672c <pvPortMalloc+0x184>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f040 8093 	bne.w	80066f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01d      	beq.n	8006614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065d8:	2208      	movs	r2, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d014      	beq.n	8006614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f023 0307 	bic.w	r3, r3, #7
 80065f0:	3308      	adds	r3, #8
 80065f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <pvPortMalloc+0x6c>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d06e      	beq.n	80066f8 <pvPortMalloc+0x150>
 800661a:	4b45      	ldr	r3, [pc, #276]	; (8006730 <pvPortMalloc+0x188>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d869      	bhi.n	80066f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006624:	4b43      	ldr	r3, [pc, #268]	; (8006734 <pvPortMalloc+0x18c>)
 8006626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006628:	4b42      	ldr	r3, [pc, #264]	; (8006734 <pvPortMalloc+0x18c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800662e:	e004      	b.n	800663a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	429a      	cmp	r2, r3
 8006642:	d903      	bls.n	800664c <pvPortMalloc+0xa4>
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f1      	bne.n	8006630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <pvPortMalloc+0x180>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	429a      	cmp	r2, r3
 8006654:	d050      	beq.n	80066f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2208      	movs	r2, #8
 800665c:	4413      	add	r3, r2
 800665e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	2308      	movs	r3, #8
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	429a      	cmp	r2, r3
 8006676:	d91f      	bls.n	80066b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <pvPortMalloc+0xf8>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	613b      	str	r3, [r7, #16]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066b2:	69b8      	ldr	r0, [r7, #24]
 80066b4:	f000 f908 	bl	80068c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066b8:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <pvPortMalloc+0x188>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <pvPortMalloc+0x188>)
 80066c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066c6:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <pvPortMalloc+0x188>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <pvPortMalloc+0x190>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d203      	bcs.n	80066da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066d2:	4b17      	ldr	r3, [pc, #92]	; (8006730 <pvPortMalloc+0x188>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <pvPortMalloc+0x190>)
 80066d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <pvPortMalloc+0x184>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <pvPortMalloc+0x194>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <pvPortMalloc+0x194>)
 80066f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066f8:	f7ff fa5c 	bl	8005bb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <pvPortMalloc+0x174>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60fb      	str	r3, [r7, #12]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <pvPortMalloc+0x172>
	return pvReturn;
 800671c:	69fb      	ldr	r3, [r7, #28]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3728      	adds	r7, #40	; 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20004c3c 	.word	0x20004c3c
 800672c:	20004c50 	.word	0x20004c50
 8006730:	20004c40 	.word	0x20004c40
 8006734:	20004c34 	.word	0x20004c34
 8006738:	20004c44 	.word	0x20004c44
 800673c:	20004c48 	.word	0x20004c48

08006740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d04d      	beq.n	80067ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006752:	2308      	movs	r3, #8
 8006754:	425b      	negs	r3, r3
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <vPortFree+0xb8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <vPortFree+0x44>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	60fb      	str	r3, [r7, #12]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <vPortFree+0x62>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60bb      	str	r3, [r7, #8]
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <vPortFree+0xb8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11a      	bne.n	80067ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <vPortFree+0xb8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067c8:	f7ff f9e6 	bl	8005b98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <vPortFree+0xbc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	4a09      	ldr	r2, [pc, #36]	; (80067fc <vPortFree+0xbc>)
 80067d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f000 f874 	bl	80068c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <vPortFree+0xc0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3301      	adds	r3, #1
 80067e6:	4a06      	ldr	r2, [pc, #24]	; (8006800 <vPortFree+0xc0>)
 80067e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067ea:	f7ff f9e3 	bl	8005bb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067ee:	bf00      	nop
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20004c50 	.word	0x20004c50
 80067fc:	20004c40 	.word	0x20004c40
 8006800:	20004c4c 	.word	0x20004c4c

08006804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800680a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800680e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <prvHeapInit+0xac>)
 8006812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00c      	beq.n	8006838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3307      	adds	r3, #7
 8006822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <prvHeapInit+0xac>)
 8006834:	4413      	add	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <prvHeapInit+0xb0>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <prvHeapInit+0xb0>)
 8006844:	2200      	movs	r2, #0
 8006846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006850:	2208      	movs	r2, #8
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0307 	bic.w	r3, r3, #7
 800685e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <prvHeapInit+0xb4>)
 8006864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <prvHeapInit+0xb4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <prvHeapInit+0xb4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <prvHeapInit+0xb4>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <prvHeapInit+0xb8>)
 8006892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <prvHeapInit+0xbc>)
 800689a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <prvHeapInit+0xc0>)
 800689e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068a2:	601a      	str	r2, [r3, #0]
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20001034 	.word	0x20001034
 80068b4:	20004c34 	.word	0x20004c34
 80068b8:	20004c3c 	.word	0x20004c3c
 80068bc:	20004c44 	.word	0x20004c44
 80068c0:	20004c40 	.word	0x20004c40
 80068c4:	20004c50 	.word	0x20004c50

080068c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068d0:	4b28      	ldr	r3, [pc, #160]	; (8006974 <prvInsertBlockIntoFreeList+0xac>)
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e002      	b.n	80068dc <prvInsertBlockIntoFreeList+0x14>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d8f7      	bhi.n	80068d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d108      	bne.n	800690a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	441a      	add	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	441a      	add	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d118      	bne.n	8006950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <prvInsertBlockIntoFreeList+0xb0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d00d      	beq.n	8006946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	441a      	add	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e008      	b.n	8006958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <prvInsertBlockIntoFreeList+0xb0>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e003      	b.n	8006958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	d002      	beq.n	8006966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20004c34 	.word	0x20004c34
 8006978:	20004c3c 	.word	0x20004c3c

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 f820 	bl	80069d4 <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	080070b8 	.word	0x080070b8
 80069b8:	080070b8 	.word	0x080070b8
 80069bc:	080070b8 	.word	0x080070b8
 80069c0:	080070bc 	.word	0x080070bc

080069c4 <memset>:
 80069c4:	4402      	add	r2, r0
 80069c6:	4603      	mov	r3, r0
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d100      	bne.n	80069ce <memset+0xa>
 80069cc:	4770      	bx	lr
 80069ce:	f803 1b01 	strb.w	r1, [r3], #1
 80069d2:	e7f9      	b.n	80069c8 <memset+0x4>

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
