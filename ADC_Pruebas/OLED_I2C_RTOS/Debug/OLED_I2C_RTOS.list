
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c24  08006c24  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c2c  08006c2c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f10  20000024  08006c58  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f34  08006c58  00024f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016602  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308f  00000000  00000000  00036656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019950  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001843a  00000000  00000000  00055740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a38e2  00000000  00000000  0006db7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011145c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  001114ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000024 	.word	0x20000024
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065d4 	.word	0x080065d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000028 	.word	0x20000028
 80001dc:	080065d4 	.word	0x080065d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000040 	.word	0x20000040
 8000514:	20000094 	.word	0x20000094

08000518 <int_to_char>:
static void MX_TIM2_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */

void int_to_char(uint32_t num, char texto[]){
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]

	uint32_t buffer = num;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	617b      	str	r3, [r7, #20]
	int contador = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]

	while(buffer > 0){
 800052a:	e008      	b.n	800053e <int_to_char+0x26>
		buffer /= 10;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <int_to_char+0x90>)
 8000530:	fba2 2303 	umull	r2, r3, r2, r3
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	617b      	str	r3, [r7, #20]
		contador++;
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	3301      	adds	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
	while(buffer > 0){
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f3      	bne.n	800052c <int_to_char+0x14>
	}

	texto[contador] = '\0';
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]

	buffer = num;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	617b      	str	r3, [r7, #20]
	int pos = contador - 1, digito;
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	3b01      	subs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
	while(pos >= 0){
 8000558:	e01b      	b.n	8000592 <int_to_char+0x7a>
		digito = buffer%10;
 800055a:	6979      	ldr	r1, [r7, #20]
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <int_to_char+0x90>)
 800055e:	fba3 2301 	umull	r2, r3, r3, r1
 8000562:	08da      	lsrs	r2, r3, #3
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	60ba      	str	r2, [r7, #8]
		buffer /= 10;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <int_to_char+0x90>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	617b      	str	r3, [r7, #20]
		texto[pos] = digito + '0';
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	440b      	add	r3, r1
 8000586:	3230      	adds	r2, #48	; 0x30
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
		pos--;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3b01      	subs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
	while(pos >= 0){
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dae0      	bge.n	800055a <int_to_char+0x42>
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	cccccccd 	.word	0xcccccccd

080005ac <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80005b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80005ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80005be:	edc7 1a02 	vstr	s3, [r7, #8]
 80005c2:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80005c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80005d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80005e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005f6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	371c      	adds	r7, #28
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <grafico>:

void grafico(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fcae 	bl	8000f70 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fdf8 	bl	800120c <ssd1306_SetCursor>
	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 800061c:	2301      	movs	r3, #1
 800061e:	2237      	movs	r2, #55	; 0x37
 8000620:	2109      	movs	r1, #9
 8000622:	201a      	movs	r0, #26
 8000624:	f000 fe76 	bl	8001314 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 8000628:	2301      	movs	r3, #1
 800062a:	2203      	movs	r2, #3
 800062c:	2109      	movs	r1, #9
 800062e:	207f      	movs	r0, #127	; 0x7f
 8000630:	f000 fe70 	bl	8001314 <ssd1306_VLine>
	ssd1306_VLine(127, 61, 3, White);  // right vrtical line bottom
 8000634:	2301      	movs	r3, #1
 8000636:	2203      	movs	r2, #3
 8000638:	213d      	movs	r1, #61	; 0x3d
 800063a:	207f      	movs	r0, #127	; 0x7f
 800063c:	f000 fe6a 	bl	8001314 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000640:	2301      	movs	r3, #1
 8000642:	2207      	movs	r2, #7
 8000644:	2109      	movs	r1, #9
 8000646:	2018      	movs	r0, #24
 8000648:	f000 fe83 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 800064c:	2301      	movs	r3, #1
 800064e:	2202      	movs	r2, #2
 8000650:	2124      	movs	r1, #36	; 0x24
 8000652:	2018      	movs	r0, #24
 8000654:	f000 fe7d 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 8000658:	2301      	movs	r3, #1
 800065a:	2207      	movs	r2, #7
 800065c:	213f      	movs	r1, #63	; 0x3f
 800065e:	2018      	movs	r0, #24
 8000660:	f000 fe77 	bl	8001352 <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 8000664:	2301      	movs	r3, #1
 8000666:	2203      	movs	r2, #3
 8000668:	2109      	movs	r1, #9
 800066a:	2033      	movs	r0, #51	; 0x33
 800066c:	f000 fe71 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000670:	2301      	movs	r3, #1
 8000672:	2203      	movs	r2, #3
 8000674:	213f      	movs	r1, #63	; 0x3f
 8000676:	2033      	movs	r0, #51	; 0x33
 8000678:	f000 fe6b 	bl	8001352 <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 800067c:	2301      	movs	r3, #1
 800067e:	2203      	movs	r2, #3
 8000680:	2109      	movs	r1, #9
 8000682:	204c      	movs	r0, #76	; 0x4c
 8000684:	f000 fe65 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 8000688:	2301      	movs	r3, #1
 800068a:	2203      	movs	r2, #3
 800068c:	213f      	movs	r1, #63	; 0x3f
 800068e:	204c      	movs	r0, #76	; 0x4c
 8000690:	f000 fe5f 	bl	8001352 <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 8000694:	2301      	movs	r3, #1
 8000696:	2203      	movs	r2, #3
 8000698:	2109      	movs	r1, #9
 800069a:	2065      	movs	r0, #101	; 0x65
 800069c:	f000 fe59 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80006a0:	2301      	movs	r3, #1
 80006a2:	2203      	movs	r2, #3
 80006a4:	213f      	movs	r1, #63	; 0x3f
 80006a6:	2065      	movs	r0, #101	; 0x65
 80006a8:	f000 fe53 	bl	8001352 <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80006ac:	2301      	movs	r3, #1
 80006ae:	2205      	movs	r2, #5
 80006b0:	2109      	movs	r1, #9
 80006b2:	207b      	movs	r0, #123	; 0x7b
 80006b4:	f000 fe4d 	bl	8001352 <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80006b8:	2301      	movs	r3, #1
 80006ba:	2205      	movs	r2, #5
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	207b      	movs	r0, #123	; 0x7b
 80006c0:	f000 fe47 	bl	8001352 <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 80006c4:	231a      	movs	r3, #26
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <grafico+0xd6>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	b2d8      	uxtb	r0, r3
 80006ce:	2301      	movs	r3, #1
 80006d0:	2202      	movs	r2, #2
 80006d2:	2124      	movs	r1, #36	; 0x24
 80006d4:	f000 fe3d 	bl	8001352 <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3305      	adds	r3, #5
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	ddf2      	ble.n	80006ca <grafico+0xc2>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 80006e4:	2366      	movs	r3, #102	; 0x66
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e013      	b.n	8000712 <grafico+0x10a>
		for (int y = 10; y < 63; y += 5){
 80006ea:	230a      	movs	r3, #10
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e00a      	b.n	8000706 <grafico+0xfe>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	b2d8      	uxtb	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b2d9      	uxtb	r1, r3
 80006f8:	2301      	movs	r3, #1
 80006fa:	2202      	movs	r2, #2
 80006fc:	f000 fe0a 	bl	8001314 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3305      	adds	r3, #5
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b3e      	cmp	r3, #62	; 0x3e
 800070a:	ddf1      	ble.n	80006f0 <grafico+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25){
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	3b19      	subs	r3, #25
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b1e      	cmp	r3, #30
 8000716:	dce8      	bgt.n	80006ea <grafico+0xe2>
		}
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <senoidal_moviendose>:

int trigger_level = 1000;
int flag;
int trigger_point = 1;

void senoidal_moviendose(void){
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b08f      	sub	sp, #60	; 0x3c
 8000728:	af02      	add	r7, sp, #8

	int y1=0, y2=0, y3 = 0, y4 = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	int x1 = 0, x2 = 0, x3 = 0, x4 = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
	static int previous_trigger_point = 1;

	static int erase_buffer[MAX];

	if(flag == 1)
 800074a:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <senoidal_moviendose+0x198>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80af 	bne.w	80008b2 <senoidal_moviendose+0x18e>
	{
		trigger_point = 1;
 8000754:	4b5a      	ldr	r3, [pc, #360]	; (80008c0 <senoidal_moviendose+0x19c>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
		for(int i = 0; i <= 98; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075e:	e019      	b.n	8000794 <senoidal_moviendose+0x70>
		{
			// flanco descendente
			if((Buffer[i] >= trigger_level + 10) && (Buffer[i+1]) <= trigger_level - 10)
 8000760:	4a58      	ldr	r2, [pc, #352]	; (80008c4 <senoidal_moviendose+0x1a0>)
 8000762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000768:	4a57      	ldr	r2, [pc, #348]	; (80008c8 <senoidal_moviendose+0x1a4>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	320a      	adds	r2, #10
 800076e:	4293      	cmp	r3, r2
 8000770:	d30d      	bcc.n	800078e <senoidal_moviendose+0x6a>
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	3301      	adds	r3, #1
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <senoidal_moviendose+0x1a0>)
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	4a52      	ldr	r2, [pc, #328]	; (80008c8 <senoidal_moviendose+0x1a4>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	3a0a      	subs	r2, #10
 8000782:	4293      	cmp	r3, r2
 8000784:	d803      	bhi.n	800078e <senoidal_moviendose+0x6a>
			{
				trigger_point = i;
 8000786:	4a4e      	ldr	r2, [pc, #312]	; (80008c0 <senoidal_moviendose+0x19c>)
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	6013      	str	r3, [r2, #0]
				break;
 800078c:	e005      	b.n	800079a <senoidal_moviendose+0x76>
		for(int i = 0; i <= 98; i++)
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	3301      	adds	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000796:	2b62      	cmp	r3, #98	; 0x62
 8000798:	dde2      	ble.n	8000760 <senoidal_moviendose+0x3c>
			}
		}

		for (int k = 0; k <= 98; k++){
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
 800079e:	e062      	b.n	8000866 <senoidal_moviendose+0x142>

			x1 = k + previous_trigger_point;
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <senoidal_moviendose+0x1a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a6:	4413      	add	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
			x2 = x1 + 1;
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]

			x3 = k + trigger_point;
 80007b0:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <senoidal_moviendose+0x19c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007b6:	4413      	add	r3, r2
 80007b8:	60bb      	str	r3, [r7, #8]
			x4 = x3 + 1;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]


			y1 = erase_buffer[x1];
 80007c0:	4a43      	ldr	r2, [pc, #268]	; (80008d0 <senoidal_moviendose+0x1ac>)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c8:	623b      	str	r3, [r7, #32]
			y2 = erase_buffer[x2];
 80007ca:	4a41      	ldr	r2, [pc, #260]	; (80008d0 <senoidal_moviendose+0x1ac>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	61fb      	str	r3, [r7, #28]
			y3 = map(Buffer[x3], 0, 4095, 63, 9); 				// convert to plot
 80007d4:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <senoidal_moviendose+0x1a0>)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e4:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 80007e8:	eddf 1a3a 	vldr	s3, [pc, #232]	; 80008d4 <senoidal_moviendose+0x1b0>
 80007ec:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80008d8 <senoidal_moviendose+0x1b4>
 80007f0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80008dc <senoidal_moviendose+0x1b8>
 80007f4:	eeb0 0a67 	vmov.f32	s0, s15
 80007f8:	f7ff fed8 	bl	80005ac <map>
 80007fc:	eef0 7a40 	vmov.f32	s15, s0
 8000800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000804:	ee17 3a90 	vmov	r3, s15
 8000808:	61bb      	str	r3, [r7, #24]
			y4 = map(Buffer[x4], 0, 4095, 63, 9);
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <senoidal_moviendose+0x1a0>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800081a:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 800081e:	eddf 1a2d 	vldr	s3, [pc, #180]	; 80008d4 <senoidal_moviendose+0x1b0>
 8000822:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80008d8 <senoidal_moviendose+0x1b4>
 8000826:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80008dc <senoidal_moviendose+0x1b8>
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	f7ff febd 	bl	80005ac <map>
 8000832:	eef0 7a40 	vmov.f32	s15, s0
 8000836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083a:	ee17 3a90 	vmov	r3, s15
 800083e:	617b      	str	r3, [r7, #20]
			//ssd1306_Line(k + 27, y1, k + 28, y2, Black);
			ssd1306_Line(k + 27, y3, k + 28, y4, White);
 8000840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000842:	b2db      	uxtb	r3, r3
 8000844:	331b      	adds	r3, #27
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	b2db      	uxtb	r3, r3
 8000850:	331c      	adds	r3, #28
 8000852:	b2da      	uxtb	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2401      	movs	r4, #1
 800085a:	9400      	str	r4, [sp, #0]
 800085c:	f000 fcee 	bl	800123c <ssd1306_Line>
		for (int k = 0; k <= 98; k++){
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	2b62      	cmp	r3, #98	; 0x62
 800086a:	dd99      	ble.n	80007a0 <senoidal_moviendose+0x7c>
		 }

		for (int x = 0; x < MAX; x++)
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
 8000870:	e00b      	b.n	800088a <senoidal_moviendose+0x166>
		{
			erase_buffer[x] = Buffer[x];
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <senoidal_moviendose+0x1a0>)
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087a:	4619      	mov	r1, r3
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <senoidal_moviendose+0x1ac>)
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int x = 0; x < MAX; x++)
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	3301      	adds	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	2bc7      	cmp	r3, #199	; 0xc7
 800088e:	ddf0      	ble.n	8000872 <senoidal_moviendose+0x14e>
		}
			previous_trigger_point = trigger_point;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <senoidal_moviendose+0x19c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <senoidal_moviendose+0x1a8>)
 8000896:	6013      	str	r3, [r2, #0]

		 ssd1306_SetCursor(0, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fcb6 	bl	800120c <ssd1306_SetCursor>
		 ssd1306_WriteString("Sine", Font_6x8, White);
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <senoidal_moviendose+0x1bc>)
 80008a2:	2301      	movs	r3, #1
 80008a4:	ca06      	ldmia	r2, {r1, r2}
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <senoidal_moviendose+0x1c0>)
 80008a8:	f000 fc8a 	bl	80011c0 <ssd1306_WriteString>

		 flag = 0;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <senoidal_moviendose+0x198>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	}
}
 80008b2:	bf00      	nop
 80008b4:	3734      	adds	r7, #52	; 0x34
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000a68 	.word	0x20000a68
 80008c0:	20000004 	.word	0x20000004
 80008c4:	2000073c 	.word	0x2000073c
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000a6c 	.word	0x20000a6c
 80008d4:	427c0000 	.word	0x427c0000
 80008d8:	457ff000 	.word	0x457ff000
 80008dc:	00000000 	.word	0x00000000
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	080065ec 	.word	0x080065ec

080008e8 <Mostrar_pantalla>:

void Mostrar_pantalla(void *pvParameters){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	//ssd1306_Init();

	while(1){
		grafico();
 80008f0:	f7ff fe8a 	bl	8000608 <grafico>
		senoidal_moviendose();
 80008f4:	f7ff ff16 	bl	8000724 <senoidal_moviendose>
		int_to_char(Buffer[0], adc_char);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <Mostrar_pantalla+0x3c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	490a      	ldr	r1, [pc, #40]	; (8000928 <Mostrar_pantalla+0x40>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe0a 	bl	8000518 <int_to_char>
		ssd1306_SetCursor(84, 0);
 8000904:	2100      	movs	r1, #0
 8000906:	2054      	movs	r0, #84	; 0x54
 8000908:	f000 fc80 	bl	800120c <ssd1306_SetCursor>
		ssd1306_WriteString(adc_char, Font_6x8, White);
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <Mostrar_pantalla+0x44>)
 800090e:	2301      	movs	r3, #1
 8000910:	ca06      	ldmia	r2, {r1, r2}
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <Mostrar_pantalla+0x40>)
 8000914:	f000 fc54 	bl	80011c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000918:	f000 fb4e 	bl	8000fb8 <ssd1306_UpdateScreen>
		vTaskDelay(100/portTICK_RATE_MS);
 800091c:	2064      	movs	r0, #100	; 0x64
 800091e:	f004 fea3 	bl	8005668 <vTaskDelay>
		grafico();
 8000922:	e7e5      	b.n	80008f0 <Mostrar_pantalla+0x8>
 8000924:	2000073c 	.word	0x2000073c
 8000928:	20000a5c 	.word	0x20000a5c
 800092c:	2000000c 	.word	0x2000000c

08000930 <HAL_ADC_ConvCpltCallback>:
	while(1){
		vTaskDelay(20/portTICK_RATE_MS);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	// Cargamos MAX muestras del ADC en un buffer
	// Para mostrar en el display
	flag = 1;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_ADC_ConvCpltCallback+0x40>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<MAX; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e00a      	b.n	800095a <HAL_ADC_ConvCpltCallback+0x2a>
		Buffer[i] = Dato[i];
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_ADC_ConvCpltCallback+0x44>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094c:	490a      	ldr	r1, [pc, #40]	; (8000978 <HAL_ADC_ConvCpltCallback+0x48>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX; i++)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2bc7      	cmp	r3, #199	; 0xc7
 800095e:	ddf1      	ble.n	8000944 <HAL_ADC_ConvCpltCallback+0x14>


}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000a68 	.word	0x20000a68
 8000974:	2000041c 	.word	0x2000041c
 8000978:	2000073c 	.word	0x2000073c

0800097c <Init_Sistema>:

void Enviar_USB(void *pvParameters){

}

void Init_Sistema(void *pvParameters){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8000984:	f000 fa8e 	bl	8000ea4 <ssd1306_Init>
	HAL_ADC_Start_DMA(&hadc1, Dato, 100);
 8000988:	2264      	movs	r2, #100	; 0x64
 800098a:	4907      	ldr	r1, [pc, #28]	; (80009a8 <Init_Sistema+0x2c>)
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <Init_Sistema+0x30>)
 800098e:	f001 f81b 	bl	80019c8 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000992:	2100      	movs	r1, #0
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <Init_Sistema+0x34>)
 8000996:	f003 fbdd 	bl	8004154 <HAL_TIM_OC_Start>
	vTaskDelete(NULL);
 800099a:	2000      	movs	r0, #0
 800099c:	f004 fdd4 	bl	8005548 <vTaskDelete>

}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000041c 	.word	0x2000041c
 80009ac:	20000294 	.word	0x20000294
 80009b0:	20000390 	.word	0x20000390

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 ff7f 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f82b 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 f9b7 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f000 f995 	bl	8000cf4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009ca:	f000 f969 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009ce:	f000 f88f 	bl	8000af0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009d2:	f000 f8df 	bl	8000b94 <MX_I2C1_Init>
  MX_TIM2_Init();
 80009d6:	f000 f90b 	bl	8000bf0 <MX_TIM2_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <main+0x54>)
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <main+0x58>)
 80009ea:	f004 fc76 	bl	80052da <xTaskCreate>
  //xTaskCreate(Leer_ADC,"ADC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
  //xTaskCreate(Enviar_USB,"USB", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
  //xTaskCreate(Cambiar_Modo,"MODO",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 80009ee:	2300      	movs	r3, #0
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2302      	movs	r3, #2
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	4905      	ldr	r1, [pc, #20]	; (8000a10 <main+0x5c>)
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <main+0x60>)
 80009fe:	f004 fc6c 	bl	80052da <xTaskCreate>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  vTaskStartScheduler();
 8000a02:	f004 fe65 	bl	80056d0 <vTaskStartScheduler>

  while(1){
 8000a06:	e7fe      	b.n	8000a06 <main+0x52>
 8000a08:	080065f4 	.word	0x080065f4
 8000a0c:	080008e9 	.word	0x080008e9
 8000a10:	08006600 	.word	0x08006600
 8000a14:	0800097d 	.word	0x0800097d

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fdcc 	bl	80065c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <SystemClock_Config+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <SystemClock_Config+0xd4>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 fd80 	bl	80035a8 <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aae:	f000 f9c1 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 ffe2 	bl	8003a98 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ada:	f000 f9ab 	bl	8000e34 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	; 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MX_ADC1_Init+0x9c>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <MX_ADC1_Init+0xa0>)
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b52:	f000 fef5 	bl	8001940 <HAL_ADC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b5c:	f000 f96a 	bl	8000e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b72:	f001 f82d 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b7c:	f000 f95a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000294 	.word	0x20000294
 8000b8c:	40012000 	.word	0x40012000
 8000b90:	0f000001 	.word	0x0f000001

08000b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_I2C1_Init+0x54>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_I2C1_Init+0x58>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2C1_Init+0x50>)
 8000bd2:	f002 f88d 	bl	8002cf0 <HAL_I2C_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f92a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000033c 	.word	0x2000033c
 8000be8:	40005400 	.word	0x40005400
 8000bec:	00061a80 	.word	0x00061a80

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c3c:	f003 fa3a 	bl	80040b4 <HAL_TIM_OC_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c46:	f000 f8f5 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	4619      	mov	r1, r3
 8000c58:	4810      	ldr	r0, [pc, #64]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c5a:	f003 fee9 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c64:	f000 f8e6 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c68:	2330      	movs	r3, #48	; 0x30
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c80:	f003 fc20 	bl	80044c4 <HAL_TIM_OC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c8a:	f000 f8d3 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_TIM2_Init+0xac>)
 8000c90:	f000 fcbc 	bl	800160c <HAL_TIM_MspPostInit>

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000390 	.word	0x20000390

08000ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_USART2_UART_Init+0x50>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cd8:	f003 ff2c 	bl	8004b34 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ce2:	f000 f8a7 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200003d8 	.word	0x200003d8
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_DMA_Init+0x3c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <MX_DMA_Init+0x3c>)
 8000d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_DMA_Init+0x3c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2105      	movs	r1, #5
 8000d1a:	2038      	movs	r0, #56	; 0x38
 8000d1c:	f001 fab0 	bl	8002280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d20:	2038      	movs	r0, #56	; 0x38
 8000d22:	f001 fac9 	bl	80022b8 <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_GPIO_Init+0xd0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000dc0:	f001 ff7c 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_GPIO_Init+0xd8>)
 8000ddc:	f001 fdea 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000de0:	2320      	movs	r3, #32
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000df8:	f001 fddc 	bl	80029b4 <HAL_GPIO_Init>

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020800 	.word	0x40020800

08000e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e22:	f000 fd6d 	bl	8001900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2178      	movs	r1, #120	; 0x78
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <ssd1306_WriteCommand+0x2c>)
 8000e60:	f002 f88a 	bl	8002f78 <HAL_I2C_Mem_Write>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000033c 	.word	0x2000033c

08000e70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	9202      	str	r2, [sp, #8]
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	2240      	movs	r2, #64	; 0x40
 8000e8e:	2178      	movs	r1, #120	; 0x78
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <ssd1306_WriteData+0x30>)
 8000e92:	f002 f871 	bl	8002f78 <HAL_I2C_Mem_Write>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000033c 	.word	0x2000033c

08000ea4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 fa85 	bl	80013b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000eae:	2020      	movs	r0, #32
 8000eb0:	f7ff ffc6 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ffc3 	bl	8000e40 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000eba:	20b0      	movs	r0, #176	; 0xb0
 8000ebc:	f7ff ffc0 	bl	8000e40 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f7ff ffbd 	bl	8000e40 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffba 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f7ff ffb7 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ed2:	2040      	movs	r0, #64	; 0x40
 8000ed4:	f7ff ffb4 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ed8:	20ff      	movs	r0, #255	; 0xff
 8000eda:	f000 fa59 	bl	8001390 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ede:	20a1      	movs	r0, #161	; 0xa1
 8000ee0:	f7ff ffae 	bl	8000e40 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ee4:	20a6      	movs	r0, #166	; 0xa6
 8000ee6:	f7ff ffab 	bl	8000e40 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000eea:	20a8      	movs	r0, #168	; 0xa8
 8000eec:	f7ff ffa8 	bl	8000e40 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ef0:	203f      	movs	r0, #63	; 0x3f
 8000ef2:	f7ff ffa5 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ef6:	20a4      	movs	r0, #164	; 0xa4
 8000ef8:	f7ff ffa2 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000efc:	20d3      	movs	r0, #211	; 0xd3
 8000efe:	f7ff ff9f 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff9c 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f08:	20d5      	movs	r0, #213	; 0xd5
 8000f0a:	f7ff ff99 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f0e:	20f0      	movs	r0, #240	; 0xf0
 8000f10:	f7ff ff96 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f14:	20d9      	movs	r0, #217	; 0xd9
 8000f16:	f7ff ff93 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f1a:	2022      	movs	r0, #34	; 0x22
 8000f1c:	f7ff ff90 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f20:	20da      	movs	r0, #218	; 0xda
 8000f22:	f7ff ff8d 	bl	8000e40 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f26:	2012      	movs	r0, #18
 8000f28:	f7ff ff8a 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f2c:	20db      	movs	r0, #219	; 0xdb
 8000f2e:	f7ff ff87 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f32:	2020      	movs	r0, #32
 8000f34:	f7ff ff84 	bl	8000e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f38:	208d      	movs	r0, #141	; 0x8d
 8000f3a:	f7ff ff81 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f3e:	2014      	movs	r0, #20
 8000f40:	f7ff ff7e 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 fa37 	bl	80013b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f810 	bl	8000f70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f50:	f000 f832 	bl	8000fb8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <ssd1306_Init+0xc8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <ssd1306_Init+0xc8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <ssd1306_Init+0xc8>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	711a      	strb	r2, [r3, #4]
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000118c 	.word	0x2000118c

08000f70 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e00d      	b.n	8000f9c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <ssd1306_Fill+0x1a>
 8000f86:	2100      	movs	r1, #0
 8000f88:	e000      	b.n	8000f8c <ssd1306_Fill+0x1c>
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <ssd1306_Fill+0x44>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa2:	d3ed      	bcc.n	8000f80 <ssd1306_Fill+0x10>
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000d8c 	.word	0x20000d8c

08000fb8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e016      	b.n	8000ff2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3b50      	subs	r3, #80	; 0x50
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff38 	bl	8000e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff ff35 	bl	8000e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff ff32 	bl	8000e40 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <ssd1306_UpdateScreen+0x4c>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff42 	bl	8000e70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	d9e5      	bls.n	8000fc4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000d8c 	.word	0x20000d8c

08001008 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	460b      	mov	r3, r1
 8001014:	71bb      	strb	r3, [r7, #6]
 8001016:	4613      	mov	r3, r2
 8001018:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db3d      	blt.n	800109e <ssd1306_DrawPixel+0x96>
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b3f      	cmp	r3, #63	; 0x3f
 8001026:	d83a      	bhi.n	800109e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d11a      	bne.n	8001064 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	b2d8      	uxtb	r0, r3
 8001036:	4603      	mov	r3, r0
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	4413      	add	r3, r2
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <ssd1306_DrawPixel+0xa4>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	b25a      	sxtb	r2, r3
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b259      	sxtb	r1, r3
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	4603      	mov	r3, r0
 8001058:	01db      	lsls	r3, r3, #7
 800105a:	4413      	add	r3, r2
 800105c:	b2c9      	uxtb	r1, r1
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <ssd1306_DrawPixel+0xa4>)
 8001060:	54d1      	strb	r1, [r2, r3]
 8001062:	e01d      	b.n	80010a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	b2d8      	uxtb	r0, r3
 800106c:	4603      	mov	r3, r0
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	4413      	add	r3, r2
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <ssd1306_DrawPixel+0xa4>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	b25a      	sxtb	r2, r3
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	b25b      	sxtb	r3, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4013      	ands	r3, r2
 800108c:	b259      	sxtb	r1, r3
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	4603      	mov	r3, r0
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	4413      	add	r3, r2
 8001096:	b2c9      	uxtb	r1, r1
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <ssd1306_DrawPixel+0xa4>)
 800109a:	54d1      	strb	r1, [r2, r3]
 800109c:	e000      	b.n	80010a0 <ssd1306_DrawPixel+0x98>
        return;
 800109e:	bf00      	nop
    }
}
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000d8c 	.word	0x20000d8c

080010b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	1d38      	adds	r0, r7, #4
 80010ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80010be:	461a      	mov	r2, r3
 80010c0:	4623      	mov	r3, r4
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	4613      	mov	r3, r2
 80010c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	2b1f      	cmp	r3, #31
 80010cc:	d902      	bls.n	80010d4 <ssd1306_WriteChar+0x24>
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b7e      	cmp	r3, #126	; 0x7e
 80010d2:	d901      	bls.n	80010d8 <ssd1306_WriteChar+0x28>
        return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e06d      	b.n	80011b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <ssd1306_WriteChar+0x10c>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	793b      	ldrb	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	2b80      	cmp	r3, #128	; 0x80
 80010e4:	dc06      	bgt.n	80010f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <ssd1306_WriteChar+0x10c>)
 80010e8:	885b      	ldrh	r3, [r3, #2]
 80010ea:	461a      	mov	r2, r3
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010f0:	2b40      	cmp	r3, #64	; 0x40
 80010f2:	dd01      	ble.n	80010f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e05d      	b.n	80011b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	e04c      	b.n	8001198 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	3b20      	subs	r3, #32
 8001104:	7979      	ldrb	r1, [r7, #5]
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	4619      	mov	r1, r3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	440b      	add	r3, r1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	e034      	b.n	8001188 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d012      	beq.n	8001154 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <ssd1306_WriteChar+0x10c>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	b2d8      	uxtb	r0, r3
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <ssd1306_WriteChar+0x10c>)
 800113e:	885b      	ldrh	r3, [r3, #2]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4413      	add	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff ff5b 	bl	8001008 <ssd1306_DrawPixel>
 8001152:	e016      	b.n	8001182 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <ssd1306_WriteChar+0x10c>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b2d8      	uxtb	r0, r3
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <ssd1306_WriteChar+0x10c>)
 8001164:	885b      	ldrh	r3, [r3, #2]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b2d9      	uxtb	r1, r3
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	f7ff ff43 	bl	8001008 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	3301      	adds	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	793b      	ldrb	r3, [r7, #4]
 800118a:	461a      	mov	r2, r3
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4293      	cmp	r3, r2
 8001190:	d3c5      	bcc.n	800111e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	461a      	mov	r2, r3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d3ad      	bcc.n	80010fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <ssd1306_WriteChar+0x10c>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <ssd1306_WriteChar+0x10c>)
 80011b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3724      	adds	r7, #36	; 0x24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	2000118c 	.word	0x2000118c

080011c0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	1d38      	adds	r0, r7, #4
 80011ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80011ce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80011d0:	e012      	b.n	80011f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	7818      	ldrb	r0, [r3, #0]
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	1d3a      	adds	r2, r7, #4
 80011da:	ca06      	ldmia	r2, {r1, r2}
 80011dc:	f7ff ff68 	bl	80010b0 <ssd1306_WriteChar>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d002      	beq.n	80011f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	e008      	b.n	8001204 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e8      	bne.n	80011d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	781b      	ldrb	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <ssd1306_SetCursor+0x2c>)
 8001222:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <ssd1306_SetCursor+0x2c>)
 800122a:	805a      	strh	r2, [r3, #2]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	2000118c 	.word	0x2000118c

0800123c <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	460b      	mov	r3, r1
 8001254:	717b      	strb	r3, [r7, #5]
 8001256:	4613      	mov	r3, r2
 8001258:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800125a:	797a      	ldrb	r2, [r7, #5]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfb8      	it	lt
 8001264:	425b      	neglt	r3, r3
 8001266:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001268:	793a      	ldrb	r2, [r7, #4]
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfb8      	it	lt
 8001272:	425b      	neglt	r3, r3
 8001274:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	429a      	cmp	r2, r3
 800127c:	d201      	bcs.n	8001282 <ssd1306_Line+0x46>
 800127e:	2301      	movs	r3, #1
 8001280:	e001      	b.n	8001286 <ssd1306_Line+0x4a>
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001288:	79ba      	ldrb	r2, [r7, #6]
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d201      	bcs.n	8001294 <ssd1306_Line+0x58>
 8001290:	2301      	movs	r3, #1
 8001292:	e001      	b.n	8001298 <ssd1306_Line+0x5c>
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80012a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80012a6:	7939      	ldrb	r1, [r7, #4]
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff feac 	bl	8001008 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80012b0:	e024      	b.n	80012fc <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80012b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80012b6:	79b9      	ldrb	r1, [r7, #6]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fea4 	bl	8001008 <ssd1306_DrawPixel>
    error2 = error * 2;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	425b      	negs	r3, r3
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dd08      	ble.n	80012e2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4413      	add	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da08      	bge.n	80012fc <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4413      	add	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	4413      	add	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	797b      	ldrb	r3, [r7, #5]
 8001300:	429a      	cmp	r2, r3
 8001302:	d1d6      	bne.n	80012b2 <ssd1306_Line+0x76>
 8001304:	79ba      	ldrb	r2, [r7, #6]
 8001306:	793b      	ldrb	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d1d2      	bne.n	80012b2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800130c:	bf00      	nop
}
 800130e:	3724      	adds	r7, #36	; 0x24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af02      	add	r7, sp, #8
 800131a:	4604      	mov	r4, r0
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4623      	mov	r3, r4
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	4603      	mov	r3, r0
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	460b      	mov	r3, r1
 800132c:	717b      	strb	r3, [r7, #5]
 800132e:	4613      	mov	r3, r2
 8001330:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	4413      	add	r3, r2
 8001338:	b2dc      	uxtb	r4, r3
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	79b9      	ldrb	r1, [r7, #6]
 800133e:	79f8      	ldrb	r0, [r7, #7]
 8001340:	793b      	ldrb	r3, [r7, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4623      	mov	r3, r4
 8001346:	f7ff ff79 	bl	800123c <ssd1306_Line>
	return;
 800134a:	bf00      	nop
}
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b085      	sub	sp, #20
 8001356:	af02      	add	r7, sp, #8
 8001358:	4604      	mov	r4, r0
 800135a:	4608      	mov	r0, r1
 800135c:	4611      	mov	r1, r2
 800135e:	461a      	mov	r2, r3
 8001360:	4623      	mov	r3, r4
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4603      	mov	r3, r0
 8001366:	71bb      	strb	r3, [r7, #6]
 8001368:	460b      	mov	r3, r1
 800136a:	717b      	strb	r3, [r7, #5]
 800136c:	4613      	mov	r3, r2
 800136e:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	4413      	add	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	79bc      	ldrb	r4, [r7, #6]
 800137a:	79b9      	ldrb	r1, [r7, #6]
 800137c:	79f8      	ldrb	r0, [r7, #7]
 800137e:	793b      	ldrb	r3, [r7, #4]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4623      	mov	r3, r4
 8001384:	f7ff ff5a 	bl	800123c <ssd1306_Line>
	return;
 8001388:	bf00      	nop
}
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800139a:	2381      	movs	r3, #129	; 0x81
 800139c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd4d 	bl	8000e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fd49 	bl	8000e40 <ssd1306_WriteCommand>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013c8:	23af      	movs	r3, #175	; 0xaf
 80013ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <ssd1306_SetDisplayOn+0x38>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	715a      	strb	r2, [r3, #5]
 80013d2:	e004      	b.n	80013de <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013d4:	23ae      	movs	r3, #174	; 0xae
 80013d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <ssd1306_SetDisplayOn+0x38>)
 80013da:	2200      	movs	r2, #0
 80013dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd2d 	bl	8000e40 <ssd1306_WriteCommand>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000118c 	.word	0x2000118c

080013f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x54>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_MspInit+0x54>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x54>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_MspInit+0x54>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_MspInit+0x54>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_MspInit+0x54>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	210f      	movs	r1, #15
 8001436:	f06f 0001 	mvn.w	r0, #1
 800143a:	f000 ff21 	bl	8002280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <HAL_ADC_MspInit+0xdc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d157      	bne.n	800151e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_ADC_MspInit+0xe0>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <HAL_ADC_MspInit+0xe0>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_ADC_MspInit+0xe0>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_ADC_MspInit+0xe0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_ADC_MspInit+0xe0>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_ADC_MspInit+0xe0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	481d      	ldr	r0, [pc, #116]	; (8001530 <HAL_ADC_MspInit+0xe4>)
 80014ba:	f001 fa7b 	bl	80029b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_ADC_MspInit+0xec>)
 80014c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001504:	f000 fee6 	bl	80022d4 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800150e:	f7ff fc91 	bl	8000e34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_ADC_MspInit+0xe8>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40012000 	.word	0x40012000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	200002dc 	.word	0x200002dc
 8001538:	40026410 	.word	0x40026410

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12c      	bne.n	80015b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158c:	2304      	movs	r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <HAL_I2C_MspInit+0x8c>)
 8001598:	f001 fa0c 	bl	80029b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d10d      	bne.n	80015fa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_TIM_OC_MspInit+0x3c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_TIM_OC_MspInit+0x3c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_TIM_OC_MspInit+0x3c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d11e      	bne.n	800166c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <HAL_TIM_MspPostInit+0x6c>)
 8001668:	f001 f9a4 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_UART_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12b      	bne.n	80016f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d6:	230c      	movs	r3, #12
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e6:	2307      	movs	r3, #7
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_UART_MspInit+0x8c>)
 80016f2:	f001 f95f 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004400 	.word	0x40004400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_InitTick+0xd0>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_InitTick+0xd0>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_InitTick+0xd0>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001738:	f107 020c 	add.w	r2, r7, #12
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fbc8 	bl	8003ed8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001748:	f002 fbb2 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 800174c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_InitTick+0xd4>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	3b01      	subs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_InitTick+0xd8>)
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_InitTick+0xdc>)
 8001760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_InitTick+0xd8>)
 8001764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001768:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_InitTick+0xd8>)
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_InitTick+0xd8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_InitTick+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_InitTick+0xd8>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <HAL_InitTick+0xd8>)
 8001784:	f002 fbda 	bl	8003f3c <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800178e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11b      	bne.n	80017ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <HAL_InitTick+0xd8>)
 8001798:	f002 fc2a 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017aa:	2019      	movs	r0, #25
 80017ac:	f000 fd84 	bl	80022b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d808      	bhi.n	80017c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017b6:	2200      	movs	r2, #0
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	2019      	movs	r0, #25
 80017bc:	f000 fd60 	bl	8002280 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0xe0>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e002      	b.n	80017ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3730      	adds	r7, #48	; 0x30
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	20001194 	.word	0x20001194
 80017e8:	40010000 	.word	0x40010000
 80017ec:	20000018 	.word	0x20000018

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001822:	f002 fd47 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20001194 	.word	0x20001194

08001830 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA2_Stream0_IRQHandler+0x10>)
 8001836:	f000 fe53 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002dc 	.word	0x200002dc

08001844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800186e:	490e      	ldr	r1, [pc, #56]	; (80018a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001884:	4c0b      	ldr	r4, [pc, #44]	; (80018b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001892:	f7ff ffd7 	bl	8001844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f004 fe71 	bl	800657c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff f88b 	bl	80009b4 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80018ac:	08006c34 	.word	0x08006c34
  ldr r2, =_sbss
 80018b0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80018b4:	20004f34 	.word	0x20004f34

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 fcc0 	bl	800226a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff ff0e 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fd80 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000001c 	.word	0x2000001c
 8001924:	200011dc 	.word	0x200011dc

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200011dc 	.word	0x200011dc

08001940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e033      	b.n	80019be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd74 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001986:	f023 0302 	bic.w	r3, r3, #2
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fa3e 	bl	8001e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	e001      	b.n	80019b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1e>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0ce      	b.n	8001b84 <HAL_ADC_Start_DMA+0x1bc>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d018      	beq.n	8001a2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_ADC_Start_DMA+0x1c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5f      	ldr	r2, [pc, #380]	; (8001b90 <HAL_ADC_Start_DMA+0x1c8>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9a      	lsrs	r2, r3, #18
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d107      	bne.n	8001a4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	f040 8086 	bne.w	8001b6a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	d106      	bne.n	8001aac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f023 0206 	bic.w	r2, r3, #6
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aaa:	e002      	b.n	8001ab2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_ADC_Start_DMA+0x1cc>)
 8001abc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <HAL_ADC_Start_DMA+0x1d0>)
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	4a34      	ldr	r2, [pc, #208]	; (8001b9c <HAL_ADC_Start_DMA+0x1d4>)
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <HAL_ADC_Start_DMA+0x1d8>)
 8001ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ade:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	334c      	adds	r3, #76	; 0x4c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f000 fc8e 	bl	8002430 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10f      	bne.n	8001b40 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d129      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	e020      	b.n	8001b82 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_ADC_Start_DMA+0x1dc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11b      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1ba>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d114      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e00b      	b.n	8001b82 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	40012300 	.word	0x40012300
 8001b98:	0800200d 	.word	0x0800200d
 8001b9c:	080020c7 	.word	0x080020c7
 8001ba0:	080020e3 	.word	0x080020e3
 8001ba4:	40012000 	.word	0x40012000

08001ba8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e105      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x228>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d925      	bls.n	8001c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	3b1e      	subs	r3, #30
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e022      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4403      	add	r3, r0
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d824      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	e04c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	; 0x23
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b23      	subs	r3, #35	; 0x23
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d30:	e023      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	; 0x41
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b41      	subs	r3, #65	; 0x41
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_ADC_ConfigChannel+0x234>)
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_ADC_ConfigChannel+0x238>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1cc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_ADC_ConfigChannel+0x238>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d123      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d003      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x1e6>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b11      	cmp	r3, #17
 8001db4:	d11b      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d111      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_ADC_ConfigChannel+0x23c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_ADC_ConfigChannel+0x240>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	0c9a      	lsrs	r2, r3, #18
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40012300 	.word	0x40012300
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	20000014 	.word	0x20000014
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	; (8002004 <ADC_Init+0x1f0>)
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <ADC_Init+0x1f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e00f      	b.n	8001f12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0202 	bic.w	r2, r2, #2
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	005a      	lsls	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	035a      	lsls	r2, r3, #13
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	051a      	lsls	r2, r3, #20
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fca:	025a      	lsls	r2, r3, #9
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	029a      	lsls	r2, r3, #10
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40012300 	.word	0x40012300
 8002008:	0f000001 	.word	0x0f000001

0800200c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13c      	bne.n	80020a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d12b      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d127      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002060:	2b00      	cmp	r3, #0
 8002062:	d119      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0220 	bic.w	r2, r2, #32
 8002072:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7fe fc49 	bl	8000930 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800209e:	e00e      	b.n	80020be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff fd85 	bl	8001bbc <HAL_ADC_ErrorCallback>
}
 80020b2:	e004      	b.n	80020be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff fd67 	bl	8001ba8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff fd5a 	bl	8001bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ff4c 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002292:	f7ff ff61 	bl	8002158 <__NVIC_GetPriorityGrouping>
 8002296:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	6978      	ldr	r0, [r7, #20]
 800229e:	f7ff ffb1 	bl	8002204 <NVIC_EncodePriority>
 80022a2:	4602      	mov	r2, r0
 80022a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff80 	bl	80021b0 <__NVIC_SetPriority>
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff54 	bl	8002174 <__NVIC_EnableIRQ>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fb22 	bl	8001928 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e099      	b.n	8002424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e00f      	b.n	8002332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff fb09 	bl	8001928 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d908      	bls.n	8002332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e078      	b.n	8002424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e8      	bne.n	8002312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_DMA_Init+0x158>)
 800234c:	4013      	ands	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0307 	bic.w	r3, r3, #7
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d117      	bne.n	80023f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa6f 	bl	80028bc <DMA_CheckFifoParam>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023f2:	2301      	movs	r3, #1
 80023f4:	e016      	b.n	8002424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa26 	bl	8002850 <DMA_CalcBaseAndBitshift>
 8002404:	4603      	mov	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	223f      	movs	r2, #63	; 0x3f
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f010803f 	.word	0xf010803f

08002430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Start_IT+0x26>
 8002452:	2302      	movs	r3, #2
 8002454:	e040      	b.n	80024d8 <HAL_DMA_Start_IT+0xa8>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12f      	bne.n	80024ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f9b8 	bl	80027f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	223f      	movs	r2, #63	; 0x3f
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0216 	orr.w	r2, r2, #22
 800249e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e005      	b.n	80024d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_DMA_IRQHandler+0x248>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a8e      	ldr	r2, [pc, #568]	; (800272c <HAL_DMA_IRQHandler+0x24c>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2208      	movs	r2, #8
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2204      	movs	r2, #4
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2204      	movs	r2, #4
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2210      	movs	r2, #16
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d043      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03c      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2210      	movs	r2, #16
 80025dc:	409a      	lsls	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
 800260e:	e01f      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e016      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2220      	movs	r2, #32
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 808f 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8087 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2220      	movs	r2, #32
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d136      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0216 	bic.w	r2, r2, #22
 8002698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_DMA_IRQHandler+0x1da>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
        }
        return;
 80026f6:	e079      	b.n	80027ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10d      	bne.n	8002730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	2b00      	cmp	r3, #0
 800271a:	d031      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e02c      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
 8002726:	bf00      	nop
 8002728:	20000014 	.word	0x20000014
 800272c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
 8002740:	e01e      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0210 	bic.w	r2, r2, #16
 800275e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d032      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2205      	movs	r2, #5
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3301      	adds	r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d307      	bcc.n	80027c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f2      	bne.n	80027ac <HAL_DMA_IRQHandler+0x2cc>
 80027c6:	e000      	b.n	80027ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e000      	b.n	80027ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80027ec:	bf00      	nop
    }
  }
}
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d108      	bne.n	8002834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002832:	e007      	b.n	8002844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3b10      	subs	r3, #16
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <DMA_CalcBaseAndBitshift+0x68>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d909      	bls.n	8002892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	1d1a      	adds	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58
 8002890:	e007      	b.n	80028a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
 80028b8:	08006c1c 	.word	0x08006c1c

080028bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11f      	bne.n	8002916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d856      	bhi.n	800298a <DMA_CheckFifoParam+0xce>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <DMA_CheckFifoParam+0x28>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002907 	.word	0x08002907
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	0800298b 	.word	0x0800298b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d046      	beq.n	800298e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e043      	b.n	800298e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290e:	d140      	bne.n	8002992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e03d      	b.n	8002992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d121      	bne.n	8002964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d837      	bhi.n	8002996 <DMA_CheckFifoParam+0xda>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <DMA_CheckFifoParam+0x70>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002943 	.word	0x08002943
 8002934:	0800293d 	.word	0x0800293d
 8002938:	08002955 	.word	0x08002955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e030      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d025      	beq.n	800299a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002952:	e022      	b.n	800299a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295c:	d11f      	bne.n	800299e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002962:	e01c      	b.n	800299e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d903      	bls.n	8002972 <DMA_CheckFifoParam+0xb6>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d003      	beq.n	8002978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002970:	e018      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      break;
 8002976:	e015      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e00b      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 800298a:	bf00      	nop
 800298c:	e00a      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e008      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e006      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e004      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
    }
  } 
  
  return status; 
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e159      	b.n	8002c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8148 	bne.w	8002c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a2 	beq.w	8002c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x202>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fe>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a47      	ldr	r2, [pc, #284]	; (8002cac <HAL_GPIO_Init+0x2f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x1fa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_GPIO_Init+0x2fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x1f6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x1f2>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f aea2 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e12b      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fc10 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 f898 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a81      	ldr	r2, [pc, #516]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_I2C_Init+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <HAL_I2C_Init+0x27c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e7      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a78      	ldr	r2, [pc, #480]	; (8002f70 <HAL_I2C_Init+0x280>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_I2C_Init+0x284>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	495c      	ldr	r1, [pc, #368]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d819      	bhi.n	8002e2c <HAL_I2C_Init+0x13c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_Init+0x138>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e59      	subs	r1, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	e051      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e04f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <HAL_I2C_Init+0x168>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e012      	b.n	8002e7e <HAL_I2C_Init+0x18e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	0099      	lsls	r1, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x196>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <HAL_I2C_Init+0x1bc>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e58      	subs	r0, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	6809      	ldr	r1, [r1, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6911      	ldr	r1, [r2, #16]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	000186a0 	.word	0x000186a0
 8002f68:	001e847f 	.word	0x001e847f
 8002f6c:	003d08ff 	.word	0x003d08ff
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	10624dd3 	.word	0x10624dd3

08002f78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f92:	f7fe fcc9 	bl	8001928 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80d9 	bne.w	8003158 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2319      	movs	r3, #25
 8002fac:	2201      	movs	r2, #1
 8002fae:	496d      	ldr	r1, [pc, #436]	; (8003164 <HAL_I2C_Mem_Write+0x1ec>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f971 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0cc      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_I2C_Mem_Write+0x56>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e0c5      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d007      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	; 0x21
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <HAL_I2C_Mem_Write+0x1f0>)
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003036:	88f8      	ldrh	r0, [r7, #6]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f890 	bl	800316c <I2C_RequestMemoryWrite>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d052      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e081      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f9f2 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b04      	cmp	r3, #4
 800306c:	d107      	bne.n	800307e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06b      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d11b      	bne.n	80030f8 <HAL_I2C_Mem_Write+0x180>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d017      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1aa      	bne.n	8003056 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f9de 	bl	80034c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e016      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	00100002 	.word	0x00100002
 8003168:	ffff0000 	.word	0xffff0000

0800316c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	460b      	mov	r3, r1
 8003180:	813b      	strh	r3, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2200      	movs	r2, #0
 800319e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f878 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d103      	bne.n	80031c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e05f      	b.n	800328a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	492d      	ldr	r1, [pc, #180]	; (8003294 <I2C_RequestMemoryWrite+0x128>)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f8b0 	bl	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e04c      	b.n	800328a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f91a 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e02b      	b.n	800328a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	e021      	b.n	8003288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b29b      	uxth	r3, r3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f8f4 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e005      	b.n	800328a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	00010002 	.word	0x00010002

08003298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	e025      	b.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d021      	beq.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fb39 	bl	8001928 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e023      	b.n	800333e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10d      	bne.n	800331c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	e00c      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d0b6      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003354:	e051      	b.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d123      	bne.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0204 	orr.w	r2, r3, #4
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e046      	b.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d021      	beq.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fe fab7 	bl	8001928 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e020      	b.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10c      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e00b      	b.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d18d      	bne.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003450:	e02d      	b.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f878 	bl	8003548 <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e02d      	b.n	80034be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d021      	beq.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fa5d 	bl	8001928 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e007      	b.n	80034be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d1ca      	bne.n	8003452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d2:	e02d      	b.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f837 	bl	8003548 <I2C_IsAcknowledgeFailed>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e02d      	b.n	8003540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d021      	beq.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fa1c 	bl	8001928 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d1ca      	bne.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d11b      	bne.n	8003598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e267      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d075      	beq.n	80036b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e242      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x74>
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a75      	ldr	r2, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003626:	4b70      	ldr	r3, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6f      	ldr	r2, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6c      	ldr	r2, [pc, #432]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 8003640:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe f962 	bl	8001928 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe f95e 	bl	8001928 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e207      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xc0>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f94e 	bl	8001928 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe f94a 	bl	8001928 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1f3      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0xe8>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11c      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1c7      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e03a      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fe f903 	bl	8001928 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe f8ff 	bl	8001928 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1a8      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4925      	ldr	r1, [pc, #148]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe f8e2 	bl	8001928 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003768:	f7fe f8de 	bl	8001928 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e187      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d036      	beq.n	8003800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe f8c2 	bl	8001928 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fe f8be 	bl	8001928 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e167      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x200>
 80037c6:	e01b      	b.n	8003800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe f8ab 	bl	8001928 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	e00e      	b.n	80037f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fe f8a7 	bl	8001928 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d907      	bls.n	80037f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e150      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470000 	.word	0x42470000
 80037f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ea      	bne.n	80037d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8097 	beq.w	800393c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a7c      	ldr	r2, [pc, #496]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b77      	ldr	r3, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b74      	ldr	r3, [pc, #464]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fe f867 	bl	8001928 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fe f863 	bl	8001928 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e10c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x2ea>
 8003884:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x30c>
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a57      	ldr	r2, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	4b55      	ldr	r3, [pc, #340]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 0304 	bic.w	r3, r3, #4
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe f828 	bl	8001928 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe f824 	bl	8001928 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0cb      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ee      	beq.n	80038dc <HAL_RCC_OscConfig+0x334>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fe f812 	bl	8001928 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe f80e 	bl	8001928 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0b5      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ee      	bne.n	8003908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a1 	beq.w	8003a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003946:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d05c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d141      	bne.n	80039de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd ffe2 	bl	8001928 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd ffde 	bl	8001928 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e087      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd ffb7 	bl	8001928 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd ffb3 	bl	8001928 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e05c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x416>
 80039dc:	e054      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd ffa0 	bl	8001928 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd ff9c 	bl	8001928 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e045      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x444>
 8003a0a:	e03d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e038      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x4ec>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d028      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0cc      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b68      	ldr	r3, [pc, #416]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d90c      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b65      	ldr	r3, [pc, #404]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b8      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	494d      	ldr	r1, [pc, #308]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d044      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e067      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4934      	ldr	r1, [pc, #208]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fd fece 	bl	8001928 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fd feca 	bl	8001928 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e04f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d20c      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e032      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4916      	ldr	r1, [pc, #88]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	490e      	ldr	r1, [pc, #56]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c1e:	f000 f821 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	490a      	ldr	r1, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	5ccb      	ldrb	r3, [r1, r3]
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fd64 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08006c04 	.word	0x08006c04
 8003c5c:	20000014 	.word	0x20000014
 8003c60:	20000018 	.word	0x20000018

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b094      	sub	sp, #80	; 0x50
 8003c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c70:	2300      	movs	r3, #0
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c74:	2300      	movs	r3, #0
 8003c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7c:	4b79      	ldr	r3, [pc, #484]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	f200 80e1 	bhi.w	8003e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c96:	e0db      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c9c:	e0db      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b73      	ldr	r3, [pc, #460]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ca2:	e0d8      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca4:	4b6f      	ldr	r3, [pc, #444]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d063      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cce:	2300      	movs	r3, #0
 8003cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	462b      	mov	r3, r5
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	0159      	lsls	r1, r3, #5
 8003ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce8:	0150      	lsls	r0, r2, #5
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4621      	mov	r1, r4
 8003cf0:	1a51      	subs	r1, r2, r1
 8003cf2:	6139      	str	r1, [r7, #16]
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d08:	4659      	mov	r1, fp
 8003d0a:	018b      	lsls	r3, r1, #6
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d12:	4651      	mov	r1, sl
 8003d14:	018a      	lsls	r2, r1, #6
 8003d16:	4651      	mov	r1, sl
 8003d18:	ebb2 0801 	subs.w	r8, r2, r1
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d36:	4690      	mov	r8, r2
 8003d38:	4699      	mov	r9, r3
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	eb18 0303 	adds.w	r3, r8, r3
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	462b      	mov	r3, r5
 8003d44:	eb49 0303 	adc.w	r3, r9, r3
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d56:	4629      	mov	r1, r5
 8003d58:	024b      	lsls	r3, r1, #9
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d60:	4621      	mov	r1, r4
 8003d62:	024a      	lsls	r2, r1, #9
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d74:	f7fc fa34 	bl	80001e0 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	e058      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	f04f 0000 	mov.w	r0, #0
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	0159      	lsls	r1, r3, #5
 8003daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dae:	0150      	lsls	r0, r2, #5
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4641      	mov	r1, r8
 8003db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dba:	4649      	mov	r1, r9
 8003dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	00eb      	lsls	r3, r5, #3
 8003de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dea:	00e2      	lsls	r2, r4, #3
 8003dec:	4614      	mov	r4, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	4643      	mov	r3, r8
 8003df2:	18e3      	adds	r3, r4, r3
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	464b      	mov	r3, r9
 8003df8:	eb45 0303 	adc.w	r3, r5, r3
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	028b      	lsls	r3, r1, #10
 8003e0e:	4621      	mov	r1, r4
 8003e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e14:	4621      	mov	r1, r4
 8003e16:	028a      	lsls	r2, r1, #10
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1e:	2200      	movs	r2, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	61fa      	str	r2, [r7, #28]
 8003e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e28:	f7fc f9da 	bl	80001e0 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4613      	mov	r3, r2
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3750      	adds	r7, #80	; 0x50
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	007a1200 	.word	0x007a1200

08003e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08006c14 	.word	0x08006c14

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb4:	f7ff ffdc 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0b5b      	lsrs	r3, r3, #13
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08006c14 	.word	0x08006c14

08003ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0203 	and.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_RCC_GetClockConfig+0x60>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40023c00 	.word	0x40023c00

08003f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f839 	bl	8003fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fb26 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d001      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e044      	b.n	8004092 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d018      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x6c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004032:	d013      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x6c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00e      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x6c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x6c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_TIM_Base_Start_IT+0xbc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x6c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d111      	bne.n	8004080 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b06      	cmp	r3, #6
 800406c:	d010      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	e007      	b.n	8004090 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40014000 	.word	0x40014000

080040b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e041      	b.n	800414a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fa76 	bl	80015cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 fa6a 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_TIM_OC_Start+0x24>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e022      	b.n	80041be <HAL_TIM_OC_Start+0x6a>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d109      	bne.n	8004192 <HAL_TIM_OC_Start+0x3e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e015      	b.n	80041be <HAL_TIM_OC_Start+0x6a>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d109      	bne.n	80041ac <HAL_TIM_OC_Start+0x58>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <HAL_TIM_OC_Start+0x6a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e068      	b.n	8004298 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_OC_Start+0x82>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	e013      	b.n	80041fe <HAL_TIM_OC_Start+0xaa>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_OC_Start+0x92>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e4:	e00b      	b.n	80041fe <HAL_TIM_OC_Start+0xaa>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_OC_Start+0xa2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	e003      	b.n	80041fe <HAL_TIM_OC_Start+0xaa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fbec 	bl	80049e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <HAL_TIM_OC_Start+0x14c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d107      	bne.n	8004226 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_TIM_OC_Start+0x14c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <HAL_TIM_OC_Start+0x10e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d013      	beq.n	8004262 <HAL_TIM_OC_Start+0x10e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_TIM_OC_Start+0x150>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_TIM_OC_Start+0x10e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_TIM_OC_Start+0x154>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_TIM_OC_Start+0x10e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <HAL_TIM_OC_Start+0x158>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_TIM_OC_Start+0x10e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <HAL_TIM_OC_Start+0x15c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d010      	beq.n	8004296 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	e007      	b.n	8004296 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40014000 	.word	0x40014000

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f94a 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f93c 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f94d 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f920 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f912 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f923 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0208 	mvn.w	r2, #8
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8f6 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8e8 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8f9 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2208      	movs	r2, #8
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8cc 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8be 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8cf 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fcec 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fb5e 	bl	8004b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f894 	bl	80045b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0220 	mvn.w	r2, #32
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fb28 	bl	8004b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e048      	b.n	8004574 <HAL_TIM_OC_ConfigChannel+0xb0>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d839      	bhi.n	8004564 <HAL_TIM_OC_ConfigChannel+0xa0>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	08004565 	.word	0x08004565
 8004500:	08004565 	.word	0x08004565
 8004504:	08004565 	.word	0x08004565
 8004508:	0800453b 	.word	0x0800453b
 800450c:	08004565 	.word	0x08004565
 8004510:	08004565 	.word	0x08004565
 8004514:	08004565 	.word	0x08004565
 8004518:	08004549 	.word	0x08004549
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	08004565 	.word	0x08004565
 8004528:	08004557 	.word	0x08004557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f8ca 	bl	80046cc <TIM_OC1_SetConfig>
      break;
 8004538:	e017      	b.n	800456a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f929 	bl	8004798 <TIM_OC2_SetConfig>
      break;
 8004546:	e010      	b.n	800456a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f98e 	bl	8004870 <TIM_OC3_SetConfig>
      break;
 8004554:	e009      	b.n	800456a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f9f1 	bl	8004944 <TIM_OC4_SetConfig>
      break;
 8004562:	e002      	b.n	800456a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
      break;
 8004568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004572:	7dfb      	ldrb	r3, [r7, #23]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00f      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00b      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a31      	ldr	r2, [pc, #196]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d017      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a20      	ldr	r2, [pc, #128]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <TIM_Base_SetConfig+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <TIM_Base_SetConfig+0xf8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <TIM_Base_SetConfig+0xfc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 0302 	bic.w	r3, r3, #2
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <TIM_OC1_SetConfig+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10c      	bne.n	8004742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0308 	bic.w	r3, r3, #8
 800472e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <TIM_OC1_SetConfig+0xc8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d111      	bne.n	800476e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40010000 	.word	0x40010000

08004798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0210 	bic.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0320 	bic.w	r3, r3, #32
 80047e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <TIM_OC2_SetConfig+0xd4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10d      	bne.n	8004814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a15      	ldr	r2, [pc, #84]	; (800486c <TIM_OC2_SetConfig+0xd4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d113      	bne.n	8004844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000

08004870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <TIM_OC3_SetConfig+0xd0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10d      	bne.n	80048ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <TIM_OC3_SetConfig+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d113      	bne.n	800491a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40010000 	.word	0x40010000

08004944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800498e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <TIM_OC4_SetConfig+0x9c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d109      	bne.n	80049b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000

080049e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2201      	movs	r2, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e050      	b.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d013      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10c      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000

08004b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03f      	b.n	8004bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fd8e 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f829 	bl	8004bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b0c0      	sub	sp, #256	; 0x100
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	68d9      	ldr	r1, [r3, #12]
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	ea40 0301 	orr.w	r3, r0, r1
 8004bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c28:	f021 010c 	bic.w	r1, r1, #12
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c36:	430b      	orrs	r3, r1
 8004c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	6999      	ldr	r1, [r3, #24]
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	ea40 0301 	orr.w	r3, r0, r1
 8004c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <UART_SetConfig+0x2cc>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d005      	beq.n	8004c70 <UART_SetConfig+0xa0>
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ea0 <UART_SetConfig+0x2d0>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d104      	bne.n	8004c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c70:	f7ff f91e 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8004c74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c78:	e003      	b.n	8004c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c7a:	f7ff f905 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8004c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8c:	f040 810c 	bne.w	8004ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	1891      	adds	r1, r2, r2
 8004ca8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004caa:	415b      	adcs	r3, r3
 8004cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	eb12 0801 	adds.w	r8, r2, r1
 8004cb8:	4629      	mov	r1, r5
 8004cba:	eb43 0901 	adc.w	r9, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb18 0303 	adds.w	r3, r8, r3
 8004cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	eb49 0303 	adc.w	r3, r9, r3
 8004ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cfe:	460b      	mov	r3, r1
 8004d00:	18db      	adds	r3, r3, r3
 8004d02:	653b      	str	r3, [r7, #80]	; 0x50
 8004d04:	4613      	mov	r3, r2
 8004d06:	eb42 0303 	adc.w	r3, r2, r3
 8004d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d14:	f7fb fa64 	bl	80001e0 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <UART_SetConfig+0x2d4>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011c      	lsls	r4, r3, #4
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d40:	415b      	adcs	r3, r3
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d48:	4641      	mov	r1, r8
 8004d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d4e:	4649      	mov	r1, r9
 8004d50:	eb43 0b01 	adc.w	fp, r3, r1
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d68:	4692      	mov	sl, r2
 8004d6a:	469b      	mov	fp, r3
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d76:	464b      	mov	r3, r9
 8004d78:	eb4b 0303 	adc.w	r3, fp, r3
 8004d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d94:	460b      	mov	r3, r1
 8004d96:	18db      	adds	r3, r3, r3
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	eb42 0303 	adc.w	r3, r2, r3
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
 8004da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004daa:	f7fb fa19 	bl	80001e0 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <UART_SetConfig+0x2d4>)
 8004db6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2264      	movs	r2, #100	; 0x64
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	1acb      	subs	r3, r1, r3
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <UART_SetConfig+0x2d4>)
 8004dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dd8:	441c      	add	r4, r3
 8004dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004de4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	1891      	adds	r1, r2, r2
 8004df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004df4:	415b      	adcs	r3, r3
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	1851      	adds	r1, r2, r1
 8004e00:	6339      	str	r1, [r7, #48]	; 0x30
 8004e02:	4649      	mov	r1, r9
 8004e04:	414b      	adcs	r3, r1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e14:	4659      	mov	r1, fp
 8004e16:	00cb      	lsls	r3, r1, #3
 8004e18:	4651      	mov	r1, sl
 8004e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1e:	4651      	mov	r1, sl
 8004e20:	00ca      	lsls	r2, r1, #3
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	4642      	mov	r2, r8
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e30:	464b      	mov	r3, r9
 8004e32:	460a      	mov	r2, r1
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e50:	460b      	mov	r3, r1
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e56:	4613      	mov	r3, r2
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e66:	f7fb f9bb 	bl	80001e0 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <UART_SetConfig+0x2d4>)
 8004e70:	fba3 1302 	umull	r1, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	2164      	movs	r1, #100	; 0x64
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	3332      	adds	r3, #50	; 0x32
 8004e82:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <UART_SetConfig+0x2d4>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4422      	add	r2, r4
 8004e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e98:	e105      	b.n	80050a6 <UART_SetConfig+0x4d6>
 8004e9a:	bf00      	nop
 8004e9c:	40011000 	.word	0x40011000
 8004ea0:	40011400 	.word	0x40011400
 8004ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eba:	4642      	mov	r2, r8
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	1891      	adds	r1, r2, r2
 8004ec0:	6239      	str	r1, [r7, #32]
 8004ec2:	415b      	adcs	r3, r3
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eca:	4641      	mov	r1, r8
 8004ecc:	1854      	adds	r4, r2, r1
 8004ece:	4649      	mov	r1, r9
 8004ed0:	eb43 0501 	adc.w	r5, r3, r1
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	eb45 0303 	adc.w	r3, r5, r3
 8004ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f16:	4629      	mov	r1, r5
 8004f18:	008b      	lsls	r3, r1, #2
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f20:	4621      	mov	r1, r4
 8004f22:	008a      	lsls	r2, r1, #2
 8004f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b60      	ldr	r3, [pc, #384]	; (80050b4 <UART_SetConfig+0x4e4>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011c      	lsls	r4, r3, #4
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	61b9      	str	r1, [r7, #24]
 8004f54:	415b      	adcs	r3, r3
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6139      	str	r1, [r7, #16]
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f90:	464b      	mov	r3, r9
 8004f92:	460a      	mov	r2, r1
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	008b      	lsls	r3, r1, #2
 8004fb8:	4641      	mov	r1, r8
 8004fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	008a      	lsls	r2, r1, #2
 8004fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fc6:	f7fb f90b 	bl	80001e0 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <UART_SetConfig+0x4e4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	; 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	; 0x32
 8004fe2:	4a34      	ldr	r2, [pc, #208]	; (80050b4 <UART_SetConfig+0x4e4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fee:	441c      	add	r4, r3
 8004ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8004ffa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ffe:	4642      	mov	r2, r8
 8005000:	464b      	mov	r3, r9
 8005002:	1891      	adds	r1, r2, r2
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	415b      	adcs	r3, r3
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800500e:	4641      	mov	r1, r8
 8005010:	1851      	adds	r1, r2, r1
 8005012:	6039      	str	r1, [r7, #0]
 8005014:	4649      	mov	r1, r9
 8005016:	414b      	adcs	r3, r1
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005026:	4659      	mov	r1, fp
 8005028:	00cb      	lsls	r3, r1, #3
 800502a:	4651      	mov	r1, sl
 800502c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005030:	4651      	mov	r1, sl
 8005032:	00ca      	lsls	r2, r1, #3
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	4603      	mov	r3, r0
 800503a:	4642      	mov	r2, r8
 800503c:	189b      	adds	r3, r3, r2
 800503e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	663b      	str	r3, [r7, #96]	; 0x60
 8005054:	667a      	str	r2, [r7, #100]	; 0x64
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005062:	4649      	mov	r1, r9
 8005064:	008b      	lsls	r3, r1, #2
 8005066:	4641      	mov	r1, r8
 8005068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506c:	4641      	mov	r1, r8
 800506e:	008a      	lsls	r2, r1, #2
 8005070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005074:	f7fb f8b4 	bl	80001e0 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <UART_SetConfig+0x4e4>)
 800507e:	fba3 1302 	umull	r1, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2164      	movs	r1, #100	; 0x64
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	3332      	adds	r3, #50	; 0x32
 8005090:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <UART_SetConfig+0x4e4>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 020f 	and.w	r2, r3, #15
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4422      	add	r2, r4
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050ac:	46bd      	mov	sp, r7
 80050ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b2:	bf00      	nop
 80050b4:	51eb851f 	.word	0x51eb851f

080050b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f103 0208 	add.w	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f103 0208 	add.w	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f103 0208 	add.w	r2, r3, #8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d103      	bne.n	800517a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e00c      	b.n	8005194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3308      	adds	r3, #8
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e002      	b.n	8005188 <vListInsert+0x2e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d2f6      	bcs.n	8005182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6892      	ldr	r2, [r2, #8]
 80051e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6852      	ldr	r2, [r2, #4]
 80051ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d103      	bne.n	8005200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	1e5a      	subs	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	; 0x38
 8005224:	af04      	add	r7, sp, #16
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xTaskCreateStatic+0x46>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61fb      	str	r3, [r7, #28]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005266:	2354      	movs	r3, #84	; 0x54
 8005268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b54      	cmp	r3, #84	; 0x54
 800526e:	d00a      	beq.n	8005286 <xTaskCreateStatic+0x66>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <xTaskCreateStatic+0xac>
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052a6:	2300      	movs	r3, #0
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f850 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c6:	f000 f8d5 	bl	8005474 <prvAddNewTaskToReadyList>
 80052ca:	e001      	b.n	80052d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d0:	697b      	ldr	r3, [r7, #20]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3728      	adds	r7, #40	; 0x28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b08c      	sub	sp, #48	; 0x30
 80052de:	af04      	add	r7, sp, #16
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ff5a 	bl	80061a8 <pvPortMalloc>
 80052f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052fc:	2054      	movs	r0, #84	; 0x54
 80052fe:	f000 ff53 	bl	80061a8 <pvPortMalloc>
 8005302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
 8005310:	e005      	b.n	800531e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f001 f814 	bl	8006340 <vPortFree>
 8005318:	e001      	b.n	800531e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	2300      	movs	r3, #0
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f80e 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005348:	69f8      	ldr	r0, [r7, #28]
 800534a:	f000 f893 	bl	8005474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800534e:	2301      	movs	r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e002      	b.n	800535a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800535a:	69bb      	ldr	r3, [r7, #24]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800537c:	3b01      	subs	r3, #1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	617b      	str	r3, [r7, #20]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01f      	beq.n	80053f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	e012      	b.n	80053de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	7819      	ldrb	r1, [r3, #0]
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	3334      	adds	r3, #52	; 0x34
 80053c8:	460a      	mov	r2, r1
 80053ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3301      	adds	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b0f      	cmp	r3, #15
 80053e2:	d9e9      	bls.n	80053b8 <prvInitialiseNewTask+0x54>
 80053e4:	e000      	b.n	80053e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80053e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f0:	e003      	b.n	80053fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d901      	bls.n	8005404 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005400:	2306      	movs	r3, #6
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fe6c 	bl	80050f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	3318      	adds	r3, #24
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fe67 	bl	80050f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f1c3 0207 	rsb	r2, r3, #7
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	2200      	movs	r2, #0
 8005444:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	69b8      	ldr	r0, [r7, #24]
 8005454:	f000 fc96 	bl	8005d84 <pxPortInitialiseStack>
 8005458:	4602      	mov	r2, r0
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546a:	bf00      	nop
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800547c:	f000 fdb2 	bl	8005fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005480:	4b2a      	ldr	r3, [pc, #168]	; (800552c <prvAddNewTaskToReadyList+0xb8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a29      	ldr	r2, [pc, #164]	; (800552c <prvAddNewTaskToReadyList+0xb8>)
 8005488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800548a:	4b29      	ldr	r3, [pc, #164]	; (8005530 <prvAddNewTaskToReadyList+0xbc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005492:	4a27      	ldr	r2, [pc, #156]	; (8005530 <prvAddNewTaskToReadyList+0xbc>)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005498:	4b24      	ldr	r3, [pc, #144]	; (800552c <prvAddNewTaskToReadyList+0xb8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d110      	bne.n	80054c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054a0:	f000 fb4c 	bl	8005b3c <prvInitialiseTaskLists>
 80054a4:	e00d      	b.n	80054c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <prvAddNewTaskToReadyList+0xc0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <prvAddNewTaskToReadyList+0xbc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d802      	bhi.n	80054c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <prvAddNewTaskToReadyList+0xbc>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054c2:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <prvAddNewTaskToReadyList+0xc4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <prvAddNewTaskToReadyList+0xc4>)
 80054ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	2201      	movs	r2, #1
 80054d2:	409a      	lsls	r2, r3
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <prvAddNewTaskToReadyList+0xc8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <prvAddNewTaskToReadyList+0xc8>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <prvAddNewTaskToReadyList+0xcc>)
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f7ff fe0c 	bl	8005112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054fa:	f000 fda3 	bl	8006044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <prvAddNewTaskToReadyList+0xc0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <prvAddNewTaskToReadyList+0xbc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	429a      	cmp	r2, r3
 8005512:	d207      	bcs.n	8005524 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvAddNewTaskToReadyList+0xd0>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	200012e0 	.word	0x200012e0
 8005530:	200011e0 	.word	0x200011e0
 8005534:	200012ec 	.word	0x200012ec
 8005538:	200012fc 	.word	0x200012fc
 800553c:	200012e8 	.word	0x200012e8
 8005540:	200011e4 	.word	0x200011e4
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005550:	f000 fd48 	bl	8005fe4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <vTaskDelete+0x18>
 800555a:	4b39      	ldr	r3, [pc, #228]	; (8005640 <vTaskDelete+0xf8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	e000      	b.n	8005562 <vTaskDelete+0x1a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fe2f 	bl	80051cc <uxListRemove>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d115      	bne.n	80055a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4932      	ldr	r1, [pc, #200]	; (8005644 <vTaskDelete+0xfc>)
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <vTaskDelete+0x58>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	2201      	movs	r2, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43da      	mvns	r2, r3
 8005596:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <vTaskDelete+0x100>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4013      	ands	r3, r2
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <vTaskDelete+0x100>)
 800559e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3318      	adds	r3, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fe0d 	bl	80051cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <vTaskDelete+0x104>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <vTaskDelete+0x104>)
 80055ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80055bc:	4b20      	ldr	r3, [pc, #128]	; (8005640 <vTaskDelete+0xf8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10b      	bne.n	80055de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4820      	ldr	r0, [pc, #128]	; (8005650 <vTaskDelete+0x108>)
 80055ce:	f7ff fda0 	bl	8005112 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <vTaskDelete+0x10c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <vTaskDelete+0x10c>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	e009      	b.n	80055f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <vTaskDelete+0x110>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <vTaskDelete+0x110>)
 80055e6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fb15 	bl	8005c18 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80055ee:	f000 fb43 	bl	8005c78 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80055f2:	f000 fd27 	bl	8006044 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80055f6:	4b19      	ldr	r3, [pc, #100]	; (800565c <vTaskDelete+0x114>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01b      	beq.n	8005636 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <vTaskDelete+0xf8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d116      	bne.n	8005636 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <vTaskDelete+0x118>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <vTaskDelete+0xde>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60bb      	str	r3, [r7, #8]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <vTaskDelete+0x11c>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200011e0 	.word	0x200011e0
 8005644:	200011e4 	.word	0x200011e4
 8005648:	200012e8 	.word	0x200012e8
 800564c:	200012fc 	.word	0x200012fc
 8005650:	200012b4 	.word	0x200012b4
 8005654:	200012c8 	.word	0x200012c8
 8005658:	200012e0 	.word	0x200012e0
 800565c:	200012ec 	.word	0x200012ec
 8005660:	20001308 	.word	0x20001308
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <vTaskDelay+0x60>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <vTaskDelay+0x30>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005698:	f000 f87a 	bl	8005790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800569c:	2100      	movs	r1, #0
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb0a 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056a4:	f000 f882 	bl	80057ac <xTaskResumeAll>
 80056a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d107      	bne.n	80056c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <vTaskDelay+0x64>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20001308 	.word	0x20001308
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056de:	463a      	mov	r2, r7
 80056e0:	1d39      	adds	r1, r7, #4
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fa fefc 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	9202      	str	r2, [sp, #8]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	460a      	mov	r2, r1
 80056fe:	491e      	ldr	r1, [pc, #120]	; (8005778 <vTaskStartScheduler+0xa8>)
 8005700:	481e      	ldr	r0, [pc, #120]	; (800577c <vTaskStartScheduler+0xac>)
 8005702:	f7ff fd8d 	bl	8005220 <xTaskCreateStatic>
 8005706:	4603      	mov	r3, r0
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <vTaskStartScheduler+0xb0>)
 800570a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800570c:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <vTaskStartScheduler+0xb0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e001      	b.n	800571e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d116      	bne.n	8005752 <vTaskStartScheduler+0x82>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	613b      	str	r3, [r7, #16]
}
 8005736:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <vTaskStartScheduler+0xb4>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <vTaskStartScheduler+0xb8>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <vTaskStartScheduler+0xbc>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800574c:	f000 fba8 	bl	8005ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005750:	e00e      	b.n	8005770 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d10a      	bne.n	8005770 <vTaskStartScheduler+0xa0>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60fb      	str	r3, [r7, #12]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vTaskStartScheduler+0x9e>
}
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	0800660c 	.word	0x0800660c
 800577c:	08005b0d 	.word	0x08005b0d
 8005780:	20001304 	.word	0x20001304
 8005784:	20001300 	.word	0x20001300
 8005788:	200012ec 	.word	0x200012ec
 800578c:	200012e4 	.word	0x200012e4

08005790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <vTaskSuspendAll+0x18>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	4a03      	ldr	r2, [pc, #12]	; (80057a8 <vTaskSuspendAll+0x18>)
 800579c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20001308 	.word	0x20001308

080057ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ba:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <xTaskResumeAll+0x114>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	603b      	str	r3, [r7, #0]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057d8:	f000 fc04 	bl	8005fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057dc:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <xTaskResumeAll+0x114>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4a37      	ldr	r2, [pc, #220]	; (80058c0 <xTaskResumeAll+0x114>)
 80057e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <xTaskResumeAll+0x114>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d161      	bne.n	80058b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ee:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <xTaskResumeAll+0x118>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d05d      	beq.n	80058b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f6:	e02e      	b.n	8005856 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b33      	ldr	r3, [pc, #204]	; (80058c8 <xTaskResumeAll+0x11c>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3318      	adds	r3, #24
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fce1 	bl	80051cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3304      	adds	r3, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fcdc 	bl	80051cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	4b2b      	ldr	r3, [pc, #172]	; (80058cc <xTaskResumeAll+0x120>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4313      	orrs	r3, r2
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <xTaskResumeAll+0x120>)
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <xTaskResumeAll+0x124>)
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7ff fc68 	bl	8005112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <xTaskResumeAll+0x128>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005850:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <xTaskResumeAll+0x12c>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005856:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <xTaskResumeAll+0x11c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1cc      	bne.n	80057f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005864:	f000 fa08 	bl	8005c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005868:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <xTaskResumeAll+0x130>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005874:	f000 f836 	bl	80058e4 <xTaskIncrementTick>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <xTaskResumeAll+0x12c>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3b01      	subs	r3, #1
 8005888:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f1      	bne.n	8005874 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <xTaskResumeAll+0x130>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <xTaskResumeAll+0x12c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800589e:	2301      	movs	r3, #1
 80058a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <xTaskResumeAll+0x134>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058b2:	f000 fbc7 	bl	8006044 <vPortExitCritical>

	return xAlreadyYielded;
 80058b6:	68bb      	ldr	r3, [r7, #8]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20001308 	.word	0x20001308
 80058c4:	200012e0 	.word	0x200012e0
 80058c8:	200012a0 	.word	0x200012a0
 80058cc:	200012e8 	.word	0x200012e8
 80058d0:	200011e4 	.word	0x200011e4
 80058d4:	200011e0 	.word	0x200011e0
 80058d8:	200012f4 	.word	0x200012f4
 80058dc:	200012f0 	.word	0x200012f0
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <xTaskIncrementTick+0x144>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 808e 	bne.w	8005a14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <xTaskIncrementTick+0x148>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005900:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <xTaskIncrementTick+0x148>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d120      	bne.n	800594e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800590c:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <xTaskIncrementTick+0x48>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xTaskIncrementTick+0x46>
 800592c:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <xTaskIncrementTick+0x150>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3e      	ldr	r2, [pc, #248]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4a3e      	ldr	r2, [pc, #248]	; (8005a34 <xTaskIncrementTick+0x150>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	f000 f995 	bl	8005c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d348      	bcc.n	80059ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005958:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005964:	f04f 32ff 	mov.w	r2, #4294967295
 8005968:	601a      	str	r2, [r3, #0]
					break;
 800596a:	e03e      	b.n	80059ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596c:	4b30      	ldr	r3, [pc, #192]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d203      	bcs.n	800598c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005984:	4a2d      	ldr	r2, [pc, #180]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800598a:	e02e      	b.n	80059ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff fc1b 	bl	80051cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fc12 	bl	80051cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	2201      	movs	r2, #1
 80059ae:	409a      	lsls	r2, r3
 80059b0:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059c8:	441a      	add	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7ff fb9e 	bl	8005112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3b9      	bcc.n	8005958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	e7b6      	b.n	8005958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4914      	ldr	r1, [pc, #80]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d901      	bls.n	8005a06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a06:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <xTaskIncrementTick+0x168>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e004      	b.n	8005a1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20001308 	.word	0x20001308
 8005a2c:	200012e4 	.word	0x200012e4
 8005a30:	20001298 	.word	0x20001298
 8005a34:	2000129c 	.word	0x2000129c
 8005a38:	200012f8 	.word	0x200012f8
 8005a3c:	20001300 	.word	0x20001300
 8005a40:	200012e8 	.word	0x200012e8
 8005a44:	200011e4 	.word	0x200011e4
 8005a48:	200011e0 	.word	0x200011e0
 8005a4c:	200012f4 	.word	0x200012f4
 8005a50:	200012f0 	.word	0x200012f0

08005a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5a:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <vTaskSwitchContext+0xa4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a68:	e03f      	b.n	8005aea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <vTaskSwitchContext+0xac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	f1c3 031f 	rsb	r3, r3, #31
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	491f      	ldr	r1, [pc, #124]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	607b      	str	r3, [r7, #4]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vTaskSwitchContext+0x5a>
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005abc:	4413      	add	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d104      	bne.n	8005ae0 <vTaskSwitchContext+0x8c>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <vTaskSwitchContext+0xb4>)
 8005ae8:	6013      	str	r3, [r2, #0]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20001308 	.word	0x20001308
 8005afc:	200012f4 	.word	0x200012f4
 8005b00:	200012e8 	.word	0x200012e8
 8005b04:	200011e4 	.word	0x200011e4
 8005b08:	200011e0 	.word	0x200011e0

08005b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b14:	f000 f852 	bl	8005bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <prvIdleTask+0x28>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d9f9      	bls.n	8005b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <prvIdleTask+0x2c>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b30:	e7f0      	b.n	8005b14 <prvIdleTask+0x8>
 8005b32:	bf00      	nop
 8005b34:	200011e4 	.word	0x200011e4
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e00c      	b.n	8005b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <prvInitialiseTaskLists+0x60>)
 8005b54:	4413      	add	r3, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff faae 	bl	80050b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d9ef      	bls.n	8005b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b68:	480d      	ldr	r0, [pc, #52]	; (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b6a:	f7ff faa5 	bl	80050b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b6e:	480d      	ldr	r0, [pc, #52]	; (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b70:	f7ff faa2 	bl	80050b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b74:	480c      	ldr	r0, [pc, #48]	; (8005ba8 <prvInitialiseTaskLists+0x6c>)
 8005b76:	f7ff fa9f 	bl	80050b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b7a:	480c      	ldr	r0, [pc, #48]	; (8005bac <prvInitialiseTaskLists+0x70>)
 8005b7c:	f7ff fa9c 	bl	80050b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b80:	480b      	ldr	r0, [pc, #44]	; (8005bb0 <prvInitialiseTaskLists+0x74>)
 8005b82:	f7ff fa99 	bl	80050b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <prvInitialiseTaskLists+0x78>)
 8005b88:	4a05      	ldr	r2, [pc, #20]	; (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <prvInitialiseTaskLists+0x7c>)
 8005b8e:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	200011e4 	.word	0x200011e4
 8005ba0:	20001270 	.word	0x20001270
 8005ba4:	20001284 	.word	0x20001284
 8005ba8:	200012a0 	.word	0x200012a0
 8005bac:	200012b4 	.word	0x200012b4
 8005bb0:	200012cc 	.word	0x200012cc
 8005bb4:	20001298 	.word	0x20001298
 8005bb8:	2000129c 	.word	0x2000129c

08005bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc2:	e019      	b.n	8005bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc4:	f000 fa0e 	bl	8005fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <prvCheckTasksWaitingTermination+0x50>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff faf9 	bl	80051cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a0b      	ldr	r2, [pc, #44]	; (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bee:	f000 fa29 	bl	8006044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f810 	bl	8005c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200012b4 	.word	0x200012b4
 8005c10:	200012e0 	.word	0x200012e0
 8005c14:	200012c8 	.word	0x200012c8

08005c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fb86 	bl	8006340 <vPortFree>
				vPortFree( pxTCB );
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fb83 	bl	8006340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c3a:	e018      	b.n	8005c6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d103      	bne.n	8005c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fb7a 	bl	8006340 <vPortFree>
	}
 8005c4c:	e00f      	b.n	8005c6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d00a      	beq.n	8005c6e <prvDeleteTCB+0x56>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	60fb      	str	r3, [r7, #12]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <prvDeleteTCB+0x54>
	}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c90:	e008      	b.n	8005ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20001298 	.word	0x20001298
 8005cb4:	20001300 	.word	0x20001300

08005cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fa7c 	bl	80051cc <uxListRemove>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43da      	mvns	r2, r3
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4013      	ands	r3, r2
 8005cee:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cf0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d10a      	bne.n	8005d10 <prvAddCurrentTaskToDelayedList+0x58>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	481a      	ldr	r0, [pc, #104]	; (8005d74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d0a:	f7ff fa02 	bl	8005112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d0e:	e026      	b.n	8005d5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d209      	bcs.n	8005d3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7ff fa10 	bl	800515a <vListInsert>
}
 8005d3a:	e010      	b.n	8005d5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7ff fa06 	bl	800515a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d202      	bcs.n	8005d5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6013      	str	r3, [r2, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200012e4 	.word	0x200012e4
 8005d6c:	200011e0 	.word	0x200011e0
 8005d70:	200012e8 	.word	0x200012e8
 8005d74:	200012cc 	.word	0x200012cc
 8005d78:	2000129c 	.word	0x2000129c
 8005d7c:	20001298 	.word	0x20001298
 8005d80:	20001300 	.word	0x20001300

08005d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3b04      	subs	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3b04      	subs	r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005db4:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <pxPortInitialiseStack+0x64>)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b14      	subs	r3, #20
 8005dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f06f 0202 	mvn.w	r2, #2
 8005dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b20      	subs	r3, #32
 8005dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	08005ded 	.word	0x08005ded

08005dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <prvTaskExitError+0x54>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d00a      	beq.n	8005e16 <prvTaskExitError+0x2a>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvTaskExitError+0x28>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60bb      	str	r3, [r7, #8]
}
 8005e28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e2a:	bf00      	nop
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0fc      	beq.n	8005e2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000020 	.word	0x20000020
	...

08005e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <pxCurrentTCBConst2>)
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	6808      	ldr	r0, [r1, #0]
 8005e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	f380 8809 	msr	PSP, r0
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f380 8811 	msr	BASEPRI, r0
 8005e6a:	4770      	bx	lr
 8005e6c:	f3af 8000 	nop.w

08005e70 <pxCurrentTCBConst2>:
 8005e70:	200011e0 	.word	0x200011e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop

08005e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e78:	4808      	ldr	r0, [pc, #32]	; (8005e9c <prvPortStartFirstTask+0x24>)
 8005e7a:	6800      	ldr	r0, [r0, #0]
 8005e7c:	6800      	ldr	r0, [r0, #0]
 8005e7e:	f380 8808 	msr	MSP, r0
 8005e82:	f04f 0000 	mov.w	r0, #0
 8005e86:	f380 8814 	msr	CONTROL, r0
 8005e8a:	b662      	cpsie	i
 8005e8c:	b661      	cpsie	f
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	df00      	svc	0
 8005e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e9a:	bf00      	nop
 8005e9c:	e000ed08 	.word	0xe000ed08

08005ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ea6:	4b46      	ldr	r3, [pc, #280]	; (8005fc0 <xPortStartScheduler+0x120>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <xPortStartScheduler+0x124>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10a      	bne.n	8005ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	613b      	str	r3, [r7, #16]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ec6:	4b3e      	ldr	r3, [pc, #248]	; (8005fc0 <xPortStartScheduler+0x120>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a3f      	ldr	r2, [pc, #252]	; (8005fc8 <xPortStartScheduler+0x128>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10a      	bne.n	8005ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ee6:	4b39      	ldr	r3, [pc, #228]	; (8005fcc <xPortStartScheduler+0x12c>)
 8005ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <xPortStartScheduler+0x130>)
 8005f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f0e:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f14:	e009      	b.n	8005f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4a2d      	ldr	r2, [pc, #180]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b80      	cmp	r3, #128	; 0x80
 8005f34:	d0ef      	beq.n	8005f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f36:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1c3 0307 	rsb	r3, r3, #7
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d00a      	beq.n	8005f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60bb      	str	r3, [r7, #8]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f62:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f6a:	4a1a      	ldr	r2, [pc, #104]	; (8005fd4 <xPortStartScheduler+0x134>)
 8005f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <xPortStartScheduler+0x138>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <xPortStartScheduler+0x138>)
 8005f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <xPortStartScheduler+0x138>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <xPortStartScheduler+0x138>)
 8005f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f8e:	f000 f8dd 	bl	800614c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <xPortStartScheduler+0x13c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f98:	f000 f8fc 	bl	8006194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <xPortStartScheduler+0x140>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0f      	ldr	r2, [pc, #60]	; (8005fe0 <xPortStartScheduler+0x140>)
 8005fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fa8:	f7ff ff66 	bl	8005e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fac:	f7ff fd52 	bl	8005a54 <vTaskSwitchContext>
	prvTaskExitError();
 8005fb0:	f7ff ff1c 	bl	8005dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed00 	.word	0xe000ed00
 8005fc4:	410fc271 	.word	0x410fc271
 8005fc8:	410fc270 	.word	0x410fc270
 8005fcc:	e000e400 	.word	0xe000e400
 8005fd0:	2000130c 	.word	0x2000130c
 8005fd4:	20001310 	.word	0x20001310
 8005fd8:	e000ed20 	.word	0xe000ed20
 8005fdc:	20000020 	.word	0x20000020
 8005fe0:	e000ef34 	.word	0xe000ef34

08005fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	607b      	str	r3, [r7, #4]
}
 8005ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <vPortEnterCritical+0x58>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a0d      	ldr	r2, [pc, #52]	; (800603c <vPortEnterCritical+0x58>)
 8006006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <vPortEnterCritical+0x58>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10f      	bne.n	8006030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <vPortEnterCritical+0x5c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <vPortEnterCritical+0x4c>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	603b      	str	r3, [r7, #0]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <vPortEnterCritical+0x4a>
	}
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20000020 	.word	0x20000020
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <vPortExitCritical+0x50>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <vPortExitCritical+0x24>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	607b      	str	r3, [r7, #4]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <vPortExitCritical+0x50>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3b01      	subs	r3, #1
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <vPortExitCritical+0x50>)
 8006070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <vPortExitCritical+0x50>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d105      	bne.n	8006086 <vPortExitCritical+0x42>
 800607a:	2300      	movs	r3, #0
 800607c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000020 	.word	0x20000020
	...

080060a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060a0:	f3ef 8009 	mrs	r0, PSP
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <pxCurrentTCBConst>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f01e 0f10 	tst.w	lr, #16
 80060b0:	bf08      	it	eq
 80060b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	6010      	str	r0, [r2, #0]
 80060bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060c4:	f380 8811 	msr	BASEPRI, r0
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f7ff fcc0 	bl	8005a54 <vTaskSwitchContext>
 80060d4:	f04f 0000 	mov.w	r0, #0
 80060d8:	f380 8811 	msr	BASEPRI, r0
 80060dc:	bc09      	pop	{r0, r3}
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	6808      	ldr	r0, [r1, #0]
 80060e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e6:	f01e 0f10 	tst.w	lr, #16
 80060ea:	bf08      	it	eq
 80060ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060f0:	f380 8809 	msr	PSP, r0
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst>:
 8006100:	200011e0 	.word	0x200011e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006122:	f7ff fbdf 	bl	80058e4 <xTaskIncrementTick>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <SysTick_Handler+0x40>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <vPortSetupTimerInterrupt+0x38>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <vPortSetupTimerInterrupt+0x3c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <vPortSetupTimerInterrupt+0x40>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <vPortSetupTimerInterrupt+0x44>)
 800616a:	3b01      	subs	r3, #1
 800616c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	e000e010 	.word	0xe000e010
 8006184:	e000e018 	.word	0xe000e018
 8006188:	20000014 	.word	0x20000014
 800618c:	10624dd3 	.word	0x10624dd3
 8006190:	e000e014 	.word	0xe000e014

08006194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061a4 <vPortEnableVFP+0x10>
 8006198:	6801      	ldr	r1, [r0, #0]
 800619a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800619e:	6001      	str	r1, [r0, #0]
 80061a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061a2:	bf00      	nop
 80061a4:	e000ed88 	.word	0xe000ed88

080061a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061b4:	f7ff faec 	bl	8005790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061b8:	4b5b      	ldr	r3, [pc, #364]	; (8006328 <pvPortMalloc+0x180>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061c0:	f000 f920 	bl	8006404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061c4:	4b59      	ldr	r3, [pc, #356]	; (800632c <pvPortMalloc+0x184>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f040 8093 	bne.w	80062f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01d      	beq.n	8006214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061d8:	2208      	movs	r2, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f023 0307 	bic.w	r3, r3, #7
 80061f0:	3308      	adds	r3, #8
 80061f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <pvPortMalloc+0x6c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	617b      	str	r3, [r7, #20]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d06e      	beq.n	80062f8 <pvPortMalloc+0x150>
 800621a:	4b45      	ldr	r3, [pc, #276]	; (8006330 <pvPortMalloc+0x188>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d869      	bhi.n	80062f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <pvPortMalloc+0x18c>)
 8006226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006228:	4b42      	ldr	r3, [pc, #264]	; (8006334 <pvPortMalloc+0x18c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800622e:	e004      	b.n	800623a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d903      	bls.n	800624c <pvPortMalloc+0xa4>
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f1      	bne.n	8006230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800624c:	4b36      	ldr	r3, [pc, #216]	; (8006328 <pvPortMalloc+0x180>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006252:	429a      	cmp	r2, r3
 8006254:	d050      	beq.n	80062f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2208      	movs	r2, #8
 800625c:	4413      	add	r3, r2
 800625e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	2308      	movs	r3, #8
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	429a      	cmp	r2, r3
 8006276:	d91f      	bls.n	80062b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <pvPortMalloc+0xf8>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	613b      	str	r3, [r7, #16]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062b2:	69b8      	ldr	r0, [r7, #24]
 80062b4:	f000 f908 	bl	80064c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062b8:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <pvPortMalloc+0x188>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <pvPortMalloc+0x188>)
 80062c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <pvPortMalloc+0x188>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <pvPortMalloc+0x190>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d203      	bcs.n	80062da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062d2:	4b17      	ldr	r3, [pc, #92]	; (8006330 <pvPortMalloc+0x188>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	; (8006338 <pvPortMalloc+0x190>)
 80062d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <pvPortMalloc+0x184>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <pvPortMalloc+0x194>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <pvPortMalloc+0x194>)
 80062f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062f8:	f7ff fa58 	bl	80057ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <pvPortMalloc+0x174>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <pvPortMalloc+0x172>
	return pvReturn;
 800631c:	69fb      	ldr	r3, [r7, #28]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20004f1c 	.word	0x20004f1c
 800632c:	20004f30 	.word	0x20004f30
 8006330:	20004f20 	.word	0x20004f20
 8006334:	20004f14 	.word	0x20004f14
 8006338:	20004f24 	.word	0x20004f24
 800633c:	20004f28 	.word	0x20004f28

08006340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d04d      	beq.n	80063ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006352:	2308      	movs	r3, #8
 8006354:	425b      	negs	r3, r3
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <vPortFree+0xb8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <vPortFree+0x44>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <vPortFree+0x62>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	60bb      	str	r3, [r7, #8]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <vPortFree+0xb8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01e      	beq.n	80063ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11a      	bne.n	80063ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <vPortFree+0xb8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063c8:	f7ff f9e2 	bl	8005790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <vPortFree+0xbc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4413      	add	r3, r2
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <vPortFree+0xbc>)
 80063d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063da:	6938      	ldr	r0, [r7, #16]
 80063dc:	f000 f874 	bl	80064c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <vPortFree+0xc0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a06      	ldr	r2, [pc, #24]	; (8006400 <vPortFree+0xc0>)
 80063e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ea:	f7ff f9df 	bl	80057ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20004f30 	.word	0x20004f30
 80063fc:	20004f20 	.word	0x20004f20
 8006400:	20004f2c 	.word	0x20004f2c

08006404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800640a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800640e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <prvHeapInit+0xac>)
 8006412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3307      	adds	r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <prvHeapInit+0xac>)
 8006434:	4413      	add	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <prvHeapInit+0xb0>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <prvHeapInit+0xb0>)
 8006444:	2200      	movs	r2, #0
 8006446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4413      	add	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006450:	2208      	movs	r2, #8
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0307 	bic.w	r3, r3, #7
 800645e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <prvHeapInit+0xb4>)
 8006464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <prvHeapInit+0xb4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <prvHeapInit+0xb4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <prvHeapInit+0xb4>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <prvHeapInit+0xb8>)
 8006492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <prvHeapInit+0xbc>)
 800649a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <prvHeapInit+0xc0>)
 800649e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20001314 	.word	0x20001314
 80064b4:	20004f14 	.word	0x20004f14
 80064b8:	20004f1c 	.word	0x20004f1c
 80064bc:	20004f24 	.word	0x20004f24
 80064c0:	20004f20 	.word	0x20004f20
 80064c4:	20004f30 	.word	0x20004f30

080064c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <prvInsertBlockIntoFreeList+0xac>)
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e002      	b.n	80064dc <prvInsertBlockIntoFreeList+0x14>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d8f7      	bhi.n	80064d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d108      	bne.n	800650a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d118      	bne.n	8006550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <prvInsertBlockIntoFreeList+0xb0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d00d      	beq.n	8006546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	441a      	add	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e008      	b.n	8006558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006546:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <prvInsertBlockIntoFreeList+0xb0>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e003      	b.n	8006558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	429a      	cmp	r2, r3
 800655e:	d002      	beq.n	8006566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20004f14 	.word	0x20004f14
 8006578:	20004f1c 	.word	0x20004f1c

0800657c <__libc_init_array>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4d0d      	ldr	r5, [pc, #52]	; (80065b4 <__libc_init_array+0x38>)
 8006580:	4c0d      	ldr	r4, [pc, #52]	; (80065b8 <__libc_init_array+0x3c>)
 8006582:	1b64      	subs	r4, r4, r5
 8006584:	10a4      	asrs	r4, r4, #2
 8006586:	2600      	movs	r6, #0
 8006588:	42a6      	cmp	r6, r4
 800658a:	d109      	bne.n	80065a0 <__libc_init_array+0x24>
 800658c:	4d0b      	ldr	r5, [pc, #44]	; (80065bc <__libc_init_array+0x40>)
 800658e:	4c0c      	ldr	r4, [pc, #48]	; (80065c0 <__libc_init_array+0x44>)
 8006590:	f000 f820 	bl	80065d4 <_init>
 8006594:	1b64      	subs	r4, r4, r5
 8006596:	10a4      	asrs	r4, r4, #2
 8006598:	2600      	movs	r6, #0
 800659a:	42a6      	cmp	r6, r4
 800659c:	d105      	bne.n	80065aa <__libc_init_array+0x2e>
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a4:	4798      	blx	r3
 80065a6:	3601      	adds	r6, #1
 80065a8:	e7ee      	b.n	8006588 <__libc_init_array+0xc>
 80065aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ae:	4798      	blx	r3
 80065b0:	3601      	adds	r6, #1
 80065b2:	e7f2      	b.n	800659a <__libc_init_array+0x1e>
 80065b4:	08006c2c 	.word	0x08006c2c
 80065b8:	08006c2c 	.word	0x08006c2c
 80065bc:	08006c2c 	.word	0x08006c2c
 80065c0:	08006c30 	.word	0x08006c30

080065c4 <memset>:
 80065c4:	4402      	add	r2, r0
 80065c6:	4603      	mov	r3, r0
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d100      	bne.n	80065ce <memset+0xa>
 80065cc:	4770      	bx	lr
 80065ce:	f803 1b01 	strb.w	r1, [r3], #1
 80065d2:	e7f9      	b.n	80065c8 <memset+0x4>

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
