
OLED_I2C_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000687c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080070f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051fc  20000020  08007110  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000521c  08007110  0002521c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013194  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  000331e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00035fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00037208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019441  00000000  00000000  00038300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015402  00000000  00000000  00051741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a145f  00000000  00000000  00066b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107fa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  00107ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a04 	.word	0x08006a04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	08006a04 	.word	0x08006a04

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000090 	.word	0x20000090

08000518 <map>:
		texto[pos] = digito + '0';
		pos--;
	}
}

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000522:	edc7 0a04 	vstr	s1, [r7, #16]
 8000526:	ed87 1a03 	vstr	s2, [r7, #12]
 800052a:	edc7 1a02 	vstr	s3, [r7, #8]
 800052e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	edd7 7a04 	vldr	s15, [r7, #16]
 800053a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800053e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000542:	edd7 7a02 	vldr	s15, [r7, #8]
 8000546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800054a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800054e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000552:	edd7 7a04 	vldr	s15, [r7, #16]
 8000556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800055e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000562:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000566:	eeb0 0a67 	vmov.f32	s0, s15
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <actualizar_escala>:
void actualizar_escala()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
switch(contador)
 8000578:	4baf      	ldr	r3, [pc, #700]	; (8000838 <actualizar_escala+0x2c4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	f200 8191 	bhi.w	80008a4 <actualizar_escala+0x330>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <actualizar_escala+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	080005a9 	.word	0x080005a9
 800058c:	080005fb 	.word	0x080005fb
 8000590:	0800064d 	.word	0x0800064d
 8000594:	0800069f 	.word	0x0800069f
 8000598:	080006f1 	.word	0x080006f1
 800059c:	08000743 	.word	0x08000743
 80005a0:	08000795 	.word	0x08000795
 80005a4:	080007e7 	.word	0x080007e7
	{
		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 80005a8:	2137      	movs	r1, #55	; 0x37
 80005aa:	2073      	movs	r0, #115	; 0x73
 80005ac:	f001 f954 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80005b0:	4aa2      	ldr	r2, [pc, #648]	; (800083c <actualizar_escala+0x2c8>)
 80005b2:	2301      	movs	r3, #1
 80005b4:	ca06      	ldmia	r2, {r1, r2}
 80005b6:	48a2      	ldr	r0, [pc, #648]	; (8000840 <actualizar_escala+0x2cc>)
 80005b8:	f001 f928 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80005bc:	2109      	movs	r1, #9
 80005be:	2006      	movs	r0, #6
 80005c0:	f001 f94a 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80005c4:	4a9d      	ldr	r2, [pc, #628]	; (800083c <actualizar_escala+0x2c8>)
 80005c6:	2301      	movs	r3, #1
 80005c8:	ca06      	ldmia	r2, {r1, r2}
 80005ca:	489e      	ldr	r0, [pc, #632]	; (8000844 <actualizar_escala+0x2d0>)
 80005cc:	f001 f91e 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80005d0:	2121      	movs	r1, #33	; 0x21
 80005d2:	2011      	movs	r0, #17
 80005d4:	f001 f940 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80005d8:	4a98      	ldr	r2, [pc, #608]	; (800083c <actualizar_escala+0x2c8>)
 80005da:	2301      	movs	r3, #1
 80005dc:	ca06      	ldmia	r2, {r1, r2}
 80005de:	489a      	ldr	r0, [pc, #616]	; (8000848 <actualizar_escala+0x2d4>)
 80005e0:	f001 f914 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80005e4:	2138      	movs	r1, #56	; 0x38
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f936 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80005ec:	4a93      	ldr	r2, [pc, #588]	; (800083c <actualizar_escala+0x2c8>)
 80005ee:	2301      	movs	r3, #1
 80005f0:	ca06      	ldmia	r2, {r1, r2}
 80005f2:	4896      	ldr	r0, [pc, #600]	; (800084c <actualizar_escala+0x2d8>)
 80005f4:	f001 f90a 	bl	800180c <ssd1306_WriteString>
		break;
 80005f8:	e17d      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 80005fa:	2137      	movs	r1, #55	; 0x37
 80005fc:	2073      	movs	r0, #115	; 0x73
 80005fe:	f001 f92b 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 8000602:	4a8e      	ldr	r2, [pc, #568]	; (800083c <actualizar_escala+0x2c8>)
 8000604:	2301      	movs	r3, #1
 8000606:	ca06      	ldmia	r2, {r1, r2}
 8000608:	4891      	ldr	r0, [pc, #580]	; (8000850 <actualizar_escala+0x2dc>)
 800060a:	f001 f8ff 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800060e:	2109      	movs	r1, #9
 8000610:	2006      	movs	r0, #6
 8000612:	f001 f921 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8000616:	4a89      	ldr	r2, [pc, #548]	; (800083c <actualizar_escala+0x2c8>)
 8000618:	2301      	movs	r3, #1
 800061a:	ca06      	ldmia	r2, {r1, r2}
 800061c:	488d      	ldr	r0, [pc, #564]	; (8000854 <actualizar_escala+0x2e0>)
 800061e:	f001 f8f5 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000622:	2121      	movs	r1, #33	; 0x21
 8000624:	2011      	movs	r0, #17
 8000626:	f001 f917 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800062a:	4a84      	ldr	r2, [pc, #528]	; (800083c <actualizar_escala+0x2c8>)
 800062c:	2301      	movs	r3, #1
 800062e:	ca06      	ldmia	r2, {r1, r2}
 8000630:	4885      	ldr	r0, [pc, #532]	; (8000848 <actualizar_escala+0x2d4>)
 8000632:	f001 f8eb 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000636:	2138      	movs	r1, #56	; 0x38
 8000638:	2000      	movs	r0, #0
 800063a:	f001 f90d 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800063e:	4a7f      	ldr	r2, [pc, #508]	; (800083c <actualizar_escala+0x2c8>)
 8000640:	2301      	movs	r3, #1
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <actualizar_escala+0x2e4>)
 8000646:	f001 f8e1 	bl	800180c <ssd1306_WriteString>
		break;
 800064a:	e154      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 800064c:	2137      	movs	r1, #55	; 0x37
 800064e:	2073      	movs	r0, #115	; 0x73
 8000650:	f001 f902 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 8000654:	4a79      	ldr	r2, [pc, #484]	; (800083c <actualizar_escala+0x2c8>)
 8000656:	2301      	movs	r3, #1
 8000658:	ca06      	ldmia	r2, {r1, r2}
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <actualizar_escala+0x2e8>)
 800065c:	f001 f8d6 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000660:	2109      	movs	r1, #9
 8000662:	2006      	movs	r0, #6
 8000664:	f001 f8f8 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 8000668:	4a74      	ldr	r2, [pc, #464]	; (800083c <actualizar_escala+0x2c8>)
 800066a:	2301      	movs	r3, #1
 800066c:	ca06      	ldmia	r2, {r1, r2}
 800066e:	487c      	ldr	r0, [pc, #496]	; (8000860 <actualizar_escala+0x2ec>)
 8000670:	f001 f8cc 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000674:	2121      	movs	r1, #33	; 0x21
 8000676:	2011      	movs	r0, #17
 8000678:	f001 f8ee 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800067c:	4a6f      	ldr	r2, [pc, #444]	; (800083c <actualizar_escala+0x2c8>)
 800067e:	2301      	movs	r3, #1
 8000680:	ca06      	ldmia	r2, {r1, r2}
 8000682:	4871      	ldr	r0, [pc, #452]	; (8000848 <actualizar_escala+0x2d4>)
 8000684:	f001 f8c2 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000688:	2138      	movs	r1, #56	; 0x38
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f8e4 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 8000690:	4a6a      	ldr	r2, [pc, #424]	; (800083c <actualizar_escala+0x2c8>)
 8000692:	2301      	movs	r3, #1
 8000694:	ca06      	ldmia	r2, {r1, r2}
 8000696:	4873      	ldr	r0, [pc, #460]	; (8000864 <actualizar_escala+0x2f0>)
 8000698:	f001 f8b8 	bl	800180c <ssd1306_WriteString>
		break;
 800069c:	e12b      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 800069e:	2137      	movs	r1, #55	; 0x37
 80006a0:	206d      	movs	r0, #109	; 0x6d
 80006a2:	f001 f8d9 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 80006a6:	4a65      	ldr	r2, [pc, #404]	; (800083c <actualizar_escala+0x2c8>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	486e      	ldr	r0, [pc, #440]	; (8000868 <actualizar_escala+0x2f4>)
 80006ae:	f001 f8ad 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80006b2:	2109      	movs	r1, #9
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 f8cf 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 80006ba:	4a60      	ldr	r2, [pc, #384]	; (800083c <actualizar_escala+0x2c8>)
 80006bc:	2301      	movs	r3, #1
 80006be:	ca06      	ldmia	r2, {r1, r2}
 80006c0:	486a      	ldr	r0, [pc, #424]	; (800086c <actualizar_escala+0x2f8>)
 80006c2:	f001 f8a3 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	2011      	movs	r0, #17
 80006ca:	f001 f8c5 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80006ce:	4a5b      	ldr	r2, [pc, #364]	; (800083c <actualizar_escala+0x2c8>)
 80006d0:	2301      	movs	r3, #1
 80006d2:	ca06      	ldmia	r2, {r1, r2}
 80006d4:	485c      	ldr	r0, [pc, #368]	; (8000848 <actualizar_escala+0x2d4>)
 80006d6:	f001 f899 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f8bb 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 80006e2:	4a56      	ldr	r2, [pc, #344]	; (800083c <actualizar_escala+0x2c8>)
 80006e4:	2301      	movs	r3, #1
 80006e6:	ca06      	ldmia	r2, {r1, r2}
 80006e8:	4861      	ldr	r0, [pc, #388]	; (8000870 <actualizar_escala+0x2fc>)
 80006ea:	f001 f88f 	bl	800180c <ssd1306_WriteString>
		break;
 80006ee:	e102      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 80006f0:	2137      	movs	r1, #55	; 0x37
 80006f2:	206d      	movs	r0, #109	; 0x6d
 80006f4:	f001 f8b0 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <actualizar_escala+0x2c8>)
 80006fa:	2301      	movs	r3, #1
 80006fc:	ca06      	ldmia	r2, {r1, r2}
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <actualizar_escala+0x300>)
 8000700:	f001 f884 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000704:	2109      	movs	r1, #9
 8000706:	2006      	movs	r0, #6
 8000708:	f001 f8a6 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <actualizar_escala+0x2c8>)
 800070e:	2301      	movs	r3, #1
 8000710:	ca06      	ldmia	r2, {r1, r2}
 8000712:	4859      	ldr	r0, [pc, #356]	; (8000878 <actualizar_escala+0x304>)
 8000714:	f001 f87a 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8000718:	2121      	movs	r1, #33	; 0x21
 800071a:	2011      	movs	r0, #17
 800071c:	f001 f89c 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000720:	4a46      	ldr	r2, [pc, #280]	; (800083c <actualizar_escala+0x2c8>)
 8000722:	2301      	movs	r3, #1
 8000724:	ca06      	ldmia	r2, {r1, r2}
 8000726:	4848      	ldr	r0, [pc, #288]	; (8000848 <actualizar_escala+0x2d4>)
 8000728:	f001 f870 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800072c:	2138      	movs	r1, #56	; 0x38
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f892 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <actualizar_escala+0x2c8>)
 8000736:	2301      	movs	r3, #1
 8000738:	ca06      	ldmia	r2, {r1, r2}
 800073a:	4850      	ldr	r0, [pc, #320]	; (800087c <actualizar_escala+0x308>)
 800073c:	f001 f866 	bl	800180c <ssd1306_WriteString>
		break;
 8000740:	e0d9      	b.n	80008f6 <actualizar_escala+0x382>
		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 8000742:	2137      	movs	r1, #55	; 0x37
 8000744:	206d      	movs	r0, #109	; 0x6d
 8000746:	f001 f887 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <actualizar_escala+0x2c8>)
 800074c:	2301      	movs	r3, #1
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <actualizar_escala+0x30c>)
 8000752:	f001 f85b 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8000756:	2109      	movs	r1, #9
 8000758:	2006      	movs	r0, #6
 800075a:	f001 f87d 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <actualizar_escala+0x2c8>)
 8000760:	2301      	movs	r3, #1
 8000762:	ca06      	ldmia	r2, {r1, r2}
 8000764:	4847      	ldr	r0, [pc, #284]	; (8000884 <actualizar_escala+0x310>)
 8000766:	f001 f851 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800076a:	2121      	movs	r1, #33	; 0x21
 800076c:	2011      	movs	r0, #17
 800076e:	f001 f873 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <actualizar_escala+0x2c8>)
 8000774:	2301      	movs	r3, #1
 8000776:	ca06      	ldmia	r2, {r1, r2}
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <actualizar_escala+0x2d4>)
 800077a:	f001 f847 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800077e:	2138      	movs	r1, #56	; 0x38
 8000780:	2000      	movs	r0, #0
 8000782:	f001 f869 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <actualizar_escala+0x2c8>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	483e      	ldr	r0, [pc, #248]	; (8000888 <actualizar_escala+0x314>)
 800078e:	f001 f83d 	bl	800180c <ssd1306_WriteString>
		break;
 8000792:	e0b0      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 8000794:	2137      	movs	r1, #55	; 0x37
 8000796:	206d      	movs	r0, #109	; 0x6d
 8000798:	f001 f85e 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <actualizar_escala+0x2c8>)
 800079e:	2301      	movs	r3, #1
 80007a0:	ca06      	ldmia	r2, {r1, r2}
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <actualizar_escala+0x318>)
 80007a4:	f001 f832 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 80007a8:	2109      	movs	r1, #9
 80007aa:	2011      	movs	r0, #17
 80007ac:	f001 f854 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <actualizar_escala+0x2c8>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	4836      	ldr	r0, [pc, #216]	; (8000890 <actualizar_escala+0x31c>)
 80007b8:	f001 f828 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80007bc:	2121      	movs	r1, #33	; 0x21
 80007be:	2011      	movs	r0, #17
 80007c0:	f001 f84a 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <actualizar_escala+0x2c8>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <actualizar_escala+0x2d4>)
 80007cc:	f001 f81e 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 80007d0:	2138      	movs	r1, #56	; 0x38
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 f840 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <actualizar_escala+0x2c8>)
 80007da:	2301      	movs	r3, #1
 80007dc:	ca06      	ldmia	r2, {r1, r2}
 80007de:	482d      	ldr	r0, [pc, #180]	; (8000894 <actualizar_escala+0x320>)
 80007e0:	f001 f814 	bl	800180c <ssd1306_WriteString>
		break;
 80007e4:	e087      	b.n	80008f6 <actualizar_escala+0x382>
		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 80007e6:	2137      	movs	r1, #55	; 0x37
 80007e8:	206d      	movs	r0, #109	; 0x6d
 80007ea:	f001 f835 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <actualizar_escala+0x2c8>)
 80007f0:	2301      	movs	r3, #1
 80007f2:	ca06      	ldmia	r2, {r1, r2}
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <actualizar_escala+0x324>)
 80007f6:	f001 f809 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80007fa:	2109      	movs	r1, #9
 80007fc:	2006      	movs	r0, #6
 80007fe:	f001 f82b 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <actualizar_escala+0x2c8>)
 8000804:	2301      	movs	r3, #1
 8000806:	ca06      	ldmia	r2, {r1, r2}
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <actualizar_escala+0x328>)
 800080a:	f000 ffff 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	2011      	movs	r0, #17
 8000812:	f001 f821 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <actualizar_escala+0x2c8>)
 8000818:	2301      	movs	r3, #1
 800081a:	ca06      	ldmia	r2, {r1, r2}
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <actualizar_escala+0x2d4>)
 800081e:	f000 fff5 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8000822:	2138      	movs	r1, #56	; 0x38
 8000824:	2000      	movs	r0, #0
 8000826:	f001 f817 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <actualizar_escala+0x2c8>)
 800082c:	2301      	movs	r3, #1
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <actualizar_escala+0x32c>)
 8000832:	f000 ffeb 	bl	800180c <ssd1306_WriteString>
		break;
 8000836:	e05e      	b.n	80008f6 <actualizar_escala+0x382>
 8000838:	20000468 	.word	0x20000468
 800083c:	20000008 	.word	0x20000008
 8000840:	08006a1c 	.word	0x08006a1c
 8000844:	08006a20 	.word	0x08006a20
 8000848:	08006a24 	.word	0x08006a24
 800084c:	08006a28 	.word	0x08006a28
 8000850:	08006a30 	.word	0x08006a30
 8000854:	08006a34 	.word	0x08006a34
 8000858:	08006a38 	.word	0x08006a38
 800085c:	08006a40 	.word	0x08006a40
 8000860:	08006a44 	.word	0x08006a44
 8000864:	08006a48 	.word	0x08006a48
 8000868:	08006a50 	.word	0x08006a50
 800086c:	08006a54 	.word	0x08006a54
 8000870:	08006a58 	.word	0x08006a58
 8000874:	08006a60 	.word	0x08006a60
 8000878:	08006a64 	.word	0x08006a64
 800087c:	08006a68 	.word	0x08006a68
 8000880:	08006a70 	.word	0x08006a70
 8000884:	08006a74 	.word	0x08006a74
 8000888:	08006a78 	.word	0x08006a78
 800088c:	08006a80 	.word	0x08006a80
 8000890:	08006a84 	.word	0x08006a84
 8000894:	08006a88 	.word	0x08006a88
 8000898:	08006a8c 	.word	0x08006a8c
 800089c:	08006a90 	.word	0x08006a90
 80008a0:	08006a94 	.word	0x08006a94
		default://A2
			ssd1306_SetCursor(115, 55);
 80008a4:	2137      	movs	r1, #55	; 0x37
 80008a6:	2073      	movs	r0, #115	; 0x73
 80008a8:	f000 ffd6 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <actualizar_escala+0x388>)
 80008ae:	2301      	movs	r3, #1
 80008b0:	ca06      	ldmia	r2, {r1, r2}
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <actualizar_escala+0x38c>)
 80008b4:	f000 ffaa 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80008b8:	2109      	movs	r1, #9
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 ffcc 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <actualizar_escala+0x388>)
 80008c2:	2301      	movs	r3, #1
 80008c4:	ca06      	ldmia	r2, {r1, r2}
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <actualizar_escala+0x390>)
 80008c8:	f000 ffa0 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80008cc:	2121      	movs	r1, #33	; 0x21
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 ffc2 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <actualizar_escala+0x388>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	ca06      	ldmia	r2, {r1, r2}
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <actualizar_escala+0x394>)
 80008dc:	f000 ff96 	bl	800180c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80008e0:	2138      	movs	r1, #56	; 0x38
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 ffb8 	bl	8001858 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <actualizar_escala+0x388>)
 80008ea:	2301      	movs	r3, #1
 80008ec:	ca06      	ldmia	r2, {r1, r2}
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <actualizar_escala+0x398>)
 80008f0:	f000 ff8c 	bl	800180c <ssd1306_WriteString>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	08006a1c 	.word	0x08006a1c
 8000904:	08006a20 	.word	0x08006a20
 8000908:	08006a24 	.word	0x08006a24
 800090c:	08006a28 	.word	0x08006a28

08000910 <display_plot_grilla>:

void display_plot_grilla(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

	//ssd1306_Fill(Black);
	ssd1306_SetCursor(0, 0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f000 ff9d 	bl	8001858 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vartical line
 800091e:	2301      	movs	r3, #1
 8000920:	2237      	movs	r2, #55	; 0x37
 8000922:	2109      	movs	r1, #9
 8000924:	201a      	movs	r0, #26
 8000926:	f001 f81b 	bl	8001960 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vrtical line up
 800092a:	2301      	movs	r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	2109      	movs	r1, #9
 8000930:	207f      	movs	r0, #127	; 0x7f
 8000932:	f001 f815 	bl	8001960 <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vrtical line bottom
 8000936:	2301      	movs	r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	213c      	movs	r1, #60	; 0x3c
 800093c:	207f      	movs	r0, #127	; 0x7f
 800093e:	f001 f80f 	bl	8001960 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8000942:	2301      	movs	r3, #1
 8000944:	2207      	movs	r2, #7
 8000946:	2109      	movs	r1, #9
 8000948:	2018      	movs	r0, #24
 800094a:	f001 f828 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 800094e:	2301      	movs	r3, #1
 8000950:	2202      	movs	r2, #2
 8000952:	2124      	movs	r1, #36	; 0x24
 8000954:	2018      	movs	r0, #24
 8000956:	f001 f822 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 800095a:	2301      	movs	r3, #1
 800095c:	2207      	movs	r2, #7
 800095e:	213f      	movs	r1, #63	; 0x3f
 8000960:	2018      	movs	r0, #24
 8000962:	f001 f81c 	bl	800199e <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 8000966:	2301      	movs	r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	2109      	movs	r1, #9
 800096c:	2033      	movs	r0, #51	; 0x33
 800096e:	f001 f816 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 8000972:	2301      	movs	r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	213f      	movs	r1, #63	; 0x3f
 8000978:	2033      	movs	r0, #51	; 0x33
 800097a:	f001 f810 	bl	800199e <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 800097e:	2301      	movs	r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	2109      	movs	r1, #9
 8000984:	204c      	movs	r0, #76	; 0x4c
 8000986:	f001 f80a 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 800098a:	2301      	movs	r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	213f      	movs	r1, #63	; 0x3f
 8000990:	204c      	movs	r0, #76	; 0x4c
 8000992:	f001 f804 	bl	800199e <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 8000996:	2301      	movs	r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	2109      	movs	r1, #9
 800099c:	2065      	movs	r0, #101	; 0x65
 800099e:	f000 fffe 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80009a2:	2301      	movs	r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	213f      	movs	r1, #63	; 0x3f
 80009a8:	2065      	movs	r0, #101	; 0x65
 80009aa:	f000 fff8 	bl	800199e <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80009ae:	2301      	movs	r3, #1
 80009b0:	2205      	movs	r2, #5
 80009b2:	2109      	movs	r1, #9
 80009b4:	207b      	movs	r0, #123	; 0x7b
 80009b6:	f000 fff2 	bl	800199e <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80009ba:	2301      	movs	r3, #1
 80009bc:	2205      	movs	r2, #5
 80009be:	213f      	movs	r1, #63	; 0x3f
 80009c0:	207b      	movs	r0, #123	; 0x7b
 80009c2:	f000 ffec 	bl	800199e <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 80009c6:	231a      	movs	r3, #26
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e009      	b.n	80009e0 <display_plot_grilla+0xd0>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	2301      	movs	r3, #1
 80009d2:	2202      	movs	r2, #2
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	f000 ffe2 	bl	800199e <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3305      	adds	r3, #5
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	ddf2      	ble.n	80009cc <display_plot_grilla+0xbc>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 80009e6:	2366      	movs	r3, #102	; 0x66
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e013      	b.n	8000a14 <display_plot_grilla+0x104>
		for (int y = 10; y < 63; y += 5){
 80009ec:	230a      	movs	r3, #10
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e00a      	b.n	8000a08 <display_plot_grilla+0xf8>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	2301      	movs	r3, #1
 80009fc:	2202      	movs	r2, #2
 80009fe:	f000 ffaf 	bl	8001960 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3305      	adds	r3, #5
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8000a0c:	ddf1      	ble.n	80009f2 <display_plot_grilla+0xe2>
	for (int x = (127 - 25); x > 30; x -= 25){
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3b19      	subs	r3, #25
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2b1e      	cmp	r3, #30
 8000a18:	dce8      	bgt.n	80009ec <display_plot_grilla+0xdc>
		}
	}
	ssd1306_SetCursor(14, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f000 ff1b 	bl	8001858 <ssd1306_SetCursor>
	ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <display_plot_grilla+0x128>)
 8000a24:	2301      	movs	r3, #1
 8000a26:	ca06      	ldmia	r2, {r1, r2}
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <display_plot_grilla+0x12c>)
 8000a2a:	f000 feef 	bl	800180c <ssd1306_WriteString>
	//
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	08006a9c 	.word	0x08006a9c

08000a40 <display_plot_signal>:
	else if(Valor_max>2699)
		Cambiar_MUX(AMP_1);
}
*/

void display_plot_signal(void){
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]

	if(flag)
 8000a56:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <display_plot_signal+0x154>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8096 	beq.w	8000b8c <display_plot_signal+0x14c>
	{
		//ssd1306_Fill(Black);
		trigger_point = 1;
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <display_plot_signal+0x158>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<MAX/2; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e00a      	b.n	8000a82 <display_plot_signal+0x42>
				buffer_display[i] = buffer_adc[i];
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <display_plot_signal+0x15c>)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a74:	494a      	ldr	r1, [pc, #296]	; (8000ba0 <display_plot_signal+0x160>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<MAX/2; i++)
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2bff      	cmp	r3, #255	; 0xff
 8000a86:	ddf1      	ble.n	8000a6c <display_plot_signal+0x2c>

		//Analizar_amplitud(buffer_display);
		for(int i = 0; i <= 98; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	e017      	b.n	8000abe <display_plot_signal+0x7e>
		{
			// flanco descendente
			if((buffer_display[i] > trigger_level ) && (buffer_display[i+1]) < trigger_level )
 8000a8e:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <display_plot_signal+0x160>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <display_plot_signal+0x164>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d90c      	bls.n	8000ab8 <display_plot_signal+0x78>
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <display_plot_signal+0x160>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <display_plot_signal+0x164>)
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d203      	bcs.n	8000ab8 <display_plot_signal+0x78>
			{
				trigger_point = i;
 8000ab0:	4a39      	ldr	r2, [pc, #228]	; (8000b98 <display_plot_signal+0x158>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	6013      	str	r3, [r2, #0]
				break;
 8000ab6:	e005      	b.n	8000ac4 <display_plot_signal+0x84>
		for(int i = 0; i <= 98; i++)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	2b62      	cmp	r3, #98	; 0x62
 8000ac2:	dde4      	ble.n	8000a8e <display_plot_signal+0x4e>
			}
		}

		for (int k = 0; k <= 98; k++){
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e050      	b.n	8000b6c <display_plot_signal+0x12c>

			x3 = k + trigger_point;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <display_plot_signal+0x158>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
			x4 = x3 + 1;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]

			y3 = map(buffer_display[x3], 0, 4095, 63, 9); 				// convert to plot
 8000ada:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <display_plot_signal+0x160>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000aee:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8000ba8 <display_plot_signal+0x168>
 8000af2:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8000bac <display_plot_signal+0x16c>
 8000af6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8000bb0 <display_plot_signal+0x170>
 8000afa:	eeb0 0a67 	vmov.f32	s0, s15
 8000afe:	f7ff fd0b 	bl	8000518 <map>
 8000b02:	eef0 7a40 	vmov.f32	s15, s0
 8000b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0a:	ee17 3a90 	vmov	r3, s15
 8000b0e:	613b      	str	r3, [r7, #16]
			y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <display_plot_signal+0x160>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b20:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000b24:	eddf 1a20 	vldr	s3, [pc, #128]	; 8000ba8 <display_plot_signal+0x168>
 8000b28:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8000bac <display_plot_signal+0x16c>
 8000b2c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8000bb0 <display_plot_signal+0x170>
 8000b30:	eeb0 0a67 	vmov.f32	s0, s15
 8000b34:	f7ff fcf0 	bl	8000518 <map>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b40:	ee17 3a90 	vmov	r3, s15
 8000b44:	60fb      	str	r3, [r7, #12]

			ssd1306_Line(k + 27, y3, k + 28, y4, White);
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	331b      	adds	r3, #27
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	b2d9      	uxtb	r1, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	331c      	adds	r3, #28
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2401      	movs	r4, #1
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	f000 fe91 	bl	8001888 <ssd1306_Line>
		for (int k = 0; k <= 98; k++){
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b62      	cmp	r3, #98	; 0x62
 8000b70:	ddab      	ble.n	8000aca <display_plot_signal+0x8a>

		 }
		//ssd1306_UpdateScreen();
		//ssd1306_Fill(Black);
		if(flag == 2)
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <display_plot_signal+0x154>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d105      	bne.n	8000b86 <display_plot_signal+0x146>
			HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	4907      	ldr	r1, [pc, #28]	; (8000b9c <display_plot_signal+0x15c>)
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <display_plot_signal+0x174>)
 8000b82:	f001 fa3d 	bl	8002000 <HAL_ADC_Start_DMA>

		flag = 0;
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <display_plot_signal+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3724      	adds	r7, #36	; 0x24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	20000464 	.word	0x20000464
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	2000046c 	.word	0x2000046c
 8000ba0:	20000c6c 	.word	0x20000c6c
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	427c0000 	.word	0x427c0000
 8000bac:	457ff000 	.word	0x457ff000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	20000290 	.word	0x20000290

08000bb8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	/*
	trigger_level += 300;
	if(trigger_level > 3800)
		trigger_level = 100;
	*/
	contador++;
 8000bc2:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a61      	ldr	r2, [pc, #388]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bca:	6013      	str	r3, [r2, #0]
	contador %= 8;
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	425a      	negs	r2, r3
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	f002 0207 	and.w	r2, r2, #7
 8000bda:	bf58      	it	pl
 8000bdc:	4253      	negpl	r3, r2
 8000bde:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000be0:	6013      	str	r3, [r2, #0]
	switch(contador)
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	f200 809c 	bhi.w	8000d24 <HAL_GPIO_EXTI_Callback+0x16c>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c15 	.word	0x08000c15
 8000bf8:	08000c37 	.word	0x08000c37
 8000bfc:	08000c59 	.word	0x08000c59
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c9d 	.word	0x08000c9d
 8000c08:	08000cbf 	.word	0x08000cbf
 8000c0c:	08000ce1 	.word	0x08000ce1
 8000c10:	08000d03 	.word	0x08000d03
	{
		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	484e      	ldr	r0, [pc, #312]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c1a:	f002 fb61 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	484c      	ldr	r0, [pc, #304]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c26:	f002 fb5b 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4849      	ldr	r0, [pc, #292]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c30:	f002 fb56 	bl	80032e0 <HAL_GPIO_WritePin>

		break;
 8000c34:	e087      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4846      	ldr	r0, [pc, #280]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c3c:	f002 fb50 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	4844      	ldr	r0, [pc, #272]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c48:	f002 fb4a 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	4840      	ldr	r0, [pc, #256]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c52:	f002 fb45 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000c56:	e076      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	483d      	ldr	r0, [pc, #244]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c5e:	f002 fb3f 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	483b      	ldr	r0, [pc, #236]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c6a:	f002 fb39 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2120      	movs	r1, #32
 8000c72:	4838      	ldr	r0, [pc, #224]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c74:	f002 fb34 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000c78:	e065      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4835      	ldr	r0, [pc, #212]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c80:	f002 fb2e 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4833      	ldr	r0, [pc, #204]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c8c:	f002 fb28 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2120      	movs	r1, #32
 8000c94:	482f      	ldr	r0, [pc, #188]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c96:	f002 fb23 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000c9a:	e054      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	482c      	ldr	r0, [pc, #176]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca2:	f002 fb1d 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cae:	f002 fb17 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cb8:	f002 fb12 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000cbc:	e043      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4824      	ldr	r0, [pc, #144]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc4:	f002 fb0c 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cd0:	f002 fb06 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cda:	f002 fb01 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000cde:	e032      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce6:	f002 fafb 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cf2:	f002 faf5 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cfc:	f002 faf0 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000d00:	e021      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d08:	f002 faea 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d14:	f002 fae4 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d1e:	f002 fadf 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000d22:	e010      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d2a:	f002 fad9 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d36:	f002 fad3 	bl	80032e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d40:	f002 face 	bl	80032e0 <HAL_GPIO_WritePin>
		break;
 8000d44:	bf00      	nop
	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000468 	.word	0x20000468
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40020000 	.word	0x40020000

08000d5c <display_plot_trigger>:

void display_plot_trigger(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

	int trigger_actual = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]

	trigger_actual = map(trigger_level, 0, 4095, 63, 9);
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <display_plot_trigger+0x78>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8000d76:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000dd8 <display_plot_trigger+0x7c>
 8000d7a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000ddc <display_plot_trigger+0x80>
 8000d7e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000de0 <display_plot_trigger+0x84>
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	f7ff fbc7 	bl	8000518 <map>
 8000d8a:	eef0 7a40 	vmov.f32	s15, s0
 8000d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d92:	ee17 3a90 	vmov	r3, s15
 8000d96:	607b      	str	r3, [r7, #4]

	//ssd1306_HLine(26, trigger_actual, 100, White);

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	b2d9      	uxtb	r1, r3
 8000da0:	2301      	movs	r3, #1
 8000da2:	2204      	movs	r2, #4
 8000da4:	207f      	movs	r0, #127	; 0x7f
 8000da6:	f000 fddb 	bl	8001960 <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	2202      	movs	r2, #2
 8000db6:	207e      	movs	r0, #126	; 0x7e
 8000db8:	f000 fdd2 	bl	8001960 <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	207d      	movs	r0, #125	; 0x7d
 8000dc6:	f000 fc45 	bl	8001654 <ssd1306_DrawPixel>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	427c0000 	.word	0x427c0000
 8000ddc:	457ff000 	.word	0x457ff000
 8000de0:	00000000 	.word	0x00000000

08000de4 <HAL_ADC_ConvHalfCpltCallback>:


int half, cplt;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	half++;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000df4:	6013      	str	r3, [r2, #0]
	flag = 1;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	2000106c 	.word	0x2000106c
 8000e0c:	20000464 	.word	0x20000464

08000e10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	cplt++;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e20:	6013      	str	r3, [r2, #0]
	flag = 2;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x28>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20001070 	.word	0x20001070
 8000e38:	20000464 	.word	0x20000464

08000e3c <Init_Sistema>:
}
*/

/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8000e44:	f000 fb54 	bl	80014f0 <ssd1306_Init>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <Init_Sistema+0x54>)
 8000e4c:	f003 fcfc 	bl	8004848 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim3);
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <Init_Sistema+0x58>)
 8000e52:	f003 fbed 	bl	8004630 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX);
 8000e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5a:	490f      	ldr	r1, [pc, #60]	; (8000e98 <Init_Sistema+0x5c>)
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <Init_Sistema+0x60>)
 8000e5e:	f001 f8cf 	bl	8002000 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <Init_Sistema+0x64>)
 8000e68:	f002 fa3a 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <Init_Sistema+0x68>)
 8000e74:	f002 fa34 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <Init_Sistema+0x64>)
 8000e7e:	f002 fa2f 	bl	80032e0 <HAL_GPIO_WritePin>
	vTaskDelete(NULL);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f004 fd7a 	bl	800597c <vTaskDelete>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000038c 	.word	0x2000038c
 8000e94:	200003d4 	.word	0x200003d4
 8000e98:	2000046c 	.word	0x2000046c
 8000e9c:	20000290 	.word	0x20000290
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <Mostrar_pantalla>:
void Mostrar_pantalla(void *pvParameters){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	while(1){

		ssd1306_Fill(Black);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 fb83 	bl	80015bc <ssd1306_Fill>
		display_plot_grilla();
 8000eb6:	f7ff fd2b 	bl	8000910 <display_plot_grilla>
		display_plot_trigger();
 8000eba:	f7ff ff4f 	bl	8000d5c <display_plot_trigger>
		display_plot_signal();
 8000ebe:	f7ff fdbf 	bl	8000a40 <display_plot_signal>
		actualizar_escala();
 8000ec2:	f7ff fb57 	bl	8000574 <actualizar_escala>
		ssd1306_UpdateScreen();
 8000ec6:	f000 fb9d 	bl	8001604 <ssd1306_UpdateScreen>

		vTaskDelay(10/portTICK_RATE_MS);
 8000eca:	200a      	movs	r0, #10
 8000ecc:	f004 fde6 	bl	8005a9c <vTaskDelay>
		ssd1306_Fill(Black);
 8000ed0:	e7ee      	b.n	8000eb0 <Mostrar_pantalla+0x8>
	...

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f001 f80b 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f82d 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fa29 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee6:	f000 fa07 	bl	80012f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eea:	f000 f893 	bl	8001014 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eee:	f000 f8e3 	bl	80010b8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ef2:	f000 f90f 	bl	8001114 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef6:	f000 f965 	bl	80011c4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000efa:	f000 f9af 	bl	800125c <MX_TIM5_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2302      	movs	r3, #2
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <main+0x58>)
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <main+0x5c>)
 8000f0e:	f004 fbfe 	bl	800570e <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 8000f12:	2300      	movs	r3, #0
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <main+0x60>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <main+0x64>)
 8000f22:	f004 fbf4 	bl	800570e <xTaskCreate>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000f26:	f004 fded 	bl	8005b04 <vTaskStartScheduler>
  while(1){
 8000f2a:	e7fe      	b.n	8000f2a <main+0x56>
 8000f2c:	08006ab0 	.word	0x08006ab0
 8000f30:	08000e3d 	.word	0x08000e3d
 8000f34:	08006abc 	.word	0x08006abc
 8000f38:	08000ea9 	.word	0x08000ea9

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 fd52 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a28      	ldr	r2, [pc, #160]	; (800100c <SystemClock_Config+0xd0>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <SystemClock_Config+0xd0>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemClock_Config+0xd4>)
 8000f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <SystemClock_Config+0xd4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fe18 	bl	8003bfc <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd2:	f000 fa55 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 f87a 	bl	80040ec <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ffe:	f000 fa3f 	bl	8001480 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <MX_ADC1_Init+0xa0>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800102e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_ADC1_Init+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800107a:	f000 ff7d 	bl	8001f78 <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001084:	f000 f9fc 	bl	8001480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800109a:	f001 f8ab 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010a4:	f000 f9ec 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000290 	.word	0x20000290
 80010b4:	40012000 	.word	0x40012000

080010b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C1_Init+0x50>)
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_I2C1_Init+0x54>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_I2C1_Init+0x50>)
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_I2C1_Init+0x58>)
 80010c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_I2C1_Init+0x50>)
 80010d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_I2C1_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_I2C1_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2C1_Init+0x50>)
 80010f6:	f002 f925 	bl	8003344 <HAL_I2C_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001100:	f000 f9be 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000338 	.word	0x20000338
 800110c:	40005400 	.word	0x40005400
 8001110:	00061a80 	.word	0x00061a80

08001114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001140:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_TIM2_Init+0xac>)
 800114e:	22fa      	movs	r2, #250	; 0xfa
 8001150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_TIM2_Init+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001160:	f003 fb22 	bl	80047a8 <HAL_TIM_OC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800116a:	f000 f989 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_TIM2_Init+0xac>)
 800117e:	f004 f933 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001188:	f000 f97a 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800118c:	2330      	movs	r3, #48	; 0x30
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM2_Init+0xac>)
 80011a4:	f003 fd08 	bl	8004bb8 <HAL_TIM_OC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011ae:	f000 f967 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM2_Init+0xac>)
 80011b4:	f000 fd86 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000038c 	.word	0x2000038c

080011c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
		//TIMER TRIGGER
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.Period = 2675; fs=15,7KHz fmin = 160Hz fmax = 640Hz
  htim3.Init.Period = 10769; fs=3,9KHz fmin = 40Hz fmax = 160Hz
  htim3.Init.Period = 42857; fs=980Hz fmin = 10Hz fmax = 40Hz
  */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM3_Init+0x90>)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <MX_TIM3_Init+0x94>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM3_Init+0x90>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM3_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM3_Init+0x90>)
 80011f4:	223c      	movs	r2, #60	; 0x3c
 80011f6:	60da      	str	r2, [r3, #12]

  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_TIM3_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM3_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_TIM3_Init+0x90>)
 8001206:	f003 f9c3 	bl	8004590 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001210:	f000 f936 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM3_Init+0x90>)
 8001222:	f003 fd25 	bl	8004c70 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800122c:	f000 f928 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001230:	2320      	movs	r3, #32
 8001232:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM3_Init+0x90>)
 800123e:	f004 f8d3 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001248:	f000 f91a 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200003d4 	.word	0x200003d4
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_TIM5_Init+0x94>)
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <MX_TIM5_Init+0x98>)
 800127c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_TIM5_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM5_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_TIM5_Init+0x94>)
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_TIM5_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM5_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_TIM5_Init+0x94>)
 80012a0:	f003 f976 	bl	8004590 <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 f8e9 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM5_Init+0x94>)
 80012bc:	f003 fcd8 	bl	8004c70 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f8db 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_TIM5_Init+0x94>)
 80012d8:	f004 f886 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012e2:	f000 f8cd 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000041c 	.word	0x2000041c
 80012f4:	40000c00 	.word	0x40000c00

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_DMA_Init+0x3c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <MX_DMA_Init+0x3c>)
 8001308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_DMA_Init+0x3c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2038      	movs	r0, #56	; 0x38
 8001320:	f001 fac0 	bl	80028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001324:	2038      	movs	r0, #56	; 0x38
 8001326:	f001 fad9 	bl	80028dc <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <MX_GPIO_Init+0x114>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <MX_GPIO_Init+0x114>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <MX_GPIO_Init+0x114>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <MX_GPIO_Init+0x114>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <MX_GPIO_Init+0x114>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_GPIO_Init+0x114>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <MX_GPIO_Init+0x114>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <MX_GPIO_Init+0x114>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_GPIO_Init+0x114>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <MX_GPIO_Init+0x114>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a28      	ldr	r2, [pc, #160]	; (800144c <MX_GPIO_Init+0x114>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_GPIO_Init+0x114>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2120      	movs	r1, #32
 80013c2:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_GPIO_Init+0x118>)
 80013c4:	f001 ff8c 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_GPIO_Init+0x118>)
 80013d0:	f001 ff86 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2128      	movs	r1, #40	; 0x28
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <MX_GPIO_Init+0x11c>)
 80013da:	f001 ff81 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_GPIO_Init+0x120>)
 80013f6:	f001 fdef 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 80013fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <MX_GPIO_Init+0x118>)
 8001414:	f001 fde0 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 8001418:	2328      	movs	r3, #40	; 0x28
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_GPIO_Init+0x11c>)
 8001430:	f001 fdd2 	bl	8002fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2105      	movs	r1, #5
 8001438:	2028      	movs	r0, #40	; 0x28
 800143a:	f001 fa33 	bl	80028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f001 fa4c 	bl	80028dc <HAL_NVIC_EnableIRQ>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146e:	f000 fd63 	bl	8001f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af04      	add	r7, sp, #16
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	2301      	movs	r3, #1
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	2200      	movs	r2, #0
 80014a8:	2178      	movs	r1, #120	; 0x78
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <ssd1306_WriteCommand+0x2c>)
 80014ac:	f002 f88e 	bl	80035cc <HAL_I2C_Mem_Write>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000338 	.word	0x20000338

080014bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af04      	add	r7, sp, #16
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	9202      	str	r2, [sp, #8]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2178      	movs	r1, #120	; 0x78
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <ssd1306_WriteData+0x30>)
 80014de:	f002 f875 	bl	80035cc <HAL_I2C_Mem_Write>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000338 	.word	0x20000338

080014f0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 fa85 	bl	8001a04 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014fa:	2020      	movs	r0, #32
 80014fc:	f7ff ffc6 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff ffc3 	bl	800148c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001506:	20b0      	movs	r0, #176	; 0xb0
 8001508:	f7ff ffc0 	bl	800148c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800150c:	20c8      	movs	r0, #200	; 0xc8
 800150e:	f7ff ffbd 	bl	800148c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff ffba 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001518:	2010      	movs	r0, #16
 800151a:	f7ff ffb7 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800151e:	2040      	movs	r0, #64	; 0x40
 8001520:	f7ff ffb4 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001524:	20ff      	movs	r0, #255	; 0xff
 8001526:	f000 fa59 	bl	80019dc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800152a:	20a1      	movs	r0, #161	; 0xa1
 800152c:	f7ff ffae 	bl	800148c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001530:	20a6      	movs	r0, #166	; 0xa6
 8001532:	f7ff ffab 	bl	800148c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001536:	20a8      	movs	r0, #168	; 0xa8
 8001538:	f7ff ffa8 	bl	800148c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800153c:	203f      	movs	r0, #63	; 0x3f
 800153e:	f7ff ffa5 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001542:	20a4      	movs	r0, #164	; 0xa4
 8001544:	f7ff ffa2 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001548:	20d3      	movs	r0, #211	; 0xd3
 800154a:	f7ff ff9f 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ff9c 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001554:	20d5      	movs	r0, #213	; 0xd5
 8001556:	f7ff ff99 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800155a:	20f0      	movs	r0, #240	; 0xf0
 800155c:	f7ff ff96 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001560:	20d9      	movs	r0, #217	; 0xd9
 8001562:	f7ff ff93 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001566:	2022      	movs	r0, #34	; 0x22
 8001568:	f7ff ff90 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800156c:	20da      	movs	r0, #218	; 0xda
 800156e:	f7ff ff8d 	bl	800148c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001572:	2012      	movs	r0, #18
 8001574:	f7ff ff8a 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001578:	20db      	movs	r0, #219	; 0xdb
 800157a:	f7ff ff87 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800157e:	2020      	movs	r0, #32
 8001580:	f7ff ff84 	bl	800148c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001584:	208d      	movs	r0, #141	; 0x8d
 8001586:	f7ff ff81 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800158a:	2014      	movs	r0, #20
 800158c:	f7ff ff7e 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001590:	2001      	movs	r0, #1
 8001592:	f000 fa37 	bl	8001a04 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f810 	bl	80015bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800159c:	f000 f832 	bl	8001604 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <ssd1306_Init+0xc8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ssd1306_Init+0xc8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <ssd1306_Init+0xc8>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	711a      	strb	r2, [r3, #4]
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20001474 	.word	0x20001474

080015bc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e00d      	b.n	80015e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <ssd1306_Fill+0x1a>
 80015d2:	2100      	movs	r1, #0
 80015d4:	e000      	b.n	80015d8 <ssd1306_Fill+0x1c>
 80015d6:	21ff      	movs	r1, #255	; 0xff
 80015d8:	4a09      	ldr	r2, [pc, #36]	; (8001600 <ssd1306_Fill+0x44>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	460a      	mov	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d3ed      	bcc.n	80015cc <ssd1306_Fill+0x10>
    }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20001074 	.word	0x20001074

08001604 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	e016      	b.n	800163e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	3b50      	subs	r3, #80	; 0x50
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff38 	bl	800148c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800161c:	2002      	movs	r0, #2
 800161e:	f7ff ff35 	bl	800148c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001622:	2010      	movs	r0, #16
 8001624:	f7ff ff32 	bl	800148c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <ssd1306_UpdateScreen+0x4c>)
 800162e:	4413      	add	r3, r2
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff42 	bl	80014bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	3301      	adds	r3, #1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d9e5      	bls.n	8001610 <ssd1306_UpdateScreen+0xc>
    }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20001074 	.word	0x20001074

08001654 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	460b      	mov	r3, r1
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db3d      	blt.n	80016ea <ssd1306_DrawPixel+0x96>
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	2b3f      	cmp	r3, #63	; 0x3f
 8001672:	d83a      	bhi.n	80016ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d11a      	bne.n	80016b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	b2d8      	uxtb	r0, r3
 8001682:	4603      	mov	r3, r0
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	4413      	add	r3, r2
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <ssd1306_DrawPixel+0xa4>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b259      	sxtb	r1, r3
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	4603      	mov	r3, r0
 80016a4:	01db      	lsls	r3, r3, #7
 80016a6:	4413      	add	r3, r2
 80016a8:	b2c9      	uxtb	r1, r1
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <ssd1306_DrawPixel+0xa4>)
 80016ac:	54d1      	strb	r1, [r2, r3]
 80016ae:	e01d      	b.n	80016ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	b2d8      	uxtb	r0, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <ssd1306_DrawPixel+0xa4>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4013      	ands	r3, r2
 80016d8:	b259      	sxtb	r1, r3
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	4603      	mov	r3, r0
 80016de:	01db      	lsls	r3, r3, #7
 80016e0:	4413      	add	r3, r2
 80016e2:	b2c9      	uxtb	r1, r1
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <ssd1306_DrawPixel+0xa4>)
 80016e6:	54d1      	strb	r1, [r2, r3]
 80016e8:	e000      	b.n	80016ec <ssd1306_DrawPixel+0x98>
        return;
 80016ea:	bf00      	nop
    }
}
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20001074 	.word	0x20001074

080016fc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	4604      	mov	r4, r0
 8001704:	1d38      	adds	r0, r7, #4
 8001706:	e880 0006 	stmia.w	r0, {r1, r2}
 800170a:	461a      	mov	r2, r3
 800170c:	4623      	mov	r3, r4
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	4613      	mov	r3, r2
 8001712:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b1f      	cmp	r3, #31
 8001718:	d902      	bls.n	8001720 <ssd1306_WriteChar+0x24>
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b7e      	cmp	r3, #126	; 0x7e
 800171e:	d901      	bls.n	8001724 <ssd1306_WriteChar+0x28>
        return 0;
 8001720:	2300      	movs	r3, #0
 8001722:	e06d      	b.n	8001800 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <ssd1306_WriteChar+0x10c>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	793b      	ldrb	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	2b80      	cmp	r3, #128	; 0x80
 8001730:	dc06      	bgt.n	8001740 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <ssd1306_WriteChar+0x10c>)
 8001734:	885b      	ldrh	r3, [r3, #2]
 8001736:	461a      	mov	r2, r3
 8001738:	797b      	ldrb	r3, [r7, #5]
 800173a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	dd01      	ble.n	8001744 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e05d      	b.n	8001800 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	e04c      	b.n	80017e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	3b20      	subs	r3, #32
 8001750:	7979      	ldrb	r1, [r7, #5]
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4619      	mov	r1, r3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	440b      	add	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	e034      	b.n	80017d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <ssd1306_WriteChar+0x10c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2d8      	uxtb	r0, r3
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <ssd1306_WriteChar+0x10c>)
 800178a:	885b      	ldrh	r3, [r3, #2]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	7bba      	ldrb	r2, [r7, #14]
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff ff5b 	bl	8001654 <ssd1306_DrawPixel>
 800179e:	e016      	b.n	80017ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <ssd1306_WriteChar+0x10c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <ssd1306_WriteChar+0x10c>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	f7ff ff43 	bl	8001654 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	793b      	ldrb	r3, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	4293      	cmp	r3, r2
 80017dc:	d3c5      	bcc.n	800176a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	461a      	mov	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d3ad      	bcc.n	800174a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <ssd1306_WriteChar+0x10c>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b03      	ldr	r3, [pc, #12]	; (8001808 <ssd1306_WriteChar+0x10c>)
 80017fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	20001474 	.word	0x20001474

0800180c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	1d38      	adds	r0, r7, #4
 8001816:	e880 0006 	stmia.w	r0, {r1, r2}
 800181a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800181c:	e012      	b.n	8001844 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	7818      	ldrb	r0, [r3, #0]
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	1d3a      	adds	r2, r7, #4
 8001826:	ca06      	ldmia	r2, {r1, r2}
 8001828:	f7ff ff68 	bl	80016fc <ssd1306_WriteChar>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d002      	beq.n	800183e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	e008      	b.n	8001850 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e8      	bne.n	800181e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <ssd1306_SetCursor+0x2c>)
 800186e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <ssd1306_SetCursor+0x2c>)
 8001876:	805a      	strh	r2, [r3, #2]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20001474 	.word	0x20001474

08001888 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	4603      	mov	r3, r0
 800189c:	71bb      	strb	r3, [r7, #6]
 800189e:	460b      	mov	r3, r1
 80018a0:	717b      	strb	r3, [r7, #5]
 80018a2:	4613      	mov	r3, r2
 80018a4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80018a6:	797a      	ldrb	r2, [r7, #5]
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfb8      	it	lt
 80018b0:	425b      	neglt	r3, r3
 80018b2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80018b4:	793a      	ldrb	r2, [r7, #4]
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bfb8      	it	lt
 80018be:	425b      	neglt	r3, r3
 80018c0:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	797b      	ldrb	r3, [r7, #5]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d201      	bcs.n	80018ce <ssd1306_Line+0x46>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e001      	b.n	80018d2 <ssd1306_Line+0x4a>
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80018d4:	79ba      	ldrb	r2, [r7, #6]
 80018d6:	793b      	ldrb	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d201      	bcs.n	80018e0 <ssd1306_Line+0x58>
 80018dc:	2301      	movs	r3, #1
 80018de:	e001      	b.n	80018e4 <ssd1306_Line+0x5c>
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80018ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018f2:	7939      	ldrb	r1, [r7, #4]
 80018f4:	797b      	ldrb	r3, [r7, #5]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff feac 	bl	8001654 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80018fc:	e024      	b.n	8001948 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80018fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001902:	79b9      	ldrb	r1, [r7, #6]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fea4 	bl	8001654 <ssd1306_DrawPixel>
    error2 = error * 2;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	425b      	negs	r3, r3
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	429a      	cmp	r2, r3
 800191a:	dd08      	ble.n	800192e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4413      	add	r3, r2
 800192c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	429a      	cmp	r2, r3
 8001934:	da08      	bge.n	8001948 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	4413      	add	r3, r2
 8001946:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	797b      	ldrb	r3, [r7, #5]
 800194c:	429a      	cmp	r2, r3
 800194e:	d1d6      	bne.n	80018fe <ssd1306_Line+0x76>
 8001950:	79ba      	ldrb	r2, [r7, #6]
 8001952:	793b      	ldrb	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d1d2      	bne.n	80018fe <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001958:	bf00      	nop
}
 800195a:	3724      	adds	r7, #36	; 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}

08001960 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af02      	add	r7, sp, #8
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4603      	mov	r3, r0
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	4613      	mov	r3, r2
 800197c:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 800197e:	79ba      	ldrb	r2, [r7, #6]
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	4413      	add	r3, r2
 8001984:	b2dc      	uxtb	r4, r3
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	79b9      	ldrb	r1, [r7, #6]
 800198a:	79f8      	ldrb	r0, [r7, #7]
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4623      	mov	r3, r4
 8001992:	f7ff ff79 	bl	8001888 <ssd1306_Line>
	return;
 8001996:	bf00      	nop
}
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}

0800199e <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800199e:	b590      	push	{r4, r7, lr}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af02      	add	r7, sp, #8
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	461a      	mov	r2, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	4603      	mov	r3, r0
 80019b2:	71bb      	strb	r3, [r7, #6]
 80019b4:	460b      	mov	r3, r1
 80019b6:	717b      	strb	r3, [r7, #5]
 80019b8:	4613      	mov	r3, r2
 80019ba:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	797b      	ldrb	r3, [r7, #5]
 80019c0:	4413      	add	r3, r2
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	79bc      	ldrb	r4, [r7, #6]
 80019c6:	79b9      	ldrb	r1, [r7, #6]
 80019c8:	79f8      	ldrb	r0, [r7, #7]
 80019ca:	793b      	ldrb	r3, [r7, #4]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7ff ff5a 	bl	8001888 <ssd1306_Line>
	return;
 80019d4:	bf00      	nop
}
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019e6:	2381      	movs	r3, #129	; 0x81
 80019e8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fd4d 	bl	800148c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fd49 	bl	800148c <ssd1306_WriteCommand>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a14:	23af      	movs	r3, #175	; 0xaf
 8001a16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <ssd1306_SetDisplayOn+0x38>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	715a      	strb	r2, [r3, #5]
 8001a1e:	e004      	b.n	8001a2a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a20:	23ae      	movs	r3, #174	; 0xae
 8001a22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <ssd1306_SetDisplayOn+0x38>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd2d 	bl	800148c <ssd1306_WriteCommand>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20001474 	.word	0x20001474

08001a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_MspInit+0x54>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <HAL_MspInit+0x54>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x54>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_MspInit+0x54>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_MspInit+0x54>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_MspInit+0x54>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	210f      	movs	r1, #15
 8001a82:	f06f 0001 	mvn.w	r0, #1
 8001a86:	f000 ff0d 	bl	80028a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <HAL_ADC_MspInit+0xd8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d156      	bne.n	8001b68 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_ADC_MspInit+0xdc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <HAL_ADC_MspInit+0xe0>)
 8001b06:	f001 fa67 	bl	8002fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_ADC_MspInit+0xe8>)
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b4e:	f000 fed3 	bl	80028f8 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b58:	f7ff fc92 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_ADC_MspInit+0xe4>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	200002d8 	.word	0x200002d8
 8001b80:	40026410 	.word	0x40026410

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_I2C_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480c      	ldr	r0, [pc, #48]	; (8001c10 <HAL_I2C_MspInit+0x8c>)
 8001be0:	f001 f9fa 	bl	8002fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c24:	d10d      	bne.n	8001c42 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_TIM_OC_MspInit+0x3c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_TIM_OC_MspInit+0x3c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_TIM_OC_MspInit+0x3c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_TIM_Base_MspInit+0x64>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c82:	e012      	b.n	8001caa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10d      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40000c00 	.word	0x40000c00

08001cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d11e      	bne.n	8001d24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d14:	2301      	movs	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <HAL_TIM_MspPostInit+0x6c>)
 8001d20:	f001 f95a 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6453      	str	r3, [r2, #68]	; 0x44
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d60:	f107 020c 	add.w	r2, r7, #12
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fbde 	bl	800452c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d70:	f002 fbc8 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8001d74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_InitTick+0xd4>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	3b01      	subs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_InitTick+0xdc>)
 8001d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_InitTick+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_InitTick+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <HAL_InitTick+0xd8>)
 8001dac:	f002 fbf0 	bl	8004590 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11b      	bne.n	8001df6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dbe:	4813      	ldr	r0, [pc, #76]	; (8001e0c <HAL_InitTick+0xd8>)
 8001dc0:	f002 fc90 	bl	80046e4 <HAL_TIM_Base_Start_IT>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d111      	bne.n	8001df6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dd2:	2019      	movs	r0, #25
 8001dd4:	f000 fd82 	bl	80028dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d808      	bhi.n	8001df0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001dde:	2200      	movs	r2, #0
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	2019      	movs	r0, #25
 8001de4:	f000 fd5e 	bl	80028a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_InitTick+0xe0>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e002      	b.n	8001df6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	2000147c 	.word	0x2000147c
 8001e10:	40010000 	.word	0x40010000
 8001e14:	20000014 	.word	0x20000014

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e4a:	f002 fdad 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000147c 	.word	0x2000147c

08001e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e60:	f001 fa58 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA2_Stream0_IRQHandler+0x10>)
 8001e6e:	f000 fe49 	bl	8002b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002d8 	.word	0x200002d8

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f004 fd6d 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7fe ffff 	bl	8000ed4 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ee4:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8001ee8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001eec:	2000521c 	.word	0x2000521c

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 fcb6 	bl	800288e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f7ff ff06 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fd8a 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	200014c4 	.word	0x200014c4

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200014c4 	.word	0x200014c4

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e033      	b.n	8001ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fd7e 	bl	8001a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fa34 	bl	8002438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADC_Start_DMA+0x1e>
 800201a:	2302      	movs	r3, #2
 800201c:	e0ce      	b.n	80021bc <HAL_ADC_Start_DMA+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d018      	beq.n	8002066 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002044:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <HAL_ADC_Start_DMA+0x1c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_ADC_Start_DMA+0x1c8>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9a      	lsrs	r2, r3, #18
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3b01      	subs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002074:	d107      	bne.n	8002086 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 8086 	bne.w	80021a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d4:	d106      	bne.n	80020e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f023 0206 	bic.w	r2, r3, #6
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
 80020e2:	e002      	b.n	80020ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_ADC_Start_DMA+0x1cc>)
 80020f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	4a35      	ldr	r2, [pc, #212]	; (80021d0 <HAL_ADC_Start_DMA+0x1d0>)
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_ADC_Start_DMA+0x1d4>)
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <HAL_ADC_Start_DMA+0x1d8>)
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002116:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002126:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002136:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	334c      	adds	r3, #76	; 0x4c
 8002142:	4619      	mov	r1, r3
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f000 fc84 	bl	8002a54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d129      	bne.n	80021ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e020      	b.n	80021ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_ADC_Start_DMA+0x1dc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11b      	bne.n	80021ba <HAL_ADC_Start_DMA+0x1ba>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d114      	bne.n	80021ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000010 	.word	0x20000010
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	40012300 	.word	0x40012300
 80021d0:	08002631 	.word	0x08002631
 80021d4:	080026eb 	.word	0x080026eb
 80021d8:	08002707 	.word	0x08002707
 80021dc:	40012000 	.word	0x40012000

080021e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1c>
 800220c:	2302      	movs	r3, #2
 800220e:	e105      	b.n	800241c <HAL_ADC_ConfigChannel+0x228>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d925      	bls.n	800226c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	3b1e      	subs	r3, #30
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43da      	mvns	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	400a      	ands	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68d9      	ldr	r1, [r3, #12]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	4603      	mov	r3, r0
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4403      	add	r3, r0
 800225e:	3b1e      	subs	r3, #30
 8002260:	409a      	lsls	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	e022      	b.n	80022b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	2207      	movs	r2, #7
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	400a      	ands	r2, r1
 800228e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4403      	add	r3, r0
 80022a8:	409a      	lsls	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d824      	bhi.n	8002304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b05      	subs	r3, #5
 80022cc:	221f      	movs	r2, #31
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3b05      	subs	r3, #5
 80022f6:	fa00 f203 	lsl.w	r2, r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
 8002302:	e04c      	b.n	800239e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d824      	bhi.n	8002356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b23      	subs	r3, #35	; 0x23
 800231e:	221f      	movs	r2, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b23      	subs	r3, #35	; 0x23
 8002348:	fa00 f203 	lsl.w	r2, r0, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
 8002354:	e023      	b.n	800239e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b41      	subs	r3, #65	; 0x41
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b41      	subs	r3, #65	; 0x41
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_ADC_ConfigChannel+0x234>)
 80023a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <HAL_ADC_ConfigChannel+0x238>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1cc>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d105      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_ADC_ConfigChannel+0x238>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d123      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x21e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d003      	beq.n	80023da <HAL_ADC_ConfigChannel+0x1e6>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d11b      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d111      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_ADC_ConfigChannel+0x23c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_ADC_ConfigChannel+0x240>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	0c9a      	lsrs	r2, r3, #18
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	40012000 	.word	0x40012000
 8002430:	20000010 	.word	0x20000010
 8002434:	431bde83 	.word	0x431bde83

08002438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002440:	4b79      	ldr	r3, [pc, #484]	; (8002628 <ADC_Init+0x1f0>)
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800246c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	021a      	lsls	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	4a58      	ldr	r2, [pc, #352]	; (800262c <ADC_Init+0x1f4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e00f      	b.n	8002536 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002534:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0202 	bic.w	r2, r2, #2
 8002544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7e1b      	ldrb	r3, [r3, #24]
 8002550:	005a      	lsls	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002572:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	3b01      	subs	r3, #1
 8002590:	035a      	lsls	r2, r3, #13
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	e007      	b.n	80025ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	051a      	lsls	r2, r3, #20
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ee:	025a      	lsls	r2, r3, #9
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	029a      	lsls	r2, r3, #10
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40012300 	.word	0x40012300
 800262c:	0f000001 	.word	0x0f000001

08002630 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002646:	2b00      	cmp	r3, #0
 8002648:	d13c      	bne.n	80026c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d12b      	bne.n	80026bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d127      	bne.n	80026bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002684:	2b00      	cmp	r3, #0
 8002686:	d119      	bne.n	80026bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0220 	bic.w	r2, r2, #32
 8002696:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7fe fba7 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026c2:	e00e      	b.n	80026e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff fd85 	bl	80021e0 <HAL_ADC_ErrorCallback>
}
 80026d6:	e004      	b.n	80026e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7fe fb73 	bl	8000de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f043 0204 	orr.w	r2, r3, #4
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fd5a 	bl	80021e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ff4c 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b6:	f7ff ff61 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6978      	ldr	r0, [r7, #20]
 80028c2:	f7ff ffb1 	bl	8002828 <NVIC_EncodePriority>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff80 	bl	80027d4 <__NVIC_SetPriority>
}
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff54 	bl	8002798 <__NVIC_EnableIRQ>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fb2c 	bl	8001f60 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e099      	b.n	8002a48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002934:	e00f      	b.n	8002956 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002936:	f7ff fb13 	bl	8001f60 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b05      	cmp	r3, #5
 8002942:	d908      	bls.n	8002956 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2203      	movs	r2, #3
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e078      	b.n	8002a48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e8      	bne.n	8002936 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_DMA_Init+0x158>)
 8002970:	4013      	ands	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002982:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4313      	orrs	r3, r2
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d117      	bne.n	8002a1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fa6f 	bl	8002ee0 <DMA_CheckFifoParam>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a16:	2301      	movs	r3, #1
 8002a18:	e016      	b.n	8002a48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa26 	bl	8002e74 <DMA_CalcBaseAndBitshift>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	f010803f 	.word	0xf010803f

08002a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Start_IT+0x26>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e040      	b.n	8002afc <HAL_DMA_Start_IT+0xa8>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d12f      	bne.n	8002aee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f9b8 	bl	8002e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	223f      	movs	r2, #63	; 0x3f
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0216 	orr.w	r2, r2, #22
 8002ac2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e005      	b.n	8002afa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b10:	4b8e      	ldr	r3, [pc, #568]	; (8002d4c <HAL_DMA_IRQHandler+0x248>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8e      	ldr	r2, [pc, #568]	; (8002d50 <HAL_DMA_IRQHandler+0x24c>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0a9b      	lsrs	r3, r3, #10
 8002b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2208      	movs	r2, #8
 8002b30:	409a      	lsls	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0204 	bic.w	r2, r2, #4
 8002b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	2201      	movs	r2, #1
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f043 0202 	orr.w	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2204      	movs	r2, #4
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2204      	movs	r2, #4
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2210      	movs	r2, #16
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d043      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03c      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2210      	movs	r2, #16
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d024      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e01f      	b.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e016      	b.n	8002c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0208 	bic.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2220      	movs	r2, #32
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 808f 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8087 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d136      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0216 	bic.w	r2, r2, #22
 8002cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_DMA_IRQHandler+0x1da>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	223f      	movs	r2, #63	; 0x3f
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07e      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
        }
        return;
 8002d1a:	e079      	b.n	8002e10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10d      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d031      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
 8002d48:	e02c      	b.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
 8002d4a:	bf00      	nop
 8002d4c:	20000010 	.word	0x20000010
 8002d50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e01e      	b.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0210 	bic.w	r2, r2, #16
 8002d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d032      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2205      	movs	r2, #5
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d307      	bcc.n	8002dec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f2      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x2cc>
 8002dea:	e000      	b.n	8002dee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e10:	bf00      	nop
    }
  }
}
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d108      	bne.n	8002e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e56:	e007      	b.n	8002e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3b10      	subs	r3, #16
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <DMA_CalcBaseAndBitshift+0x68>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d909      	bls.n	8002eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002eb4:	e007      	b.n	8002ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab
 8002edc:	080070d8 	.word	0x080070d8

08002ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d856      	bhi.n	8002fae <DMA_CheckFifoParam+0xce>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <DMA_CheckFifoParam+0x28>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f2b 	.word	0x08002f2b
 8002f10:	08002f19 	.word	0x08002f19
 8002f14:	08002faf 	.word	0x08002faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d046      	beq.n	8002fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f28:	e043      	b.n	8002fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f32:	d140      	bne.n	8002fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e03d      	b.n	8002fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d121      	bne.n	8002f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d837      	bhi.n	8002fba <DMA_CheckFifoParam+0xda>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <DMA_CheckFifoParam+0x70>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f67 	.word	0x08002f67
 8002f58:	08002f61 	.word	0x08002f61
 8002f5c:	08002f79 	.word	0x08002f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e030      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d025      	beq.n	8002fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f76:	e022      	b.n	8002fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f80:	d11f      	bne.n	8002fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f86:	e01c      	b.n	8002fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d903      	bls.n	8002f96 <DMA_CheckFifoParam+0xb6>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d003      	beq.n	8002f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f94:	e018      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9a:	e015      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e00b      	b.n	8002fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e00a      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e008      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e006      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e004      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e159      	b.n	80032a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8148 	bne.w	80032a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	2b02      	cmp	r3, #2
 8003028:	d130      	bne.n	800308c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0201 	and.w	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d017      	beq.n	80030c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d123      	bne.n	800311c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a2 	beq.w	80032a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_GPIO_Init+0x2e8>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_GPIO_Init+0x2e8>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_GPIO_Init+0x2e8>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317a:	4a52      	ldr	r2, [pc, #328]	; (80032c4 <HAL_GPIO_Init+0x2ec>)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3302      	adds	r3, #2
 8003182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a49      	ldr	r2, [pc, #292]	; (80032c8 <HAL_GPIO_Init+0x2f0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d019      	beq.n	80031da <HAL_GPIO_Init+0x202>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a48      	ldr	r2, [pc, #288]	; (80032cc <HAL_GPIO_Init+0x2f4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_GPIO_Init+0x1fe>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_GPIO_Init+0x2f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00d      	beq.n	80031d2 <HAL_GPIO_Init+0x1fa>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a46      	ldr	r2, [pc, #280]	; (80032d4 <HAL_GPIO_Init+0x2fc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <HAL_GPIO_Init+0x1f6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_GPIO_Init+0x300>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_GPIO_Init+0x1f2>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x204>
 80031ca:	2307      	movs	r3, #7
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x204>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x204>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x204>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x204>
 80031da:	2300      	movs	r3, #0
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ec:	4935      	ldr	r1, [pc, #212]	; (80032c4 <HAL_GPIO_Init+0x2ec>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <HAL_GPIO_Init+0x304>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <HAL_GPIO_Init+0x304>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_GPIO_Init+0x304>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_GPIO_Init+0x304>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_GPIO_Init+0x304>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003272:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <HAL_GPIO_Init+0x304>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_GPIO_Init+0x304>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800329c:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_GPIO_Init+0x304>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f aea2 	bls.w	8002ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fc40 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013c00 	.word	0x40013c00

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e12b      	b.n	80035ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fc0a 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f001 f898 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a81      	ldr	r2, [pc, #516]	; (80035b8 <HAL_I2C_Init+0x274>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <HAL_I2C_Init+0x84>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a80      	ldr	r2, [pc, #512]	; (80035bc <HAL_I2C_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e006      	b.n	80033d6 <HAL_I2C_Init+0x92>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a7d      	ldr	r2, [pc, #500]	; (80035c0 <HAL_I2C_Init+0x27c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0e7      	b.n	80035ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a78      	ldr	r2, [pc, #480]	; (80035c4 <HAL_I2C_Init+0x280>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9b      	lsrs	r3, r3, #18
 80033e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_I2C_Init+0x274>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <HAL_I2C_Init+0xd4>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3301      	adds	r3, #1
 8003416:	e009      	b.n	800342c <HAL_I2C_Init+0xe8>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a69      	ldr	r2, [pc, #420]	; (80035c8 <HAL_I2C_Init+0x284>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800343e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	495c      	ldr	r1, [pc, #368]	; (80035b8 <HAL_I2C_Init+0x274>)
 8003448:	428b      	cmp	r3, r1
 800344a:	d819      	bhi.n	8003480 <HAL_I2C_Init+0x13c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e59      	subs	r1, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fbb1 f3f3 	udiv	r3, r1, r3
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003460:	400b      	ands	r3, r1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_I2C_Init+0x138>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e59      	subs	r1, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fbb1 f3f3 	udiv	r3, r1, r3
 8003474:	3301      	adds	r3, #1
 8003476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347a:	e051      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 800347c:	2304      	movs	r3, #4
 800347e:	e04f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d111      	bne.n	80034ac <HAL_I2C_Init+0x168>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	440b      	add	r3, r1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e012      	b.n	80034d2 <HAL_I2C_Init+0x18e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1e58      	subs	r0, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	0099      	lsls	r1, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x196>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e022      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <HAL_I2C_Init+0x1bc>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e58      	subs	r0, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fe:	e00f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6809      	ldr	r1, [r1, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800354e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6911      	ldr	r1, [r2, #16]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68d2      	ldr	r2, [r2, #12]
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	000186a0 	.word	0x000186a0
 80035bc:	001e847f 	.word	0x001e847f
 80035c0:	003d08ff 	.word	0x003d08ff
 80035c4:	431bde83 	.word	0x431bde83
 80035c8:	10624dd3 	.word	0x10624dd3

080035cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	817b      	strh	r3, [r7, #10]
 80035de:	460b      	mov	r3, r1
 80035e0:	813b      	strh	r3, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e6:	f7fe fcbb 	bl	8001f60 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	f040 80d9 	bne.w	80037ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2319      	movs	r3, #25
 8003600:	2201      	movs	r2, #1
 8003602:	496d      	ldr	r1, [pc, #436]	; (80037b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f971 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	e0cc      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Mem_Write+0x56>
 800361e:	2302      	movs	r3, #2
 8003620:	e0c5      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d007      	beq.n	8003648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a4d      	ldr	r2, [pc, #308]	; (80037bc <HAL_I2C_Mem_Write+0x1f0>)
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368a:	88f8      	ldrh	r0, [r7, #6]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f890 	bl	80037c0 <I2C_RequestMemoryWrite>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d052      	beq.n	800374c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e081      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f9f2 	bl	8003a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06b      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_I2C_Mem_Write+0x180>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1aa      	bne.n	80036aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f9de 	bl	8003b1a <I2C_WaitOnBTFFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e016      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	00100002 	.word	0x00100002
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	817b      	strh	r3, [r7, #10]
 80037d2:	460b      	mov	r3, r1
 80037d4:	813b      	strh	r3, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f878 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003810:	d103      	bne.n	800381a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e05f      	b.n	80038de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800382c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	492d      	ldr	r1, [pc, #180]	; (80038e8 <I2C_RequestMemoryWrite+0x128>)
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f8b0 	bl	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e04c      	b.n	80038de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	6a39      	ldr	r1, [r7, #32]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f91a 	bl	8003a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b04      	cmp	r3, #4
 8003870:	d107      	bne.n	8003882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e02b      	b.n	80038de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	611a      	str	r2, [r3, #16]
 8003896:	e021      	b.n	80038dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	6a39      	ldr	r1, [r7, #32]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f8f4 	bl	8003a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d107      	bne.n	80038ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e005      	b.n	80038de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038d2:	893b      	ldrh	r3, [r7, #8]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	00010002 	.word	0x00010002

080038ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fc:	e025      	b.n	800394a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d021      	beq.n	800394a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe fb2b 	bl	8001f60 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d116      	bne.n	800394a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e023      	b.n	8003992 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10d      	bne.n	8003970 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	e00c      	b.n	800398a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	429a      	cmp	r2, r3
 800398e:	d0b6      	beq.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a8:	e051      	b.n	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d123      	bne.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0204 	orr.w	r2, r3, #4
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e046      	b.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d021      	beq.n	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe faa9 	bl	8001f60 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e020      	b.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10c      	bne.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e00b      	b.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d18d      	bne.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa4:	e02d      	b.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f878 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e02d      	b.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d021      	beq.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fa4f 	bl	8001f60 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d116      	bne.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	d1ca      	bne.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b26:	e02d      	b.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f837 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e02d      	b.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d021      	beq.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b40:	f7fe fa0e 	bl	8001f60 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e007      	b.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d1ca      	bne.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d11b      	bne.n	8003bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e267      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d075      	beq.n	8003d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d00c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c26:	4b85      	ldr	r3, [pc, #532]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d112      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	4b7e      	ldr	r3, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05b      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d157      	bne.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e242      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d106      	bne.n	8003c70 <HAL_RCC_OscConfig+0x74>
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e01d      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x98>
 8003c7a:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6f      	ldr	r2, [pc, #444]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6c      	ldr	r2, [pc, #432]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c94:	4b69      	ldr	r3, [pc, #420]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a68      	ldr	r2, [pc, #416]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b66      	ldr	r3, [pc, #408]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe f954 	bl	8001f60 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fe f950 	bl	8001f60 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e207      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b5b      	ldr	r3, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe f940 	bl	8001f60 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe f93c 	bl	8001f60 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1f3      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	4b4a      	ldr	r3, [pc, #296]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d11c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2a:	4b44      	ldr	r3, [pc, #272]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x152>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e1c7      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4937      	ldr	r1, [pc, #220]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	e03a      	b.n	8003dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6c:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <HAL_RCC_OscConfig+0x244>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe f8f5 	bl	8001f60 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fe f8f1 	bl	8001f60 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e1a8      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d98:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4925      	ldr	r1, [pc, #148]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
 8003dac:	e015      	b.n	8003dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_OscConfig+0x244>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe f8d4 	bl	8001f60 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fe f8d0 	bl	8001f60 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e187      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d036      	beq.n	8003e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCC_OscConfig+0x248>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe f8b4 	bl	8001f60 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fe f8b0 	bl	8001f60 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e167      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x240>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x200>
 8003e1a:	e01b      	b.n	8003e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_OscConfig+0x248>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fe f89d 	bl	8001f60 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	e00e      	b.n	8003e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fe f899 	bl	8001f60 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d907      	bls.n	8003e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e150      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	42470000 	.word	0x42470000
 8003e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ea      	bne.n	8003e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8097 	beq.w	8003f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b7a      	ldr	r3, [pc, #488]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b77      	ldr	r3, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0x474>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9e:	4b74      	ldr	r3, [pc, #464]	; (8004070 <HAL_RCC_OscConfig+0x474>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a73      	ldr	r2, [pc, #460]	; (8004070 <HAL_RCC_OscConfig+0x474>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f859 	bl	8001f60 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fe f855 	bl	8001f60 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e10c      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <HAL_RCC_OscConfig+0x474>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2ea>
 8003ed8:	4b64      	ldr	r3, [pc, #400]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a63      	ldr	r2, [pc, #396]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e01c      	b.n	8003f20 <HAL_RCC_OscConfig+0x324>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x30c>
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a5e      	ldr	r2, [pc, #376]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a5b      	ldr	r2, [pc, #364]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0x324>
 8003f08:	4b58      	ldr	r3, [pc, #352]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a57      	ldr	r2, [pc, #348]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	4b55      	ldr	r3, [pc, #340]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a54      	ldr	r2, [pc, #336]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f1a:	f023 0304 	bic.w	r3, r3, #4
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fe f81a 	bl	8001f60 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fe f816 	bl	8001f60 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0cb      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f46:	4b49      	ldr	r3, [pc, #292]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ee      	beq.n	8003f30 <HAL_RCC_OscConfig+0x334>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f54:	f7fe f804 	bl	8001f60 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fe f800 	bl	8001f60 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0b5      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f72:	4b3e      	ldr	r3, [pc, #248]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1ee      	bne.n	8003f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d105      	bne.n	8003f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	4a38      	ldr	r2, [pc, #224]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a1 	beq.w	80040dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f9a:	4b34      	ldr	r3, [pc, #208]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d05c      	beq.n	8004060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d141      	bne.n	8004032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b31      	ldr	r3, [pc, #196]	; (8004074 <HAL_RCC_OscConfig+0x478>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd ffd4 	bl	8001f60 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd ffd0 	bl	8001f60 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e087      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	019b      	lsls	r3, r3, #6
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	491b      	ldr	r1, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_RCC_OscConfig+0x478>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fd ffa9 	bl	8001f60 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fd ffa5 	bl	8001f60 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e05c      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x416>
 8004030:	e054      	b.n	80040dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_RCC_OscConfig+0x478>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd ff92 	bl	8001f60 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd ff8e 	bl	8001f60 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e045      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_OscConfig+0x470>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x444>
 800405e:	e03d      	b.n	80040dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e038      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
 800406c:	40023800 	.word	0x40023800
 8004070:	40007000 	.word	0x40007000
 8004074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_RCC_OscConfig+0x4ec>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d028      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d121      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d11a      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	3b01      	subs	r3, #1
 80040c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800

080040ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0cc      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004100:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d90c      	bls.n	8004128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d044      	beq.n	800420c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d119      	bne.n	80041ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e06f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ba:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e067      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ca:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 0203 	bic.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4934      	ldr	r1, [pc, #208]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041dc:	f7fd fec0 	bl	8001f60 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e4:	f7fd febc 	bl	8001f60 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e04f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 020c 	and.w	r2, r3, #12
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	429a      	cmp	r2, r3
 800420a:	d1eb      	bne.n	80041e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d20c      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fd4e 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	080070c0 	.word	0x080070c0
 80042b0:	20000010 	.word	0x20000010
 80042b4:	20000014 	.word	0x20000014

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b094      	sub	sp, #80	; 0x50
 80042be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	647b      	str	r3, [r7, #68]	; 0x44
 80042c4:	2300      	movs	r3, #0
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	2300      	movs	r3, #0
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d0:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d00d      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x40>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	f200 80e1 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x34>
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ea:	e0db      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80042ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042f0:	e0db      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f6:	e0d8      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f8:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004302:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d063      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	2200      	movs	r2, #0
 8004316:	63bb      	str	r3, [r7, #56]	; 0x38
 8004318:	63fa      	str	r2, [r7, #60]	; 0x3c
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4621      	mov	r1, r4
 8004344:	1a51      	subs	r1, r2, r1
 8004346:	6139      	str	r1, [r7, #16]
 8004348:	4629      	mov	r1, r5
 800434a:	eb63 0301 	sbc.w	r3, r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004366:	4651      	mov	r1, sl
 8004368:	018a      	lsls	r2, r1, #6
 800436a:	4651      	mov	r1, sl
 800436c:	ebb2 0801 	subs.w	r8, r2, r1
 8004370:	4659      	mov	r1, fp
 8004372:	eb63 0901 	sbc.w	r9, r3, r1
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	4623      	mov	r3, r4
 8004390:	eb18 0303 	adds.w	r3, r8, r3
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	462b      	mov	r3, r5
 8004398:	eb49 0303 	adc.w	r3, r9, r3
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043aa:	4629      	mov	r1, r5
 80043ac:	024b      	lsls	r3, r1, #9
 80043ae:	4621      	mov	r1, r4
 80043b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b4:	4621      	mov	r1, r4
 80043b6:	024a      	lsls	r2, r1, #9
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043be:	2200      	movs	r2, #0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c8:	f7fb ff0a 	bl	80001e0 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	e058      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	4611      	mov	r1, r2
 80043e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	0159      	lsls	r1, r3, #5
 80043fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004402:	0150      	lsls	r0, r2, #5
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4641      	mov	r1, r8
 800440a:	ebb2 0a01 	subs.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb63 0b01 	sbc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004428:	ebb2 040a 	subs.w	r4, r2, sl
 800442c:	eb63 050b 	sbc.w	r5, r3, fp
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	00eb      	lsls	r3, r5, #3
 800443a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443e:	00e2      	lsls	r2, r4, #3
 8004440:	4614      	mov	r4, r2
 8004442:	461d      	mov	r5, r3
 8004444:	4643      	mov	r3, r8
 8004446:	18e3      	adds	r3, r4, r3
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	464b      	mov	r3, r9
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445e:	4629      	mov	r1, r5
 8004460:	028b      	lsls	r3, r1, #10
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004468:	4621      	mov	r1, r4
 800446a:	028a      	lsls	r2, r1, #10
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	2200      	movs	r2, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	61fa      	str	r2, [r7, #28]
 8004478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447c:	f7fb feb0 	bl	80001e0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3750      	adds	r7, #80	; 0x50
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	007a1200 	.word	0x007a1200

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000010 	.word	0x20000010

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff0 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	080070d0 	.word	0x080070d0

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffdc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	080070d0 	.word	0x080070d0

0800452c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	220f      	movs	r2, #15
 800453a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_RCC_GetClockConfig+0x60>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0207 	and.w	r2, r3, #7
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	40023c00 	.word	0x40023c00

08004590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e041      	b.n	8004626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fb4c 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f000 fc3e 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e03c      	b.n	80046c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start+0xa0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_TIM_Base_Start+0x5c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d013      	beq.n	800468c <HAL_TIM_Base_Start+0x5c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_TIM_Base_Start+0xa4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_Base_Start+0x5c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_TIM_Base_Start+0xa8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_TIM_Base_Start+0x5c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIM_Base_Start+0xac>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_Base_Start+0x5c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_TIM_Base_Start+0xb0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d111      	bne.n	80046b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d010      	beq.n	80046c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	e007      	b.n	80046c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e044      	b.n	8004786 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_TIM_Base_Start_IT+0xb0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d018      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x6c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d013      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x6c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <HAL_TIM_Base_Start_IT+0xb4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00e      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x6c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_TIM_Base_Start_IT+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x6c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x6c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d111      	bne.n	8004774 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b06      	cmp	r3, #6
 8004760:	d010      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004772:	e007      	b.n	8004784 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e041      	b.n	800483e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fa20 	bl	8001c14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fb32 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_TIM_OC_Start+0x24>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e022      	b.n	80048b2 <HAL_TIM_OC_Start+0x6a>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b04      	cmp	r3, #4
 8004870:	d109      	bne.n	8004886 <HAL_TIM_OC_Start+0x3e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e015      	b.n	80048b2 <HAL_TIM_OC_Start+0x6a>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d109      	bne.n	80048a0 <HAL_TIM_OC_Start+0x58>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e008      	b.n	80048b2 <HAL_TIM_OC_Start+0x6a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e068      	b.n	800498c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <HAL_TIM_OC_Start+0x82>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c8:	e013      	b.n	80048f2 <HAL_TIM_OC_Start+0xaa>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d104      	bne.n	80048da <HAL_TIM_OC_Start+0x92>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	e00b      	b.n	80048f2 <HAL_TIM_OC_Start+0xaa>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d104      	bne.n	80048ea <HAL_TIM_OC_Start+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e8:	e003      	b.n	80048f2 <HAL_TIM_OC_Start+0xaa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd4e 	bl	800539c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <HAL_TIM_OC_Start+0x14c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d107      	bne.n	800491a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_TIM_OC_Start+0x14c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d018      	beq.n	8004956 <HAL_TIM_OC_Start+0x10e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d013      	beq.n	8004956 <HAL_TIM_OC_Start+0x10e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a19      	ldr	r2, [pc, #100]	; (8004998 <HAL_TIM_OC_Start+0x150>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_TIM_OC_Start+0x10e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <HAL_TIM_OC_Start+0x154>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_TIM_OC_Start+0x10e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <HAL_TIM_OC_Start+0x158>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIM_OC_Start+0x10e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <HAL_TIM_OC_Start+0x15c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d010      	beq.n	800498a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	e007      	b.n	800498a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa11 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa03 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa14 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9e7 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9d9 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9ea 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9bd 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9af 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9c0 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f993 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f985 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f996 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fc98 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fcc0 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f95b 	bl	8004e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0220 	mvn.w	r2, #32
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fc8a 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e048      	b.n	8004c68 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d839      	bhi.n	8004c58 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <HAL_TIM_OC_ConfigChannel+0x34>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c59 	.word	0x08004c59
 8004bf4:	08004c59 	.word	0x08004c59
 8004bf8:	08004c59 	.word	0x08004c59
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c59 	.word	0x08004c59
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004c59 	.word	0x08004c59
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c59 	.word	0x08004c59
 8004c18:	08004c59 	.word	0x08004c59
 8004c1c:	08004c4b 	.word	0x08004c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f992 	bl	8004f50 <TIM_OC1_SetConfig>
      break;
 8004c2c:	e017      	b.n	8004c5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f9f1 	bl	800501c <TIM_OC2_SetConfig>
      break;
 8004c3a:	e010      	b.n	8004c5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fa56 	bl	80050f4 <TIM_OC3_SetConfig>
      break;
 8004c48:	e009      	b.n	8004c5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fab9 	bl	80051c8 <TIM_OC4_SetConfig>
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_ConfigClockSource+0x1c>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0b4      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x186>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d03e      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0xd4>
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	f200 8087 	bhi.w	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	f000 8086 	beq.w	8004de2 <HAL_TIM_ConfigClockSource+0x172>
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d87f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b70      	cmp	r3, #112	; 0x70
 8004cde:	d01a      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xa6>
 8004ce0:	2b70      	cmp	r3, #112	; 0x70
 8004ce2:	d87b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d050      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x11a>
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d877      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b50      	cmp	r3, #80	; 0x50
 8004cee:	d03c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0xfa>
 8004cf0:	2b50      	cmp	r3, #80	; 0x50
 8004cf2:	d873      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d058      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x13a>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d86f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d064      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d00:	2b30      	cmp	r3, #48	; 0x30
 8004d02:	d86b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d060      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d867      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d05a      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	e062      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f000 fb19 	bl	800535c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]
      break;
 8004d42:	e04f      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	6899      	ldr	r1, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f000 fb02 	bl	800535c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d66:	609a      	str	r2, [r3, #8]
      break;
 8004d68:	e03c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 fa76 	bl	8005268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2150      	movs	r1, #80	; 0x50
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 facf 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004d88:	e02c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fa95 	bl	80052c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2160      	movs	r1, #96	; 0x60
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fabf 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e01c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fa56 	bl	8005268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2140      	movs	r1, #64	; 0x40
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 faaf 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e00c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f000 faa6 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004dda:	e003      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e000      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <TIM_Base_SetConfig+0xe4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00f      	beq.n	8004e88 <TIM_Base_SetConfig+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00b      	beq.n	8004e88 <TIM_Base_SetConfig+0x38>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a31      	ldr	r2, [pc, #196]	; (8004f38 <TIM_Base_SetConfig+0xe8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0x38>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <TIM_Base_SetConfig+0xec>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x38>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0xf0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <TIM_Base_SetConfig+0xe4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01b      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d017      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <TIM_Base_SetConfig+0xe8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <TIM_Base_SetConfig+0xec>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <TIM_Base_SetConfig+0xf0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <TIM_Base_SetConfig+0xf4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <TIM_Base_SetConfig+0xf8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <TIM_Base_SetConfig+0xfc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <TIM_Base_SetConfig+0xe4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0302 	bic.w	r3, r3, #2
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40010000 	.word	0x40010000

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <TIM_OC2_SetConfig+0xd4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <TIM_OC2_SetConfig+0xd4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000

080050f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <TIM_OC3_SetConfig+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10d      	bne.n	800516e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <TIM_OC3_SetConfig+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d113      	bne.n	800519e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000

080051c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a10      	ldr	r2, [pc, #64]	; (8005264 <TIM_OC4_SetConfig+0x9c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d109      	bne.n	800523c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000

08005268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0201 	bic.w	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 030a 	bic.w	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	f043 0307 	orr.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	021a      	lsls	r2, r3, #8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	431a      	orrs	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2201      	movs	r2, #1
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	431a      	orrs	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e050      	b.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d013      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40014000 	.word	0x40014000

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 0208 	add.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f103 0208 	add.w	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0208 	add.w	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d103      	bne.n	80055ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e00c      	b.n	80055c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3308      	adds	r3, #8
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e002      	b.n	80055bc <vListInsert+0x2e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d2f6      	bcs.n	80055b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d103      	bne.n	8005634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af04      	add	r7, sp, #16
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xTaskCreateStatic+0x46>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800569a:	2354      	movs	r3, #84	; 0x54
 800569c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b54      	cmp	r3, #84	; 0x54
 80056a2:	d00a      	beq.n	80056ba <xTaskCreateStatic+0x66>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61bb      	str	r3, [r7, #24]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01e      	beq.n	8005700 <xTaskCreateStatic+0xac>
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01b      	beq.n	8005700 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056da:	2300      	movs	r3, #0
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	f107 0314 	add.w	r3, r7, #20
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f850 	bl	8005798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056fa:	f000 f8d5 	bl	80058a8 <prvAddNewTaskToReadyList>
 80056fe:	e001      	b.n	8005704 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005704:	697b      	ldr	r3, [r7, #20]
	}
 8005706:	4618      	mov	r0, r3
 8005708:	3728      	adds	r7, #40	; 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800570e:	b580      	push	{r7, lr}
 8005710:	b08c      	sub	sp, #48	; 0x30
 8005712:	af04      	add	r7, sp, #16
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 ff58 	bl	80065d8 <pvPortMalloc>
 8005728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005730:	2054      	movs	r0, #84	; 0x54
 8005732:	f000 ff51 	bl	80065d8 <pvPortMalloc>
 8005736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
 8005744:	e005      	b.n	8005752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005746:	6978      	ldr	r0, [r7, #20]
 8005748:	f001 f812 	bl	8006770 <vPortFree>
 800574c:	e001      	b.n	8005752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	2300      	movs	r3, #0
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f80e 	bl	8005798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800577c:	69f8      	ldr	r0, [r7, #28]
 800577e:	f000 f893 	bl	80058a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005782:	2301      	movs	r3, #1
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e002      	b.n	800578e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800578e:	69bb      	ldr	r3, [r7, #24]
	}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057b0:	3b01      	subs	r3, #1
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	617b      	str	r3, [r7, #20]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01f      	beq.n	8005826 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e012      	b.n	8005812 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	7819      	ldrb	r1, [r3, #0]
 80057f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	3334      	adds	r3, #52	; 0x34
 80057fc:	460a      	mov	r2, r1
 80057fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b0f      	cmp	r3, #15
 8005816:	d9e9      	bls.n	80057ec <prvInitialiseNewTask+0x54>
 8005818:	e000      	b.n	800581c <prvInitialiseNewTask+0x84>
			{
				break;
 800581a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005824:	e003      	b.n	800582e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2b06      	cmp	r3, #6
 8005832:	d901      	bls.n	8005838 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005834:	2306      	movs	r3, #6
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005842:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fe6c 	bl	800552c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	3318      	adds	r3, #24
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fe67 	bl	800552c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f1c3 0207 	rsb	r2, r3, #7
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005872:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2200      	movs	r2, #0
 8005878:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	69b8      	ldr	r0, [r7, #24]
 8005888:	f000 fc96 	bl	80061b8 <pxPortInitialiseStack>
 800588c:	4602      	mov	r2, r0
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800589e:	bf00      	nop
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058b0:	f000 fdb0 	bl	8006414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <prvAddNewTaskToReadyList+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a29      	ldr	r2, [pc, #164]	; (8005960 <prvAddNewTaskToReadyList+0xb8>)
 80058bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <prvAddNewTaskToReadyList+0xbc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058c6:	4a27      	ldr	r2, [pc, #156]	; (8005964 <prvAddNewTaskToReadyList+0xbc>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <prvAddNewTaskToReadyList+0xb8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d110      	bne.n	80058f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058d4:	f000 fb4c 	bl	8005f70 <prvInitialiseTaskLists>
 80058d8:	e00d      	b.n	80058f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058da:	4b23      	ldr	r3, [pc, #140]	; (8005968 <prvAddNewTaskToReadyList+0xc0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <prvAddNewTaskToReadyList+0xbc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d802      	bhi.n	80058f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <prvAddNewTaskToReadyList+0xbc>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <prvAddNewTaskToReadyList+0xc4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3301      	adds	r3, #1
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <prvAddNewTaskToReadyList+0xc4>)
 80058fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	2201      	movs	r2, #1
 8005906:	409a      	lsls	r2, r3
 8005908:	4b19      	ldr	r3, [pc, #100]	; (8005970 <prvAddNewTaskToReadyList+0xc8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4313      	orrs	r3, r2
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <prvAddNewTaskToReadyList+0xc8>)
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4a15      	ldr	r2, [pc, #84]	; (8005974 <prvAddNewTaskToReadyList+0xcc>)
 8005920:	441a      	add	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f7ff fe0c 	bl	8005546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800592e:	f000 fda1 	bl	8006474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <prvAddNewTaskToReadyList+0xc0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <prvAddNewTaskToReadyList+0xbc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	429a      	cmp	r2, r3
 8005946:	d207      	bcs.n	8005958 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <prvAddNewTaskToReadyList+0xd0>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200015c8 	.word	0x200015c8
 8005964:	200014c8 	.word	0x200014c8
 8005968:	200015d4 	.word	0x200015d4
 800596c:	200015e4 	.word	0x200015e4
 8005970:	200015d0 	.word	0x200015d0
 8005974:	200014cc 	.word	0x200014cc
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005984:	f000 fd46 	bl	8006414 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <vTaskDelete+0x18>
 800598e:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <vTaskDelete+0xf8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	e000      	b.n	8005996 <vTaskDelete+0x1a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fe2f 	bl	8005600 <uxListRemove>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d115      	bne.n	80059d4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4932      	ldr	r1, [pc, #200]	; (8005a78 <vTaskDelete+0xfc>)
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <vTaskDelete+0x58>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	2201      	movs	r2, #1
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43da      	mvns	r2, r3
 80059ca:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <vTaskDelete+0x100>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4013      	ands	r3, r2
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <vTaskDelete+0x100>)
 80059d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3318      	adds	r3, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fe0d 	bl	8005600 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <vTaskDelete+0x104>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	4a24      	ldr	r2, [pc, #144]	; (8005a80 <vTaskDelete+0x104>)
 80059ee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80059f0:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <vTaskDelete+0xf8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d10b      	bne.n	8005a12 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4820      	ldr	r0, [pc, #128]	; (8005a84 <vTaskDelete+0x108>)
 8005a02:	f7ff fda0 	bl	8005546 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <vTaskDelete+0x10c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <vTaskDelete+0x10c>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e009      	b.n	8005a26 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <vTaskDelete+0x110>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <vTaskDelete+0x110>)
 8005a1a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb15 	bl	800604c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005a22:	f000 fb43 	bl	80060ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005a26:	f000 fd25 	bl	8006474 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005a2a:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <vTaskDelete+0x114>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01b      	beq.n	8005a6a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <vTaskDelete+0xf8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d116      	bne.n	8005a6a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <vTaskDelete+0x118>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <vTaskDelete+0xde>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60bb      	str	r3, [r7, #8]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <vTaskDelete+0x11c>)
 8005a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	200014c8 	.word	0x200014c8
 8005a78:	200014cc 	.word	0x200014cc
 8005a7c:	200015d0 	.word	0x200015d0
 8005a80:	200015e4 	.word	0x200015e4
 8005a84:	2000159c 	.word	0x2000159c
 8005a88:	200015b0 	.word	0x200015b0
 8005a8c:	200015c8 	.word	0x200015c8
 8005a90:	200015d4 	.word	0x200015d4
 8005a94:	200015f0 	.word	0x200015f0
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d017      	beq.n	8005ade <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <vTaskDelay+0x60>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <vTaskDelay+0x30>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005acc:	f000 f87a 	bl	8005bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fb0a 	bl	80060ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ad8:	f000 f882 	bl	8005be0 <xTaskResumeAll>
 8005adc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <vTaskDelay+0x64>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200015f0 	.word	0x200015f0
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b12:	463a      	mov	r2, r7
 8005b14:	1d39      	adds	r1, r7, #4
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fa fce2 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	9202      	str	r2, [sp, #8]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	460a      	mov	r2, r1
 8005b32:	491e      	ldr	r1, [pc, #120]	; (8005bac <vTaskStartScheduler+0xa8>)
 8005b34:	481e      	ldr	r0, [pc, #120]	; (8005bb0 <vTaskStartScheduler+0xac>)
 8005b36:	f7ff fd8d 	bl	8005654 <xTaskCreateStatic>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <vTaskStartScheduler+0xb0>)
 8005b3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <vTaskStartScheduler+0xb0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e001      	b.n	8005b52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d116      	bne.n	8005b86 <vTaskStartScheduler+0x82>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	613b      	str	r3, [r7, #16]
}
 8005b6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <vTaskStartScheduler+0xb4>)
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <vTaskStartScheduler+0xb8>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <vTaskStartScheduler+0xbc>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b80:	f000 fba6 	bl	80062d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b84:	e00e      	b.n	8005ba4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskStartScheduler+0x9e>
}
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	08006ac8 	.word	0x08006ac8
 8005bb0:	08005f41 	.word	0x08005f41
 8005bb4:	200015ec 	.word	0x200015ec
 8005bb8:	200015e8 	.word	0x200015e8
 8005bbc:	200015d4 	.word	0x200015d4
 8005bc0:	200015cc 	.word	0x200015cc

08005bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <vTaskSuspendAll+0x18>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	4a03      	ldr	r2, [pc, #12]	; (8005bdc <vTaskSuspendAll+0x18>)
 8005bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	200015f0 	.word	0x200015f0

08005be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bee:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <xTaskResumeAll+0x114>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <xTaskResumeAll+0x2c>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	603b      	str	r3, [r7, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c0c:	f000 fc02 	bl	8006414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c10:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <xTaskResumeAll+0x114>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4a37      	ldr	r2, [pc, #220]	; (8005cf4 <xTaskResumeAll+0x114>)
 8005c18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <xTaskResumeAll+0x114>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d161      	bne.n	8005ce6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c22:	4b35      	ldr	r3, [pc, #212]	; (8005cf8 <xTaskResumeAll+0x118>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d05d      	beq.n	8005ce6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2a:	e02e      	b.n	8005c8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c2c:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <xTaskResumeAll+0x11c>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3318      	adds	r3, #24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fce1 	bl	8005600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fcdc 	bl	8005600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <xTaskResumeAll+0x120>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <xTaskResumeAll+0x120>)
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4a27      	ldr	r2, [pc, #156]	; (8005d04 <xTaskResumeAll+0x124>)
 8005c68:	441a      	add	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f7ff fc68 	bl	8005546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <xTaskResumeAll+0x128>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <xTaskResumeAll+0x12c>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <xTaskResumeAll+0x11c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1cc      	bne.n	8005c2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c98:	f000 fa08 	bl	80060ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <xTaskResumeAll+0x130>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d010      	beq.n	8005cca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ca8:	f000 f836 	bl	8005d18 <xTaskIncrementTick>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <xTaskResumeAll+0x12c>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f1      	bne.n	8005ca8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <xTaskResumeAll+0x130>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <xTaskResumeAll+0x12c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <xTaskResumeAll+0x134>)
 8005cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ce6:	f000 fbc5 	bl	8006474 <vPortExitCritical>

	return xAlreadyYielded;
 8005cea:	68bb      	ldr	r3, [r7, #8]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	200015f0 	.word	0x200015f0
 8005cf8:	200015c8 	.word	0x200015c8
 8005cfc:	20001588 	.word	0x20001588
 8005d00:	200015d0 	.word	0x200015d0
 8005d04:	200014cc 	.word	0x200014cc
 8005d08:	200014c8 	.word	0x200014c8
 8005d0c:	200015dc 	.word	0x200015dc
 8005d10:	200015d8 	.word	0x200015d8
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d22:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <xTaskIncrementTick+0x144>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 808e 	bne.w	8005e48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d2c:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <xTaskIncrementTick+0x148>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d34:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <xTaskIncrementTick+0x148>)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d120      	bne.n	8005d82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d40:	4b48      	ldr	r3, [pc, #288]	; (8005e64 <xTaskIncrementTick+0x14c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <xTaskIncrementTick+0x46>
 8005d60:	4b40      	ldr	r3, [pc, #256]	; (8005e64 <xTaskIncrementTick+0x14c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <xTaskIncrementTick+0x150>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3e      	ldr	r2, [pc, #248]	; (8005e64 <xTaskIncrementTick+0x14c>)
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	; (8005e68 <xTaskIncrementTick+0x150>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <xTaskIncrementTick+0x154>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	4a3c      	ldr	r2, [pc, #240]	; (8005e6c <xTaskIncrementTick+0x154>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	f000 f995 	bl	80060ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d82:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <xTaskIncrementTick+0x158>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d348      	bcc.n	8005e1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d8c:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <xTaskIncrementTick+0x14c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <xTaskIncrementTick+0x158>)
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	601a      	str	r2, [r3, #0]
					break;
 8005d9e:	e03e      	b.n	8005e1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da0:	4b30      	ldr	r3, [pc, #192]	; (8005e64 <xTaskIncrementTick+0x14c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d203      	bcs.n	8005dc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005db8:	4a2d      	ldr	r2, [pc, #180]	; (8005e70 <xTaskIncrementTick+0x158>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dbe:	e02e      	b.n	8005e1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fc1b 	bl	8005600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fc12 	bl	8005600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	2201      	movs	r2, #1
 8005de2:	409a      	lsls	r2, r3
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <xTaskIncrementTick+0x15c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <xTaskIncrementTick+0x15c>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <xTaskIncrementTick+0x160>)
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7ff fb9e 	bl	8005546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <xTaskIncrementTick+0x164>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d3b9      	bcc.n	8005d8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1c:	e7b6      	b.n	8005d8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e1e:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <xTaskIncrementTick+0x164>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4914      	ldr	r1, [pc, #80]	; (8005e78 <xTaskIncrementTick+0x160>)
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d901      	bls.n	8005e3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <xTaskIncrementTick+0x168>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e42:	2301      	movs	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e004      	b.n	8005e52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <xTaskIncrementTick+0x16c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a0d      	ldr	r2, [pc, #52]	; (8005e84 <xTaskIncrementTick+0x16c>)
 8005e50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e52:	697b      	ldr	r3, [r7, #20]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200015f0 	.word	0x200015f0
 8005e60:	200015cc 	.word	0x200015cc
 8005e64:	20001580 	.word	0x20001580
 8005e68:	20001584 	.word	0x20001584
 8005e6c:	200015e0 	.word	0x200015e0
 8005e70:	200015e8 	.word	0x200015e8
 8005e74:	200015d0 	.word	0x200015d0
 8005e78:	200014cc 	.word	0x200014cc
 8005e7c:	200014c8 	.word	0x200014c8
 8005e80:	200015dc 	.word	0x200015dc
 8005e84:	200015d8 	.word	0x200015d8

08005e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e8e:	4b27      	ldr	r3, [pc, #156]	; (8005f2c <vTaskSwitchContext+0xa4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e96:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <vTaskSwitchContext+0xa8>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e9c:	e03f      	b.n	8005f1e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <vTaskSwitchContext+0xa8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea4:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <vTaskSwitchContext+0xac>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	fab3 f383 	clz	r3, r3
 8005eb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	f1c3 031f 	rsb	r3, r3, #31
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	491f      	ldr	r1, [pc, #124]	; (8005f38 <vTaskSwitchContext+0xb0>)
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <vTaskSwitchContext+0x5a>
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <vTaskSwitchContext+0xb0>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3308      	adds	r3, #8
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d104      	bne.n	8005f14 <vTaskSwitchContext+0x8c>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <vTaskSwitchContext+0xb4>)
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	200015f0 	.word	0x200015f0
 8005f30:	200015dc 	.word	0x200015dc
 8005f34:	200015d0 	.word	0x200015d0
 8005f38:	200014cc 	.word	0x200014cc
 8005f3c:	200014c8 	.word	0x200014c8

08005f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f48:	f000 f852 	bl	8005ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <prvIdleTask+0x28>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d9f9      	bls.n	8005f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <prvIdleTask+0x2c>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f64:	e7f0      	b.n	8005f48 <prvIdleTask+0x8>
 8005f66:	bf00      	nop
 8005f68:	200014cc 	.word	0x200014cc
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e00c      	b.n	8005f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <prvInitialiseTaskLists+0x60>)
 8005f88:	4413      	add	r3, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff faae 	bl	80054ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3301      	adds	r3, #1
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d9ef      	bls.n	8005f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f9c:	480d      	ldr	r0, [pc, #52]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005f9e:	f7ff faa5 	bl	80054ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fa2:	480d      	ldr	r0, [pc, #52]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fa4:	f7ff faa2 	bl	80054ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <prvInitialiseTaskLists+0x6c>)
 8005faa:	f7ff fa9f 	bl	80054ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fae:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <prvInitialiseTaskLists+0x70>)
 8005fb0:	f7ff fa9c 	bl	80054ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fb4:	480b      	ldr	r0, [pc, #44]	; (8005fe4 <prvInitialiseTaskLists+0x74>)
 8005fb6:	f7ff fa99 	bl	80054ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <prvInitialiseTaskLists+0x78>)
 8005fbc:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <prvInitialiseTaskLists+0x7c>)
 8005fc2:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200014cc 	.word	0x200014cc
 8005fd4:	20001558 	.word	0x20001558
 8005fd8:	2000156c 	.word	0x2000156c
 8005fdc:	20001588 	.word	0x20001588
 8005fe0:	2000159c 	.word	0x2000159c
 8005fe4:	200015b4 	.word	0x200015b4
 8005fe8:	20001580 	.word	0x20001580
 8005fec:	20001584 	.word	0x20001584

08005ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff6:	e019      	b.n	800602c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ff8:	f000 fa0c 	bl	8006414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <prvCheckTasksWaitingTermination+0x50>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff faf9 	bl	8005600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 8006016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <prvCheckTasksWaitingTermination+0x58>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <prvCheckTasksWaitingTermination+0x58>)
 8006020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006022:	f000 fa27 	bl	8006474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f810 	bl	800604c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <prvCheckTasksWaitingTermination+0x58>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e1      	bne.n	8005ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2000159c 	.word	0x2000159c
 8006044:	200015c8 	.word	0x200015c8
 8006048:	200015b0 	.word	0x200015b0

0800604c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605a:	2b00      	cmp	r3, #0
 800605c:	d108      	bne.n	8006070 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fb84 	bl	8006770 <vPortFree>
				vPortFree( pxTCB );
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb81 	bl	8006770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800606e:	e018      	b.n	80060a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006076:	2b01      	cmp	r3, #1
 8006078:	d103      	bne.n	8006082 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb78 	bl	8006770 <vPortFree>
	}
 8006080:	e00f      	b.n	80060a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006088:	2b02      	cmp	r3, #2
 800608a:	d00a      	beq.n	80060a2 <prvDeleteTCB+0x56>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60fb      	str	r3, [r7, #12]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <prvDeleteTCB+0x54>
	}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <prvResetNextTaskUnblockTime+0x38>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <prvResetNextTaskUnblockTime+0x3c>)
 80060be:	f04f 32ff 	mov.w	r2, #4294967295
 80060c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060c4:	e008      	b.n	80060d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c6:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <prvResetNextTaskUnblockTime+0x38>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <prvResetNextTaskUnblockTime+0x3c>)
 80060d6:	6013      	str	r3, [r2, #0]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20001580 	.word	0x20001580
 80060e8:	200015e8 	.word	0x200015e8

080060ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060f6:	4b29      	ldr	r3, [pc, #164]	; (800619c <prvAddCurrentTaskToDelayedList+0xb0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060fc:	4b28      	ldr	r3, [pc, #160]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fa7c 	bl	8005600 <uxListRemove>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2201      	movs	r2, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43da      	mvns	r2, r3
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d10a      	bne.n	8006144 <prvAddCurrentTaskToDelayedList+0x58>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	481a      	ldr	r0, [pc, #104]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800613e:	f7ff fa02 	bl	8005546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006142:	e026      	b.n	8006192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d209      	bcs.n	8006170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3304      	adds	r3, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f7ff fa10 	bl	800558e <vListInsert>
}
 800616e:	e010      	b.n	8006192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3304      	adds	r3, #4
 800617a:	4619      	mov	r1, r3
 800617c:	4610      	mov	r0, r2
 800617e:	f7ff fa06 	bl	800558e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d202      	bcs.n	8006192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6013      	str	r3, [r2, #0]
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200015cc 	.word	0x200015cc
 80061a0:	200014c8 	.word	0x200014c8
 80061a4:	200015d0 	.word	0x200015d0
 80061a8:	200015b4 	.word	0x200015b4
 80061ac:	20001584 	.word	0x20001584
 80061b0:	20001580 	.word	0x20001580
 80061b4:	200015e8 	.word	0x200015e8

080061b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b04      	subs	r3, #4
 80061c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3b04      	subs	r3, #4
 80061d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b04      	subs	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e8:	4a0c      	ldr	r2, [pc, #48]	; (800621c <pxPortInitialiseStack+0x64>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b14      	subs	r3, #20
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f06f 0202 	mvn.w	r2, #2
 8006206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b20      	subs	r3, #32
 800620c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	08006221 	.word	0x08006221

08006220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <prvTaskExitError+0x54>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d00a      	beq.n	800624a <prvTaskExitError+0x2a>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60fb      	str	r3, [r7, #12]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <prvTaskExitError+0x28>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	60bb      	str	r3, [r7, #8]
}
 800625c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800625e:	bf00      	nop
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0fc      	beq.n	8006260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	2000001c 	.word	0x2000001c
	...

08006280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <pxCurrentTCBConst2>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	f380 8809 	msr	PSP, r0
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8811 	msr	BASEPRI, r0
 800629a:	4770      	bx	lr
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst2>:
 80062a0:	200014c8 	.word	0x200014c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062a8:	4808      	ldr	r0, [pc, #32]	; (80062cc <prvPortStartFirstTask+0x24>)
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	6800      	ldr	r0, [r0, #0]
 80062ae:	f380 8808 	msr	MSP, r0
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8814 	msr	CONTROL, r0
 80062ba:	b662      	cpsie	i
 80062bc:	b661      	cpsie	f
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	df00      	svc	0
 80062c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ca:	bf00      	nop
 80062cc:	e000ed08 	.word	0xe000ed08

080062d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <xPortStartScheduler+0x120>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a46      	ldr	r2, [pc, #280]	; (80063f4 <xPortStartScheduler+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10a      	bne.n	80062f6 <xPortStartScheduler+0x26>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062f6:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <xPortStartScheduler+0x120>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <xPortStartScheduler+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10a      	bne.n	8006316 <xPortStartScheduler+0x46>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006316:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xPortStartScheduler+0x12c>)
 8006318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <xPortStartScheduler+0x130>)
 800633c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800633e:	4b31      	ldr	r3, [pc, #196]	; (8006404 <xPortStartScheduler+0x134>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006344:	e009      	b.n	800635a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006346:	4b2f      	ldr	r3, [pc, #188]	; (8006404 <xPortStartScheduler+0x134>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <xPortStartScheduler+0x134>)
 800634e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d0ef      	beq.n	8006346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <xPortStartScheduler+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	d00a      	beq.n	8006388 <xPortStartScheduler+0xb8>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60bb      	str	r3, [r7, #8]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006388:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <xPortStartScheduler+0x134>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <xPortStartScheduler+0x134>)
 8006390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xPortStartScheduler+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800639a:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <xPortStartScheduler+0x134>)
 800639c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063a6:	4b18      	ldr	r3, [pc, #96]	; (8006408 <xPortStartScheduler+0x138>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <xPortStartScheduler+0x138>)
 80063ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <xPortStartScheduler+0x138>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <xPortStartScheduler+0x138>)
 80063b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063be:	f000 f8dd 	bl	800657c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <xPortStartScheduler+0x13c>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063c8:	f000 f8fc 	bl	80065c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <xPortStartScheduler+0x140>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <xPortStartScheduler+0x140>)
 80063d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063d8:	f7ff ff66 	bl	80062a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063dc:	f7ff fd54 	bl	8005e88 <vTaskSwitchContext>
	prvTaskExitError();
 80063e0:	f7ff ff1e 	bl	8006220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	e000ed00 	.word	0xe000ed00
 80063f4:	410fc271 	.word	0x410fc271
 80063f8:	410fc270 	.word	0x410fc270
 80063fc:	e000e400 	.word	0xe000e400
 8006400:	200015f4 	.word	0x200015f4
 8006404:	200015f8 	.word	0x200015f8
 8006408:	e000ed20 	.word	0xe000ed20
 800640c:	2000001c 	.word	0x2000001c
 8006410:	e000ef34 	.word	0xe000ef34

08006414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
}
 800642c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <vPortEnterCritical+0x58>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <vPortEnterCritical+0x58>)
 8006436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <vPortEnterCritical+0x58>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10f      	bne.n	8006460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <vPortEnterCritical+0x5c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <vPortEnterCritical+0x4c>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	603b      	str	r3, [r7, #0]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortEnterCritical+0x4a>
	}
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	2000001c 	.word	0x2000001c
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <vPortExitCritical+0x50>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <vPortExitCritical+0x24>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	607b      	str	r3, [r7, #4]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <vPortExitCritical+0x50>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3b01      	subs	r3, #1
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <vPortExitCritical+0x50>)
 80064a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <vPortExitCritical+0x50>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d105      	bne.n	80064b6 <vPortExitCritical+0x42>
 80064aa:	2300      	movs	r3, #0
 80064ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	2000001c 	.word	0x2000001c
	...

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064f4:	f380 8811 	msr	BASEPRI, r0
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f7ff fcc2 	bl	8005e88 <vTaskSwitchContext>
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f380 8811 	msr	BASEPRI, r0
 800650c:	bc09      	pop	{r0, r3}
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	6808      	ldr	r0, [r1, #0]
 8006512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006516:	f01e 0f10 	tst.w	lr, #16
 800651a:	bf08      	it	eq
 800651c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006520:	f380 8809 	msr	PSP, r0
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst>:
 8006530:	200014c8 	.word	0x200014c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006552:	f7ff fbe1 	bl	8005d18 <xTaskIncrementTick>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <SysTick_Handler+0x40>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <vPortSetupTimerInterrupt+0x34>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <vPortSetupTimerInterrupt+0x38>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <vPortSetupTimerInterrupt+0x3c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <vPortSetupTimerInterrupt+0x40>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <vPortSetupTimerInterrupt+0x44>)
 800659a:	3b01      	subs	r3, #1
 800659c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <vPortSetupTimerInterrupt+0x34>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000e010 	.word	0xe000e010
 80065b4:	e000e018 	.word	0xe000e018
 80065b8:	20000010 	.word	0x20000010
 80065bc:	10624dd3 	.word	0x10624dd3
 80065c0:	e000e014 	.word	0xe000e014

080065c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065d4 <vPortEnableVFP+0x10>
 80065c8:	6801      	ldr	r1, [r0, #0]
 80065ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ce:	6001      	str	r1, [r0, #0]
 80065d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065d2:	bf00      	nop
 80065d4:	e000ed88 	.word	0xe000ed88

080065d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065e4:	f7ff faee 	bl	8005bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065e8:	4b5b      	ldr	r3, [pc, #364]	; (8006758 <pvPortMalloc+0x180>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065f0:	f000 f920 	bl	8006834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065f4:	4b59      	ldr	r3, [pc, #356]	; (800675c <pvPortMalloc+0x184>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 8093 	bne.w	8006728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01d      	beq.n	8006644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006608:	2208      	movs	r2, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	3308      	adds	r3, #8
 8006622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <pvPortMalloc+0x6c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	617b      	str	r3, [r7, #20]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d06e      	beq.n	8006728 <pvPortMalloc+0x150>
 800664a:	4b45      	ldr	r3, [pc, #276]	; (8006760 <pvPortMalloc+0x188>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d869      	bhi.n	8006728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006654:	4b43      	ldr	r3, [pc, #268]	; (8006764 <pvPortMalloc+0x18c>)
 8006656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006658:	4b42      	ldr	r3, [pc, #264]	; (8006764 <pvPortMalloc+0x18c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800665e:	e004      	b.n	800666a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <pvPortMalloc+0xa4>
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f1      	bne.n	8006660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800667c:	4b36      	ldr	r3, [pc, #216]	; (8006758 <pvPortMalloc+0x180>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	429a      	cmp	r2, r3
 8006684:	d050      	beq.n	8006728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2208      	movs	r2, #8
 800668c:	4413      	add	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2308      	movs	r3, #8
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d91f      	bls.n	80066e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <pvPortMalloc+0xf8>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	613b      	str	r3, [r7, #16]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066e2:	69b8      	ldr	r0, [r7, #24]
 80066e4:	f000 f908 	bl	80068f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <pvPortMalloc+0x188>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <pvPortMalloc+0x188>)
 80066f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066f6:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <pvPortMalloc+0x188>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <pvPortMalloc+0x190>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d203      	bcs.n	800670a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <pvPortMalloc+0x188>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a18      	ldr	r2, [pc, #96]	; (8006768 <pvPortMalloc+0x190>)
 8006708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <pvPortMalloc+0x184>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	431a      	orrs	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <pvPortMalloc+0x194>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a11      	ldr	r2, [pc, #68]	; (800676c <pvPortMalloc+0x194>)
 8006726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006728:	f7ff fa5a 	bl	8005be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <pvPortMalloc+0x174>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <pvPortMalloc+0x172>
	return pvReturn;
 800674c:	69fb      	ldr	r3, [r7, #28]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20005204 	.word	0x20005204
 800675c:	20005218 	.word	0x20005218
 8006760:	20005208 	.word	0x20005208
 8006764:	200051fc 	.word	0x200051fc
 8006768:	2000520c 	.word	0x2000520c
 800676c:	20005210 	.word	0x20005210

08006770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04d      	beq.n	800681e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006782:	2308      	movs	r3, #8
 8006784:	425b      	negs	r3, r3
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4b24      	ldr	r3, [pc, #144]	; (8006828 <vPortFree+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <vPortFree+0x44>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60fb      	str	r3, [r7, #12]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <vPortFree+0x62>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60bb      	str	r3, [r7, #8]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <vPortFree+0xb8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01e      	beq.n	800681e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11a      	bne.n	800681e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <vPortFree+0xb8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	401a      	ands	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067f8:	f7ff f9e4 	bl	8005bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <vPortFree+0xbc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4413      	add	r3, r2
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <vPortFree+0xbc>)
 8006808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	f000 f874 	bl	80068f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <vPortFree+0xc0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	4a06      	ldr	r2, [pc, #24]	; (8006830 <vPortFree+0xc0>)
 8006818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800681a:	f7ff f9e1 	bl	8005be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20005218 	.word	0x20005218
 800682c:	20005208 	.word	0x20005208
 8006830:	20005214 	.word	0x20005214

08006834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800683a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800683e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006840:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <prvHeapInit+0xac>)
 8006842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3307      	adds	r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0307 	bic.w	r3, r3, #7
 800685a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <prvHeapInit+0xac>)
 8006864:	4413      	add	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <prvHeapInit+0xb0>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <prvHeapInit+0xb0>)
 8006874:	2200      	movs	r2, #0
 8006876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006880:	2208      	movs	r2, #8
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <prvHeapInit+0xb4>)
 8006894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <prvHeapInit+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800689e:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <prvHeapInit+0xb4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	1ad2      	subs	r2, r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <prvHeapInit+0xb4>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <prvHeapInit+0xb8>)
 80068c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <prvHeapInit+0xbc>)
 80068ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <prvHeapInit+0xc0>)
 80068ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200015fc 	.word	0x200015fc
 80068e4:	200051fc 	.word	0x200051fc
 80068e8:	20005204 	.word	0x20005204
 80068ec:	2000520c 	.word	0x2000520c
 80068f0:	20005208 	.word	0x20005208
 80068f4:	20005218 	.word	0x20005218

080068f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006900:	4b28      	ldr	r3, [pc, #160]	; (80069a4 <prvInsertBlockIntoFreeList+0xac>)
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e002      	b.n	800690c <prvInsertBlockIntoFreeList+0x14>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d8f7      	bhi.n	8006906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4413      	add	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d108      	bne.n	800693a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	441a      	add	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d118      	bne.n	8006980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d00d      	beq.n	8006976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	441a      	add	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e008      	b.n	8006988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e003      	b.n	8006988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d002      	beq.n	8006996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	200051fc 	.word	0x200051fc
 80069a8:	20005204 	.word	0x20005204

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 f820 	bl	8006a04 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	080070e8 	.word	0x080070e8
 80069e8:	080070e8 	.word	0x080070e8
 80069ec:	080070e8 	.word	0x080070e8
 80069f0:	080070ec 	.word	0x080070ec

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <_init>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr

08006a10 <_fini>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr
