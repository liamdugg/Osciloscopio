
adc_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800ead8  0800ead8  0001ead8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f230  0800f230  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f238  0800f238  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f238  0800f238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800f240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060b0  2000024c  0800f48c  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200062fc  0800f48c  000262fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edf9  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a4b  00000000  00000000  0003f075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00043ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00045580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d293  00000000  00000000  00046e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002174b  00000000  00000000  000640cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6e21  00000000  00000000  00085816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c4  00000000  00000000  0012c688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eac0 	.word	0x0800eac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	0800eac0 	.word	0x0800eac0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <vApplicationGetIdleTaskMemory+0x30>)
 8000eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000268 	.word	0x20000268
 8000ecc:	200002bc 	.word	0x200002bc

08000ed0 <rms_to_char>:
		texto[pos] = digito + '0';
		pos--;
	}
}
*/
void rms_to_char(float rms, char rms_char[]){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eda:	6038      	str	r0, [r7, #0]
	/*RMS = RX.XX/R.XXX*/
	int entero = (int)rms;							// 1,648 --> entero = 1
 8000edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee4:	ee17 3a90 	vmov	r3, s15
 8000ee8:	61fb      	str	r3, [r7, #28]
	int decimal = (int)((rms - entero)*1000);		// 1,648 --> decimal = 648
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80010c8 <rms_to_char+0x1f8>
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	61bb      	str	r3, [r7, #24]

	int decimal_3 = decimal % 10;					// 1,648 --> dec3 = 8;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <rms_to_char+0x1fc>)
 8000f12:	fb83 1302 	smull	r1, r3, r3, r2
 8000f16:	1099      	asrs	r1, r3, #2
 8000f18:	17d3      	asrs	r3, r2, #31
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
	int decimal_2 = (decimal/10) % 10;				// 1,648 --> dec2 = 4;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	4a68      	ldr	r2, [pc, #416]	; (80010cc <rms_to_char+0x1fc>)
 8000f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f30:	1092      	asrs	r2, r2, #2
 8000f32:	17db      	asrs	r3, r3, #31
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <rms_to_char+0x1fc>)
 8000f38:	fb83 1302 	smull	r1, r3, r3, r2
 8000f3c:	1099      	asrs	r1, r3, #2
 8000f3e:	17d3      	asrs	r3, r2, #31
 8000f40:	1ac9      	subs	r1, r1, r3
 8000f42:	460b      	mov	r3, r1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	613b      	str	r3, [r7, #16]
	int decimal_1 = decimal / 100;					// 1,648 --> dec1 = 6:
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4a5f      	ldr	r2, [pc, #380]	; (80010d0 <rms_to_char+0x200>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1152      	asrs	r2, r2, #5
 8000f58:	17db      	asrs	r3, r3, #31
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]

	if(entero == 0) {
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d152      	bne.n	800100a <rms_to_char+0x13a>

		rms_char[0] = '.';
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	222e      	movs	r2, #46	; 0x2e
 8000f68:	701a      	strb	r2, [r3, #0]
		rms_char[1] = decimal_1 + '0';
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	3230      	adds	r2, #48	; 0x30
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]

		if(decimal_3 >= 5 && decimal_2 < 9) rms_char[2] = (decimal_2 + 1) + '0';
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	dd0a      	ble.n	8000f94 <rms_to_char+0xc4>
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	dc07      	bgt.n	8000f94 <rms_to_char+0xc4>
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	3231      	adds	r2, #49	; 0x31
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e01d      	b.n	8000fd0 <rms_to_char+0x100>

		else if(decimal_3 >= 5 && decimal_3 == 9){
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	dd0d      	ble.n	8000fb6 <rms_to_char+0xe6>
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d10a      	bne.n	8000fb6 <rms_to_char+0xe6>
			rms_char[1]++;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	3201      	adds	r2, #1
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
			rms_char[2] = '0';
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	2230      	movs	r2, #48	; 0x30
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e00c      	b.n	8000fd0 <rms_to_char+0x100>
		}

		else if(decimal_3 < 5 && decimal_3 >= 0) rms_char[2] = decimal_2 + '0';
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	dc09      	bgt.n	8000fd0 <rms_to_char+0x100>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db06      	blt.n	8000fd0 <rms_to_char+0x100>
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	3230      	adds	r2, #48	; 0x30
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]

		bufferAUX[8] = 'R';
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <rms_to_char+0x204>)
 8000fd2:	2252      	movs	r2, #82	; 0x52
 8000fd4:	721a      	strb	r2, [r3, #8]
		bufferAUX[9] = rms_char[0];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <rms_to_char+0x204>)
 8000fdc:	725a      	strb	r2, [r3, #9]
		bufferAUX[10] = decimal_1 + '0';
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	3330      	adds	r3, #48	; 0x30
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <rms_to_char+0x204>)
 8000fe8:	729a      	strb	r2, [r3, #10]
		bufferAUX[11] = decimal_2 + '0';
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3330      	adds	r3, #48	; 0x30
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <rms_to_char+0x204>)
 8000ff4:	72da      	strb	r2, [r3, #11]
		bufferAUX[12] = decimal_3 + '0';
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3330      	adds	r3, #48	; 0x30
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <rms_to_char+0x204>)
 8001000:	731a      	strb	r2, [r3, #12]
		bufferAUX[13] = 'V';
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <rms_to_char+0x204>)
 8001004:	2256      	movs	r2, #86	; 0x56
 8001006:	735a      	strb	r2, [r3, #13]
 8001008:	e050      	b.n	80010ac <rms_to_char+0x1dc>

	}
	else if(entero > 0){
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dd4d      	ble.n	80010ac <rms_to_char+0x1dc>

		rms_char[0] = entero + '0';
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	b2da      	uxtb	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	701a      	strb	r2, [r3, #0]
		rms_char[1] = '.';
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	222e      	movs	r2, #46	; 0x2e
 8001022:	701a      	strb	r2, [r3, #0]

		if(decimal_2 >= 5 && decimal_1 < 9) rms_char[2] = (decimal_1+1) + '0';
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b04      	cmp	r3, #4
 8001028:	dd0a      	ble.n	8001040 <rms_to_char+0x170>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b08      	cmp	r3, #8
 800102e:	dc07      	bgt.n	8001040 <rms_to_char+0x170>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3302      	adds	r3, #2
 8001038:	3231      	adds	r2, #49	; 0x31
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e01a      	b.n	8001076 <rms_to_char+0x1a6>

		else if(decimal_2 >= 5 && decimal_1 == 9){
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b04      	cmp	r3, #4
 8001044:	dd0d      	ble.n	8001062 <rms_to_char+0x192>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b09      	cmp	r3, #9
 800104a:	d10a      	bne.n	8001062 <rms_to_char+0x192>
			rms_char[0]++;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	701a      	strb	r2, [r3, #0]
			rms_char[2] = '0';
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3302      	adds	r3, #2
 800105c:	2230      	movs	r2, #48	; 0x30
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e009      	b.n	8001076 <rms_to_char+0x1a6>
		}

		else if(decimal_2 < 5) rms_char[2] = decimal_1 + '0';
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2b04      	cmp	r3, #4
 8001066:	dc06      	bgt.n	8001076 <rms_to_char+0x1a6>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	3230      	adds	r2, #48	; 0x30
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

		bufferAUX[8] = 'R';
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <rms_to_char+0x204>)
 8001078:	2252      	movs	r2, #82	; 0x52
 800107a:	721a      	strb	r2, [r3, #8]
		bufferAUX[9] = entero + '0';
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3330      	adds	r3, #48	; 0x30
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <rms_to_char+0x204>)
 8001086:	725a      	strb	r2, [r3, #9]
		bufferAUX[10] = '.';
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <rms_to_char+0x204>)
 800108a:	222e      	movs	r2, #46	; 0x2e
 800108c:	729a      	strb	r2, [r3, #10]
		bufferAUX[11] = decimal_1 + '0';
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	3330      	adds	r3, #48	; 0x30
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <rms_to_char+0x204>)
 8001098:	72da      	strb	r2, [r3, #11]
		bufferAUX[12] = decimal_2 + '0';
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3330      	adds	r3, #48	; 0x30
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <rms_to_char+0x204>)
 80010a4:	731a      	strb	r2, [r3, #12]
		bufferAUX[13] = 'V';
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <rms_to_char+0x204>)
 80010a8:	2256      	movs	r2, #86	; 0x56
 80010aa:	735a      	strb	r2, [r3, #13]
	}
	rms_char[3] = 'V';
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3303      	adds	r3, #3
 80010b0:	2256      	movs	r2, #86	; 0x56
 80010b2:	701a      	strb	r2, [r3, #0]
	rms_char[4] = '\0';
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3304      	adds	r3, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	3724      	adds	r7, #36	; 0x24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	447a0000 	.word	0x447a0000
 80010cc:	66666667 	.word	0x66666667
 80010d0:	51eb851f 	.word	0x51eb851f
 80010d4:	20000000 	.word	0x20000000

080010d8 <freq_to_char>:

void freq_to_char(uint32_t Frecuencia, uint8_t *pData){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

	Frecuencia = (uint32_t)(1.024 * ((float) Frecuencia) -2.1196);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ec:	ee17 0a90 	vmov	r0, s15
 80010f0:	f7ff f9da 	bl	80004a8 <__aeabi_f2d>
 80010f4:	a39a      	add	r3, pc, #616	; (adr r3, 8001360 <freq_to_char+0x288>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fa2d 	bl	8000558 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	a398      	add	r3, pc, #608	; (adr r3, 8001368 <freq_to_char+0x290>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f86c 	bl	80001e8 <__aeabi_dsub>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fcce 	bl	8000ab8 <__aeabi_d2uiz>
 800111c:	4603      	mov	r3, r0
 800111e:	607b      	str	r3, [r7, #4]

	// Frecuencias entre 10K y 100K
	if(Frecuencia >= 10000 && Frecuencia < 100000){
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f242 720f 	movw	r2, #9999	; 0x270f
 8001126:	4293      	cmp	r3, r2
 8001128:	d96e      	bls.n	8001208 <freq_to_char+0x130>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a86      	ldr	r2, [pc, #536]	; (8001348 <freq_to_char+0x270>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d86a      	bhi.n	8001208 <freq_to_char+0x130>

		pData[0] = (uint8_t)((Frecuencia/10000) + '0'); 			// 15310/10000  = 1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a85      	ldr	r2, [pc, #532]	; (800134c <freq_to_char+0x274>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0b5b      	lsrs	r3, r3, #13
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3330      	adds	r3, #48	; 0x30
 8001140:	b2da      	uxtb	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	701a      	strb	r2, [r3, #0]
		Frecuencia %=10000;                             			// 15310 % 10000 = 5300
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a80      	ldr	r2, [pc, #512]	; (800134c <freq_to_char+0x274>)
 800114a:	fba2 1203 	umull	r1, r2, r2, r3
 800114e:	0b52      	lsrs	r2, r2, #13
 8001150:	f242 7110 	movw	r1, #10000	; 0x2710
 8001154:	fb01 f202 	mul.w	r2, r1, r2
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	607b      	str	r3, [r7, #4]
		pData[1] = (uint8_t)((Frecuencia/1000) + '0');  			// 5310 / 1000 = 5
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <freq_to_char+0x278>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	b2da      	uxtb	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	3230      	adds	r2, #48	; 0x30
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	701a      	strb	r2, [r3, #0]
		Frecuencia %= 1000;                             			// 5310 % 1000 = 300
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a76      	ldr	r2, [pc, #472]	; (8001350 <freq_to_char+0x278>)
 8001176:	fba2 1203 	umull	r1, r2, r2, r3
 800117a:	0992      	lsrs	r2, r2, #6
 800117c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001180:	fb01 f202 	mul.w	r2, r1, r2
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	607b      	str	r3, [r7, #4]
		pData[2] = '.';
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3302      	adds	r3, #2
 800118c:	222e      	movs	r2, #46	; 0x2e
 800118e:	701a      	strb	r2, [r3, #0]
		pData[3] = (uint8_t)((Frecuencia/100) + '0');   			// 310 / 100 = 3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a70      	ldr	r2, [pc, #448]	; (8001354 <freq_to_char+0x27c>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2da      	uxtb	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3303      	adds	r3, #3
 80011a0:	3230      	adds	r2, #48	; 0x30
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
		pData[4] = 'K';
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3304      	adds	r3, #4
 80011aa:	224b      	movs	r2, #75	; 0x4b
 80011ac:	701a      	strb	r2, [r3, #0]
		pData[5] = 'H';
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3305      	adds	r3, #5
 80011b2:	2248      	movs	r2, #72	; 0x48
 80011b4:	701a      	strb	r2, [r3, #0]
		bufferAUX[2] = pData[0];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <freq_to_char+0x280>)
 80011bc:	709a      	strb	r2, [r3, #2]
		bufferAUX[3] = pData[1];
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	785a      	ldrb	r2, [r3, #1]
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <freq_to_char+0x280>)
 80011c4:	70da      	strb	r2, [r3, #3]
		bufferAUX[4] = pData[2];
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	789a      	ldrb	r2, [r3, #2]
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <freq_to_char+0x280>)
 80011cc:	711a      	strb	r2, [r3, #4]
		bufferAUX[5] = pData[3];
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	78da      	ldrb	r2, [r3, #3]
 80011d2:	4b61      	ldr	r3, [pc, #388]	; (8001358 <freq_to_char+0x280>)
 80011d4:	715a      	strb	r2, [r3, #5]
		Frecuencia  %= 100;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <freq_to_char+0x27c>)
 80011da:	fba2 1203 	umull	r1, r2, r2, r3
 80011de:	0952      	lsrs	r2, r2, #5
 80011e0:	2164      	movs	r1, #100	; 0x64
 80011e2:	fb01 f202 	mul.w	r2, r1, r2
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	607b      	str	r3, [r7, #4]
		bufferAUX[6] = (uint8_t)((Frecuencia/10) + '0');
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a5b      	ldr	r2, [pc, #364]	; (800135c <freq_to_char+0x284>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <freq_to_char+0x280>)
 80011fc:	719a      	strb	r2, [r3, #6]
		bufferAUX[7] = pData[4];
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	791a      	ldrb	r2, [r3, #4]
 8001202:	4b55      	ldr	r3, [pc, #340]	; (8001358 <freq_to_char+0x280>)
 8001204:	71da      	strb	r2, [r3, #7]
 8001206:	e094      	b.n	8001332 <freq_to_char+0x25a>
	}

	// Frecuencias entre 0 y 9999
	else if(Frecuencia > 0){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8091 	beq.w	8001332 <freq_to_char+0x25a>

		if(Frecuencia <1000){
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001216:	d206      	bcs.n	8001226 <freq_to_char+0x14e>
			pData[0] = ' ';
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2220      	movs	r2, #32
 800121c:	701a      	strb	r2, [r3, #0]
			bufferAUX[2] = '0';
 800121e:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <freq_to_char+0x280>)
 8001220:	2230      	movs	r2, #48	; 0x30
 8001222:	709a      	strb	r2, [r3, #2]
 8001224:	e00d      	b.n	8001242 <freq_to_char+0x16a>
		} else {
			pData[0] = (uint8_t)((Frecuencia/1000) + '0');		// 9375 / 1000 = 9
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	; (8001350 <freq_to_char+0x278>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3330      	adds	r3, #48	; 0x30
 8001234:	b2da      	uxtb	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	701a      	strb	r2, [r3, #0]
			bufferAUX[2] = pData[0];
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <freq_to_char+0x280>)
 8001240:	709a      	strb	r2, [r3, #2]
		}

		Frecuencia %= 1000;                          				// 9375 % 1000 = 375
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a42      	ldr	r2, [pc, #264]	; (8001350 <freq_to_char+0x278>)
 8001246:	fba2 1203 	umull	r1, r2, r2, r3
 800124a:	0992      	lsrs	r2, r2, #6
 800124c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001250:	fb01 f202 	mul.w	r2, r1, r2
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	607b      	str	r3, [r7, #4]
		if(Frecuencia < 100 && pData[0] == ' '){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b63      	cmp	r3, #99	; 0x63
 800125c:	d80b      	bhi.n	8001276 <freq_to_char+0x19e>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d107      	bne.n	8001276 <freq_to_char+0x19e>
			pData[1] = ' ';
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	2220      	movs	r2, #32
 800126c:	701a      	strb	r2, [r3, #0]
			bufferAUX[3] = '0';
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <freq_to_char+0x280>)
 8001270:	2230      	movs	r2, #48	; 0x30
 8001272:	70da      	strb	r2, [r3, #3]
 8001274:	e00e      	b.n	8001294 <freq_to_char+0x1bc>
		} else {
			pData[1] = (uint8_t)((Frecuencia/100) + '0');  		// 375 / 100 = 3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a36      	ldr	r2, [pc, #216]	; (8001354 <freq_to_char+0x27c>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	b2da      	uxtb	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	3230      	adds	r2, #48	; 0x30
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
			bufferAUX[3] = pData[1];
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	785a      	ldrb	r2, [r3, #1]
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <freq_to_char+0x280>)
 8001292:	70da      	strb	r2, [r3, #3]
		}

		Frecuencia %= 100;                             				// 375 % 100 = 75
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <freq_to_char+0x27c>)
 8001298:	fba2 1203 	umull	r1, r2, r2, r3
 800129c:	0952      	lsrs	r2, r2, #5
 800129e:	2164      	movs	r1, #100	; 0x64
 80012a0:	fb01 f202 	mul.w	r2, r1, r2
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	607b      	str	r3, [r7, #4]
		if(Frecuencia < 10 && pData[1] == ' '){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d80c      	bhi.n	80012c8 <freq_to_char+0x1f0>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	d107      	bne.n	80012c8 <freq_to_char+0x1f0>
			pData[2] = ' ';
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3302      	adds	r3, #2
 80012bc:	2220      	movs	r2, #32
 80012be:	701a      	strb	r2, [r3, #0]
			bufferAUX[4] = '0';
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <freq_to_char+0x280>)
 80012c2:	2230      	movs	r2, #48	; 0x30
 80012c4:	711a      	strb	r2, [r3, #4]
 80012c6:	e00e      	b.n	80012e6 <freq_to_char+0x20e>
		} else {
			pData[2] = (uint8_t)((Frecuencia/10) + '0');   		// 75 / 10 = 7
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <freq_to_char+0x284>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3302      	adds	r3, #2
 80012d8:	3230      	adds	r2, #48	; 0x30
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]
			bufferAUX[4] = pData[2];
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	789a      	ldrb	r2, [r3, #2]
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <freq_to_char+0x280>)
 80012e4:	711a      	strb	r2, [r3, #4]
		}
		Frecuencia %= 10;                              				// 75 % 10 = 5
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <freq_to_char+0x284>)
 80012ea:	fba3 1302 	umull	r1, r3, r3, r2
 80012ee:	08d9      	lsrs	r1, r3, #3
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	607b      	str	r3, [r7, #4]
		pData[3] = (uint8_t)(Frecuencia + '0');        				// 5
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3303      	adds	r3, #3
 8001304:	3230      	adds	r2, #48	; 0x30
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

		pData[4] = 'H';
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	2248      	movs	r2, #72	; 0x48
 8001310:	701a      	strb	r2, [r3, #0]
		pData[5] = 'z';
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3305      	adds	r3, #5
 8001316:	227a      	movs	r2, #122	; 0x7a
 8001318:	701a      	strb	r2, [r3, #0]
		bufferAUX[5] = pData[3];
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	78da      	ldrb	r2, [r3, #3]
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <freq_to_char+0x280>)
 8001320:	715a      	strb	r2, [r3, #5]
		bufferAUX[6] = pData[4];
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	791a      	ldrb	r2, [r3, #4]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <freq_to_char+0x280>)
 8001328:	719a      	strb	r2, [r3, #6]
		bufferAUX[7] = pData[5];
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	795a      	ldrb	r2, [r3, #5]
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <freq_to_char+0x280>)
 8001330:	71da      	strb	r2, [r3, #7]
		// F0XX.XXK
		// F0XXXXHz
	}

	pData[6] = '\0';
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3306      	adds	r3, #6
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	0001869f 	.word	0x0001869f
 800134c:	d1b71759 	.word	0xd1b71759
 8001350:	10624dd3 	.word	0x10624dd3
 8001354:	51eb851f 	.word	0x51eb851f
 8001358:	20000000 	.word	0x20000000
 800135c:	cccccccd 	.word	0xcccccccd
 8001360:	d2f1a9fc 	.word	0xd2f1a9fc
 8001364:	3ff0624d 	.word	0x3ff0624d
 8001368:	d844d014 	.word	0xd844d014
 800136c:	4000f4f0 	.word	0x4000f4f0

08001370 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a05 	vstr	s0, [r7, #20]
 800137a:	edc7 0a04 	vstr	s1, [r7, #16]
 800137e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001382:	edc7 1a02 	vstr	s3, [r7, #8]
 8001386:	ed87 2a01 	vstr	s4, [r7, #4]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800138a:	ed97 7a05 	vldr	s14, [r7, #20]
 800138e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001396:	edd7 6a01 	vldr	s13, [r7, #4]
 800139a:	edd7 7a02 	vldr	s15, [r7, #8]
 800139e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ba:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <display_plot_escala>:

void display_plot_escala(int contador){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

	switch(contador){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	f200 815c 	bhi.w	8001694 <display_plot_escala+0x2c8>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <display_plot_escala+0x18>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	080015f1 	.word	0x080015f1
 80013e8:	08001643 	.word	0x08001643
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001457 	.word	0x08001457
 80013f4:	080014a9 	.word	0x080014a9
 80013f8:	080014fb 	.word	0x080014fb
 80013fc:	0800154d 	.word	0x0800154d
 8001400:	0800159f 	.word	0x0800159f

		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 8001404:	2137      	movs	r1, #55	; 0x37
 8001406:	2073      	movs	r0, #115	; 0x73
 8001408:	f001 fea4 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 800140c:	4ab8      	ldr	r2, [pc, #736]	; (80016f0 <display_plot_escala+0x324>)
 800140e:	2301      	movs	r3, #1
 8001410:	ca06      	ldmia	r2, {r1, r2}
 8001412:	48b8      	ldr	r0, [pc, #736]	; (80016f4 <display_plot_escala+0x328>)
 8001414:	f001 fe78 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8001418:	2109      	movs	r1, #9
 800141a:	2006      	movs	r0, #6
 800141c:	f001 fe9a 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 8001420:	4ab3      	ldr	r2, [pc, #716]	; (80016f0 <display_plot_escala+0x324>)
 8001422:	2301      	movs	r3, #1
 8001424:	ca06      	ldmia	r2, {r1, r2}
 8001426:	48b4      	ldr	r0, [pc, #720]	; (80016f8 <display_plot_escala+0x32c>)
 8001428:	f001 fe6e 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800142c:	2121      	movs	r1, #33	; 0x21
 800142e:	2011      	movs	r0, #17
 8001430:	f001 fe90 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001434:	4aae      	ldr	r2, [pc, #696]	; (80016f0 <display_plot_escala+0x324>)
 8001436:	2301      	movs	r3, #1
 8001438:	ca06      	ldmia	r2, {r1, r2}
 800143a:	48b0      	ldr	r0, [pc, #704]	; (80016fc <display_plot_escala+0x330>)
 800143c:	f001 fe64 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001440:	2138      	movs	r1, #56	; 0x38
 8001442:	2000      	movs	r0, #0
 8001444:	f001 fe86 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 8001448:	4aa9      	ldr	r2, [pc, #676]	; (80016f0 <display_plot_escala+0x324>)
 800144a:	2301      	movs	r3, #1
 800144c:	ca06      	ldmia	r2, {r1, r2}
 800144e:	48ac      	ldr	r0, [pc, #688]	; (8001700 <display_plot_escala+0x334>)
 8001450:	f001 fe5a 	bl	8003108 <ssd1306_WriteString>
		break;
 8001454:	e147      	b.n	80016e6 <display_plot_escala+0x31a>

		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 8001456:	2137      	movs	r1, #55	; 0x37
 8001458:	2073      	movs	r0, #115	; 0x73
 800145a:	f001 fe7b 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 800145e:	4aa4      	ldr	r2, [pc, #656]	; (80016f0 <display_plot_escala+0x324>)
 8001460:	2301      	movs	r3, #1
 8001462:	ca06      	ldmia	r2, {r1, r2}
 8001464:	48a7      	ldr	r0, [pc, #668]	; (8001704 <display_plot_escala+0x338>)
 8001466:	f001 fe4f 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800146a:	2109      	movs	r1, #9
 800146c:	2006      	movs	r0, #6
 800146e:	f001 fe71 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8001472:	4a9f      	ldr	r2, [pc, #636]	; (80016f0 <display_plot_escala+0x324>)
 8001474:	2301      	movs	r3, #1
 8001476:	ca06      	ldmia	r2, {r1, r2}
 8001478:	48a3      	ldr	r0, [pc, #652]	; (8001708 <display_plot_escala+0x33c>)
 800147a:	f001 fe45 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800147e:	2121      	movs	r1, #33	; 0x21
 8001480:	2011      	movs	r0, #17
 8001482:	f001 fe67 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001486:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <display_plot_escala+0x324>)
 8001488:	2301      	movs	r3, #1
 800148a:	ca06      	ldmia	r2, {r1, r2}
 800148c:	489b      	ldr	r0, [pc, #620]	; (80016fc <display_plot_escala+0x330>)
 800148e:	f001 fe3b 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001492:	2138      	movs	r1, #56	; 0x38
 8001494:	2000      	movs	r0, #0
 8001496:	f001 fe5d 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800149a:	4a95      	ldr	r2, [pc, #596]	; (80016f0 <display_plot_escala+0x324>)
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	489a      	ldr	r0, [pc, #616]	; (800170c <display_plot_escala+0x340>)
 80014a2:	f001 fe31 	bl	8003108 <ssd1306_WriteString>
		break;
 80014a6:	e11e      	b.n	80016e6 <display_plot_escala+0x31a>

		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 80014a8:	2137      	movs	r1, #55	; 0x37
 80014aa:	2073      	movs	r0, #115	; 0x73
 80014ac:	f001 fe52 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 80014b0:	4a8f      	ldr	r2, [pc, #572]	; (80016f0 <display_plot_escala+0x324>)
 80014b2:	2301      	movs	r3, #1
 80014b4:	ca06      	ldmia	r2, {r1, r2}
 80014b6:	4896      	ldr	r0, [pc, #600]	; (8001710 <display_plot_escala+0x344>)
 80014b8:	f001 fe26 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80014bc:	2109      	movs	r1, #9
 80014be:	2006      	movs	r0, #6
 80014c0:	f001 fe48 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 80014c4:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <display_plot_escala+0x324>)
 80014c6:	2301      	movs	r3, #1
 80014c8:	ca06      	ldmia	r2, {r1, r2}
 80014ca:	4892      	ldr	r0, [pc, #584]	; (8001714 <display_plot_escala+0x348>)
 80014cc:	f001 fe1c 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80014d0:	2121      	movs	r1, #33	; 0x21
 80014d2:	2011      	movs	r0, #17
 80014d4:	f001 fe3e 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80014d8:	4a85      	ldr	r2, [pc, #532]	; (80016f0 <display_plot_escala+0x324>)
 80014da:	2301      	movs	r3, #1
 80014dc:	ca06      	ldmia	r2, {r1, r2}
 80014de:	4887      	ldr	r0, [pc, #540]	; (80016fc <display_plot_escala+0x330>)
 80014e0:	f001 fe12 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80014e4:	2138      	movs	r1, #56	; 0x38
 80014e6:	2000      	movs	r0, #0
 80014e8:	f001 fe34 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 80014ec:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <display_plot_escala+0x324>)
 80014ee:	2301      	movs	r3, #1
 80014f0:	ca06      	ldmia	r2, {r1, r2}
 80014f2:	4889      	ldr	r0, [pc, #548]	; (8001718 <display_plot_escala+0x34c>)
 80014f4:	f001 fe08 	bl	8003108 <ssd1306_WriteString>
		break;
 80014f8:	e0f5      	b.n	80016e6 <display_plot_escala+0x31a>

		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 80014fa:	2137      	movs	r1, #55	; 0x37
 80014fc:	206d      	movs	r0, #109	; 0x6d
 80014fe:	f001 fe29 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 8001502:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <display_plot_escala+0x324>)
 8001504:	2301      	movs	r3, #1
 8001506:	ca06      	ldmia	r2, {r1, r2}
 8001508:	4884      	ldr	r0, [pc, #528]	; (800171c <display_plot_escala+0x350>)
 800150a:	f001 fdfd 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800150e:	2109      	movs	r1, #9
 8001510:	2006      	movs	r0, #6
 8001512:	f001 fe1f 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 8001516:	4a76      	ldr	r2, [pc, #472]	; (80016f0 <display_plot_escala+0x324>)
 8001518:	2301      	movs	r3, #1
 800151a:	ca06      	ldmia	r2, {r1, r2}
 800151c:	4880      	ldr	r0, [pc, #512]	; (8001720 <display_plot_escala+0x354>)
 800151e:	f001 fdf3 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001522:	2121      	movs	r1, #33	; 0x21
 8001524:	2011      	movs	r0, #17
 8001526:	f001 fe15 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800152a:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <display_plot_escala+0x324>)
 800152c:	2301      	movs	r3, #1
 800152e:	ca06      	ldmia	r2, {r1, r2}
 8001530:	4872      	ldr	r0, [pc, #456]	; (80016fc <display_plot_escala+0x330>)
 8001532:	f001 fde9 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001536:	2138      	movs	r1, #56	; 0x38
 8001538:	2000      	movs	r0, #0
 800153a:	f001 fe0b 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <display_plot_escala+0x324>)
 8001540:	2301      	movs	r3, #1
 8001542:	ca06      	ldmia	r2, {r1, r2}
 8001544:	4877      	ldr	r0, [pc, #476]	; (8001724 <display_plot_escala+0x358>)
 8001546:	f001 fddf 	bl	8003108 <ssd1306_WriteString>
		break;
 800154a:	e0cc      	b.n	80016e6 <display_plot_escala+0x31a>

		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 800154c:	2137      	movs	r1, #55	; 0x37
 800154e:	206d      	movs	r0, #109	; 0x6d
 8001550:	f001 fe00 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 8001554:	4a66      	ldr	r2, [pc, #408]	; (80016f0 <display_plot_escala+0x324>)
 8001556:	2301      	movs	r3, #1
 8001558:	ca06      	ldmia	r2, {r1, r2}
 800155a:	4873      	ldr	r0, [pc, #460]	; (8001728 <display_plot_escala+0x35c>)
 800155c:	f001 fdd4 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8001560:	2109      	movs	r1, #9
 8001562:	2006      	movs	r0, #6
 8001564:	f001 fdf6 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 8001568:	4a61      	ldr	r2, [pc, #388]	; (80016f0 <display_plot_escala+0x324>)
 800156a:	2301      	movs	r3, #1
 800156c:	ca06      	ldmia	r2, {r1, r2}
 800156e:	486f      	ldr	r0, [pc, #444]	; (800172c <display_plot_escala+0x360>)
 8001570:	f001 fdca 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001574:	2121      	movs	r1, #33	; 0x21
 8001576:	2011      	movs	r0, #17
 8001578:	f001 fdec 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800157c:	4a5c      	ldr	r2, [pc, #368]	; (80016f0 <display_plot_escala+0x324>)
 800157e:	2301      	movs	r3, #1
 8001580:	ca06      	ldmia	r2, {r1, r2}
 8001582:	485e      	ldr	r0, [pc, #376]	; (80016fc <display_plot_escala+0x330>)
 8001584:	f001 fdc0 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001588:	2138      	movs	r1, #56	; 0x38
 800158a:	2000      	movs	r0, #0
 800158c:	f001 fde2 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <display_plot_escala+0x324>)
 8001592:	2301      	movs	r3, #1
 8001594:	ca06      	ldmia	r2, {r1, r2}
 8001596:	4866      	ldr	r0, [pc, #408]	; (8001730 <display_plot_escala+0x364>)
 8001598:	f001 fdb6 	bl	8003108 <ssd1306_WriteString>
		break;
 800159c:	e0a3      	b.n	80016e6 <display_plot_escala+0x31a>

		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 800159e:	2137      	movs	r1, #55	; 0x37
 80015a0:	206d      	movs	r0, #109	; 0x6d
 80015a2:	f001 fdd7 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 80015a6:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <display_plot_escala+0x324>)
 80015a8:	2301      	movs	r3, #1
 80015aa:	ca06      	ldmia	r2, {r1, r2}
 80015ac:	4861      	ldr	r0, [pc, #388]	; (8001734 <display_plot_escala+0x368>)
 80015ae:	f001 fdab 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80015b2:	2109      	movs	r1, #9
 80015b4:	2006      	movs	r0, #6
 80015b6:	f001 fdcd 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 80015ba:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <display_plot_escala+0x324>)
 80015bc:	2301      	movs	r3, #1
 80015be:	ca06      	ldmia	r2, {r1, r2}
 80015c0:	485d      	ldr	r0, [pc, #372]	; (8001738 <display_plot_escala+0x36c>)
 80015c2:	f001 fda1 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80015c6:	2121      	movs	r1, #33	; 0x21
 80015c8:	2011      	movs	r0, #17
 80015ca:	f001 fdc3 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80015ce:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <display_plot_escala+0x324>)
 80015d0:	2301      	movs	r3, #1
 80015d2:	ca06      	ldmia	r2, {r1, r2}
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <display_plot_escala+0x330>)
 80015d6:	f001 fd97 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80015da:	2138      	movs	r1, #56	; 0x38
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 fdb9 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <display_plot_escala+0x324>)
 80015e4:	2301      	movs	r3, #1
 80015e6:	ca06      	ldmia	r2, {r1, r2}
 80015e8:	4854      	ldr	r0, [pc, #336]	; (800173c <display_plot_escala+0x370>)
 80015ea:	f001 fd8d 	bl	8003108 <ssd1306_WriteString>
		break;
 80015ee:	e07a      	b.n	80016e6 <display_plot_escala+0x31a>

		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 80015f0:	2137      	movs	r1, #55	; 0x37
 80015f2:	206d      	movs	r0, #109	; 0x6d
 80015f4:	f001 fdae 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <display_plot_escala+0x324>)
 80015fa:	2301      	movs	r3, #1
 80015fc:	ca06      	ldmia	r2, {r1, r2}
 80015fe:	4850      	ldr	r0, [pc, #320]	; (8001740 <display_plot_escala+0x374>)
 8001600:	f001 fd82 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 8001604:	2109      	movs	r1, #9
 8001606:	2011      	movs	r0, #17
 8001608:	f001 fda4 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <display_plot_escala+0x324>)
 800160e:	2301      	movs	r3, #1
 8001610:	ca06      	ldmia	r2, {r1, r2}
 8001612:	484c      	ldr	r0, [pc, #304]	; (8001744 <display_plot_escala+0x378>)
 8001614:	f001 fd78 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001618:	2121      	movs	r1, #33	; 0x21
 800161a:	2011      	movs	r0, #17
 800161c:	f001 fd9a 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <display_plot_escala+0x324>)
 8001622:	2301      	movs	r3, #1
 8001624:	ca06      	ldmia	r2, {r1, r2}
 8001626:	4835      	ldr	r0, [pc, #212]	; (80016fc <display_plot_escala+0x330>)
 8001628:	f001 fd6e 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 800162c:	2138      	movs	r1, #56	; 0x38
 800162e:	200b      	movs	r0, #11
 8001630:	f001 fd90 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <display_plot_escala+0x324>)
 8001636:	2301      	movs	r3, #1
 8001638:	ca06      	ldmia	r2, {r1, r2}
 800163a:	4843      	ldr	r0, [pc, #268]	; (8001748 <display_plot_escala+0x37c>)
 800163c:	f001 fd64 	bl	8003108 <ssd1306_WriteString>
		break;
 8001640:	e051      	b.n	80016e6 <display_plot_escala+0x31a>

		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 8001642:	2137      	movs	r1, #55	; 0x37
 8001644:	206d      	movs	r0, #109	; 0x6d
 8001646:	f001 fd85 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 800164a:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <display_plot_escala+0x324>)
 800164c:	2301      	movs	r3, #1
 800164e:	ca06      	ldmia	r2, {r1, r2}
 8001650:	483e      	ldr	r0, [pc, #248]	; (800174c <display_plot_escala+0x380>)
 8001652:	f001 fd59 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8001656:	2109      	movs	r1, #9
 8001658:	2006      	movs	r0, #6
 800165a:	f001 fd7b 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <display_plot_escala+0x324>)
 8001660:	2301      	movs	r3, #1
 8001662:	ca06      	ldmia	r2, {r1, r2}
 8001664:	483a      	ldr	r0, [pc, #232]	; (8001750 <display_plot_escala+0x384>)
 8001666:	f001 fd4f 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800166a:	2121      	movs	r1, #33	; 0x21
 800166c:	2011      	movs	r0, #17
 800166e:	f001 fd71 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <display_plot_escala+0x324>)
 8001674:	2301      	movs	r3, #1
 8001676:	ca06      	ldmia	r2, {r1, r2}
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <display_plot_escala+0x330>)
 800167a:	f001 fd45 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800167e:	2138      	movs	r1, #56	; 0x38
 8001680:	2000      	movs	r0, #0
 8001682:	f001 fd67 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <display_plot_escala+0x324>)
 8001688:	2301      	movs	r3, #1
 800168a:	ca06      	ldmia	r2, {r1, r2}
 800168c:	4831      	ldr	r0, [pc, #196]	; (8001754 <display_plot_escala+0x388>)
 800168e:	f001 fd3b 	bl	8003108 <ssd1306_WriteString>
		break;
 8001692:	e028      	b.n	80016e6 <display_plot_escala+0x31a>

		default://A2
			ssd1306_SetCursor(115, 55);
 8001694:	2137      	movs	r1, #55	; 0x37
 8001696:	2073      	movs	r0, #115	; 0x73
 8001698:	f001 fd5c 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <display_plot_escala+0x324>)
 800169e:	2301      	movs	r3, #1
 80016a0:	ca06      	ldmia	r2, {r1, r2}
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <display_plot_escala+0x328>)
 80016a4:	f001 fd30 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80016a8:	2109      	movs	r1, #9
 80016aa:	2006      	movs	r0, #6
 80016ac:	f001 fd52 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <display_plot_escala+0x324>)
 80016b2:	2301      	movs	r3, #1
 80016b4:	ca06      	ldmia	r2, {r1, r2}
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <display_plot_escala+0x32c>)
 80016b8:	f001 fd26 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80016bc:	2121      	movs	r1, #33	; 0x21
 80016be:	2011      	movs	r0, #17
 80016c0:	f001 fd48 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <display_plot_escala+0x324>)
 80016c6:	2301      	movs	r3, #1
 80016c8:	ca06      	ldmia	r2, {r1, r2}
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <display_plot_escala+0x330>)
 80016cc:	f001 fd1c 	bl	8003108 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80016d0:	2138      	movs	r1, #56	; 0x38
 80016d2:	2000      	movs	r0, #0
 80016d4:	f001 fd3e 	bl	8003154 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <display_plot_escala+0x324>)
 80016da:	2301      	movs	r3, #1
 80016dc:	ca06      	ldmia	r2, {r1, r2}
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <display_plot_escala+0x334>)
 80016e0:	f001 fd12 	bl	8003108 <ssd1306_WriteString>
		break;
 80016e4:	bf00      	nop
	}
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000078 	.word	0x20000078
 80016f4:	0800ead8 	.word	0x0800ead8
 80016f8:	0800eadc 	.word	0x0800eadc
 80016fc:	0800eae0 	.word	0x0800eae0
 8001700:	0800eae4 	.word	0x0800eae4
 8001704:	0800eaec 	.word	0x0800eaec
 8001708:	0800eaf0 	.word	0x0800eaf0
 800170c:	0800eaf4 	.word	0x0800eaf4
 8001710:	0800eafc 	.word	0x0800eafc
 8001714:	0800eb00 	.word	0x0800eb00
 8001718:	0800eb04 	.word	0x0800eb04
 800171c:	0800eb0c 	.word	0x0800eb0c
 8001720:	0800eb10 	.word	0x0800eb10
 8001724:	0800eb14 	.word	0x0800eb14
 8001728:	0800eb1c 	.word	0x0800eb1c
 800172c:	0800eb20 	.word	0x0800eb20
 8001730:	0800eb24 	.word	0x0800eb24
 8001734:	0800eb2c 	.word	0x0800eb2c
 8001738:	0800eb30 	.word	0x0800eb30
 800173c:	0800eb34 	.word	0x0800eb34
 8001740:	0800eb3c 	.word	0x0800eb3c
 8001744:	0800eb40 	.word	0x0800eb40
 8001748:	0800eb44 	.word	0x0800eb44
 800174c:	0800eb48 	.word	0x0800eb48
 8001750:	0800eb4c 	.word	0x0800eb4c
 8001754:	0800eb50 	.word	0x0800eb50

08001758 <display_plot_grilla>:

void display_plot_grilla(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 800175e:	2000      	movs	r0, #0
 8001760:	f001 fbaa 	bl	8002eb8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8001764:	2100      	movs	r1, #0
 8001766:	2000      	movs	r0, #0
 8001768:	f001 fcf4 	bl	8003154 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vertical line
 800176c:	2301      	movs	r3, #1
 800176e:	2237      	movs	r2, #55	; 0x37
 8001770:	2109      	movs	r1, #9
 8001772:	201a      	movs	r0, #26
 8001774:	f001 fd72 	bl	800325c <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vertical line up
 8001778:	2301      	movs	r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	2109      	movs	r1, #9
 800177e:	207f      	movs	r0, #127	; 0x7f
 8001780:	f001 fd6c 	bl	800325c <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vertical line bottom
 8001784:	2301      	movs	r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	213c      	movs	r1, #60	; 0x3c
 800178a:	207f      	movs	r0, #127	; 0x7f
 800178c:	f001 fd66 	bl	800325c <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8001790:	2301      	movs	r3, #1
 8001792:	2207      	movs	r2, #7
 8001794:	2109      	movs	r1, #9
 8001796:	2018      	movs	r0, #24
 8001798:	f001 fd7f 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 800179c:	2301      	movs	r3, #1
 800179e:	2202      	movs	r2, #2
 80017a0:	2124      	movs	r1, #36	; 0x24
 80017a2:	2018      	movs	r0, #24
 80017a4:	f001 fd79 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 80017a8:	2301      	movs	r3, #1
 80017aa:	2207      	movs	r2, #7
 80017ac:	213f      	movs	r1, #63	; 0x3f
 80017ae:	2018      	movs	r0, #24
 80017b0:	f001 fd73 	bl	800329a <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 80017b4:	2301      	movs	r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	2109      	movs	r1, #9
 80017ba:	2033      	movs	r0, #51	; 0x33
 80017bc:	f001 fd6d 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 80017c0:	2301      	movs	r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	213f      	movs	r1, #63	; 0x3f
 80017c6:	2033      	movs	r0, #51	; 0x33
 80017c8:	f001 fd67 	bl	800329a <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 80017cc:	2301      	movs	r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	2109      	movs	r1, #9
 80017d2:	204c      	movs	r0, #76	; 0x4c
 80017d4:	f001 fd61 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 80017d8:	2301      	movs	r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	213f      	movs	r1, #63	; 0x3f
 80017de:	204c      	movs	r0, #76	; 0x4c
 80017e0:	f001 fd5b 	bl	800329a <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 80017e4:	2301      	movs	r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	2109      	movs	r1, #9
 80017ea:	2065      	movs	r0, #101	; 0x65
 80017ec:	f001 fd55 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80017f0:	2301      	movs	r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	213f      	movs	r1, #63	; 0x3f
 80017f6:	2065      	movs	r0, #101	; 0x65
 80017f8:	f001 fd4f 	bl	800329a <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80017fc:	2301      	movs	r3, #1
 80017fe:	2205      	movs	r2, #5
 8001800:	2109      	movs	r1, #9
 8001802:	207b      	movs	r0, #123	; 0x7b
 8001804:	f001 fd49 	bl	800329a <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 8001808:	2301      	movs	r3, #1
 800180a:	2205      	movs	r2, #5
 800180c:	213f      	movs	r1, #63	; 0x3f
 800180e:	207b      	movs	r0, #123	; 0x7b
 8001810:	f001 fd43 	bl	800329a <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 8001814:	231a      	movs	r3, #26
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e009      	b.n	800182e <display_plot_grilla+0xd6>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	b2d8      	uxtb	r0, r3
 800181e:	2301      	movs	r3, #1
 8001820:	2202      	movs	r2, #2
 8001822:	2124      	movs	r1, #36	; 0x24
 8001824:	f001 fd39 	bl	800329a <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3305      	adds	r3, #5
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b80      	cmp	r3, #128	; 0x80
 8001832:	ddf2      	ble.n	800181a <display_plot_grilla+0xc2>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 8001834:	2366      	movs	r3, #102	; 0x66
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	e013      	b.n	8001862 <display_plot_grilla+0x10a>
		for (int y = 10; y < 63; y += 5){
 800183a:	230a      	movs	r3, #10
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e00a      	b.n	8001856 <display_plot_grilla+0xfe>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	b2d8      	uxtb	r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	b2d9      	uxtb	r1, r3
 8001848:	2301      	movs	r3, #1
 800184a:	2202      	movs	r2, #2
 800184c:	f001 fd06 	bl	800325c <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3305      	adds	r3, #5
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b3e      	cmp	r3, #62	; 0x3e
 800185a:	ddf1      	ble.n	8001840 <display_plot_grilla+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3b19      	subs	r3, #25
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b1e      	cmp	r3, #30
 8001866:	dce8      	bgt.n	800183a <display_plot_grilla+0xe2>
	}

	//ssd1306_SetCursor(14, 0);
	//ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);

}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <display_plot_trigger>:

void display_plot_trigger(int trigger){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

	int trigger_actual = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

	trigger_actual = map(trigger, 0, 4095, 63, 9);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 800188e:	eddf 1a17 	vldr	s3, [pc, #92]	; 80018ec <display_plot_trigger+0x78>
 8001892:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80018f0 <display_plot_trigger+0x7c>
 8001896:	eddf 0a17 	vldr	s1, [pc, #92]	; 80018f4 <display_plot_trigger+0x80>
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	f7ff fd67 	bl	8001370 <map>
 80018a2:	eef0 7a40 	vmov.f32	s15, s0
 80018a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018aa:	ee17 3a90 	vmov	r3, s15
 80018ae:	60fb      	str	r3, [r7, #12]

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b02      	subs	r3, #2
 80018b6:	b2d9      	uxtb	r1, r3
 80018b8:	2301      	movs	r3, #1
 80018ba:	2204      	movs	r2, #4
 80018bc:	207f      	movs	r0, #127	; 0x7f
 80018be:	f001 fccd 	bl	800325c <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b2d9      	uxtb	r1, r3
 80018ca:	2301      	movs	r3, #1
 80018cc:	2202      	movs	r2, #2
 80018ce:	207e      	movs	r0, #126	; 0x7e
 80018d0:	f001 fcc4 	bl	800325c <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2201      	movs	r2, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	207d      	movs	r0, #125	; 0x7d
 80018de:	f001 fb37 	bl	8002f50 <ssd1306_DrawPixel>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	427c0000 	.word	0x427c0000
 80018f0:	457ff000 	.word	0x457ff000
 80018f4:	00000000 	.word	0x00000000

080018f8 <display_plot_signal>:

void display_plot_signal(void){
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
	int trigger_point = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
	int nivel_trigger = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]

	if(uxQueueMessagesWaiting(qTrigger) == 1)
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <display_plot_signal+0x130>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f00a fe34 	bl	800c588 <uxQueueMessagesWaiting>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <display_plot_signal+0x3e>
		xQueueReceive(qTrigger, &nivel_trigger, portMAX_DELAY);
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <display_plot_signal+0x130>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4639      	mov	r1, r7
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	4618      	mov	r0, r3
 8001932:	f00a fd49 	bl	800c3c8 <xQueueReceive>

	for(int i=0; i<=98; i++){
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e014      	b.n	8001966 <display_plot_signal+0x6e>

		if((buffer_display[i] > nivel_trigger ) && (buffer_display[i+1]) < nivel_trigger){
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <display_plot_signal+0x134>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4293      	cmp	r3, r2
 8001948:	d90a      	bls.n	8001960 <display_plot_signal+0x68>
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3301      	adds	r3, #1
 800194e:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <display_plot_signal+0x134>)
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4293      	cmp	r3, r2
 8001958:	d202      	bcs.n	8001960 <display_plot_signal+0x68>
			trigger_point = i;
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	61fb      	str	r3, [r7, #28]
			break;
 800195e:	e005      	b.n	800196c <display_plot_signal+0x74>
	for(int i=0; i<=98; i++){
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b62      	cmp	r3, #98	; 0x62
 800196a:	dde7      	ble.n	800193c <display_plot_signal+0x44>
		}
	}

	for(int k=0; k<=98; k++){
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e04f      	b.n	8001a12 <display_plot_signal+0x11a>

		x3 = k + trigger_point;
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
		x4 = x3 + 1;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3301      	adds	r3, #1
 800197e:	607b      	str	r3, [r7, #4]

		y3 = map(buffer_display[x3], 0, 4095, 63, 9);
 8001980:	4a2a      	ldr	r2, [pc, #168]	; (8001a2c <display_plot_signal+0x134>)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001990:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8001994:	eddf 1a26 	vldr	s3, [pc, #152]	; 8001a30 <display_plot_signal+0x138>
 8001998:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001a34 <display_plot_signal+0x13c>
 800199c:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001a38 <display_plot_signal+0x140>
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	f7ff fce4 	bl	8001370 <map>
 80019a8:	eef0 7a40 	vmov.f32	s15, s0
 80019ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b0:	ee17 3a90 	vmov	r3, s15
 80019b4:	613b      	str	r3, [r7, #16]
		y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <display_plot_signal+0x134>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 80019ca:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001a30 <display_plot_signal+0x138>
 80019ce:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001a34 <display_plot_signal+0x13c>
 80019d2:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001a38 <display_plot_signal+0x140>
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	f7ff fcc9 	bl	8001370 <map>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
 80019e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e6:	ee17 3a90 	vmov	r3, s15
 80019ea:	60fb      	str	r3, [r7, #12]

		ssd1306_Line(k + 27, y3, k + 28, y4, White);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	331b      	adds	r3, #27
 80019f2:	b2d8      	uxtb	r0, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b2d9      	uxtb	r1, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	331c      	adds	r3, #28
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2401      	movs	r4, #1
 8001a06:	9400      	str	r4, [sp, #0]
 8001a08:	f001 fbbc 	bl	8003184 <ssd1306_Line>
	for(int k=0; k<=98; k++){
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b62      	cmp	r3, #98	; 0x62
 8001a16:	ddac      	ble.n	8001972 <display_plot_signal+0x7a>
	 }
	display_plot_trigger(nivel_trigger);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff2a 	bl	8001874 <display_plot_trigger>
	//HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX_SIZE);
}
 8001a20:	bf00      	nop
 8001a22:	3724      	adds	r7, #36	; 0x24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	200016dc 	.word	0x200016dc
 8001a2c:	200012d8 	.word	0x200012d8
 8001a30:	427c0000 	.word	0x427c0000
 8001a34:	457ff000 	.word	0x457ff000
 8001a38:	00000000 	.word	0x00000000

08001a3c <display_plot_rms>:

void display_plot_rms(void){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

	char rms_valor[5];
	static float valor = 0.0;
	static float escala = 1;

	if(uxQueueMessagesWaiting(qEscala) == 1)
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <display_plot_rms+0xa0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00a fd9e 	bl	800c588 <uxQueueMessagesWaiting>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <display_plot_rms+0x26>
	{
		xQueueReceive(qEscala, &escala, portMAX_DELAY);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <display_plot_rms+0xa0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <display_plot_rms+0xa4>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00a fcb3 	bl	800c3c8 <xQueueReceive>
	}
	if(uxQueueMessagesWaiting(qRMS) == 1 )
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <display_plot_rms+0xa8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00a fd8e 	bl	800c588 <uxQueueMessagesWaiting>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d112      	bne.n	8001a98 <display_plot_rms+0x5c>
	{
		xQueueReceive(qRMS, &valor, portMAX_DELAY);
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <display_plot_rms+0xa8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7a:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <display_plot_rms+0xac>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a fca3 	bl	800c3c8 <xQueueReceive>
		valor /= escala;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <display_plot_rms+0xac>)
 8001a84:	edd3 6a00 	vldr	s13, [r3]
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <display_plot_rms+0xa4>)
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <display_plot_rms+0xac>)
 8001a94:	edc3 7a00 	vstr	s15, [r3]
	}
	rms_to_char(valor, rms_valor);
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <display_plot_rms+0xac>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	f7ff fa13 	bl	8000ed0 <rms_to_char>
	ssd1306_SetCursor(56, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2038      	movs	r0, #56	; 0x38
 8001aae:	f001 fb51 	bl	8003154 <ssd1306_SetCursor>
	ssd1306_WriteString("rms",Font_6x8,White);
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <display_plot_rms+0xb0>)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	ca06      	ldmia	r2, {r1, r2}
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <display_plot_rms+0xb4>)
 8001aba:	f001 fb25 	bl	8003108 <ssd1306_WriteString>
	ssd1306_SetCursor(74, 0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	204a      	movs	r0, #74	; 0x4a
 8001ac2:	f001 fb47 	bl	8003154 <ssd1306_SetCursor>
	ssd1306_WriteString(rms_valor,Font_6x8,White);
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <display_plot_rms+0xb0>)
 8001ac8:	4638      	mov	r0, r7
 8001aca:	2301      	movs	r3, #1
 8001acc:	ca06      	ldmia	r2, {r1, r2}
 8001ace:	f001 fb1b 	bl	8003108 <ssd1306_WriteString>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200016e8 	.word	0x200016e8
 8001ae0:	20000064 	.word	0x20000064
 8001ae4:	200016e0 	.word	0x200016e0
 8001ae8:	200016ec 	.word	0x200016ec
 8001aec:	20000078 	.word	0x20000078
 8001af0:	0800eb58 	.word	0x0800eb58

08001af4 <display_plot_tiempo>:

void display_plot_tiempo(int base_temp){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

	ssd1306_SetCursor(104,0);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2068      	movs	r0, #104	; 0x68
 8001b00:	f001 fb28 	bl	8003154 <ssd1306_SetCursor>

	switch(base_temp){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d842      	bhi.n	8001b92 <display_plot_tiempo+0x9e>
 8001b0c:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <display_plot_tiempo+0x20>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b31 	.word	0x08001b31
 8001b18:	08001b3f 	.word	0x08001b3f
 8001b1c:	08001b4d 	.word	0x08001b4d
 8001b20:	08001b5b 	.word	0x08001b5b
 8001b24:	08001b69 	.word	0x08001b69
 8001b28:	08001b77 	.word	0x08001b77
 8001b2c:	08001b85 	.word	0x08001b85

		case ENC_F1: ssd1306_WriteString(" 25m", Font_6x8, White);
 8001b30:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b32:	2301      	movs	r3, #1
 8001b34:	ca06      	ldmia	r2, {r1, r2}
 8001b36:	481a      	ldr	r0, [pc, #104]	; (8001ba0 <display_plot_tiempo+0xac>)
 8001b38:	f001 fae6 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b3c:	e029      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F2: ssd1306_WriteString("6.3m", Font_6x8, White);
 8001b3e:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b40:	2301      	movs	r3, #1
 8001b42:	ca06      	ldmia	r2, {r1, r2}
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <display_plot_tiempo+0xb0>)
 8001b46:	f001 fadf 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b4a:	e022      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F3: ssd1306_WriteString("1,6m", Font_6x8, White);
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b4e:	2301      	movs	r3, #1
 8001b50:	ca06      	ldmia	r2, {r1, r2}
 8001b52:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <display_plot_tiempo+0xb4>)
 8001b54:	f001 fad8 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b58:	e01b      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F4: ssd1306_WriteString("389u", Font_6x8, White);
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	ca06      	ldmia	r2, {r1, r2}
 8001b60:	4812      	ldr	r0, [pc, #72]	; (8001bac <display_plot_tiempo+0xb8>)
 8001b62:	f001 fad1 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b66:	e014      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F5: ssd1306_WriteString(" 98u", Font_6x8, White);
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	ca06      	ldmia	r2, {r1, r2}
 8001b6e:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <display_plot_tiempo+0xbc>)
 8001b70:	f001 faca 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b74:	e00d      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F6: ssd1306_WriteString(" 35u", Font_6x8, White);
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b78:	2301      	movs	r3, #1
 8001b7a:	ca06      	ldmia	r2, {r1, r2}
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <display_plot_tiempo+0xc0>)
 8001b7e:	f001 fac3 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b82:	e006      	b.n	8001b92 <display_plot_tiempo+0x9e>

		case ENC_F7: ssd1306_WriteString(" 17u", Font_6x8, White);
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <display_plot_tiempo+0xa8>)
 8001b86:	2301      	movs	r3, #1
 8001b88:	ca06      	ldmia	r2, {r1, r2}
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <display_plot_tiempo+0xc4>)
 8001b8c:	f001 fabc 	bl	8003108 <ssd1306_WriteString>
		break;
 8001b90:	bf00      	nop
	}
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000078 	.word	0x20000078
 8001ba0:	0800eb5c 	.word	0x0800eb5c
 8001ba4:	0800eb64 	.word	0x0800eb64
 8001ba8:	0800eb6c 	.word	0x0800eb6c
 8001bac:	0800eb74 	.word	0x0800eb74
 8001bb0:	0800eb7c 	.word	0x0800eb7c
 8001bb4:	0800eb84 	.word	0x0800eb84
 8001bb8:	0800eb8c 	.word	0x0800eb8c

08001bbc <display_plot_freq>:

void display_plot_freq(int freq){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

	uint8_t str_freq[7] = {'\0'};
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2100      	movs	r1, #0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	709a      	strb	r2, [r3, #2]
	static int frecuencia = 0;

	// La variable se actualiza en el callback
	// En el main le voy a mandar -1 para que no actualice el valor
	// Pero que el display siga mostrando un valor
	if(freq >= 0) frecuencia = freq;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db02      	blt.n	8001be2 <display_plot_freq+0x26>
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <display_plot_freq+0x58>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]

	ssd1306_SetCursor(14, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	200e      	movs	r0, #14
 8001be6:	f001 fab5 	bl	8003154 <ssd1306_SetCursor>
	freq_to_char(frecuencia, str_freq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <display_plot_freq+0x58>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f7ff fa6e 	bl	80010d8 <freq_to_char>
	ssd1306_WriteString((char *)str_freq,Font_6x8, White);
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <display_plot_freq+0x5c>)
 8001bfe:	f107 0008 	add.w	r0, r7, #8
 8001c02:	2301      	movs	r3, #1
 8001c04:	ca06      	ldmia	r2, {r1, r2}
 8001c06:	f001 fa7f 	bl	8003108 <ssd1306_WriteString>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200016f0 	.word	0x200016f0
 8001c18:	20000078 	.word	0x20000078

08001c1c <display_plot_encoder>:

void display_plot_encoder(int encoder_mode){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

	ssd1306_SetCursor(0, 0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f001 fa94 	bl	8003154 <ssd1306_SetCursor>

	switch(encoder_mode){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d017      	beq.n	8001c62 <display_plot_encoder+0x46>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	dc1b      	bgt.n	8001c70 <display_plot_encoder+0x54>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <display_plot_encoder+0x2a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d007      	beq.n	8001c54 <display_plot_encoder+0x38>

		case BASE_TEMP: ssd1306_WriteString("t", Font_6x8, White);break;

		case TRIGGER: ssd1306_WriteString("T", Font_6x8, White); break;
	}
}
 8001c44:	e014      	b.n	8001c70 <display_plot_encoder+0x54>
		case AMPLITUD: ssd1306_WriteString("A", Font_6x8, White); break;
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <display_plot_encoder+0x5c>)
 8001c48:	2301      	movs	r3, #1
 8001c4a:	ca06      	ldmia	r2, {r1, r2}
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <display_plot_encoder+0x60>)
 8001c4e:	f001 fa5b 	bl	8003108 <ssd1306_WriteString>
 8001c52:	e00d      	b.n	8001c70 <display_plot_encoder+0x54>
		case BASE_TEMP: ssd1306_WriteString("t", Font_6x8, White);break;
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <display_plot_encoder+0x5c>)
 8001c56:	2301      	movs	r3, #1
 8001c58:	ca06      	ldmia	r2, {r1, r2}
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <display_plot_encoder+0x64>)
 8001c5c:	f001 fa54 	bl	8003108 <ssd1306_WriteString>
 8001c60:	e006      	b.n	8001c70 <display_plot_encoder+0x54>
		case TRIGGER: ssd1306_WriteString("T", Font_6x8, White); break;
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <display_plot_encoder+0x5c>)
 8001c64:	2301      	movs	r3, #1
 8001c66:	ca06      	ldmia	r2, {r1, r2}
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <display_plot_encoder+0x68>)
 8001c6a:	f001 fa4d 	bl	8003108 <ssd1306_WriteString>
 8001c6e:	bf00      	nop
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000078 	.word	0x20000078
 8001c7c:	0800eb94 	.word	0x0800eb94
 8001c80:	0800eb98 	.word	0x0800eb98
 8001c84:	0800eb9c 	.word	0x0800eb9c

08001c88 <mux_select_escala>:

void mux_select_escala(int contador){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	switch(contador){
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	f200 809c 	bhi.w	8001dd0 <mux_select_escala+0x148>
 8001c98:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <mux_select_escala+0x18>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001d8d 	.word	0x08001d8d
 8001ca4:	08001daf 	.word	0x08001daf
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001ce3 	.word	0x08001ce3
 8001cb0:	08001d05 	.word	0x08001d05
 8001cb4:	08001d27 	.word	0x08001d27
 8001cb8:	08001d49 	.word	0x08001d49
 8001cbc:	08001d6b 	.word	0x08001d6b

		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	484d      	ldr	r0, [pc, #308]	; (8001dfc <mux_select_escala+0x174>)
 8001cc6:	f003 f837 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd0:	484b      	ldr	r0, [pc, #300]	; (8001e00 <mux_select_escala+0x178>)
 8001cd2:	f003 f831 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2120      	movs	r1, #32
 8001cda:	4848      	ldr	r0, [pc, #288]	; (8001dfc <mux_select_escala+0x174>)
 8001cdc:	f003 f82c 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001ce0:	e087      	b.n	8001df2 <mux_select_escala+0x16a>

		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	4845      	ldr	r0, [pc, #276]	; (8001dfc <mux_select_escala+0x174>)
 8001ce8:	f003 f826 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf2:	4843      	ldr	r0, [pc, #268]	; (8001e00 <mux_select_escala+0x178>)
 8001cf4:	f003 f820 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	483f      	ldr	r0, [pc, #252]	; (8001dfc <mux_select_escala+0x174>)
 8001cfe:	f003 f81b 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001d02:	e076      	b.n	8001df2 <mux_select_escala+0x16a>

		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2108      	movs	r1, #8
 8001d08:	483c      	ldr	r0, [pc, #240]	; (8001dfc <mux_select_escala+0x174>)
 8001d0a:	f003 f815 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d14:	483a      	ldr	r0, [pc, #232]	; (8001e00 <mux_select_escala+0x178>)
 8001d16:	f003 f80f 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <mux_select_escala+0x174>)
 8001d20:	f003 f80a 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001d24:	e065      	b.n	8001df2 <mux_select_escala+0x16a>

		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4834      	ldr	r0, [pc, #208]	; (8001dfc <mux_select_escala+0x174>)
 8001d2c:	f003 f804 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <mux_select_escala+0x178>)
 8001d38:	f002 fffe 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	482e      	ldr	r0, [pc, #184]	; (8001dfc <mux_select_escala+0x174>)
 8001d42:	f002 fff9 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001d46:	e054      	b.n	8001df2 <mux_select_escala+0x16a>

		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	482b      	ldr	r0, [pc, #172]	; (8001dfc <mux_select_escala+0x174>)
 8001d4e:	f002 fff3 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d58:	4829      	ldr	r0, [pc, #164]	; (8001e00 <mux_select_escala+0x178>)
 8001d5a:	f002 ffed 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2120      	movs	r1, #32
 8001d62:	4826      	ldr	r0, [pc, #152]	; (8001dfc <mux_select_escala+0x174>)
 8001d64:	f002 ffe8 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001d68:	e043      	b.n	8001df2 <mux_select_escala+0x16a>

		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <mux_select_escala+0x174>)
 8001d70:	f002 ffe2 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7a:	4821      	ldr	r0, [pc, #132]	; (8001e00 <mux_select_escala+0x178>)
 8001d7c:	f002 ffdc 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2120      	movs	r1, #32
 8001d84:	481d      	ldr	r0, [pc, #116]	; (8001dfc <mux_select_escala+0x174>)
 8001d86:	f002 ffd7 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001d8a:	e032      	b.n	8001df2 <mux_select_escala+0x16a>

		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2108      	movs	r1, #8
 8001d90:	481a      	ldr	r0, [pc, #104]	; (8001dfc <mux_select_escala+0x174>)
 8001d92:	f002 ffd1 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <mux_select_escala+0x178>)
 8001d9e:	f002 ffcb 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	4815      	ldr	r0, [pc, #84]	; (8001dfc <mux_select_escala+0x174>)
 8001da8:	f002 ffc6 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001dac:	e021      	b.n	8001df2 <mux_select_escala+0x16a>

		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2108      	movs	r1, #8
 8001db2:	4812      	ldr	r0, [pc, #72]	; (8001dfc <mux_select_escala+0x174>)
 8001db4:	f002 ffc0 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <mux_select_escala+0x178>)
 8001dc0:	f002 ffba 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <mux_select_escala+0x174>)
 8001dca:	f002 ffb5 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001dce:	e010      	b.n	8001df2 <mux_select_escala+0x16a>

		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <mux_select_escala+0x174>)
 8001dd6:	f002 ffaf 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <mux_select_escala+0x178>)
 8001de2:	f002 ffa9 	bl	8004d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2120      	movs	r1, #32
 8001dea:	4804      	ldr	r0, [pc, #16]	; (8001dfc <mux_select_escala+0x174>)
 8001dec:	f002 ffa4 	bl	8004d38 <HAL_GPIO_WritePin>
		break;
 8001df0:	bf00      	nop
	}
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020000 	.word	0x40020000

08001e04 <ADC_sampling>:

void ADC_sampling(int periodo){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

	int delay = 20;
 8001e0c:	2314      	movs	r3, #20
 8001e0e:	60fb      	str	r3, [r7, #12]
	if(periodo == FS_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f24a 7269 	movw	r2, #42857	; 0xa769
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10c      	bne.n	8001e34 <ADC_sampling+0x30>
	{
		delay = 270;
 8001e1a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e1e:	60fb      	str	r3, [r7, #12]
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <ADC_sampling+0x84>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	f107 010c 	add.w	r1, r7, #12
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2e:	f00a f931 	bl	800c094 <xQueueGenericSend>
 8001e32:	e019      	b.n	8001e68 <ADC_sampling+0x64>
	}
	else if(periodo == FS_2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f642 2211 	movw	r2, #10769	; 0x2a11
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10b      	bne.n	8001e56 <ADC_sampling+0x52>
	{
		delay = 70;
 8001e3e:	2346      	movs	r3, #70	; 0x46
 8001e40:	60fb      	str	r3, [r7, #12]
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <ADC_sampling+0x84>)
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f107 010c 	add.w	r1, r7, #12
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	f00a f920 	bl	800c094 <xQueueGenericSend>
 8001e54:	e008      	b.n	8001e68 <ADC_sampling+0x64>
	}
	else
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <ADC_sampling+0x84>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 010c 	add.w	r1, r7, #12
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	f00a f916 	bl	800c094 <xQueueGenericSend>

	HAL_TIM_Base_Stop(&htim3);
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <ADC_sampling+0x88>)
 8001e6a:	f005 fbcb 	bl	8007604 <HAL_TIM_Base_Stop>

	htim3.Init.Period = periodo;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <ADC_sampling+0x88>)
 8001e72:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&htim3);
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <ADC_sampling+0x88>)
 8001e76:	f005 fb1b 	bl	80074b0 <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start(&htim3);
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <ADC_sampling+0x88>)
 8001e7c:	f005 fb68 	bl	8007550 <HAL_TIM_Base_Start>
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200016e4 	.word	0x200016e4
 8001e8c:	20000600 	.word	0x20000600

08001e90 <adc_select_frecuencia>:

void adc_select_frecuencia(int contador){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

	switch(contador){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	2b06      	cmp	r3, #6
 8001e9e:	d846      	bhi.n	8001f2e <adc_select_frecuencia+0x9e>
 8001ea0:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <adc_select_frecuencia+0x18>)
 8001ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea6:	bf00      	nop
 8001ea8:	08001ec5 	.word	0x08001ec5
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	08001ef5 	.word	0x08001ef5
 8001eb8:	08001f05 	.word	0x08001f05
 8001ebc:	08001f13 	.word	0x08001f13
 8001ec0:	08001f21 	.word	0x08001f21

		case ENC_F1:
			ADC_sampling(FS_1);
 8001ec4:	f24a 7069 	movw	r0, #42857	; 0xa769
 8001ec8:	f7ff ff9c 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F1 + '0';
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001ece:	2231      	movs	r2, #49	; 0x31
 8001ed0:	741a      	strb	r2, [r3, #16]
			break;
 8001ed2:	e02c      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F2:
			ADC_sampling(FS_2);
 8001ed4:	f642 2011 	movw	r0, #10769	; 0x2a11
 8001ed8:	f7ff ff94 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F2 + '0';
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001ede:	2232      	movs	r2, #50	; 0x32
 8001ee0:	741a      	strb	r2, [r3, #16]
			break;
 8001ee2:	e024      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F3:
			ADC_sampling(FS_3);
 8001ee4:	f640 2073 	movw	r0, #2675	; 0xa73
 8001ee8:	f7ff ff8c 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F3 + '0';
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001eee:	2233      	movs	r2, #51	; 0x33
 8001ef0:	741a      	strb	r2, [r3, #16]
			break;
 8001ef2:	e01c      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F4:
			ADC_sampling(FS_4);
 8001ef4:	f240 209b 	movw	r0, #667	; 0x29b
 8001ef8:	f7ff ff84 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F4 + '0';
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001efe:	2234      	movs	r2, #52	; 0x34
 8001f00:	741a      	strb	r2, [r3, #16]
			break;
 8001f02:	e014      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F5:
			ADC_sampling(FS_5);
 8001f04:	20a8      	movs	r0, #168	; 0xa8
 8001f06:	f7ff ff7d 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F5 + '0';
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001f0c:	2235      	movs	r2, #53	; 0x35
 8001f0e:	741a      	strb	r2, [r3, #16]
			break;
 8001f10:	e00d      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F6:
			ADC_sampling(FS_6);
 8001f12:	203c      	movs	r0, #60	; 0x3c
 8001f14:	f7ff ff76 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F6 + '0';
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001f1a:	2236      	movs	r2, #54	; 0x36
 8001f1c:	741a      	strb	r2, [r3, #16]
			break;
 8001f1e:	e006      	b.n	8001f2e <adc_select_frecuencia+0x9e>

		case ENC_F7:
			ADC_sampling(FS_7);
 8001f20:	201e      	movs	r0, #30
 8001f22:	f7ff ff6f 	bl	8001e04 <ADC_sampling>
			bufferAUX[16] = ENC_F7 + '0';
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <adc_select_frecuencia+0xa8>)
 8001f28:	2237      	movs	r2, #55	; 0x37
 8001f2a:	741a      	strb	r2, [r3, #16]
			break;
 8001f2c:	bf00      	nop
	}
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000

08001f3c <modificar_escala>:

float modificar_escala(int contador){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

	float variable = 1;
 8001f44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f48:	60fb      	str	r3, [r7, #12]
	switch(contador){
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	d845      	bhi.n	8001fdc <modificar_escala+0xa0>
 8001f50:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <modificar_escala+0x1c>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001f79 	.word	0x08001f79
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	08001f93 	.word	0x08001f93
 8001f64:	08001fa1 	.word	0x08001fa1
 8001f68:	08001fad 	.word	0x08001fad
 8001f6c:	08001fb9 	.word	0x08001fb9
 8001f70:	08001fc5 	.word	0x08001fc5
 8001f74:	08001fd1 	.word	0x08001fd1

		case ATEN_03:
			variable = 0.287;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <modificar_escala+0xb4>)
 8001f7a:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = ATEN_03 + '0';
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <modificar_escala+0xb8>)
 8001f7e:	2230      	movs	r2, #48	; 0x30
 8001f80:	749a      	strb	r2, [r3, #18]
			break;
 8001f82:	e02b      	b.n	8001fdc <modificar_escala+0xa0>

		case ATEN_05:
			variable = 0.5;
 8001f84:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001f88:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = ATEN_05 + '0';
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <modificar_escala+0xb8>)
 8001f8c:	2231      	movs	r2, #49	; 0x31
 8001f8e:	749a      	strb	r2, [r3, #18]
			break;
 8001f90:	e024      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_1:
			variable = 1;
 8001f92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f96:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_1 + '0';
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <modificar_escala+0xb8>)
 8001f9a:	2232      	movs	r2, #50	; 0x32
 8001f9c:	749a      	strb	r2, [r3, #18]
			break;
 8001f9e:	e01d      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_3:
			variable = 3.13;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <modificar_escala+0xbc>)
 8001fa2:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_3 + '0';
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <modificar_escala+0xb8>)
 8001fa6:	2233      	movs	r2, #51	; 0x33
 8001fa8:	749a      	strb	r2, [r3, #18]
			break;
 8001faa:	e017      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_5:
			variable = 5;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <modificar_escala+0xc0>)
 8001fae:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_5 + '0';
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <modificar_escala+0xb8>)
 8001fb2:	2234      	movs	r2, #52	; 0x34
 8001fb4:	749a      	strb	r2, [r3, #18]
			break;
 8001fb6:	e011      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_10:
			variable = 10;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <modificar_escala+0xc4>)
 8001fba:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_10 + '0';
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <modificar_escala+0xb8>)
 8001fbe:	2235      	movs	r2, #53	; 0x35
 8001fc0:	749a      	strb	r2, [r3, #18]
			break;
 8001fc2:	e00b      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_31:
			variable = 31.33;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <modificar_escala+0xc8>)
 8001fc6:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_31 + '0';
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <modificar_escala+0xb8>)
 8001fca:	2236      	movs	r2, #54	; 0x36
 8001fcc:	749a      	strb	r2, [r3, #18]
			break;
 8001fce:	e005      	b.n	8001fdc <modificar_escala+0xa0>

		case AMP_50:
			variable = 50;
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <modificar_escala+0xcc>)
 8001fd2:	60fb      	str	r3, [r7, #12]
			bufferAUX[18] = AMP_50 + '0';
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <modificar_escala+0xb8>)
 8001fd6:	2237      	movs	r2, #55	; 0x37
 8001fd8:	749a      	strb	r2, [r3, #18]
			break;
 8001fda:	bf00      	nop
	}
	return variable;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	ee07 3a90 	vmov	s15, r3
}
 8001fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	3e92f1aa 	.word	0x3e92f1aa
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	404851ec 	.word	0x404851ec
 8001ffc:	40a00000 	.word	0x40a00000
 8002000:	41200000 	.word	0x41200000
 8002004:	41faa3d7 	.word	0x41faa3d7
 8002008:	42480000 	.word	0x42480000

0800200c <encoder_pos>:

void encoder_pos(void){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	static int counter_temp = ENC_F6;
	static int seleccion = 0;
	static int trigger_level = 2090;
	static float scale = 1;

	counter_act = TIM4->CNT/2;
 8002010:	4b95      	ldr	r3, [pc, #596]	; (8002268 <encoder_pos+0x25c>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b94      	ldr	r3, [pc, #592]	; (800226c <encoder_pos+0x260>)
 800201a:	801a      	strh	r2, [r3, #0]

	if(uxQueueMessagesWaiting(qEncoder) == 1)
 800201c:	4b94      	ldr	r3, [pc, #592]	; (8002270 <encoder_pos+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f00a fab1 	bl	800c588 <uxQueueMessagesWaiting>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <encoder_pos+0x30>
		xQueueReceive(qEncoder, &seleccion, portMAX_DELAY);
 800202c:	4b90      	ldr	r3, [pc, #576]	; (8002270 <encoder_pos+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	498f      	ldr	r1, [pc, #572]	; (8002274 <encoder_pos+0x268>)
 8002036:	4618      	mov	r0, r3
 8002038:	f00a f9c6 	bl	800c3c8 <xQueueReceive>

	switch(seleccion){
 800203c:	4b8d      	ldr	r3, [pc, #564]	; (8002274 <encoder_pos+0x268>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	f000 80a5 	beq.w	8002190 <encoder_pos+0x184>
 8002046:	2b02      	cmp	r3, #2
 8002048:	f300 80ea 	bgt.w	8002220 <encoder_pos+0x214>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <encoder_pos+0x4a>
 8002050:	2b01      	cmp	r3, #1
 8002052:	d06f      	beq.n	8002134 <encoder_pos+0x128>
				trigger_level-=100;
			else if(counter_act < counter_viejo && trigger_level == 90)
				trigger_level = 3990;
		break;

		default: break;
 8002054:	e0e4      	b.n	8002220 <encoder_pos+0x214>
			if(counter_act > counter_viejo && counter_amp < 7)
 8002056:	4b85      	ldr	r3, [pc, #532]	; (800226c <encoder_pos+0x260>)
 8002058:	f9b3 2000 	ldrsh.w	r2, [r3]
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <encoder_pos+0x26c>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	429a      	cmp	r2, r3
 8002064:	dd1b      	ble.n	800209e <encoder_pos+0x92>
 8002066:	4b85      	ldr	r3, [pc, #532]	; (800227c <encoder_pos+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b06      	cmp	r3, #6
 800206c:	dc17      	bgt.n	800209e <encoder_pos+0x92>
				counter_amp++;
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <encoder_pos+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a81      	ldr	r2, [pc, #516]	; (800227c <encoder_pos+0x270>)
 8002076:	6013      	str	r3, [r2, #0]
				scale = modificar_escala(counter_amp);
 8002078:	4b80      	ldr	r3, [pc, #512]	; (800227c <encoder_pos+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <modificar_escala>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <encoder_pos+0x274>)
 8002088:	edc3 7a00 	vstr	s15, [r3]
				xQueueSend(qEscala,&scale,portMAX_DELAY);
 800208c:	4b7d      	ldr	r3, [pc, #500]	; (8002284 <encoder_pos+0x278>)
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	2300      	movs	r3, #0
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	497a      	ldr	r1, [pc, #488]	; (8002280 <encoder_pos+0x274>)
 8002098:	f009 fffc 	bl	800c094 <xQueueGenericSend>
 800209c:	e044      	b.n	8002128 <encoder_pos+0x11c>
			else if(counter_act > counter_viejo && counter_amp == 7)
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <encoder_pos+0x260>)
 80020a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020a4:	4b74      	ldr	r3, [pc, #464]	; (8002278 <encoder_pos+0x26c>)
 80020a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dd19      	ble.n	80020e2 <encoder_pos+0xd6>
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <encoder_pos+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d115      	bne.n	80020e2 <encoder_pos+0xd6>
				counter_amp = AMP_1;
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <encoder_pos+0x270>)
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
				scale = modificar_escala(counter_amp);
 80020bc:	4b6f      	ldr	r3, [pc, #444]	; (800227c <encoder_pos+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff3b 	bl	8001f3c <modificar_escala>
 80020c6:	eef0 7a40 	vmov.f32	s15, s0
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <encoder_pos+0x274>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
				xQueueSend(qEscala,&scale,portMAX_DELAY);
 80020d0:	4b6c      	ldr	r3, [pc, #432]	; (8002284 <encoder_pos+0x278>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	f04f 32ff 	mov.w	r2, #4294967295
 80020da:	4969      	ldr	r1, [pc, #420]	; (8002280 <encoder_pos+0x274>)
 80020dc:	f009 ffda 	bl	800c094 <xQueueGenericSend>
 80020e0:	e022      	b.n	8002128 <encoder_pos+0x11c>
			else if(counter_act < counter_viejo && counter_amp > 0)
 80020e2:	4b62      	ldr	r3, [pc, #392]	; (800226c <encoder_pos+0x260>)
 80020e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <encoder_pos+0x26c>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	da1a      	bge.n	8002128 <encoder_pos+0x11c>
 80020f2:	4b62      	ldr	r3, [pc, #392]	; (800227c <encoder_pos+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dd16      	ble.n	8002128 <encoder_pos+0x11c>
				counter_amp--;
 80020fa:	4b60      	ldr	r3, [pc, #384]	; (800227c <encoder_pos+0x270>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a5e      	ldr	r2, [pc, #376]	; (800227c <encoder_pos+0x270>)
 8002102:	6013      	str	r3, [r2, #0]
				scale = modificar_escala(counter_amp);
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <encoder_pos+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff17 	bl	8001f3c <modificar_escala>
 800210e:	eef0 7a40 	vmov.f32	s15, s0
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <encoder_pos+0x274>)
 8002114:	edc3 7a00 	vstr	s15, [r3]
				xQueueSend(qEscala,&scale,portMAX_DELAY);
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <encoder_pos+0x278>)
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	f04f 32ff 	mov.w	r2, #4294967295
 8002122:	4957      	ldr	r1, [pc, #348]	; (8002280 <encoder_pos+0x274>)
 8002124:	f009 ffb6 	bl	800c094 <xQueueGenericSend>
			mux_select_escala(counter_amp);
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <encoder_pos+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fdab 	bl	8001c88 <mux_select_escala>
		break;
 8002132:	e07a      	b.n	800222a <encoder_pos+0x21e>
			if(counter_act > counter_viejo && counter_temp < 7){
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <encoder_pos+0x260>)
 8002136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <encoder_pos+0x26c>)
 800213c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002140:	429a      	cmp	r2, r3
 8002142:	dd0e      	ble.n	8002162 <encoder_pos+0x156>
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <encoder_pos+0x27c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b06      	cmp	r3, #6
 800214a:	dc0a      	bgt.n	8002162 <encoder_pos+0x156>
				counter_temp++;
 800214c:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <encoder_pos+0x27c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a4d      	ldr	r2, [pc, #308]	; (8002288 <encoder_pos+0x27c>)
 8002154:	6013      	str	r3, [r2, #0]
				adc_select_frecuencia(counter_temp);
 8002156:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <encoder_pos+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fe98 	bl	8001e90 <adc_select_frecuencia>
			break;
 8002160:	e060      	b.n	8002224 <encoder_pos+0x218>
			else if(counter_act < counter_viejo && counter_temp > 1){
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <encoder_pos+0x260>)
 8002164:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <encoder_pos+0x26c>)
 800216a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216e:	429a      	cmp	r2, r3
 8002170:	da58      	bge.n	8002224 <encoder_pos+0x218>
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <encoder_pos+0x27c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	dd54      	ble.n	8002224 <encoder_pos+0x218>
				counter_temp--;
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <encoder_pos+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	4a41      	ldr	r2, [pc, #260]	; (8002288 <encoder_pos+0x27c>)
 8002182:	6013      	str	r3, [r2, #0]
				adc_select_frecuencia(counter_temp);
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <encoder_pos+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fe81 	bl	8001e90 <adc_select_frecuencia>
			break;
 800218e:	e049      	b.n	8002224 <encoder_pos+0x218>
			if(counter_act > counter_viejo && trigger_level < 3990)
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <encoder_pos+0x260>)
 8002192:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <encoder_pos+0x26c>)
 8002198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219c:	429a      	cmp	r2, r3
 800219e:	dd0b      	ble.n	80021b8 <encoder_pos+0x1ac>
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <encoder_pos+0x280>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f640 7295 	movw	r2, #3989	; 0xf95
 80021a8:	4293      	cmp	r3, r2
 80021aa:	dc05      	bgt.n	80021b8 <encoder_pos+0x1ac>
				trigger_level+=100;
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <encoder_pos+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3364      	adds	r3, #100	; 0x64
 80021b2:	4a36      	ldr	r2, [pc, #216]	; (800228c <encoder_pos+0x280>)
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e010      	b.n	80021da <encoder_pos+0x1ce>
			else if(counter_act > counter_viejo && trigger_level == 3990)
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <encoder_pos+0x260>)
 80021ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <encoder_pos+0x26c>)
 80021c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dd08      	ble.n	80021da <encoder_pos+0x1ce>
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <encoder_pos+0x280>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f640 7296 	movw	r2, #3990	; 0xf96
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <encoder_pos+0x1ce>
				trigger_level = 90;
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <encoder_pos+0x280>)
 80021d6:	225a      	movs	r2, #90	; 0x5a
 80021d8:	601a      	str	r2, [r3, #0]
			if(counter_act < counter_viejo && trigger_level >= 190)
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <encoder_pos+0x260>)
 80021dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <encoder_pos+0x26c>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	da09      	bge.n	80021fe <encoder_pos+0x1f2>
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <encoder_pos+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2bbd      	cmp	r3, #189	; 0xbd
 80021f0:	dd05      	ble.n	80021fe <encoder_pos+0x1f2>
				trigger_level-=100;
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <encoder_pos+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3b64      	subs	r3, #100	; 0x64
 80021f8:	4a24      	ldr	r2, [pc, #144]	; (800228c <encoder_pos+0x280>)
 80021fa:	6013      	str	r3, [r2, #0]
		break;
 80021fc:	e014      	b.n	8002228 <encoder_pos+0x21c>
			else if(counter_act < counter_viejo && trigger_level == 90)
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <encoder_pos+0x260>)
 8002200:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <encoder_pos+0x26c>)
 8002206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220a:	429a      	cmp	r2, r3
 800220c:	da0c      	bge.n	8002228 <encoder_pos+0x21c>
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <encoder_pos+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b5a      	cmp	r3, #90	; 0x5a
 8002214:	d108      	bne.n	8002228 <encoder_pos+0x21c>
				trigger_level = 3990;
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <encoder_pos+0x280>)
 8002218:	f640 7296 	movw	r2, #3990	; 0xf96
 800221c:	601a      	str	r2, [r3, #0]
		break;
 800221e:	e003      	b.n	8002228 <encoder_pos+0x21c>
		default: break;
 8002220:	bf00      	nop
 8002222:	e002      	b.n	800222a <encoder_pos+0x21e>
			break;
 8002224:	bf00      	nop
 8002226:	e000      	b.n	800222a <encoder_pos+0x21e>
		break;
 8002228:	bf00      	nop
	}
	xQueueSend(qTrigger,&trigger_level,portMAX_DELAY);
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <encoder_pos+0x284>)
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	4915      	ldr	r1, [pc, #84]	; (800228c <encoder_pos+0x280>)
 8002236:	f009 ff2d 	bl	800c094 <xQueueGenericSend>

	display_plot_escala(counter_amp);
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <encoder_pos+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff f8c4 	bl	80013cc <display_plot_escala>
	display_plot_tiempo(counter_temp);
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <encoder_pos+0x27c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc53 	bl	8001af4 <display_plot_tiempo>
	display_plot_encoder(seleccion);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <encoder_pos+0x268>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fce2 	bl	8001c1c <display_plot_encoder>

	counter_viejo = counter_act;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <encoder_pos+0x260>)
 800225a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <encoder_pos+0x26c>)
 8002260:	801a      	strh	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000800 	.word	0x40000800
 800226c:	200016f4 	.word	0x200016f4
 8002270:	200016d8 	.word	0x200016d8
 8002274:	200016f8 	.word	0x200016f8
 8002278:	200016fc 	.word	0x200016fc
 800227c:	20000068 	.word	0x20000068
 8002280:	2000006c 	.word	0x2000006c
 8002284:	200016e8 	.word	0x200016e8
 8002288:	20000070 	.word	0x20000070
 800228c:	20000074 	.word	0x20000074
 8002290:	200016dc 	.word	0x200016dc

08002294 <Init_Sistema>:
/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 800229c:	f000 fda6 	bl	8002dec <ssd1306_Init>
	MX_USB_DEVICE_Init();
 80022a0:	f00b fe3c 	bl	800df1c <MX_USB_DEVICE_Init>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80022a4:	2100      	movs	r1, #0
 80022a6:	480f      	ldr	r0, [pc, #60]	; (80022e4 <Init_Sistema+0x50>)
 80022a8:	f005 fa86 	bl	80077b8 <HAL_TIM_OC_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX_SIZE);
 80022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b0:	490d      	ldr	r1, [pc, #52]	; (80022e8 <Init_Sistema+0x54>)
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <Init_Sistema+0x58>)
 80022b4:	f001 fbd0 	bl	8003a58 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <Init_Sistema+0x5c>)
 80022ba:	f005 f949 	bl	8007550 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80022be:	2104      	movs	r1, #4
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <Init_Sistema+0x60>)
 80022c2:	f005 fb83 	bl	80079cc <HAL_TIM_IC_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80022c6:	213c      	movs	r1, #60	; 0x3c
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <Init_Sistema+0x64>)
 80022ca:	f005 fd3f 	bl	8007d4c <HAL_TIM_Encoder_Start_IT>
	mux_select_escala(AMP_1);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f7ff fcda 	bl	8001c88 <mux_select_escala>

	vTaskDelete(NULL);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f00a fc19 	bl	800cb0c <vTaskDelete>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200005b8 	.word	0x200005b8
 80022e8:	20000ad8 	.word	0x20000ad8
 80022ec:	200004bc 	.word	0x200004bc
 80022f0:	20000600 	.word	0x20000600
 80022f4:	20000690 	.word	0x20000690
 80022f8:	20000648 	.word	0x20000648

080022fc <Mostrar_pantalla>:

void Mostrar_pantalla(void *pvParameters){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

	int delay_display = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
	while(1){

		if(uxQueueMessagesWaiting(qDelay) == 1)
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <Mostrar_pantalla+0x54>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f00a f93b 	bl	800c588 <uxQueueMessagesWaiting>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <Mostrar_pantalla+0x2e>
			xQueueReceive(qDelay, &delay_display, portMAX_DELAY);
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <Mostrar_pantalla+0x54>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f107 010c 	add.w	r1, r7, #12
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	4618      	mov	r0, r3
 8002326:	f00a f84f 	bl	800c3c8 <xQueueReceive>

		display_plot_grilla();
 800232a:	f7ff fa15 	bl	8001758 <display_plot_grilla>
		display_plot_signal();
 800232e:	f7ff fae3 	bl	80018f8 <display_plot_signal>
		display_plot_freq(VALOR_ACT);
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	f7ff fc41 	bl	8001bbc <display_plot_freq>
		display_plot_rms();
 800233a:	f7ff fb7f 	bl	8001a3c <display_plot_rms>
		encoder_pos();
 800233e:	f7ff fe65 	bl	800200c <encoder_pos>
		ssd1306_UpdateScreen();
 8002342:	f000 fddd 	bl	8002f00 <ssd1306_UpdateScreen>
		vTaskDelay(delay_display/portTICK_RATE_MS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4618      	mov	r0, r3
 800234a:	f00a fc6f 	bl	800cc2c <vTaskDelay>
		if(uxQueueMessagesWaiting(qDelay) == 1)
 800234e:	e7db      	b.n	8002308 <Mostrar_pantalla+0xc>
 8002350:	200016e4 	.word	0x200016e4

08002354 <HAL_GPIO_EXTI_Callback>:

}

/* --------------------------- Callbacks --------------------------- */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]

	static uint32_t previousMillis = 0;
	uint32_t currentMillis = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
	static int encoder = 0;

	currentMillis = HAL_GetTick();
 8002366:	f001 fb03 	bl	8003970 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > DEBOUNCE))
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002372:	d12d      	bne.n	80023d0 <HAL_GPIO_EXTI_Callback+0x7c>
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2bc8      	cmp	r3, #200	; 0xc8
 800237e:	d927      	bls.n	80023d0 <HAL_GPIO_EXTI_Callback+0x7c>
	{
		previousMillis = currentMillis;
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6013      	str	r3, [r2, #0]
		encoder++;
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_GPIO_EXTI_Callback+0x88>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_GPIO_EXTI_Callback+0x88>)
 800238e:	6013      	str	r3, [r2, #0]
		encoder%=3;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_GPIO_EXTI_Callback+0x88>)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002396:	fb83 3201 	smull	r3, r2, r3, r1
 800239a:	17cb      	asrs	r3, r1, #31
 800239c:	1ad2      	subs	r2, r2, r3
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	1aca      	subs	r2, r1, r3
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_GPIO_EXTI_Callback+0x88>)
 80023a8:	601a      	str	r2, [r3, #0]

		xQueueSendFromISR(qEncoder,&encoder,&xHigherPriorityTaskWoken);
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_GPIO_EXTI_Callback+0x90>)
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2300      	movs	r3, #0
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <HAL_GPIO_EXTI_Callback+0x88>)
 80023b6:	f009 ff6b 	bl	800c290 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken )
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_EXTI_Callback+0x7c>
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x94>)
 80023c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	f3bf 8f6f 	isb	sy
	}
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20001700 	.word	0x20001700
 80023dc:	20001704 	.word	0x20001704
 80023e0:	55555556 	.word	0x55555556
 80023e4:	200016d8 	.word	0x200016d8
 80023e8:	e000ed04 	.word	0xe000ed04

080023ec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

	for(int i = 0; i<MAX_SIZE/2; i++){
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e014      	b.n	8002424 <HAL_ADC_ConvHalfCpltCallback+0x38>
		buffer_display[i] = buffer_adc[i];
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer_usb[i] = buffer_adc[i];
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	460a      	mov	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<MAX_SIZE/2; i++){
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	dde7      	ble.n	80023fa <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20000ad8 	.word	0x20000ad8
 800243c:	200012d8 	.word	0x200012d8
 8002440:	200006d8 	.word	0x200006d8
 8002444:	00000000 	.word	0x00000000

08002448 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

	float mean = 0.0;
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
	float suma = 0.0;
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
	float valorMax = 0.0;
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
	float RMS = 0.0;
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i<MAX_SIZE/2; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e026      	b.n	80024c0 <HAL_ADC_ConvCpltCallback+0x78>

		buffer_display[i] = buffer_adc[i+256];
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002478:	4a59      	ldr	r2, [pc, #356]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 800247a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800247e:	4959      	ldr	r1, [pc, #356]	; (80025e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer_usb[i + 256] = buffer_adc[i +256];
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800248c:	4a54      	ldr	r2, [pc, #336]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 800248e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002498:	b2d1      	uxtb	r1, r2
 800249a:	4a53      	ldr	r2, [pc, #332]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800249c:	54d1      	strb	r1, [r2, r3]
		mean += buffer_adc[i];
 800249e:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i<MAX_SIZE/2; i++){
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	ddd5      	ble.n	8002472 <HAL_ADC_ConvCpltCallback+0x2a>
	}

	mean = 2*mean/MAX_SIZE;
 80024c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024ce:	eddf 6a47 	vldr	s13, [pc, #284]	; 80025ec <HAL_ADC_ConvCpltCallback+0x1a4>
 80024d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	int j = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<MAX_SIZE; i++){
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e041      	b.n	8002568 <HAL_ADC_ConvCpltCallback+0x120>
		buffer_usb[j] = (uint8_t)((buffer_adc[i]>>8)&0xFF);
 80024e4:	4a3e      	ldr	r2, [pc, #248]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b2d9      	uxtb	r1, r3
 80024f0:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4413      	add	r3, r2
 80024f6:	460a      	mov	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
		buffer_usb[j+1] = (uint8_t)((buffer_adc[i])&0xFF);
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3301      	adds	r3, #1
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800250a:	54d1      	strb	r1, [r2, r3]
		j+=2;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3302      	adds	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
		suma = (float)(buffer_adc[i]) - mean;
 8002512:	4a33      	ldr	r2, [pc, #204]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x198>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002522:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	edc7 7a04 	vstr	s15, [r7, #16]
		suma = suma*(3.3/4095);
 800252e:	6938      	ldr	r0, [r7, #16]
 8002530:	f7fd ffba 	bl	80004a8 <__aeabi_f2d>
 8002534:	a328      	add	r3, pc, #160	; (adr r3, 80025d8 <HAL_ADC_ConvCpltCallback+0x190>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f80d 	bl	8000558 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fad7 	bl	8000af8 <__aeabi_d2f>
 800254a:	4603      	mov	r3, r0
 800254c:	613b      	str	r3, [r7, #16]
		valorMax = suma*suma+valorMax;
 800254e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002552:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002556:	ed97 7a08 	vldr	s14, [r7, #32]
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i=0; i<MAX_SIZE; i++){
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256e:	dbb9      	blt.n	80024e4 <HAL_ADC_ConvCpltCallback+0x9c>
	}
	RMS = sqrt((valorMax / MAX_SIZE));
 8002570:	edd7 7a08 	vldr	s15, [r7, #32]
 8002574:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80025ec <HAL_ADC_ConvCpltCallback+0x1a4>
 8002578:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800257c:	ee16 0a90 	vmov	r0, s13
 8002580:	f7fd ff92 	bl	80004a8 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	ec43 2b10 	vmov	d0, r2, r3
 800258c:	f00c f9ba 	bl	800e904 <sqrt>
 8002590:	ec53 2b10 	vmov	r2, r3, d0
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe faae 	bl	8000af8 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	60bb      	str	r3, [r7, #8]
	valorMax = 0;
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]

	xQueueSendFromISR(qRMS,&RMS,&xHigherPriorityTaskWoken);
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f107 020c 	add.w	r2, r7, #12
 80025ae:	f107 0108 	add.w	r1, r7, #8
 80025b2:	2300      	movs	r3, #0
 80025b4:	f009 fe6c 	bl	800c290 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_ADC_ConvCpltCallback+0x186>
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e734d9b4 	.word	0xe734d9b4
 80025dc:	3f4a680c 	.word	0x3f4a680c
 80025e0:	20000ad8 	.word	0x20000ad8
 80025e4:	200012d8 	.word	0x200012d8
 80025e8:	200006d8 	.word	0x200006d8
 80025ec:	44000000 	.word	0x44000000
 80025f0:	200016e0 	.word	0x200016e0
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

	static uint32_t tiempo_init = 0;
	static uint32_t tiempo_act = 0;
	static uint32_t freq = 0;

	if(!freq) tiempo_init = TIM5->CNT;
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_TIM_IC_CaptureCallback+0x18>
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_TIM_IC_CaptureCallback+0x58>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800260e:	6013      	str	r3, [r2, #0]

	tiempo_act = TIM5->CNT;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002616:	6013      	str	r3, [r2, #0]

	if((tiempo_act - tiempo_init) < 2000) freq++;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_TIM_IC_CaptureCallback+0x60>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002626:	d205      	bcs.n	8002634 <HAL_TIM_IC_CaptureCallback+0x3c>
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_TIM_IC_CaptureCallback+0x54>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002630:	6013      	str	r3, [r2, #0]

	else{
		display_plot_freq(freq);
		freq = 0;
	}
}
 8002632:	e007      	b.n	8002644 <HAL_TIM_IC_CaptureCallback+0x4c>
		display_plot_freq(freq);
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fabf 	bl	8001bbc <display_plot_freq>
		freq = 0;
 800263e:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20001708 	.word	0x20001708
 8002650:	40000c00 	.word	0x40000c00
 8002654:	2000170c 	.word	0x2000170c
 8002658:	20001710 	.word	0x20001710

0800265c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002662:	f001 f94f 	bl	8003904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002666:	f000 f861 	bl	800272c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800266a:	f000 fad5 	bl	8002c18 <MX_GPIO_Init>
  MX_DMA_Init();
 800266e:	f000 fab3 	bl	8002bd8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002672:	f000 f8c7 	bl	8002804 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002676:	f000 f917 	bl	80028a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800267a:	f000 f943 	bl	8002904 <MX_TIM2_Init>
  MX_TIM3_Init();
 800267e:	f000 f999 	bl	80029b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002682:	f000 fa37 	bl	8002af4 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002686:	f000 f9e1 	bl	8002a4c <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qEncoder = xQueueCreate(1,sizeof(int));
 800268a:	2200      	movs	r2, #0
 800268c:	2104      	movs	r1, #4
 800268e:	2001      	movs	r0, #1
 8002690:	f009 fca6 	bl	800bfe0 <xQueueGenericCreate>
 8002694:	4603      	mov	r3, r0
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <main+0xac>)
 8002698:	6013      	str	r3, [r2, #0]
  qTrigger = xQueueCreate(1,sizeof(int));
 800269a:	2200      	movs	r2, #0
 800269c:	2104      	movs	r1, #4
 800269e:	2001      	movs	r0, #1
 80026a0:	f009 fc9e 	bl	800bfe0 <xQueueGenericCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <main+0xb0>)
 80026a8:	6013      	str	r3, [r2, #0]
  qRMS = xQueueCreate(1,sizeof(float));
 80026aa:	2200      	movs	r2, #0
 80026ac:	2104      	movs	r1, #4
 80026ae:	2001      	movs	r0, #1
 80026b0:	f009 fc96 	bl	800bfe0 <xQueueGenericCreate>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <main+0xb4>)
 80026b8:	6013      	str	r3, [r2, #0]
  qDelay = xQueueCreate(1,sizeof(int));
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	2001      	movs	r0, #1
 80026c0:	f009 fc8e 	bl	800bfe0 <xQueueGenericCreate>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <main+0xb8>)
 80026c8:	6013      	str	r3, [r2, #0]
  qEscala = xQueueCreate(1,sizeof(float));
 80026ca:	2200      	movs	r2, #0
 80026cc:	2104      	movs	r1, #4
 80026ce:	2001      	movs	r0, #1
 80026d0:	f009 fc86 	bl	800bfe0 <xQueueGenericCreate>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <main+0xbc>)
 80026d8:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL);
 80026da:	2300      	movs	r3, #0
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	2303      	movs	r3, #3
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	490d      	ldr	r1, [pc, #52]	; (800271c <main+0xc0>)
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <main+0xc4>)
 80026ea:	f00a f8d8 	bl	800c89e <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 80026ee:	2300      	movs	r3, #0
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2300      	movs	r3, #0
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <main+0xc8>)
 80026fc:	480a      	ldr	r0, [pc, #40]	; (8002728 <main+0xcc>)
 80026fe:	f00a f8ce 	bl	800c89e <xTaskCreate>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 // Init_Sistema(NULL);
  vTaskStartScheduler();
 8002702:	f00a fac7 	bl	800cc94 <vTaskStartScheduler>
  while(1){
 8002706:	e7fe      	b.n	8002706 <main+0xaa>
 8002708:	200016d8 	.word	0x200016d8
 800270c:	200016dc 	.word	0x200016dc
 8002710:	200016e0 	.word	0x200016e0
 8002714:	200016e4 	.word	0x200016e4
 8002718:	200016e8 	.word	0x200016e8
 800271c:	0800eba0 	.word	0x0800eba0
 8002720:	08002295 	.word	0x08002295
 8002724:	0800ebac 	.word	0x0800ebac
 8002728:	080022fd 	.word	0x080022fd

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b094      	sub	sp, #80	; 0x50
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	f107 0320 	add.w	r3, r7, #32
 8002736:	2230      	movs	r2, #48	; 0x30
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f00c f8da 	bl	800e8f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <SystemClock_Config+0xd0>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4a28      	ldr	r2, [pc, #160]	; (80027fc <SystemClock_Config+0xd0>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6413      	str	r3, [r2, #64]	; 0x40
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <SystemClock_Config+0xd0>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <SystemClock_Config+0xd4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <SystemClock_Config+0xd4>)
 800277a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <SystemClock_Config+0xd4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800278c:	2301      	movs	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002796:	2302      	movs	r3, #2
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027a0:	2308      	movs	r3, #8
 80027a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027aa:	2304      	movs	r3, #4
 80027ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027ae:	2307      	movs	r3, #7
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b2:	f107 0320 	add.w	r3, r7, #32
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 f9b0 	bl	8006b1c <HAL_RCC_OscConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027c2:	f000 fadb 	bl	8002d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c6:	230f      	movs	r3, #15
 80027c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ca:	2302      	movs	r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fc12 	bl	800700c <HAL_RCC_ClockConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027ee:	f000 fac5 	bl	8002d7c <Error_Handler>
  }
}
 80027f2:	bf00      	nop
 80027f4:	3750      	adds	r7, #80	; 0x50
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000

08002804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800280a:	463b      	mov	r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002818:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <MX_ADC1_Init+0xa0>)
 800281a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <MX_ADC1_Init+0x9c>)
 800281e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002822:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <MX_ADC1_Init+0x9c>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002832:	2200      	movs	r2, #0
 8002834:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002856:	2201      	movs	r2, #1
 8002858:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_ADC1_Init+0x9c>)
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_ADC1_Init+0x9c>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002868:	480d      	ldr	r0, [pc, #52]	; (80028a0 <MX_ADC1_Init+0x9c>)
 800286a:	f001 f8b1 	bl	80039d0 <HAL_ADC_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002874:	f000 fa82 	bl	8002d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002878:	2300      	movs	r3, #0
 800287a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_ADC1_Init+0x9c>)
 800288a:	f001 f9df 	bl	8003c4c <HAL_ADC_ConfigChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002894:	f000 fa72 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200004bc 	.word	0x200004bc
 80028a4:	40012000 	.word	0x40012000

080028a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <MX_I2C1_Init+0x54>)
 80028b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <MX_I2C1_Init+0x58>)
 80028b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028e6:	f002 fa59 	bl	8004d9c <HAL_I2C_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028f0:	f000 fa44 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000564 	.word	0x20000564
 80028fc:	40005400 	.word	0x40005400
 8002900:	00061a80 	.word	0x00061a80

08002904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290a:	f107 0320 	add.w	r3, r7, #32
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002930:	2201      	movs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 735;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM2_Init+0xac>)
 800293c:	f240 22df 	movw	r2, #735	; 0x2df
 8002940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_TIM2_Init+0xac>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800294e:	4818      	ldr	r0, [pc, #96]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002950:	f004 fee2 	bl	8007718 <HAL_TIM_OC_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800295a:	f000 fa0f 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002966:	f107 0320 	add.w	r3, r7, #32
 800296a:	4619      	mov	r1, r3
 800296c:	4810      	ldr	r0, [pc, #64]	; (80029b0 <MX_TIM2_Init+0xac>)
 800296e:	f006 f96b 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002978:	f000 fa00 	bl	8002d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800297c:	2330      	movs	r3, #48	; 0x30
 800297e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM2_Init+0xac>)
 8002994:	f005 fb90 	bl	80080b8 <HAL_TIM_OC_ConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800299e:	f000 f9ed 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM2_Init+0xac>)
 80029a4:	f000 fe82 	bl	80036ac <HAL_TIM_MspPostInit>

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200005b8 	.word	0x200005b8

080029b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
		//TIMER TRIGGER
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	463b      	mov	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
  htim3.Init.Period = 2675; fs=15,7KHz fmin = 160Hz fmax = 640Hz
  htim3.Init.Period = 10769; fs=3,9KHz fmin = 40Hz fmax = 160Hz
  htim3.Init.Period = 42857; fs=980Hz fmin = 10Hz fmax = 40Hz
  */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <MX_TIM3_Init+0x94>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029d8:	2201      	movs	r2, #1
 80029da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029e4:	223c      	movs	r2, #60	; 0x3c
 80029e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <MX_TIM3_Init+0x90>)
 80029f6:	f004 fd5b 	bl	80074b0 <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002a00:	f000 f9bc 	bl	8002d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <MX_TIM3_Init+0x90>)
 8002a12:	f005 fc49 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002a1c:	f000 f9ae 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a20:	2320      	movs	r3, #32
 8002a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a28:	463b      	mov	r3, r7
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_TIM3_Init+0x90>)
 8002a2e:	f006 f90b 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002a38:	f000 f9a0 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000600 	.word	0x20000600
 8002a48:	40000400 	.word	0x40000400

08002a4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f00b ff4a 	bl	800e8f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <MX_TIM4_Init+0xa4>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a92:	2302      	movs	r3, #2
 8002a94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a96:	2301      	movs	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002aae:	230a      	movs	r3, #10
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002aba:	f005 f8a1 	bl	8007c00 <HAL_TIM_Encoder_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ac4:	f000 f95a 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002ad6:	f006 f8b7 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ae0:	f000 f94c 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000648 	.word	0x20000648
 8002af0:	40000800 	.word	0x40000800

08002af4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0318 	add.w	r3, r7, #24
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b12:	463b      	mov	r3, r7
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b20:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <MX_TIM5_Init+0xe0>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b26:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002b2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b46:	4822      	ldr	r0, [pc, #136]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b48:	f004 fcb2 	bl	80074b0 <HAL_TIM_Base_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002b52:	f000 f913 	bl	8002d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	4619      	mov	r1, r3
 8002b62:	481b      	ldr	r0, [pc, #108]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b64:	f005 fba0 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002b6e:	f000 f905 	bl	8002d7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002b72:	4817      	ldr	r0, [pc, #92]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b74:	f004 fed0 	bl	8007918 <HAL_TIM_IC_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002b7e:	f000 f8fd 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b8a:	f107 0310 	add.w	r3, r7, #16
 8002b8e:	4619      	mov	r1, r3
 8002b90:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002b92:	f006 f859 	bl	8008c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8002b9c:	f000 f8ee 	bl	8002d7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4806      	ldr	r0, [pc, #24]	; (8002bd0 <MX_TIM5_Init+0xdc>)
 8002bb8:	f005 fada 	bl	8008170 <HAL_TIM_IC_ConfigChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8002bc2:	f000 f8db 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000690 	.word	0x20000690
 8002bd4:	40000c00 	.word	0x40000c00

08002bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <MX_DMA_Init+0x3c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <MX_DMA_Init+0x3c>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <MX_DMA_Init+0x3c>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	2038      	movs	r0, #56	; 0x38
 8002c00:	f001 fb7c 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c04:	2038      	movs	r0, #56	; 0x38
 8002c06:	f001 fb95 	bl	8004334 <HAL_NVIC_EnableIRQ>

}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a44      	ldr	r2, [pc, #272]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a3d      	ldr	r2, [pc, #244]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a36      	ldr	r2, [pc, #216]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	482a      	ldr	r0, [pc, #168]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002ca4:	f002 f848 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cae:	4827      	ldr	r0, [pc, #156]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002cb0:	f002 f842 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2128      	movs	r1, #40	; 0x28
 8002cb8:	4825      	ldr	r0, [pc, #148]	; (8002d50 <MX_GPIO_Init+0x138>)
 8002cba:	f002 f83d 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	481f      	ldr	r0, [pc, #124]	; (8002d54 <MX_GPIO_Init+0x13c>)
 8002cd6:	f001 feab 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 8002cda:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4816      	ldr	r0, [pc, #88]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002cf4:	f001 fe9c 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8002cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480f      	ldr	r0, [pc, #60]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002d10:	f001 fe8e 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 8002d14:	2328      	movs	r3, #40	; 0x28
 8002d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4809      	ldr	r0, [pc, #36]	; (8002d50 <MX_GPIO_Init+0x138>)
 8002d2c:	f001 fe80 	bl	8004a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2105      	movs	r1, #5
 8002d34:	2017      	movs	r0, #23
 8002d36:	f001 fae1 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d3a:	2017      	movs	r0, #23
 8002d3c:	f001 fafa 	bl	8004334 <HAL_NVIC_EnableIRQ>

}
 8002d40:	bf00      	nop
 8002d42:	3728      	adds	r7, #40	; 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800

08002d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d6a:	f000 fded 	bl	8003948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000

08002d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d80:	b672      	cpsid	i
}
 8002d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <Error_Handler+0x8>
	...

08002d88 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af04      	add	r7, sp, #16
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	2200      	movs	r2, #0
 8002da4:	2178      	movs	r1, #120	; 0x78
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <ssd1306_WriteCommand+0x2c>)
 8002da8:	f002 f93c 	bl	8005024 <HAL_I2C_Mem_Write>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000564 	.word	0x20000564

08002db8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	9202      	str	r2, [sp, #8]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	2178      	movs	r1, #120	; 0x78
 8002dd8:	4803      	ldr	r0, [pc, #12]	; (8002de8 <ssd1306_WriteData+0x30>)
 8002dda:	f002 f923 	bl	8005024 <HAL_I2C_Mem_Write>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000564 	.word	0x20000564

08002dec <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002df0:	2000      	movs	r0, #0
 8002df2:	f000 fa85 	bl	8003300 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002df6:	2020      	movs	r0, #32
 8002df8:	f7ff ffc6 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7ff ffc3 	bl	8002d88 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e02:	20b0      	movs	r0, #176	; 0xb0
 8002e04:	f7ff ffc0 	bl	8002d88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e08:	20c8      	movs	r0, #200	; 0xc8
 8002e0a:	f7ff ffbd 	bl	8002d88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7ff ffba 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e14:	2010      	movs	r0, #16
 8002e16:	f7ff ffb7 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e1a:	2040      	movs	r0, #64	; 0x40
 8002e1c:	f7ff ffb4 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e20:	20ff      	movs	r0, #255	; 0xff
 8002e22:	f000 fa59 	bl	80032d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e26:	20a1      	movs	r0, #161	; 0xa1
 8002e28:	f7ff ffae 	bl	8002d88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e2c:	20a6      	movs	r0, #166	; 0xa6
 8002e2e:	f7ff ffab 	bl	8002d88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e32:	20a8      	movs	r0, #168	; 0xa8
 8002e34:	f7ff ffa8 	bl	8002d88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e38:	203f      	movs	r0, #63	; 0x3f
 8002e3a:	f7ff ffa5 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e3e:	20a4      	movs	r0, #164	; 0xa4
 8002e40:	f7ff ffa2 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e44:	20d3      	movs	r0, #211	; 0xd3
 8002e46:	f7ff ff9f 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff ff9c 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e50:	20d5      	movs	r0, #213	; 0xd5
 8002e52:	f7ff ff99 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e56:	20f0      	movs	r0, #240	; 0xf0
 8002e58:	f7ff ff96 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e5c:	20d9      	movs	r0, #217	; 0xd9
 8002e5e:	f7ff ff93 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e62:	2022      	movs	r0, #34	; 0x22
 8002e64:	f7ff ff90 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e68:	20da      	movs	r0, #218	; 0xda
 8002e6a:	f7ff ff8d 	bl	8002d88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002e6e:	2012      	movs	r0, #18
 8002e70:	f7ff ff8a 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002e74:	20db      	movs	r0, #219	; 0xdb
 8002e76:	f7ff ff87 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002e7a:	2020      	movs	r0, #32
 8002e7c:	f7ff ff84 	bl	8002d88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002e80:	208d      	movs	r0, #141	; 0x8d
 8002e82:	f7ff ff81 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002e86:	2014      	movs	r0, #20
 8002e88:	f7ff ff7e 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f000 fa37 	bl	8003300 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f000 f810 	bl	8002eb8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002e98:	f000 f832 	bl	8002f00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <ssd1306_Init+0xc8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <ssd1306_Init+0xc8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	; (8002eb4 <ssd1306_Init+0xc8>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	711a      	strb	r2, [r3, #4]
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20001b14 	.word	0x20001b14

08002eb8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e00d      	b.n	8002ee4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <ssd1306_Fill+0x1a>
 8002ece:	2100      	movs	r1, #0
 8002ed0:	e000      	b.n	8002ed4 <ssd1306_Fill+0x1c>
 8002ed2:	21ff      	movs	r1, #255	; 0xff
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <ssd1306_Fill+0x44>)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	460a      	mov	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d3ed      	bcc.n	8002ec8 <ssd1306_Fill+0x10>
    }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20001714 	.word	0x20001714

08002f00 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	71fb      	strb	r3, [r7, #7]
 8002f0a:	e016      	b.n	8002f3a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	3b50      	subs	r3, #80	; 0x50
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff38 	bl	8002d88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f7ff ff35 	bl	8002d88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f1e:	2010      	movs	r0, #16
 8002f20:	f7ff ff32 	bl	8002d88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <ssd1306_UpdateScreen+0x4c>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff42 	bl	8002db8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	3301      	adds	r3, #1
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d9e5      	bls.n	8002f0c <ssd1306_UpdateScreen+0xc>
    }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20001714 	.word	0x20001714

08002f50 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db3d      	blt.n	8002fe6 <ssd1306_DrawPixel+0x96>
 8002f6a:	79bb      	ldrb	r3, [r7, #6]
 8002f6c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f6e:	d83a      	bhi.n	8002fe6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f70:	797b      	ldrb	r3, [r7, #5]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d11a      	bne.n	8002fac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	79bb      	ldrb	r3, [r7, #6]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	b2d8      	uxtb	r0, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <ssd1306_DrawPixel+0xa4>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	b25a      	sxtb	r2, r3
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b259      	sxtb	r1, r3
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	01db      	lsls	r3, r3, #7
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b2c9      	uxtb	r1, r1
 8002fa6:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <ssd1306_DrawPixel+0xa4>)
 8002fa8:	54d1      	strb	r1, [r2, r3]
 8002faa:	e01d      	b.n	8002fe8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	79bb      	ldrb	r3, [r7, #6]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	01db      	lsls	r3, r3, #7
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <ssd1306_DrawPixel+0xa4>)
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
 8002fbe:	b25a      	sxtb	r2, r3
 8002fc0:	79bb      	ldrb	r3, [r7, #6]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b259      	sxtb	r1, r3
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	01db      	lsls	r3, r3, #7
 8002fdc:	4413      	add	r3, r2
 8002fde:	b2c9      	uxtb	r1, r1
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <ssd1306_DrawPixel+0xa4>)
 8002fe2:	54d1      	strb	r1, [r2, r3]
 8002fe4:	e000      	b.n	8002fe8 <ssd1306_DrawPixel+0x98>
        return;
 8002fe6:	bf00      	nop
    }
}
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20001714 	.word	0x20001714

08002ff8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4604      	mov	r4, r0
 8003000:	1d38      	adds	r0, r7, #4
 8003002:	e880 0006 	stmia.w	r0, {r1, r2}
 8003006:	461a      	mov	r2, r3
 8003008:	4623      	mov	r3, r4
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	4613      	mov	r3, r2
 800300e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b1f      	cmp	r3, #31
 8003014:	d902      	bls.n	800301c <ssd1306_WriteChar+0x24>
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b7e      	cmp	r3, #126	; 0x7e
 800301a:	d901      	bls.n	8003020 <ssd1306_WriteChar+0x28>
        return 0;
 800301c:	2300      	movs	r3, #0
 800301e:	e06d      	b.n	80030fc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <ssd1306_WriteChar+0x10c>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	793b      	ldrb	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	dc06      	bgt.n	800303c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800302e:	4b35      	ldr	r3, [pc, #212]	; (8003104 <ssd1306_WriteChar+0x10c>)
 8003030:	885b      	ldrh	r3, [r3, #2]
 8003032:	461a      	mov	r2, r3
 8003034:	797b      	ldrb	r3, [r7, #5]
 8003036:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	dd01      	ble.n	8003040 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800303c:	2300      	movs	r3, #0
 800303e:	e05d      	b.n	80030fc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e04c      	b.n	80030e0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	3b20      	subs	r3, #32
 800304c:	7979      	ldrb	r1, [r7, #5]
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4619      	mov	r1, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	440b      	add	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e034      	b.n	80030d0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d012      	beq.n	800309c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <ssd1306_WriteChar+0x10c>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4413      	add	r3, r2
 8003082:	b2d8      	uxtb	r0, r3
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <ssd1306_WriteChar+0x10c>)
 8003086:	885b      	ldrh	r3, [r3, #2]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	4413      	add	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	7bba      	ldrb	r2, [r7, #14]
 8003094:	4619      	mov	r1, r3
 8003096:	f7ff ff5b 	bl	8002f50 <ssd1306_DrawPixel>
 800309a:	e016      	b.n	80030ca <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <ssd1306_WriteChar+0x10c>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	b2d8      	uxtb	r0, r3
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <ssd1306_WriteChar+0x10c>)
 80030ac:	885b      	ldrh	r3, [r3, #2]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	b2d9      	uxtb	r1, r3
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	f7ff ff43 	bl	8002f50 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	793b      	ldrb	r3, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3c5      	bcc.n	8003066 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	797b      	ldrb	r3, [r7, #5]
 80030e2:	461a      	mov	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d3ad      	bcc.n	8003046 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <ssd1306_WriteChar+0x10c>)
 80030ec:	881a      	ldrh	r2, [r3, #0]
 80030ee:	793b      	ldrb	r3, [r7, #4]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <ssd1306_WriteChar+0x10c>)
 80030f8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3724      	adds	r7, #36	; 0x24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	20001b14 	.word	0x20001b14

08003108 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	1d38      	adds	r0, r7, #4
 8003112:	e880 0006 	stmia.w	r0, {r1, r2}
 8003116:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003118:	e012      	b.n	8003140 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	7818      	ldrb	r0, [r3, #0]
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	1d3a      	adds	r2, r7, #4
 8003122:	ca06      	ldmia	r2, {r1, r2}
 8003124:	f7ff ff68 	bl	8002ff8 <ssd1306_WriteChar>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d002      	beq.n	800313a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	e008      	b.n	800314c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e8      	bne.n	800311a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	781b      	ldrb	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	460a      	mov	r2, r1
 800315e:	71fb      	strb	r3, [r7, #7]
 8003160:	4613      	mov	r3, r2
 8003162:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <ssd1306_SetCursor+0x2c>)
 800316a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800316c:	79bb      	ldrb	r3, [r7, #6]
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <ssd1306_SetCursor+0x2c>)
 8003172:	805a      	strh	r2, [r3, #2]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20001b14 	.word	0x20001b14

08003184 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4623      	mov	r3, r4
 8003194:	71fb      	strb	r3, [r7, #7]
 8003196:	4603      	mov	r3, r0
 8003198:	71bb      	strb	r3, [r7, #6]
 800319a:	460b      	mov	r3, r1
 800319c:	717b      	strb	r3, [r7, #5]
 800319e:	4613      	mov	r3, r2
 80031a0:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80031a2:	797a      	ldrb	r2, [r7, #5]
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bfb8      	it	lt
 80031ac:	425b      	neglt	r3, r3
 80031ae:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80031b0:	793a      	ldrb	r2, [r7, #4]
 80031b2:	79bb      	ldrb	r3, [r7, #6]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	425b      	neglt	r3, r3
 80031bc:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80031be:	79fa      	ldrb	r2, [r7, #7]
 80031c0:	797b      	ldrb	r3, [r7, #5]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d201      	bcs.n	80031ca <ssd1306_Line+0x46>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e001      	b.n	80031ce <ssd1306_Line+0x4a>
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80031d0:	79ba      	ldrb	r2, [r7, #6]
 80031d2:	793b      	ldrb	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d201      	bcs.n	80031dc <ssd1306_Line+0x58>
 80031d8:	2301      	movs	r3, #1
 80031da:	e001      	b.n	80031e0 <ssd1306_Line+0x5c>
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80031ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031ee:	7939      	ldrb	r1, [r7, #4]
 80031f0:	797b      	ldrb	r3, [r7, #5]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff feac 	bl	8002f50 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80031f8:	e024      	b.n	8003244 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80031fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031fe:	79b9      	ldrb	r1, [r7, #6]
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fea4 	bl	8002f50 <ssd1306_DrawPixel>
    error2 = error * 2;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	425b      	negs	r3, r3
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	429a      	cmp	r2, r3
 8003216:	dd08      	ble.n	800322a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4413      	add	r3, r2
 8003228:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	429a      	cmp	r2, r3
 8003230:	da08      	bge.n	8003244 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4413      	add	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	79bb      	ldrb	r3, [r7, #6]
 8003240:	4413      	add	r3, r2
 8003242:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	797b      	ldrb	r3, [r7, #5]
 8003248:	429a      	cmp	r2, r3
 800324a:	d1d6      	bne.n	80031fa <ssd1306_Line+0x76>
 800324c:	79ba      	ldrb	r2, [r7, #6]
 800324e:	793b      	ldrb	r3, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d1d2      	bne.n	80031fa <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8003254:	bf00      	nop
}
 8003256:	3724      	adds	r7, #36	; 0x24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}

0800325c <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b085      	sub	sp, #20
 8003260:	af02      	add	r7, sp, #8
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4623      	mov	r3, r4
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	4603      	mov	r3, r0
 8003270:	71bb      	strb	r3, [r7, #6]
 8003272:	460b      	mov	r3, r1
 8003274:	717b      	strb	r3, [r7, #5]
 8003276:	4613      	mov	r3, r2
 8003278:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 800327a:	79ba      	ldrb	r2, [r7, #6]
 800327c:	797b      	ldrb	r3, [r7, #5]
 800327e:	4413      	add	r3, r2
 8003280:	b2dc      	uxtb	r4, r3
 8003282:	79fa      	ldrb	r2, [r7, #7]
 8003284:	79b9      	ldrb	r1, [r7, #6]
 8003286:	79f8      	ldrb	r0, [r7, #7]
 8003288:	793b      	ldrb	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4623      	mov	r3, r4
 800328e:	f7ff ff79 	bl	8003184 <ssd1306_Line>
	return;
 8003292:	bf00      	nop
}
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}

0800329a <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b085      	sub	sp, #20
 800329e:	af02      	add	r7, sp, #8
 80032a0:	4604      	mov	r4, r0
 80032a2:	4608      	mov	r0, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	71fb      	strb	r3, [r7, #7]
 80032ac:	4603      	mov	r3, r0
 80032ae:	71bb      	strb	r3, [r7, #6]
 80032b0:	460b      	mov	r3, r1
 80032b2:	717b      	strb	r3, [r7, #5]
 80032b4:	4613      	mov	r3, r2
 80032b6:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 80032b8:	79fa      	ldrb	r2, [r7, #7]
 80032ba:	797b      	ldrb	r3, [r7, #5]
 80032bc:	4413      	add	r3, r2
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	79bc      	ldrb	r4, [r7, #6]
 80032c2:	79b9      	ldrb	r1, [r7, #6]
 80032c4:	79f8      	ldrb	r0, [r7, #7]
 80032c6:	793b      	ldrb	r3, [r7, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4623      	mov	r3, r4
 80032cc:	f7ff ff5a 	bl	8003184 <ssd1306_Line>
	return;
 80032d0:	bf00      	nop
}
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}

080032d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80032e2:	2381      	movs	r3, #129	; 0x81
 80032e4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fd4d 	bl	8002d88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fd49 	bl	8002d88 <ssd1306_WriteCommand>
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003310:	23af      	movs	r3, #175	; 0xaf
 8003312:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <ssd1306_SetDisplayOn+0x38>)
 8003316:	2201      	movs	r2, #1
 8003318:	715a      	strb	r2, [r3, #5]
 800331a:	e004      	b.n	8003326 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800331c:	23ae      	movs	r3, #174	; 0xae
 800331e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <ssd1306_SetDisplayOn+0x38>)
 8003322:	2200      	movs	r2, #0
 8003324:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fd2d 	bl	8002d88 <ssd1306_WriteCommand>
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001b14 	.word	0x20001b14

0800333c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_MspInit+0x54>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_MspInit+0x54>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_MspInit+0x54>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_MspInit+0x54>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_MspInit+0x54>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_MspInit+0x54>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	210f      	movs	r1, #15
 800337e:	f06f 0001 	mvn.w	r0, #1
 8003382:	f000 ffbb 	bl	80042fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2e      	ldr	r2, [pc, #184]	; (800346c <HAL_ADC_MspInit+0xd8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d156      	bne.n	8003464 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a25      	ldr	r2, [pc, #148]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033ee:	2301      	movs	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f2:	2303      	movs	r3, #3
 80033f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	481c      	ldr	r0, [pc, #112]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 8003402:	f001 fb15 	bl	8004a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_ADC_MspInit+0xe8>)
 800340a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003438:	2200      	movs	r2, #0
 800343a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003444:	2200      	movs	r2, #0
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003448:	480b      	ldr	r0, [pc, #44]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 800344a:	f000 ff81 	bl	8004350 <HAL_DMA_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003454:	f7ff fc92 	bl	8002d7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
 800345e:	4a06      	ldr	r2, [pc, #24]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003464:	bf00      	nop
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40012000 	.word	0x40012000
 8003470:	40023800 	.word	0x40023800
 8003474:	40020000 	.word	0x40020000
 8003478:	20000504 	.word	0x20000504
 800347c:	40026410 	.word	0x40026410

08003480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_I2C_MspInit+0x84>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12c      	bne.n	80034fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034c4:	2312      	movs	r3, #18
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034d0:	2304      	movs	r3, #4
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	480c      	ldr	r0, [pc, #48]	; (800350c <HAL_I2C_MspInit+0x8c>)
 80034dc:	f001 faa8 	bl	8004a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_I2C_MspInit+0x88>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034fc:	bf00      	nop
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40005400 	.word	0x40005400
 8003508:	40023800 	.word	0x40023800
 800350c:	40020400 	.word	0x40020400

08003510 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d10d      	bne.n	800353e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_TIM_OC_MspInit+0x3c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_TIM_OC_MspInit+0x3c>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_TIM_OC_MspInit+0x3c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <HAL_TIM_Base_MspInit+0xbc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a25      	ldr	r2, [pc, #148]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800358e:	e038      	b.n	8003602 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM5)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_TIM_Base_MspInit+0xc4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d133      	bne.n	8003602 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_TIM_Base_MspInit+0xc0>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035d2:	2302      	movs	r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035e2:	2302      	movs	r3, #2
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	480a      	ldr	r0, [pc, #40]	; (8003618 <HAL_TIM_Base_MspInit+0xc8>)
 80035ee:	f001 fa1f 	bl	8004a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2105      	movs	r1, #5
 80035f6:	2032      	movs	r0, #50	; 0x32
 80035f8:	f000 fe80 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035fc:	2032      	movs	r0, #50	; 0x32
 80035fe:	f000 fe99 	bl	8004334 <HAL_NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3728      	adds	r7, #40	; 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40000400 	.word	0x40000400
 8003610:	40023800 	.word	0x40023800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40020000 	.word	0x40020000

0800361c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12b      	bne.n	8003696 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003686:	2302      	movs	r3, #2
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	4805      	ldr	r0, [pc, #20]	; (80036a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003692:	f001 f9cd 	bl	8004a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	3728      	adds	r7, #40	; 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020400 	.word	0x40020400

080036ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d11e      	bne.n	800370c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	4619      	mov	r1, r3
 8003706:	4804      	ldr	r0, [pc, #16]	; (8003718 <HAL_TIM_MspPostInit+0x6c>)
 8003708:	f001 f992 	bl	8004a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800370c:	bf00      	nop
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_InitTick+0xd0>)
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_InitTick+0xd0>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6453      	str	r3, [r2, #68]	; 0x44
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_InitTick+0xd0>)
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003748:	f107 020c 	add.w	r2, r7, #12
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fe7a 	bl	800744c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003758:	f003 fe64 	bl	8007424 <HAL_RCC_GetPCLK2Freq>
 800375c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <HAL_InitTick+0xd4>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	3b01      	subs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_InitTick+0xd8>)
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_InitTick+0xdc>)
 8003770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_InitTick+0xd8>)
 8003774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003778:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800377a:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <HAL_InitTick+0xd8>)
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_InitTick+0xd8>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_InitTick+0xd8>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_InitTick+0xd8>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003792:	4818      	ldr	r0, [pc, #96]	; (80037f4 <HAL_InitTick+0xd8>)
 8003794:	f003 fe8c 	bl	80074b0 <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800379e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11b      	bne.n	80037de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037a6:	4813      	ldr	r0, [pc, #76]	; (80037f4 <HAL_InitTick+0xd8>)
 80037a8:	f003 ff54 	bl	8007654 <HAL_TIM_Base_Start_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ba:	2019      	movs	r0, #25
 80037bc:	f000 fdba 	bl	8004334 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d808      	bhi.n	80037d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037c6:	2200      	movs	r2, #0
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	2019      	movs	r0, #25
 80037cc:	f000 fd96 	bl	80042fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_InitTick+0xe0>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e002      	b.n	80037de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3730      	adds	r7, #48	; 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	20001b1c 	.word	0x20001b1c
 80037f8:	40010000 	.word	0x40010000
 80037fc:	20000084 	.word	0x20000084

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <NMI_Handler+0x4>

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SW_Pin);
 8003830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003834:	f001 fa9a 	bl	8004d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}

0800383c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003842:	f004 fb31 	bl	8007ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20001b1c 	.word	0x20001b1c

08003850 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003854:	4802      	ldr	r0, [pc, #8]	; (8003860 <TIM5_IRQHandler+0x10>)
 8003856:	f004 fb27 	bl	8007ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000690 	.word	0x20000690

08003864 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <DMA2_Stream0_IRQHandler+0x10>)
 800386a:	f000 fe77 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000504 	.word	0x20000504

08003878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <OTG_FS_IRQHandler+0x10>)
 800387e:	f002 f838 	bl	80058f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20005dd4 	.word	0x20005dd4

0800388c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <SystemInit+0x20>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	4a05      	ldr	r2, [pc, #20]	; (80038ac <SystemInit+0x20>)
 8003898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800389c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038b4:	480d      	ldr	r0, [pc, #52]	; (80038ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038b6:	490e      	ldr	r1, [pc, #56]	; (80038f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038b8:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038bc:	e002      	b.n	80038c4 <LoopCopyDataInit>

080038be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038c2:	3304      	adds	r3, #4

080038c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c8:	d3f9      	bcc.n	80038be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ca:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038cc:	4c0b      	ldr	r4, [pc, #44]	; (80038fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80038ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038d0:	e001      	b.n	80038d6 <LoopFillZerobss>

080038d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038d4:	3204      	adds	r2, #4

080038d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d8:	d3fb      	bcc.n	80038d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038da:	f7ff ffd7 	bl	800388c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038de:	f00a ffd7 	bl	800e890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038e2:	f7fe febb 	bl	800265c <main>
  bx  lr    
 80038e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80038ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038f0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80038f4:	0800f240 	.word	0x0800f240
  ldr r2, =_sbss
 80038f8:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80038fc:	200062fc 	.word	0x200062fc

08003900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003900:	e7fe      	b.n	8003900 <ADC_IRQHandler>
	...

08003904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <HAL_Init+0x40>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <HAL_Init+0x40>)
 800391a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_Init+0x40>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392c:	2003      	movs	r0, #3
 800392e:	f000 fcda 	bl	80042e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003932:	200f      	movs	r0, #15
 8003934:	f7ff fef2 	bl	800371c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003938:	f7ff fd00 	bl	800333c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00

08003948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x20>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x24>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4413      	add	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_IncTick+0x24>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000088 	.word	0x20000088
 800396c:	20001b64 	.word	0x20001b64

08003970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_GetTick+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20001b64 	.word	0x20001b64

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff ffee 	bl	8003970 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffde 	bl	8003970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000088 	.word	0x20000088

080039d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e033      	b.n	8003a4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fcd0 	bl	8003394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a16:	f023 0302 	bic.w	r3, r3, #2
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa34 	bl	8003e90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3e:	e001      	b.n	8003a44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Start_DMA+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ce      	b.n	8003c14 <HAL_ADC_Start_DMA+0x1bc>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d018      	beq.n	8003abe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9c:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_ADC_Start_DMA+0x1c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5f      	ldr	r2, [pc, #380]	; (8003c20 <HAL_ADC_Start_DMA+0x1c8>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9a      	lsrs	r2, r3, #18
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ab0:	e002      	b.n	8003ab8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f9      	bne.n	8003ab2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d107      	bne.n	8003ade <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8086 	bne.w	8003bfa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f023 0206 	bic.w	r2, r3, #6
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3a:	e002      	b.n	8003b42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_ADC_Start_DMA+0x1cc>)
 8003b4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <HAL_ADC_Start_DMA+0x1d0>)
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a34      	ldr	r2, [pc, #208]	; (8003c2c <HAL_ADC_Start_DMA+0x1d4>)
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	4a33      	ldr	r2, [pc, #204]	; (8003c30 <HAL_ADC_Start_DMA+0x1d8>)
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	334c      	adds	r3, #76	; 0x4c
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f000 fc84 	bl	80044ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10f      	bne.n	8003bd0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d129      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	e020      	b.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_ADC_Start_DMA+0x1dc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d11b      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d114      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	e00b      	b.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000080 	.word	0x20000080
 8003c20:	431bde83 	.word	0x431bde83
 8003c24:	40012300 	.word	0x40012300
 8003c28:	08004089 	.word	0x08004089
 8003c2c:	08004143 	.word	0x08004143
 8003c30:	0800415f 	.word	0x0800415f
 8003c34:	40012000 	.word	0x40012000

08003c38 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e105      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x228>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	d925      	bls.n	8003cc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b1e      	subs	r3, #30
 8003c8e:	2207      	movs	r2, #7
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43da      	mvns	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68d9      	ldr	r1, [r3, #12]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4403      	add	r3, r0
 8003cb6:	3b1e      	subs	r3, #30
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e022      	b.n	8003d0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	2207      	movs	r2, #7
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6919      	ldr	r1, [r3, #16]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4403      	add	r3, r0
 8003d00:	409a      	lsls	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d824      	bhi.n	8003d5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3b05      	subs	r3, #5
 8003d24:	221f      	movs	r2, #31
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b05      	subs	r3, #5
 8003d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
 8003d5a:	e04c      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d824      	bhi.n	8003dae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b23      	subs	r3, #35	; 0x23
 8003d76:	221f      	movs	r2, #31
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	400a      	ands	r2, r1
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4618      	mov	r0, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b23      	subs	r3, #35	; 0x23
 8003da0:	fa00 f203 	lsl.w	r2, r0, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
 8003dac:	e023      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b41      	subs	r3, #65	; 0x41
 8003dc0:	221f      	movs	r2, #31
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	400a      	ands	r2, r1
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	3b41      	subs	r3, #65	; 0x41
 8003dea:	fa00 f203 	lsl.w	r2, r0, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <HAL_ADC_ConfigChannel+0x234>)
 8003df8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <HAL_ADC_ConfigChannel+0x238>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x1cc>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b12      	cmp	r3, #18
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <HAL_ADC_ConfigChannel+0x238>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d123      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x21e>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d003      	beq.n	8003e32 <HAL_ADC_ConfigChannel+0x1e6>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b11      	cmp	r3, #17
 8003e30:	d11b      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d111      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_ADC_ConfigChannel+0x23c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a10      	ldr	r2, [pc, #64]	; (8003e8c <HAL_ADC_ConfigChannel+0x240>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	0c9a      	lsrs	r2, r3, #18
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e5c:	e002      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f9      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012300 	.word	0x40012300
 8003e84:	40012000 	.word	0x40012000
 8003e88:	20000080 	.word	0x20000080
 8003e8c:	431bde83 	.word	0x431bde83

08003e90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e98:	4b79      	ldr	r3, [pc, #484]	; (8004080 <ADC_Init+0x1f0>)
 8003e9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	021a      	lsls	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	4a58      	ldr	r2, [pc, #352]	; (8004084 <ADC_Init+0x1f4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e00f      	b.n	8003f8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0202 	bic.w	r2, r2, #2
 8003f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7e1b      	ldrb	r3, [r3, #24]
 8003fa8:	005a      	lsls	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	035a      	lsls	r2, r3, #13
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e007      	b.n	8004004 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004002:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	3b01      	subs	r3, #1
 8004020:	051a      	lsls	r2, r3, #20
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6899      	ldr	r1, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004046:	025a      	lsls	r2, r3, #9
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	029a      	lsls	r2, r3, #10
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40012300 	.word	0x40012300
 8004084:	0f000001 	.word	0x0f000001

08004088 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d13c      	bne.n	800411c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d12b      	bne.n	8004114 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d127      	bne.n	8004114 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d119      	bne.n	8004114 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0220 	bic.w	r2, r2, #32
 80040ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fe f997 	bl	8002448 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800411a:	e00e      	b.n	800413a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fd85 	bl	8003c38 <HAL_ADC_ErrorCallback>
}
 800412e:	e004      	b.n	800413a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7fe f94b 	bl	80023ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fd5a 	bl	8003c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041be:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	60d3      	str	r3, [r2, #12]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <__NVIC_GetPriorityGrouping+0x18>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 0307 	and.w	r3, r3, #7
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	db0b      	blt.n	800421a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	4907      	ldr	r1, [pc, #28]	; (8004228 <__NVIC_EnableIRQ+0x38>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2001      	movs	r0, #1
 8004212:	fa00 f202 	lsl.w	r2, r0, r2
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000e100 	.word	0xe000e100

0800422c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db0a      	blt.n	8004256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	490c      	ldr	r1, [pc, #48]	; (8004278 <__NVIC_SetPriority+0x4c>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	440b      	add	r3, r1
 8004250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004254:	e00a      	b.n	800426c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4908      	ldr	r1, [pc, #32]	; (800427c <__NVIC_SetPriority+0x50>)
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	3b04      	subs	r3, #4
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	440b      	add	r3, r1
 800426a:	761a      	strb	r2, [r3, #24]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f1c3 0307 	rsb	r3, r3, #7
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf28      	it	cs
 800429e:	2304      	movcs	r3, #4
 80042a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d902      	bls.n	80042b0 <NVIC_EncodePriority+0x30>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3b03      	subs	r3, #3
 80042ae:	e000      	b.n	80042b2 <NVIC_EncodePriority+0x32>
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	401a      	ands	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c8:	f04f 31ff 	mov.w	r1, #4294967295
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43d9      	mvns	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	4313      	orrs	r3, r2
         );
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff4c 	bl	800418c <__NVIC_SetPriorityGrouping>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800430e:	f7ff ff61 	bl	80041d4 <__NVIC_GetPriorityGrouping>
 8004312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7ff ffb1 	bl	8004280 <NVIC_EncodePriority>
 800431e:	4602      	mov	r2, r0
 8004320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff80 	bl	800422c <__NVIC_SetPriority>
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff54 	bl	80041f0 <__NVIC_EnableIRQ>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800435c:	f7ff fb08 	bl	8003970 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e099      	b.n	80044a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800438c:	e00f      	b.n	80043ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800438e:	f7ff faef 	bl	8003970 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b05      	cmp	r3, #5
 800439a:	d908      	bls.n	80043ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2203      	movs	r2, #3
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e078      	b.n	80044a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e8      	bne.n	800438e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <HAL_DMA_Init+0x158>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2b04      	cmp	r3, #4
 8004406:	d107      	bne.n	8004418 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	4313      	orrs	r3, r2
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b04      	cmp	r3, #4
 8004440:	d117      	bne.n	8004472 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa6f 	bl	8004938 <DMA_CheckFifoParam>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800446e:	2301      	movs	r3, #1
 8004470:	e016      	b.n	80044a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa26 	bl	80048cc <DMA_CalcBaseAndBitshift>
 8004480:	4603      	mov	r3, r0
 8004482:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	223f      	movs	r2, #63	; 0x3f
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	f010803f 	.word	0xf010803f

080044ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_DMA_Start_IT+0x26>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e040      	b.n	8004554 <HAL_DMA_Start_IT+0xa8>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d12f      	bne.n	8004546 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f9b8 	bl	8004870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	223f      	movs	r2, #63	; 0x3f
 8004506:	409a      	lsls	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0216 	orr.w	r2, r2, #22
 800451a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e005      	b.n	8004552 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004568:	4b8e      	ldr	r3, [pc, #568]	; (80047a4 <HAL_DMA_IRQHandler+0x248>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a8e      	ldr	r2, [pc, #568]	; (80047a8 <HAL_DMA_IRQHandler+0x24c>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a9b      	lsrs	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	2208      	movs	r2, #8
 8004588:	409a      	lsls	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01a      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	2208      	movs	r2, #8
 80045b6:	409a      	lsls	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f043 0201 	orr.w	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d012      	beq.n	80045fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	2201      	movs	r2, #1
 80045ec:	409a      	lsls	r2, r3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f043 0202 	orr.w	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	2204      	movs	r2, #4
 8004604:	409a      	lsls	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	2204      	movs	r2, #4
 8004622:	409a      	lsls	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	2210      	movs	r2, #16
 800463a:	409a      	lsls	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d043      	beq.n	80046cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d03c      	beq.n	80046cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	2210      	movs	r2, #16
 8004658:	409a      	lsls	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d024      	beq.n	80046cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
 800468a:	e01f      	b.n	80046cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
 800469c:	e016      	b.n	80046cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0208 	bic.w	r2, r2, #8
 80046ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d0:	2220      	movs	r2, #32
 80046d2:	409a      	lsls	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 808f 	beq.w	80047fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8087 	beq.w	80047fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f2:	2220      	movs	r2, #32
 80046f4:	409a      	lsls	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b05      	cmp	r3, #5
 8004704:	d136      	bne.n	8004774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0216 	bic.w	r2, r2, #22
 8004714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <HAL_DMA_IRQHandler+0x1da>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0208 	bic.w	r2, r2, #8
 8004744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	223f      	movs	r2, #63	; 0x3f
 800474c:	409a      	lsls	r2, r3
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	2b00      	cmp	r3, #0
 8004768:	d07e      	beq.n	8004868 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
        }
        return;
 8004772:	e079      	b.n	8004868 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01d      	beq.n	80047be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	2b00      	cmp	r3, #0
 8004796:	d031      	beq.n	80047fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	4798      	blx	r3
 80047a0:	e02c      	b.n	80047fc <HAL_DMA_IRQHandler+0x2a0>
 80047a2:	bf00      	nop
 80047a4:	20000080 	.word	0x20000080
 80047a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d023      	beq.n	80047fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
 80047bc:	e01e      	b.n	80047fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0210 	bic.w	r2, r2, #16
 80047da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	2b00      	cmp	r3, #0
 8004802:	d032      	beq.n	800486a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d022      	beq.n	8004856 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2205      	movs	r2, #5
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3301      	adds	r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	d307      	bcc.n	8004844 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f2      	bne.n	8004828 <HAL_DMA_IRQHandler+0x2cc>
 8004842:	e000      	b.n	8004846 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004844:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
 8004866:	e000      	b.n	800486a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004868:	bf00      	nop
    }
  }
}
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800488c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d108      	bne.n	80048b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048ae:	e007      	b.n	80048c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	3b10      	subs	r3, #16
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <DMA_CalcBaseAndBitshift+0x64>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <DMA_CalcBaseAndBitshift+0x68>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d909      	bls.n	800490e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	; 0x58
 800490c:	e007      	b.n	800491e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	aaaaaaab 	.word	0xaaaaaaab
 8004934:	0800f228 	.word	0x0800f228

08004938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11f      	bne.n	8004992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d856      	bhi.n	8004a06 <DMA_CheckFifoParam+0xce>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <DMA_CheckFifoParam+0x28>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004971 	.word	0x08004971
 8004964:	08004983 	.word	0x08004983
 8004968:	08004971 	.word	0x08004971
 800496c:	08004a07 	.word	0x08004a07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d046      	beq.n	8004a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004980:	e043      	b.n	8004a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800498a:	d140      	bne.n	8004a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004990:	e03d      	b.n	8004a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499a:	d121      	bne.n	80049e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d837      	bhi.n	8004a12 <DMA_CheckFifoParam+0xda>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <DMA_CheckFifoParam+0x70>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049bf 	.word	0x080049bf
 80049b0:	080049b9 	.word	0x080049b9
 80049b4:	080049d1 	.word	0x080049d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      break;
 80049bc:	e030      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d025      	beq.n	8004a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ce:	e022      	b.n	8004a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049d8:	d11f      	bne.n	8004a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049de:	e01c      	b.n	8004a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d903      	bls.n	80049ee <DMA_CheckFifoParam+0xb6>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d003      	beq.n	80049f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049ec:	e018      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
      break;
 80049f2:	e015      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e00b      	b.n	8004a1e <DMA_CheckFifoParam+0xe6>
      break;
 8004a06:	bf00      	nop
 8004a08:	e00a      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e008      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e006      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;
 8004a12:	bf00      	nop
 8004a14:	e004      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop

08004a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	; 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e159      	b.n	8004d00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	f040 8148 	bne.w	8004cfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d005      	beq.n	8004a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d130      	bne.n	8004ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ab8:	2201      	movs	r2, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 0201 	and.w	r2, r3, #1
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d017      	beq.n	8004b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	2203      	movs	r2, #3
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d123      	bne.n	8004b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	08da      	lsrs	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3208      	adds	r2, #8
 8004b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	220f      	movs	r2, #15
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	08da      	lsrs	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3208      	adds	r2, #8
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	2203      	movs	r2, #3
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0203 	and.w	r2, r3, #3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a2 	beq.w	8004cfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	4b57      	ldr	r3, [pc, #348]	; (8004d18 <HAL_GPIO_Init+0x2e8>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	4a56      	ldr	r2, [pc, #344]	; (8004d18 <HAL_GPIO_Init+0x2e8>)
 8004bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bc6:	4b54      	ldr	r3, [pc, #336]	; (8004d18 <HAL_GPIO_Init+0x2e8>)
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bd2:	4a52      	ldr	r2, [pc, #328]	; (8004d1c <HAL_GPIO_Init+0x2ec>)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	089b      	lsrs	r3, r3, #2
 8004bd8:	3302      	adds	r3, #2
 8004bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	220f      	movs	r2, #15
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a49      	ldr	r2, [pc, #292]	; (8004d20 <HAL_GPIO_Init+0x2f0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d019      	beq.n	8004c32 <HAL_GPIO_Init+0x202>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a48      	ldr	r2, [pc, #288]	; (8004d24 <HAL_GPIO_Init+0x2f4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_GPIO_Init+0x1fe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a47      	ldr	r2, [pc, #284]	; (8004d28 <HAL_GPIO_Init+0x2f8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00d      	beq.n	8004c2a <HAL_GPIO_Init+0x1fa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a46      	ldr	r2, [pc, #280]	; (8004d2c <HAL_GPIO_Init+0x2fc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <HAL_GPIO_Init+0x1f6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a45      	ldr	r2, [pc, #276]	; (8004d30 <HAL_GPIO_Init+0x300>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_GPIO_Init+0x1f2>
 8004c1e:	2304      	movs	r3, #4
 8004c20:	e008      	b.n	8004c34 <HAL_GPIO_Init+0x204>
 8004c22:	2307      	movs	r3, #7
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_Init+0x204>
 8004c26:	2303      	movs	r3, #3
 8004c28:	e004      	b.n	8004c34 <HAL_GPIO_Init+0x204>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e002      	b.n	8004c34 <HAL_GPIO_Init+0x204>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_GPIO_Init+0x204>
 8004c32:	2300      	movs	r3, #0
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	f002 0203 	and.w	r2, r2, #3
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c44:	4935      	ldr	r1, [pc, #212]	; (8004d1c <HAL_GPIO_Init+0x2ec>)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c52:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cca:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cf4:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <HAL_GPIO_Init+0x304>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	f67f aea2 	bls.w	8004a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3724      	adds	r7, #36	; 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020400 	.word	0x40020400
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40013c00 	.word	0x40013c00

08004d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d54:	e003      	b.n	8004d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	619a      	str	r2, [r3, #24]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fae2 	bl	8002354 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e12b      	b.n	8005006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe fb5c 	bl	8003480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e00:	f002 fafc 	bl	80073fc <HAL_RCC_GetPCLK1Freq>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4a81      	ldr	r2, [pc, #516]	; (8005010 <HAL_I2C_Init+0x274>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d807      	bhi.n	8004e20 <HAL_I2C_Init+0x84>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a80      	ldr	r2, [pc, #512]	; (8005014 <HAL_I2C_Init+0x278>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e006      	b.n	8004e2e <HAL_I2C_Init+0x92>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <HAL_I2C_Init+0x27c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	bf94      	ite	ls
 8004e28:	2301      	movls	r3, #1
 8004e2a:	2300      	movhi	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0e7      	b.n	8005006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a78      	ldr	r2, [pc, #480]	; (800501c <HAL_I2C_Init+0x280>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0c9b      	lsrs	r3, r3, #18
 8004e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a6a      	ldr	r2, [pc, #424]	; (8005010 <HAL_I2C_Init+0x274>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <HAL_I2C_Init+0xd4>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	e009      	b.n	8004e84 <HAL_I2C_Init+0xe8>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	4a69      	ldr	r2, [pc, #420]	; (8005020 <HAL_I2C_Init+0x284>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	3301      	adds	r3, #1
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	495c      	ldr	r1, [pc, #368]	; (8005010 <HAL_I2C_Init+0x274>)
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d819      	bhi.n	8004ed8 <HAL_I2C_Init+0x13c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e59      	subs	r1, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb2:	1c59      	adds	r1, r3, #1
 8004eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eb8:	400b      	ands	r3, r1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_I2C_Init+0x138>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1e59      	subs	r1, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed2:	e051      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	e04f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d111      	bne.n	8004f04 <HAL_I2C_Init+0x168>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1e58      	subs	r0, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e012      	b.n	8004f2a <HAL_I2C_Init+0x18e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1e58      	subs	r0, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	0099      	lsls	r1, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Init+0x196>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e022      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <HAL_I2C_Init+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1e58      	subs	r0, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	440b      	add	r3, r1
 8004f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	e00f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1e58      	subs	r0, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	0099      	lsls	r1, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	6809      	ldr	r1, [r1, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6911      	ldr	r1, [r2, #16]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	000186a0 	.word	0x000186a0
 8005014:	001e847f 	.word	0x001e847f
 8005018:	003d08ff 	.word	0x003d08ff
 800501c:	431bde83 	.word	0x431bde83
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	460b      	mov	r3, r1
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800503e:	f7fe fc97 	bl	8003970 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	f040 80d9 	bne.w	8005204 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2319      	movs	r3, #25
 8005058:	2201      	movs	r2, #1
 800505a:	496d      	ldr	r1, [pc, #436]	; (8005210 <HAL_I2C_Mem_Write+0x1ec>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f971 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	e0cc      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2C_Mem_Write+0x56>
 8005076:	2302      	movs	r3, #2
 8005078:	e0c5      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d007      	beq.n	80050a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	; 0x21
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2240      	movs	r2, #64	; 0x40
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a4d      	ldr	r2, [pc, #308]	; (8005214 <HAL_I2C_Mem_Write+0x1f0>)
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050e2:	88f8      	ldrh	r0, [r7, #6]
 80050e4:	893a      	ldrh	r2, [r7, #8]
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4603      	mov	r3, r0
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f890 	bl	8005218 <I2C_RequestMemoryWrite>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d052      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e081      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f9f2 	bl	80054f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b04      	cmp	r3, #4
 8005118:	d107      	bne.n	800512a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06b      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11b      	bne.n	80051a4 <HAL_I2C_Mem_Write+0x180>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1aa      	bne.n	8005102 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f9de 	bl	8005572 <I2C_WaitOnBTFFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d107      	bne.n	80051d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e016      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	00100002 	.word	0x00100002
 8005214:	ffff0000 	.word	0xffff0000

08005218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2200      	movs	r2, #0
 800524a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f878 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005268:	d103      	bne.n	8005272 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e05f      	b.n	8005336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005276:	897b      	ldrh	r3, [r7, #10]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	6a3a      	ldr	r2, [r7, #32]
 800528a:	492d      	ldr	r1, [pc, #180]	; (8005340 <I2C_RequestMemoryWrite+0x128>)
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f8b0 	bl	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e04c      	b.n	8005336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	6a39      	ldr	r1, [r7, #32]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f91a 	bl	80054f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d107      	bne.n	80052da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e02b      	b.n	8005336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d105      	bne.n	80052f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e4:	893b      	ldrh	r3, [r7, #8]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	611a      	str	r2, [r3, #16]
 80052ee:	e021      	b.n	8005334 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f0:	893b      	ldrh	r3, [r7, #8]
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	6a39      	ldr	r1, [r7, #32]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f8f4 	bl	80054f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b04      	cmp	r3, #4
 8005314:	d107      	bne.n	8005326 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e005      	b.n	8005336 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800532a:	893b      	ldrh	r3, [r7, #8]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	00010002 	.word	0x00010002

08005344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005354:	e025      	b.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d021      	beq.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fe fb07 	bl	8003970 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e023      	b.n	80053ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10d      	bne.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	e00c      	b.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d0b6      	beq.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005400:	e051      	b.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005410:	d123      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800542a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e046      	b.n	80054e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d021      	beq.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fe fa85 	bl	8003970 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e020      	b.n	80054e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10c      	bne.n	80054ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf14      	ite	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	2300      	moveq	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	e00b      	b.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4013      	ands	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d18d      	bne.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fc:	e02d      	b.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f878 	bl	80055f4 <I2C_IsAcknowledgeFailed>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e02d      	b.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d021      	beq.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fe fa2b 	bl	8003970 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e007      	b.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d1ca      	bne.n	80054fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800557e:	e02d      	b.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f837 	bl	80055f4 <I2C_IsAcknowledgeFailed>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e02d      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d021      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005598:	f7fe f9ea 	bl	8003970 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e007      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d1ca      	bne.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560a:	d11b      	bne.n	8005644 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005614:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	f043 0204 	orr.w	r2, r3, #4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005654:	b08f      	sub	sp, #60	; 0x3c
 8005656:	af0a      	add	r7, sp, #40	; 0x28
 8005658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e10f      	b.n	8005884 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f008 fdfe 	bl	800e280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2203      	movs	r2, #3
 8005688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f003 fc67 	bl	8008f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	687e      	ldr	r6, [r7, #4]
 80056b0:	466d      	mov	r5, sp
 80056b2:	f106 0410 	add.w	r4, r6, #16
 80056b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80056c6:	1d33      	adds	r3, r6, #4
 80056c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ca:	6838      	ldr	r0, [r7, #0]
 80056cc:	f003 fb3e 	bl	8008d4c <USB_CoreInit>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0d0      	b.n	8005884 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 fc55 	bl	8008f98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
 80056f2:	e04a      	b.n	800578a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	333d      	adds	r3, #61	; 0x3d
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	333c      	adds	r3, #60	; 0x3c
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	b298      	uxth	r0, r3
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	3344      	adds	r3, #68	; 0x44
 8005730:	4602      	mov	r2, r0
 8005732:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	3340      	adds	r3, #64	; 0x40
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3348      	adds	r3, #72	; 0x48
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	334c      	adds	r3, #76	; 0x4c
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3354      	adds	r3, #84	; 0x54
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	3301      	adds	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d3af      	bcc.n	80056f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	e044      	b.n	8005824 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800579a:	7bfa      	ldrb	r2, [r7, #15]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057c6:	7bfa      	ldrb	r2, [r7, #15]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057f2:	7bfa      	ldrb	r2, [r7, #15]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005808:	7bfa      	ldrb	r2, [r7, #15]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	3301      	adds	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d3b5      	bcc.n	800579a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	687e      	ldr	r6, [r7, #4]
 8005836:	466d      	mov	r5, sp
 8005838:	f106 0410 	add.w	r4, r6, #16
 800583c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800583e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005848:	e885 0003 	stmia.w	r5, {r0, r1}
 800584c:	1d33      	adds	r3, r6, #4
 800584e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005850:	6838      	ldr	r0, [r7, #0]
 8005852:	f003 fbed 	bl	8009030 <USB_DevInit>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e00d      	b.n	8005884 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f004 fd3c 	bl	800a2fa <USB_DevDisconnect>

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800588c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_PCD_Start+0x1c>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e020      	b.n	80058ea <HAL_PCD_Start+0x5e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d109      	bne.n	80058cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d005      	beq.n	80058cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f003 fb3f 	bl	8008f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f004 fcec 	bl	800a2b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058f2:	b590      	push	{r4, r7, lr}
 80058f4:	b08d      	sub	sp, #52	; 0x34
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f004 fdaa 	bl	800a462 <USB_GetMode>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 848a 	bne.w	800622a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fd0e 	bl	800a33c <USB_ReadInterrupts>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8480 	beq.w	8006228 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f004 fcfb 	bl	800a33c <USB_ReadInterrupts>
 8005946:	4603      	mov	r3, r0
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d107      	bne.n	8005960 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f002 0202 	and.w	r2, r2, #2
 800595e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fce9 	bl	800a33c <USB_ReadInterrupts>
 800596a:	4603      	mov	r3, r0
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b10      	cmp	r3, #16
 8005972:	d161      	bne.n	8005a38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0210 	bic.w	r2, r2, #16
 8005982:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	0c5b      	lsrs	r3, r3, #17
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d124      	bne.n	80059fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d035      	beq.n	8005a28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6a38      	ldr	r0, [r7, #32]
 80059d0:	f004 fb20 	bl	800a014 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e0:	441a      	add	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f2:	441a      	add	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	621a      	str	r2, [r3, #32]
 80059f8:	e016      	b.n	8005a28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	0c5b      	lsrs	r3, r3, #17
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d110      	bne.n	8005a28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6a38      	ldr	r0, [r7, #32]
 8005a12:	f004 faff 	bl	800a014 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	6a1a      	ldr	r2, [r3, #32]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a22:	441a      	add	r2, r3
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0210 	orr.w	r2, r2, #16
 8005a36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f004 fc7d 	bl	800a33c <USB_ReadInterrupts>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a4c:	f040 80a7 	bne.w	8005b9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fc82 	bl	800a362 <USB_ReadDevAllOutEpInterrupt>
 8005a5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a60:	e099      	b.n	8005b96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 808e 	beq.w	8005b8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 fca6 	bl	800a3ca <USB_ReadDevOutEPInterrupt>
 8005a7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	2301      	movs	r3, #1
 8005a9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 feaa 	bl	80067f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	2308      	movs	r3, #8
 8005abe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 ff80 	bl	80069c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d030      	beq.n	8005b50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d109      	bne.n	8005b0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d108      	bne.n	8005b3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f008 fca7 	bl	800e48c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	461a      	mov	r2, r3
 8005b68:	2320      	movs	r3, #32
 8005b6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af62 	bne.w	8005a62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f004 fbca 	bl	800a33c <USB_ReadInterrupts>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb2:	f040 80db 	bne.w	8005d6c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f004 fbeb 	bl	800a396 <USB_ReadDevAllInEpInterrupt>
 8005bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005bc6:	e0cd      	b.n	8005d64 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80c2 	beq.w	8005d58 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fc11 	bl	800a406 <USB_ReadDevInEPInterrupt>
 8005be4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d057      	beq.n	8005ca0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c10:	4013      	ands	r3, r2
 8005c12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	461a      	mov	r2, r3
 8005c22:	2301      	movs	r3, #1
 8005c24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d132      	bne.n	8005c94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	334c      	adds	r3, #76	; 0x4c
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c44:	4613      	mov	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4403      	add	r3, r0
 8005c4e:	3348      	adds	r3, #72	; 0x48
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4419      	add	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4403      	add	r3, r0
 8005c62:	334c      	adds	r3, #76	; 0x4c
 8005c64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d113      	bne.n	8005c94 <HAL_PCD_IRQHandler+0x3a2>
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	3354      	adds	r3, #84	; 0x54
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2101      	movs	r1, #1
 8005c90:	f004 fc18 	bl	800a4c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f008 fb71 	bl	800e382 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2308      	movs	r3, #8
 8005cba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2340      	movs	r3, #64	; 0x40
 8005cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d023      	beq.n	8005d46 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d00:	6a38      	ldr	r0, [r7, #32]
 8005d02:	f003 faf9 	bl	80092f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	3338      	adds	r3, #56	; 0x38
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	3304      	adds	r3, #4
 8005d18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	78db      	ldrb	r3, [r3, #3]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d108      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f008 fbbe 	bl	800e4b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	2302      	movs	r3, #2
 8005d44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fcc3 	bl	80066de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f47f af2e 	bne.w	8005bc8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f004 fae3 	bl	800a33c <USB_ReadInterrupts>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d80:	d122      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d108      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 feaa 	bl	8006b04 <HAL_PCDEx_LPM_Callback>
 8005db0:	e002      	b.n	8005db8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f008 fb5c 	bl	800e470 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 fab5 	bl	800a33c <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ddc:	d112      	bne.n	8005e04 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f008 fb18 	bl	800e424 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695a      	ldr	r2, [r3, #20]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e02:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f004 fa97 	bl	800a33c <USB_ReadInterrupts>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	f040 80b7 	bne.w	8005f8a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2a:	f023 0301 	bic.w	r3, r3, #1
 8005e2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2110      	movs	r1, #16
 8005e36:	4618      	mov	r0, r3
 8005e38:	f003 fa5e 	bl	80092f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e40:	e046      	b.n	8005ed0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ea8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ec8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	3301      	adds	r3, #1
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d3b3      	bcc.n	8005e42 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005eec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f06:	f043 030b 	orr.w	r3, r3, #11
 8005f0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1c:	f043 030b 	orr.w	r3, r3, #11
 8005f20:	6453      	str	r3, [r2, #68]	; 0x44
 8005f22:	e015      	b.n	8005f50 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005f3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f4a:	f043 030b 	orr.w	r3, r3, #11
 8005f4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f74:	461a      	mov	r2, r3
 8005f76:	f004 faa5 	bl	800a4c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f004 f9d4 	bl	800a33c <USB_ReadInterrupts>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9e:	d124      	bne.n	8005fea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f004 fa6a 	bl	800a47e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f003 fa1f 	bl	80093f2 <USB_GetDevSpeed>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681c      	ldr	r4, [r3, #0]
 8005fc0:	f001 fa10 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8005fc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f002 ff1e 	bl	8008e10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f008 f9fc 	bl	800e3d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f004 f9a4 	bl	800a33c <USB_ReadInterrupts>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d10a      	bne.n	8006014 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f008 f9d9 	bl	800e3b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f002 0208 	and.w	r2, r2, #8
 8006012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f004 f98f 	bl	800a33c <USB_ReadInterrupts>
 800601e:	4603      	mov	r3, r0
 8006020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	d122      	bne.n	800606e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006034:	2301      	movs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	e014      	b.n	8006064 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d105      	bne.n	800605e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb0f 	bl	800667c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	429a      	cmp	r2, r3
 800606c:	d3e5      	bcc.n	800603a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f004 f962 	bl	800a33c <USB_ReadInterrupts>
 8006078:	4603      	mov	r3, r0
 800607a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006082:	d13b      	bne.n	80060fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006084:	2301      	movs	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	e02b      	b.n	80060e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3340      	adds	r3, #64	; 0x40
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d115      	bne.n	80060dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da12      	bge.n	80060dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	333f      	adds	r3, #63	; 0x3f
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fad0 	bl	800667c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	3301      	adds	r3, #1
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3ce      	bcc.n	800608a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f004 f91b 	bl	800a33c <USB_ReadInterrupts>
 8006106:	4603      	mov	r3, r0
 8006108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800610c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006110:	d155      	bne.n	80061be <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006112:	2301      	movs	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
 8006116:	e045      	b.n	80061a4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d12e      	bne.n	800619e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006140:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006142:	2b00      	cmp	r3, #0
 8006144:	da2b      	bge.n	800619e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006152:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006156:	429a      	cmp	r2, r3
 8006158:	d121      	bne.n	800619e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800619a:	6053      	str	r3, [r2, #4]
            break;
 800619c:	e007      	b.n	80061ae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	3301      	adds	r3, #1
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3b4      	bcc.n	8006118 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80061bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f004 f8ba 	bl	800a33c <USB_ReadInterrupts>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d10a      	bne.n	80061ea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f008 f97d 	bl	800e4d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f004 f8a4 	bl	800a33c <USB_ReadInterrupts>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d115      	bne.n	800622a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f008 f96d 	bl	800e4f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6859      	ldr	r1, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	e000      	b.n	800622a <HAL_PCD_IRQHandler+0x938>
      return;
 8006228:	bf00      	nop
    }
  }
}
 800622a:	3734      	adds	r7, #52	; 0x34
 800622c:	46bd      	mov	sp, r7
 800622e:	bd90      	pop	{r4, r7, pc}

08006230 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_PCD_SetAddress+0x1a>
 8006246:	2302      	movs	r3, #2
 8006248:	e013      	b.n	8006272 <HAL_PCD_SetAddress+0x42>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f004 f802 	bl	800a26c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	4608      	mov	r0, r1
 8006284:	4611      	mov	r1, r2
 8006286:	461a      	mov	r2, r3
 8006288:	4603      	mov	r3, r0
 800628a:	70fb      	strb	r3, [r7, #3]
 800628c:	460b      	mov	r3, r1
 800628e:	803b      	strh	r3, [r7, #0]
 8006290:	4613      	mov	r3, r2
 8006292:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	da0f      	bge.n	80062c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	4613      	mov	r3, r2
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	3338      	adds	r3, #56	; 0x38
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	3304      	adds	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	705a      	strb	r2, [r3, #1]
 80062be:	e00f      	b.n	80062e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	f003 020f 	and.w	r2, r3, #15
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4413      	add	r3, r2
 80062d6:	3304      	adds	r3, #4
 80062d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062ec:	883a      	ldrh	r2, [r7, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	78ba      	ldrb	r2, [r7, #2]
 80062f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800630a:	78bb      	ldrb	r3, [r7, #2]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d102      	bne.n	8006316 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_PCD_EP_Open+0xaa>
 8006320:	2302      	movs	r3, #2
 8006322:	e00e      	b.n	8006342 <HAL_PCD_EP_Open+0xc8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68f9      	ldr	r1, [r7, #12]
 8006332:	4618      	mov	r0, r3
 8006334:	f003 f882 	bl	800943c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006340:	7afb      	ldrb	r3, [r7, #11]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da0f      	bge.n	800637e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3338      	adds	r3, #56	; 0x38
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	705a      	strb	r2, [r3, #1]
 800637c:	e00f      	b.n	800639e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_PCD_EP_Close+0x6e>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e00e      	b.n	80063d6 <HAL_PCD_EP_Close+0x8c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f003 f8c0 	bl	800954c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	460b      	mov	r3, r1
 80063ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	3304      	adds	r3, #4
 8006406:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	b2da      	uxtb	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d102      	bne.n	800643a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	f003 fb9f 	bl	8009b94 <USB_EP0StartXfer>
 8006456:	e008      	b.n	800646a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	6979      	ldr	r1, [r7, #20]
 8006466:	f003 f94d 	bl	8009704 <USB_EPStartXfer>
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	460b      	mov	r3, r1
 8006482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3338      	adds	r3, #56	; 0x38
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	3304      	adds	r3, #4
 800649a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2200      	movs	r2, #0
 80064ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2201      	movs	r2, #1
 80064b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	f003 fb55 	bl	8009b94 <USB_EP0StartXfer>
 80064ea:	e008      	b.n	80064fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	f003 f903 	bl	8009704 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	f003 020f 	and.w	r2, r3, #15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d901      	bls.n	8006526 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e050      	b.n	80065c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da0f      	bge.n	800654e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	3338      	adds	r3, #56	; 0x38
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	3304      	adds	r3, #4
 8006544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	705a      	strb	r2, [r3, #1]
 800654c:	e00d      	b.n	800656a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	4413      	add	r3, r2
 8006560:	3304      	adds	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_PCD_EP_SetStall+0x82>
 8006586:	2302      	movs	r3, #2
 8006588:	e01e      	b.n	80065c8 <HAL_PCD_EP_SetStall+0xc0>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	4618      	mov	r0, r3
 800659a:	f003 fd93 	bl	800a0c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	b2d9      	uxtb	r1, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065b8:	461a      	mov	r2, r3
 80065ba:	f003 ff83 	bl	800a4c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d901      	bls.n	80065ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e042      	b.n	8006674 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da0f      	bge.n	8006616 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	3338      	adds	r3, #56	; 0x38
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	705a      	strb	r2, [r3, #1]
 8006614:	e00f      	b.n	8006636 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	4613      	mov	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4413      	add	r3, r2
 800662c:	3304      	adds	r3, #4
 800662e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_PCD_EP_ClrStall+0x86>
 8006652:	2302      	movs	r3, #2
 8006654:	e00e      	b.n	8006674 <HAL_PCD_EP_ClrStall+0xa4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	4618      	mov	r0, r3
 8006666:	f003 fd9b 	bl	800a1a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da0c      	bge.n	80066aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	f003 020f 	and.w	r2, r3, #15
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3338      	adds	r3, #56	; 0x38
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3304      	adds	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e00c      	b.n	80066c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	4613      	mov	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4413      	add	r3, r2
 80066c0:	3304      	adds	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f003 fbba 	bl	8009e44 <USB_EPStopXfer>
 80066d0:	4603      	mov	r3, r0
 80066d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b08a      	sub	sp, #40	; 0x28
 80066e2:	af02      	add	r7, sp, #8
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	3304      	adds	r3, #4
 8006704:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	429a      	cmp	r2, r3
 8006710:	d901      	bls.n	8006716 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e06c      	b.n	80067f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	429a      	cmp	r2, r3
 800672a:	d902      	bls.n	8006732 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3303      	adds	r3, #3
 8006736:	089b      	lsrs	r3, r3, #2
 8006738:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800673a:	e02b      	b.n	8006794 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	429a      	cmp	r2, r3
 8006750:	d902      	bls.n	8006758 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3303      	adds	r3, #3
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6919      	ldr	r1, [r3, #16]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006770:	b2db      	uxtb	r3, r3
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	4603      	mov	r3, r0
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f003 fc0e 	bl	8009f98 <USB_WritePacket>

    ep->xfer_buff  += len;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	441a      	add	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d809      	bhi.n	80067be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d203      	bcs.n	80067be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1be      	bne.n	800673c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d811      	bhi.n	80067ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	2201      	movs	r2, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	43db      	mvns	r3, r3
 80067e4:	6939      	ldr	r1, [r7, #16]
 80067e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ea:	4013      	ands	r3, r2
 80067ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	333c      	adds	r3, #60	; 0x3c
 8006810:	3304      	adds	r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d17b      	bne.n	8006926 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	4a61      	ldr	r2, [pc, #388]	; (80069c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	f240 80b9 	bls.w	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80b3 	beq.w	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006860:	6093      	str	r3, [r2, #8]
 8006862:	e0a7      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	2320      	movs	r3, #32
 800687e:	6093      	str	r3, [r2, #8]
 8006880:	e098      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 8093 	bne.w	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d90f      	bls.n	80068b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b2:	6093      	str	r3, [r2, #8]
 80068b4:	e07e      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	3304      	adds	r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	0159      	lsls	r1, r3, #5
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	440b      	add	r3, r1
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d114      	bne.n	8006918 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006900:	461a      	mov	r2, r3
 8006902:	2101      	movs	r1, #1
 8006904:	f003 fdde 	bl	800a4c4 <USB_EP0_OutStart>
 8006908:	e006      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f007 fd14 	bl	800e34c <HAL_PCD_DataOutStageCallback>
 8006924:	e046      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d124      	bne.n	8006978 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694a:	6093      	str	r3, [r2, #8]
 800694c:	e032      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	2320      	movs	r3, #32
 8006968:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f007 fceb 	bl	800e34c <HAL_PCD_DataOutStageCallback>
 8006976:	e01d      	b.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d114      	bne.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069a0:	461a      	mov	r2, r3
 80069a2:	2100      	movs	r1, #0
 80069a4:	f003 fd8e 	bl	800a4c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f007 fccc 	bl	800e34c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	4f54300a 	.word	0x4f54300a
 80069c4:	4f54310a 	.word	0x4f54310a

080069c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	333c      	adds	r3, #60	; 0x3c
 80069e0:	3304      	adds	r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <PCD_EP_OutSetupPacket_int+0x88>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d90e      	bls.n	8006a1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f007 fc83 	bl	800e328 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d90c      	bls.n	8006a44 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d108      	bne.n	8006a44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2101      	movs	r1, #1
 8006a40:	f003 fd40 	bl	800a4c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	4f54300a 	.word	0x4f54300a

08006a54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
 8006a60:	4613      	mov	r3, r2
 8006a62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d107      	bne.n	8006a82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a72:	883b      	ldrh	r3, [r7, #0]
 8006a74:	0419      	lsls	r1, r3, #16
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a80:	e028      	b.n	8006ad4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e00d      	b.n	8006ab2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	3340      	adds	r3, #64	; 0x40
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	7bfa      	ldrb	r2, [r7, #15]
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3ec      	bcc.n	8006a96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006abc:	883b      	ldrh	r3, [r7, #0]
 8006abe:	0418      	lsls	r0, r3, #16
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4302      	orrs	r2, r0
 8006acc:	3340      	adds	r3, #64	; 0x40
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	887a      	ldrh	r2, [r7, #2]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e267      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d075      	beq.n	8006c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b3a:	4b88      	ldr	r3, [pc, #544]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d00c      	beq.n	8006b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b46:	4b85      	ldr	r3, [pc, #532]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d112      	bne.n	8006b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b52:	4b82      	ldr	r3, [pc, #520]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b5e:	d10b      	bne.n	8006b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b60:	4b7e      	ldr	r3, [pc, #504]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d05b      	beq.n	8006c24 <HAL_RCC_OscConfig+0x108>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d157      	bne.n	8006c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e242      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d106      	bne.n	8006b90 <HAL_RCC_OscConfig+0x74>
 8006b82:	4b76      	ldr	r3, [pc, #472]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a75      	ldr	r2, [pc, #468]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e01d      	b.n	8006bcc <HAL_RCC_OscConfig+0xb0>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b98:	d10c      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x98>
 8006b9a:	4b70      	ldr	r3, [pc, #448]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6f      	ldr	r2, [pc, #444]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	4b6d      	ldr	r3, [pc, #436]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6c      	ldr	r2, [pc, #432]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e00b      	b.n	8006bcc <HAL_RCC_OscConfig+0xb0>
 8006bb4:	4b69      	ldr	r3, [pc, #420]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a68      	ldr	r2, [pc, #416]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4b66      	ldr	r3, [pc, #408]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a65      	ldr	r2, [pc, #404]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d013      	beq.n	8006bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd4:	f7fc fecc 	bl	8003970 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bdc:	f7fc fec8 	bl	8003970 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b64      	cmp	r3, #100	; 0x64
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e207      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	4b5b      	ldr	r3, [pc, #364]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0xc0>
 8006bfa:	e014      	b.n	8006c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fc feb8 	bl	8003970 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fc feb4 	bl	8003970 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	; 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e1f3      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c16:	4b51      	ldr	r3, [pc, #324]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0xe8>
 8006c22:	e000      	b.n	8006c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d063      	beq.n	8006cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c32:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3e:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d11c      	bne.n	8006c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c4a:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d116      	bne.n	8006c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	4b41      	ldr	r3, [pc, #260]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_RCC_OscConfig+0x152>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e1c7      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6e:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4937      	ldr	r1, [pc, #220]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c82:	e03a      	b.n	8006cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d020      	beq.n	8006cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c8c:	4b34      	ldr	r3, [pc, #208]	; (8006d60 <HAL_RCC_OscConfig+0x244>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fc fe6d 	bl	8003970 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fc fe69 	bl	8003970 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e1a8      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cac:	4b2b      	ldr	r3, [pc, #172]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4b28      	ldr	r3, [pc, #160]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4925      	ldr	r1, [pc, #148]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	600b      	str	r3, [r1, #0]
 8006ccc:	e015      	b.n	8006cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <HAL_RCC_OscConfig+0x244>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd4:	f7fc fe4c 	bl	8003970 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cdc:	f7fc fe48 	bl	8003970 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e187      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cee:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d036      	beq.n	8006d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d0e:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <HAL_RCC_OscConfig+0x248>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fc fe2c 	bl	8003970 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d1c:	f7fc fe28 	bl	8003970 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e167      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x200>
 8006d3a:	e01b      	b.n	8006d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <HAL_RCC_OscConfig+0x248>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d42:	f7fc fe15 	bl	8003970 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d48:	e00e      	b.n	8006d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d4a:	f7fc fe11 	bl	8003970 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d907      	bls.n	8006d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e150      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	42470000 	.word	0x42470000
 8006d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d68:	4b88      	ldr	r3, [pc, #544]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ea      	bne.n	8006d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8097 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d86:	4b81      	ldr	r3, [pc, #516]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	4b7d      	ldr	r3, [pc, #500]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	4a7c      	ldr	r2, [pc, #496]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
 8006da2:	4b7a      	ldr	r3, [pc, #488]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db2:	4b77      	ldr	r3, [pc, #476]	; (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d118      	bne.n	8006df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dbe:	4b74      	ldr	r3, [pc, #464]	; (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a73      	ldr	r2, [pc, #460]	; (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dca:	f7fc fdd1 	bl	8003970 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd2:	f7fc fdcd 	bl	8003970 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e10c      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de4:	4b6a      	ldr	r3, [pc, #424]	; (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x2ea>
 8006df8:	4b64      	ldr	r3, [pc, #400]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4a63      	ldr	r2, [pc, #396]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
 8006e04:	e01c      	b.n	8006e40 <HAL_RCC_OscConfig+0x324>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x30c>
 8006e0e:	4b5f      	ldr	r3, [pc, #380]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a5e      	ldr	r2, [pc, #376]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	4b5c      	ldr	r3, [pc, #368]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a5b      	ldr	r2, [pc, #364]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0x324>
 8006e28:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a57      	ldr	r2, [pc, #348]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
 8006e34:	4b55      	ldr	r3, [pc, #340]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	4a54      	ldr	r2, [pc, #336]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e3a:	f023 0304 	bic.w	r3, r3, #4
 8006e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e48:	f7fc fd92 	bl	8003970 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fc fd8e 	bl	8003970 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e0cb      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e66:	4b49      	ldr	r3, [pc, #292]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0ee      	beq.n	8006e50 <HAL_RCC_OscConfig+0x334>
 8006e72:	e014      	b.n	8006e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e74:	f7fc fd7c 	bl	8003970 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7c:	f7fc fd78 	bl	8003970 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e0b5      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e92:	4b3e      	ldr	r3, [pc, #248]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1ee      	bne.n	8006e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d105      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea4:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80a1 	beq.w	8006ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eba:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d05c      	beq.n	8006f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d141      	bne.n	8006f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed4:	f7fc fd4c 	bl	8003970 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fc fd48 	bl	8003970 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e087      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69da      	ldr	r2, [r3, #28]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	019b      	lsls	r3, r3, #6
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	3b01      	subs	r3, #1
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	491b      	ldr	r1, [pc, #108]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fc fd21 	bl	8003970 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f32:	f7fc fd1d 	bl	8003970 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e05c      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x416>
 8006f50:	e054      	b.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc fd0a 	bl	8003970 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fc fd06 	bl	8003970 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e045      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x444>
 8006f7e:	e03d      	b.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e038      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40007000 	.word	0x40007000
 8006f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f98:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <HAL_RCC_OscConfig+0x4ec>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d028      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d121      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d11a      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fc8:	4013      	ands	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d111      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40023800 	.word	0x40023800

0800700c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0cc      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007020:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d90c      	bls.n	8007048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b65      	ldr	r3, [pc, #404]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b63      	ldr	r3, [pc, #396]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0b8      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d020      	beq.n	8007096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007060:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4a58      	ldr	r2, [pc, #352]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800706a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007078:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	4a52      	ldr	r2, [pc, #328]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b50      	ldr	r3, [pc, #320]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	494d      	ldr	r1, [pc, #308]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d044      	beq.n	800712c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d107      	bne.n	80070ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070aa:	4b47      	ldr	r3, [pc, #284]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d119      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e07f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d003      	beq.n	80070ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ca:	4b3f      	ldr	r3, [pc, #252]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e06f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070da:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e067      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ea:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 0203 	bic.w	r2, r3, #3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4934      	ldr	r1, [pc, #208]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070fc:	f7fc fc38 	bl	8003970 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007102:	e00a      	b.n	800711a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007104:	f7fc fc34 	bl	8003970 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e04f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 020c 	and.w	r2, r3, #12
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	429a      	cmp	r2, r3
 800712a:	d1eb      	bne.n	8007104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d20c      	bcs.n	8007154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007142:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e032      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007160:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4916      	ldr	r1, [pc, #88]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	490e      	ldr	r1, [pc, #56]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007192:	f000 f821 	bl	80071d8 <HAL_RCC_GetSysClockFreq>
 8007196:	4602      	mov	r2, r0
 8007198:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	490a      	ldr	r1, [pc, #40]	; (80071cc <HAL_RCC_ClockConfig+0x1c0>)
 80071a4:	5ccb      	ldrb	r3, [r1, r3]
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_RCC_ClockConfig+0x1c8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fab2 	bl	800371c <HAL_InitTick>

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023c00 	.word	0x40023c00
 80071c8:	40023800 	.word	0x40023800
 80071cc:	0800f210 	.word	0x0800f210
 80071d0:	20000080 	.word	0x20000080
 80071d4:	20000084 	.word	0x20000084

080071d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071dc:	b094      	sub	sp, #80	; 0x50
 80071de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44
 80071e4:	2300      	movs	r3, #0
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e8:	2300      	movs	r3, #0
 80071ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f0:	4b79      	ldr	r3, [pc, #484]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 030c 	and.w	r3, r3, #12
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d00d      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x40>
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	f200 80e1 	bhi.w	80073c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x34>
 8007206:	2b04      	cmp	r3, #4
 8007208:	d003      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x3a>
 800720a:	e0db      	b.n	80073c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b73      	ldr	r3, [pc, #460]	; (80073dc <HAL_RCC_GetSysClockFreq+0x204>)
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007210:	e0db      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007216:	e0d8      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007218:	4b6f      	ldr	r3, [pc, #444]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007220:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007222:	4b6d      	ldr	r3, [pc, #436]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d063      	beq.n	80072f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722e:	4b6a      	ldr	r3, [pc, #424]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	2200      	movs	r2, #0
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38
 8007238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
 8007246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	0159      	lsls	r1, r3, #5
 8007258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725c:	0150      	lsls	r0, r2, #5
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4621      	mov	r1, r4
 8007264:	1a51      	subs	r1, r2, r1
 8007266:	6139      	str	r1, [r7, #16]
 8007268:	4629      	mov	r1, r5
 800726a:	eb63 0301 	sbc.w	r3, r3, r1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800727c:	4659      	mov	r1, fp
 800727e:	018b      	lsls	r3, r1, #6
 8007280:	4651      	mov	r1, sl
 8007282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007286:	4651      	mov	r1, sl
 8007288:	018a      	lsls	r2, r1, #6
 800728a:	4651      	mov	r1, sl
 800728c:	ebb2 0801 	subs.w	r8, r2, r1
 8007290:	4659      	mov	r1, fp
 8007292:	eb63 0901 	sbc.w	r9, r3, r1
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072aa:	4690      	mov	r8, r2
 80072ac:	4699      	mov	r9, r3
 80072ae:	4623      	mov	r3, r4
 80072b0:	eb18 0303 	adds.w	r3, r8, r3
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	462b      	mov	r3, r5
 80072b8:	eb49 0303 	adc.w	r3, r9, r3
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072ca:	4629      	mov	r1, r5
 80072cc:	024b      	lsls	r3, r1, #9
 80072ce:	4621      	mov	r1, r4
 80072d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072d4:	4621      	mov	r1, r4
 80072d6:	024a      	lsls	r2, r1, #9
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072de:	2200      	movs	r2, #0
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072e8:	f7f9 fc56 	bl	8000b98 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f4:	e058      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f6:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	099b      	lsrs	r3, r3, #6
 80072fc:	2200      	movs	r2, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	4611      	mov	r1, r2
 8007302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	2300      	movs	r3, #0
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
 800730c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	f04f 0000 	mov.w	r0, #0
 8007318:	f04f 0100 	mov.w	r1, #0
 800731c:	0159      	lsls	r1, r3, #5
 800731e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007322:	0150      	lsls	r0, r2, #5
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4641      	mov	r1, r8
 800732a:	ebb2 0a01 	subs.w	sl, r2, r1
 800732e:	4649      	mov	r1, r9
 8007330:	eb63 0b01 	sbc.w	fp, r3, r1
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007348:	ebb2 040a 	subs.w	r4, r2, sl
 800734c:	eb63 050b 	sbc.w	r5, r3, fp
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	00eb      	lsls	r3, r5, #3
 800735a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800735e:	00e2      	lsls	r2, r4, #3
 8007360:	4614      	mov	r4, r2
 8007362:	461d      	mov	r5, r3
 8007364:	4643      	mov	r3, r8
 8007366:	18e3      	adds	r3, r4, r3
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	464b      	mov	r3, r9
 800736c:	eb45 0303 	adc.w	r3, r5, r3
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800737e:	4629      	mov	r1, r5
 8007380:	028b      	lsls	r3, r1, #10
 8007382:	4621      	mov	r1, r4
 8007384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007388:	4621      	mov	r1, r4
 800738a:	028a      	lsls	r2, r1, #10
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	2200      	movs	r2, #0
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	61fa      	str	r2, [r7, #28]
 8007398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800739c:	f7f9 fbfc 	bl	8000b98 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	3301      	adds	r3, #1
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073c2:	e002      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_RCC_GetSysClockFreq+0x204>)
 80073c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3750      	adds	r7, #80	; 0x50
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d6:	bf00      	nop
 80073d8:	40023800 	.word	0x40023800
 80073dc:	00f42400 	.word	0x00f42400
 80073e0:	007a1200 	.word	0x007a1200

080073e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80073ea:	681b      	ldr	r3, [r3, #0]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000080 	.word	0x20000080

080073fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007400:	f7ff fff0 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8007404:	4602      	mov	r2, r0
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0a9b      	lsrs	r3, r3, #10
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	4903      	ldr	r1, [pc, #12]	; (8007420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007412:	5ccb      	ldrb	r3, [r1, r3]
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007418:	4618      	mov	r0, r3
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40023800 	.word	0x40023800
 8007420:	0800f220 	.word	0x0800f220

08007424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007428:	f7ff ffdc 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0b5b      	lsrs	r3, r3, #13
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	4903      	ldr	r1, [pc, #12]	; (8007448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800743a:	5ccb      	ldrb	r3, [r1, r3]
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	0800f220 	.word	0x0800f220

0800744c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	220f      	movs	r2, #15
 800745a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800745c:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0203 	and.w	r2, r3, #3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007468:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <HAL_RCC_GetClockConfig+0x60>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0207 	and.w	r2, r3, #7
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40023800 	.word	0x40023800
 80074ac:	40023c00 	.word	0x40023c00

080074b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e041      	b.n	8007546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fc f83a 	bl	8003550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 ffc0 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e03c      	b.n	80075e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1e      	ldr	r2, [pc, #120]	; (80075f0 <HAL_TIM_Base_Start+0xa0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d018      	beq.n	80075ac <HAL_TIM_Base_Start+0x5c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d013      	beq.n	80075ac <HAL_TIM_Base_Start+0x5c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <HAL_TIM_Base_Start+0xa4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00e      	beq.n	80075ac <HAL_TIM_Base_Start+0x5c>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <HAL_TIM_Base_Start+0xa8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d009      	beq.n	80075ac <HAL_TIM_Base_Start+0x5c>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a17      	ldr	r2, [pc, #92]	; (80075fc <HAL_TIM_Base_Start+0xac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <HAL_TIM_Base_Start+0x5c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_TIM_Base_Start+0xb0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d111      	bne.n	80075d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	d010      	beq.n	80075e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ce:	e007      	b.n	80075e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40000c00 	.word	0x40000c00
 8007600:	40014000 	.word	0x40014000

08007604 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6a1a      	ldr	r2, [r3, #32]
 8007612:	f241 1311 	movw	r3, #4369	; 0x1111
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10f      	bne.n	800763c <HAL_TIM_Base_Stop+0x38>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a1a      	ldr	r2, [r3, #32]
 8007622:	f240 4344 	movw	r3, #1092	; 0x444
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d107      	bne.n	800763c <HAL_TIM_Base_Stop+0x38>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d001      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e044      	b.n	80076f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <HAL_TIM_Base_Start_IT+0xb0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0x6c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007696:	d013      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0x6c>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_TIM_Base_Start_IT+0xb4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0x6c>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a19      	ldr	r2, [pc, #100]	; (800770c <HAL_TIM_Base_Start_IT+0xb8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0x6c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <HAL_TIM_Base_Start_IT+0xbc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_TIM_Base_Start_IT+0x6c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_TIM_Base_Start_IT+0xc0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d111      	bne.n	80076e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b06      	cmp	r3, #6
 80076d0:	d010      	beq.n	80076f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0201 	orr.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e2:	e007      	b.n	80076f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40010000 	.word	0x40010000
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40000c00 	.word	0x40000c00
 8007714:	40014000 	.word	0x40014000

08007718 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e041      	b.n	80077ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb fee6 	bl	8003510 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f000 fe8c 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_TIM_OC_Start+0x24>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e022      	b.n	8007822 <HAL_TIM_OC_Start+0x6a>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d109      	bne.n	80077f6 <HAL_TIM_OC_Start+0x3e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	bf14      	ite	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	2300      	moveq	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	e015      	b.n	8007822 <HAL_TIM_OC_Start+0x6a>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d109      	bne.n	8007810 <HAL_TIM_OC_Start+0x58>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	bf14      	ite	ne
 8007808:	2301      	movne	r3, #1
 800780a:	2300      	moveq	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e008      	b.n	8007822 <HAL_TIM_OC_Start+0x6a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e068      	b.n	80078fc <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <HAL_TIM_OC_Start+0x82>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007838:	e013      	b.n	8007862 <HAL_TIM_OC_Start+0xaa>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b04      	cmp	r3, #4
 800783e:	d104      	bne.n	800784a <HAL_TIM_OC_Start+0x92>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007848:	e00b      	b.n	8007862 <HAL_TIM_OC_Start+0xaa>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d104      	bne.n	800785a <HAL_TIM_OC_Start+0xa2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007858:	e003      	b.n	8007862 <HAL_TIM_OC_Start+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f001 f9c6 	bl	8008bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a23      	ldr	r2, [pc, #140]	; (8007904 <HAL_TIM_OC_Start+0x14c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d107      	bne.n	800788a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <HAL_TIM_OC_Start+0x14c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d018      	beq.n	80078c6 <HAL_TIM_OC_Start+0x10e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789c:	d013      	beq.n	80078c6 <HAL_TIM_OC_Start+0x10e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a19      	ldr	r2, [pc, #100]	; (8007908 <HAL_TIM_OC_Start+0x150>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00e      	beq.n	80078c6 <HAL_TIM_OC_Start+0x10e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a17      	ldr	r2, [pc, #92]	; (800790c <HAL_TIM_OC_Start+0x154>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_TIM_OC_Start+0x10e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a16      	ldr	r2, [pc, #88]	; (8007910 <HAL_TIM_OC_Start+0x158>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_TIM_OC_Start+0x10e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <HAL_TIM_OC_Start+0x15c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d111      	bne.n	80078ea <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d010      	beq.n	80078fa <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	e007      	b.n	80078fa <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40010000 	.word	0x40010000
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40014000 	.word	0x40014000

08007918 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e041      	b.n	80079ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f839 	bl	80079b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f000 fd8c 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_TIM_IC_Start_IT+0x1e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	e013      	b.n	8007a12 <HAL_TIM_IC_Start_IT+0x46>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_IC_Start_IT+0x2e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	e00b      	b.n	8007a12 <HAL_TIM_IC_Start_IT+0x46>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_IC_Start_IT+0x3e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	e003      	b.n	8007a12 <HAL_TIM_IC_Start_IT+0x46>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <HAL_TIM_IC_Start_IT+0x58>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	e013      	b.n	8007a4c <HAL_TIM_IC_Start_IT+0x80>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d104      	bne.n	8007a34 <HAL_TIM_IC_Start_IT+0x68>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e00b      	b.n	8007a4c <HAL_TIM_IC_Start_IT+0x80>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d104      	bne.n	8007a44 <HAL_TIM_IC_Start_IT+0x78>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e003      	b.n	8007a4c <HAL_TIM_IC_Start_IT+0x80>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a54:	7b7b      	ldrb	r3, [r7, #13]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d001      	beq.n	8007a5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0c2      	b.n	8007be4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_IC_Start_IT+0xa2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	e013      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0xca>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_IC_Start_IT+0xb2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a7c:	e00b      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0xca>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_IC_Start_IT+0xc2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a8c:	e003      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0xca>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_TIM_IC_Start_IT+0xda>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa4:	e013      	b.n	8007ace <HAL_TIM_IC_Start_IT+0x102>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d104      	bne.n	8007ab6 <HAL_TIM_IC_Start_IT+0xea>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab4:	e00b      	b.n	8007ace <HAL_TIM_IC_Start_IT+0x102>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_IC_Start_IT+0xfa>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac4:	e003      	b.n	8007ace <HAL_TIM_IC_Start_IT+0x102>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d841      	bhi.n	8007b58 <HAL_TIM_IC_Start_IT+0x18c>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_TIM_IC_Start_IT+0x110>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b59 	.word	0x08007b59
 8007ae4:	08007b59 	.word	0x08007b59
 8007ae8:	08007b59 	.word	0x08007b59
 8007aec:	08007b23 	.word	0x08007b23
 8007af0:	08007b59 	.word	0x08007b59
 8007af4:	08007b59 	.word	0x08007b59
 8007af8:	08007b59 	.word	0x08007b59
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007b59 	.word	0x08007b59
 8007b0c:	08007b47 	.word	0x08007b47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0202 	orr.w	r2, r2, #2
 8007b1e:	60da      	str	r2, [r3, #12]
      break;
 8007b20:	e01d      	b.n	8007b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0204 	orr.w	r2, r2, #4
 8007b30:	60da      	str	r2, [r3, #12]
      break;
 8007b32:	e014      	b.n	8007b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0208 	orr.w	r2, r2, #8
 8007b42:	60da      	str	r2, [r3, #12]
      break;
 8007b44:	e00b      	b.n	8007b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0210 	orr.w	r2, r2, #16
 8007b54:	60da      	str	r2, [r3, #12]
      break;
 8007b56:	e002      	b.n	8007b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d13e      	bne.n	8007be2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f845 	bl	8008bfc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1d      	ldr	r2, [pc, #116]	; (8007bec <HAL_TIM_IC_Start_IT+0x220>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d018      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x1e2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b84:	d013      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x1e2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <HAL_TIM_IC_Start_IT+0x224>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x1e2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <HAL_TIM_IC_Start_IT+0x228>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x1e2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <HAL_TIM_IC_Start_IT+0x22c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x1e2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <HAL_TIM_IC_Start_IT+0x230>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d111      	bne.n	8007bd2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b06      	cmp	r3, #6
 8007bbe:	d010      	beq.n	8007be2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd0:	e007      	b.n	8007be2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800
 8007bf8:	40000c00 	.word	0x40000c00
 8007bfc:	40014000 	.word	0x40014000

08007c00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e097      	b.n	8007d44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fb fcf7 	bl	800361c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3304      	adds	r3, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f000 fc0d 	bl	8008474 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	4313      	orrs	r3, r2
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007ca0:	f023 030c 	bic.w	r3, r3, #12
 8007ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	011a      	lsls	r2, r3, #4
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	031b      	lsls	r3, r3, #12
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d110      	bne.n	8007d9e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d102      	bne.n	8007d88 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d82:	7b7b      	ldrb	r3, [r7, #13]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d001      	beq.n	8007d8c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e089      	b.n	8007ea0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d9c:	e031      	b.n	8007e02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d110      	bne.n	8007dc6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d102      	bne.n	8007db0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007daa:	7b3b      	ldrb	r3, [r7, #12]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d001      	beq.n	8007db4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e075      	b.n	8007ea0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dc4:	e01d      	b.n	8007e02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d108      	bne.n	8007dde <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d105      	bne.n	8007dde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd2:	7b7b      	ldrb	r3, [r7, #13]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d102      	bne.n	8007dde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dd8:	7b3b      	ldrb	r3, [r7, #12]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d001      	beq.n	8007de2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e05e      	b.n	8007ea0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d010      	beq.n	8007e30 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007e0e:	e01f      	b.n	8007e50 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 feef 	bl	8008bfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0202 	orr.w	r2, r2, #2
 8007e2c:	60da      	str	r2, [r3, #12]
      break;
 8007e2e:	e02e      	b.n	8007e8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	2104      	movs	r1, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fedf 	bl	8008bfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0204 	orr.w	r2, r2, #4
 8007e4c:	60da      	str	r2, [r3, #12]
      break;
 8007e4e:	e01e      	b.n	8007e8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fecf 	bl	8008bfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2201      	movs	r2, #1
 8007e64:	2104      	movs	r1, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fec8 	bl	8008bfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0202 	orr.w	r2, r2, #2
 8007e7a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0204 	orr.w	r2, r2, #4
 8007e8a:	60da      	str	r2, [r3, #12]
      break;
 8007e8c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d122      	bne.n	8007f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d11b      	bne.n	8007f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0202 	mvn.w	r2, #2
 8007ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fa fb84 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8007ef0:	e005      	b.n	8007efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa9f 	bl	8008436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 faa6 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d122      	bne.n	8007f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d11b      	bne.n	8007f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0204 	mvn.w	r2, #4
 8007f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fa fb5a 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8007f44:	e005      	b.n	8007f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa75 	bl	8008436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa7c 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d122      	bne.n	8007fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d11b      	bne.n	8007fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0208 	mvn.w	r2, #8
 8007f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fa fb30 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8007f98:	e005      	b.n	8007fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa4b 	bl	8008436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa52 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d122      	bne.n	8008000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d11b      	bne.n	8008000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0210 	mvn.w	r2, #16
 8007fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fa fb06 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8007fec:	e005      	b.n	8007ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa21 	bl	8008436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa28 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10e      	bne.n	800802c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b01      	cmp	r3, #1
 800801a:	d107      	bne.n	800802c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0201 	mvn.w	r2, #1
 8008024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fa fe96 	bl	8002d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d10e      	bne.n	8008058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d107      	bne.n	8008058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fe70 	bl	8008d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d10e      	bne.n	8008084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	d107      	bne.n	8008084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800807c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9ed 	bl	800845e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b20      	cmp	r3, #32
 8008090:	d10e      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d107      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0220 	mvn.w	r2, #32
 80080a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fe3a 	bl	8008d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e048      	b.n	8008168 <HAL_TIM_OC_ConfigChannel+0xb0>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b0c      	cmp	r3, #12
 80080e2:	d839      	bhi.n	8008158 <HAL_TIM_OC_ConfigChannel+0xa0>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008121 	.word	0x08008121
 80080f0:	08008159 	.word	0x08008159
 80080f4:	08008159 	.word	0x08008159
 80080f8:	08008159 	.word	0x08008159
 80080fc:	0800812f 	.word	0x0800812f
 8008100:	08008159 	.word	0x08008159
 8008104:	08008159 	.word	0x08008159
 8008108:	08008159 	.word	0x08008159
 800810c:	0800813d 	.word	0x0800813d
 8008110:	08008159 	.word	0x08008159
 8008114:	08008159 	.word	0x08008159
 8008118:	08008159 	.word	0x08008159
 800811c:	0800814b 	.word	0x0800814b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fa24 	bl	8008574 <TIM_OC1_SetConfig>
      break;
 800812c:	e017      	b.n	800815e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fa83 	bl	8008640 <TIM_OC2_SetConfig>
      break;
 800813a:	e010      	b.n	800815e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fae8 	bl	8008718 <TIM_OC3_SetConfig>
      break;
 8008148:	e009      	b.n	800815e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fb4b 	bl	80087ec <TIM_OC4_SetConfig>
      break;
 8008156:	e002      	b.n	800815e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
      break;
 800815c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <HAL_TIM_IC_ConfigChannel+0x1e>
 800818a:	2302      	movs	r3, #2
 800818c:	e088      	b.n	80082a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d11b      	bne.n	80081d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f000 fb6e 	bl	800888c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 020c 	bic.w	r2, r2, #12
 80081be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6999      	ldr	r1, [r3, #24]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	619a      	str	r2, [r3, #24]
 80081d2:	e060      	b.n	8008296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d11c      	bne.n	8008214 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6819      	ldr	r1, [r3, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f000 fbe6 	bl	80089ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699a      	ldr	r2, [r3, #24]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6999      	ldr	r1, [r3, #24]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	021a      	lsls	r2, r3, #8
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	619a      	str	r2, [r3, #24]
 8008212:	e040      	b.n	8008296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b08      	cmp	r3, #8
 8008218:	d11b      	bne.n	8008252 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f000 fc33 	bl	8008a94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 020c 	bic.w	r2, r2, #12
 800823c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69d9      	ldr	r1, [r3, #28]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	61da      	str	r2, [r3, #28]
 8008250:	e021      	b.n	8008296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b0c      	cmp	r3, #12
 8008256:	d11c      	bne.n	8008292 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f000 fc50 	bl	8008b0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69da      	ldr	r2, [r3, #28]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800827a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69d9      	ldr	r1, [r3, #28]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	021a      	lsls	r2, r3, #8
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	61da      	str	r2, [r3, #28]
 8008290:	e001      	b.n	8008296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIM_ConfigClockSource+0x1c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0b4      	b.n	800842e <HAL_TIM_ConfigClockSource+0x186>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fc:	d03e      	beq.n	800837c <HAL_TIM_ConfigClockSource+0xd4>
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	f200 8087 	bhi.w	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	f000 8086 	beq.w	800841a <HAL_TIM_ConfigClockSource+0x172>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	d87f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b70      	cmp	r3, #112	; 0x70
 8008316:	d01a      	beq.n	800834e <HAL_TIM_ConfigClockSource+0xa6>
 8008318:	2b70      	cmp	r3, #112	; 0x70
 800831a:	d87b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b60      	cmp	r3, #96	; 0x60
 800831e:	d050      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008320:	2b60      	cmp	r3, #96	; 0x60
 8008322:	d877      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b50      	cmp	r3, #80	; 0x50
 8008326:	d03c      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008328:	2b50      	cmp	r3, #80	; 0x50
 800832a:	d873      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d058      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d86f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d064      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008338:	2b30      	cmp	r3, #48	; 0x30
 800833a:	d86b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b20      	cmp	r3, #32
 800833e:	d060      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	2b20      	cmp	r3, #32
 8008342:	d867      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d05c      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008348:	2b10      	cmp	r3, #16
 800834a:	d05a      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 800834c:	e062      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6899      	ldr	r1, [r3, #8]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f000 fc2d 	bl	8008bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	609a      	str	r2, [r3, #8]
      break;
 800837a:	e04f      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	6899      	ldr	r1, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f000 fc16 	bl	8008bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800839e:	609a      	str	r2, [r3, #8]
      break;
 80083a0:	e03c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f000 fad4 	bl	800895c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2150      	movs	r1, #80	; 0x50
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fbe3 	bl	8008b86 <TIM_ITRx_SetConfig>
      break;
 80083c0:	e02c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6859      	ldr	r1, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f000 fb30 	bl	8008a34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2160      	movs	r1, #96	; 0x60
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fbd3 	bl	8008b86 <TIM_ITRx_SetConfig>
      break;
 80083e0:	e01c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f000 fab4 	bl	800895c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fbc3 	bl	8008b86 <TIM_ITRx_SetConfig>
      break;
 8008400:	e00c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f000 fbba 	bl	8008b86 <TIM_ITRx_SetConfig>
      break;
 8008412:	e003      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
      break;
 8008418:	e000      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800841a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a34      	ldr	r2, [pc, #208]	; (8008558 <TIM_Base_SetConfig+0xe4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00f      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d00b      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a31      	ldr	r2, [pc, #196]	; (800855c <TIM_Base_SetConfig+0xe8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a30      	ldr	r2, [pc, #192]	; (8008560 <TIM_Base_SetConfig+0xec>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a2f      	ldr	r2, [pc, #188]	; (8008564 <TIM_Base_SetConfig+0xf0>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d108      	bne.n	80084be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a25      	ldr	r2, [pc, #148]	; (8008558 <TIM_Base_SetConfig+0xe4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01b      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d017      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a22      	ldr	r2, [pc, #136]	; (800855c <TIM_Base_SetConfig+0xe8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <TIM_Base_SetConfig+0xec>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <TIM_Base_SetConfig+0xf0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <TIM_Base_SetConfig+0xf4>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1e      	ldr	r2, [pc, #120]	; (800856c <TIM_Base_SetConfig+0xf8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1d      	ldr	r2, [pc, #116]	; (8008570 <TIM_Base_SetConfig+0xfc>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d108      	bne.n	8008510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a08      	ldr	r2, [pc, #32]	; (8008558 <TIM_Base_SetConfig+0xe4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d103      	bne.n	8008544 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	615a      	str	r2, [r3, #20]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40010000 	.word	0x40010000
 800855c:	40000400 	.word	0x40000400
 8008560:	40000800 	.word	0x40000800
 8008564:	40000c00 	.word	0x40000c00
 8008568:	40014000 	.word	0x40014000
 800856c:	40014400 	.word	0x40014400
 8008570:	40014800 	.word	0x40014800

08008574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f023 0201 	bic.w	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f023 0302 	bic.w	r3, r3, #2
 80085bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1c      	ldr	r2, [pc, #112]	; (800863c <TIM_OC1_SetConfig+0xc8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10c      	bne.n	80085ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0308 	bic.w	r3, r3, #8
 80085d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0304 	bic.w	r3, r3, #4
 80085e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a13      	ldr	r2, [pc, #76]	; (800863c <TIM_OC1_SetConfig+0xc8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d111      	bne.n	8008616 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	621a      	str	r2, [r3, #32]
}
 8008630:	bf00      	nop
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	40010000 	.word	0x40010000

08008640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f023 0210 	bic.w	r2, r3, #16
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0320 	bic.w	r3, r3, #32
 800868a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <TIM_OC2_SetConfig+0xd4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10d      	bne.n	80086bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a15      	ldr	r2, [pc, #84]	; (8008714 <TIM_OC2_SetConfig+0xd4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d113      	bne.n	80086ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	621a      	str	r2, [r3, #32]
}
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40010000 	.word	0x40010000

08008718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1d      	ldr	r2, [pc, #116]	; (80087e8 <TIM_OC3_SetConfig+0xd0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d10d      	bne.n	8008792 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800877c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <TIM_OC3_SetConfig+0xd0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d113      	bne.n	80087c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	621a      	str	r2, [r3, #32]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	40010000 	.word	0x40010000

080087ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	031b      	lsls	r3, r3, #12
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	4313      	orrs	r3, r2
 8008842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a10      	ldr	r2, [pc, #64]	; (8008888 <TIM_OC4_SetConfig+0x9c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d109      	bne.n	8008860 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	019b      	lsls	r3, r3, #6
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000

0800888c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4a24      	ldr	r2, [pc, #144]	; (8008948 <TIM_TI1_SetConfig+0xbc>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <TIM_TI1_SetConfig+0x56>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c0:	d00f      	beq.n	80088e2 <TIM_TI1_SetConfig+0x56>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a21      	ldr	r2, [pc, #132]	; (800894c <TIM_TI1_SetConfig+0xc0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00b      	beq.n	80088e2 <TIM_TI1_SetConfig+0x56>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a20      	ldr	r2, [pc, #128]	; (8008950 <TIM_TI1_SetConfig+0xc4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d007      	beq.n	80088e2 <TIM_TI1_SetConfig+0x56>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <TIM_TI1_SetConfig+0xc8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d003      	beq.n	80088e2 <TIM_TI1_SetConfig+0x56>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <TIM_TI1_SetConfig+0xcc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <TIM_TI1_SetConfig+0x5a>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <TIM_TI1_SetConfig+0x5c>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e003      	b.n	8008906 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800890c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	b2db      	uxtb	r3, r3
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f023 030a 	bic.w	r3, r3, #10
 8008920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f003 030a 	and.w	r3, r3, #10
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40014000 	.word	0x40014000

0800895c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f023 0201 	bic.w	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 030a 	bic.w	r3, r3, #10
 8008998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b087      	sub	sp, #28
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	f023 0210 	bic.w	r2, r3, #16
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	f023 0210 	bic.w	r2, r3, #16
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	031b      	lsls	r3, r3, #12
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	621a      	str	r2, [r3, #32]
}
 8008a88:	bf00      	nop
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f023 0303 	bic.w	r3, r3, #3
 8008ac0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ad0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	621a      	str	r2, [r3, #32]
}
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	031b      	lsls	r3, r3, #12
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	031b      	lsls	r3, r3, #12
 8008b64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f043 0307 	orr.w	r3, r3, #7
 8008ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	609a      	str	r2, [r3, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	021a      	lsls	r2, r3, #8
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 031f 	and.w	r3, r3, #31
 8008c0e:	2201      	movs	r2, #1
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	401a      	ands	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f003 031f 	and.w	r3, r3, #31
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	fa01 f303 	lsl.w	r3, r1, r3
 8008c34:	431a      	orrs	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e050      	b.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1c      	ldr	r2, [pc, #112]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d018      	beq.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cac:	d013      	beq.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a18      	ldr	r2, [pc, #96]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00e      	beq.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	; (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d009      	beq.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d004      	beq.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d10c      	bne.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	40014000 	.word	0x40014000

08008d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	f107 001c 	add.w	r0, r7, #28
 8008d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d122      	bne.n	8008daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d105      	bne.n	8008d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fbee 	bl	800a580 <USB_CoreReset>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]
 8008da8:	e01a      	b.n	8008de0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fbe2 	bl	800a580 <USB_CoreReset>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8008dd2:	e005      	b.n	8008de0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d10b      	bne.n	8008dfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f043 0206 	orr.w	r2, r3, #6
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e0a:	b004      	add	sp, #16
 8008e0c:	4770      	bx	lr
	...

08008e10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d165      	bne.n	8008ef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	4a41      	ldr	r2, [pc, #260]	; (8008f2c <USB_SetTurnaroundTime+0x11c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d906      	bls.n	8008e3a <USB_SetTurnaroundTime+0x2a>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4a40      	ldr	r2, [pc, #256]	; (8008f30 <USB_SetTurnaroundTime+0x120>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d202      	bcs.n	8008e3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e34:	230f      	movs	r3, #15
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e062      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4a3c      	ldr	r2, [pc, #240]	; (8008f30 <USB_SetTurnaroundTime+0x120>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d306      	bcc.n	8008e50 <USB_SetTurnaroundTime+0x40>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4a3b      	ldr	r2, [pc, #236]	; (8008f34 <USB_SetTurnaroundTime+0x124>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d202      	bcs.n	8008e50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e4a:	230e      	movs	r3, #14
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	e057      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4a38      	ldr	r2, [pc, #224]	; (8008f34 <USB_SetTurnaroundTime+0x124>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d306      	bcc.n	8008e66 <USB_SetTurnaroundTime+0x56>
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4a37      	ldr	r2, [pc, #220]	; (8008f38 <USB_SetTurnaroundTime+0x128>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d202      	bcs.n	8008e66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e60:	230d      	movs	r3, #13
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e04c      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4a33      	ldr	r2, [pc, #204]	; (8008f38 <USB_SetTurnaroundTime+0x128>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d306      	bcc.n	8008e7c <USB_SetTurnaroundTime+0x6c>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	4a32      	ldr	r2, [pc, #200]	; (8008f3c <USB_SetTurnaroundTime+0x12c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d802      	bhi.n	8008e7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e76:	230c      	movs	r3, #12
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	e041      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4a2f      	ldr	r2, [pc, #188]	; (8008f3c <USB_SetTurnaroundTime+0x12c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d906      	bls.n	8008e92 <USB_SetTurnaroundTime+0x82>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4a2e      	ldr	r2, [pc, #184]	; (8008f40 <USB_SetTurnaroundTime+0x130>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d802      	bhi.n	8008e92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e8c:	230b      	movs	r3, #11
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e036      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4a2a      	ldr	r2, [pc, #168]	; (8008f40 <USB_SetTurnaroundTime+0x130>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d906      	bls.n	8008ea8 <USB_SetTurnaroundTime+0x98>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <USB_SetTurnaroundTime+0x134>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d802      	bhi.n	8008ea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	e02b      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4a26      	ldr	r2, [pc, #152]	; (8008f44 <USB_SetTurnaroundTime+0x134>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d906      	bls.n	8008ebe <USB_SetTurnaroundTime+0xae>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4a25      	ldr	r2, [pc, #148]	; (8008f48 <USB_SetTurnaroundTime+0x138>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d202      	bcs.n	8008ebe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008eb8:	2309      	movs	r3, #9
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	e020      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4a21      	ldr	r2, [pc, #132]	; (8008f48 <USB_SetTurnaroundTime+0x138>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d306      	bcc.n	8008ed4 <USB_SetTurnaroundTime+0xc4>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4a20      	ldr	r2, [pc, #128]	; (8008f4c <USB_SetTurnaroundTime+0x13c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d802      	bhi.n	8008ed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ece:	2308      	movs	r3, #8
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	e015      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	4a1d      	ldr	r2, [pc, #116]	; (8008f4c <USB_SetTurnaroundTime+0x13c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d906      	bls.n	8008eea <USB_SetTurnaroundTime+0xda>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4a1c      	ldr	r2, [pc, #112]	; (8008f50 <USB_SetTurnaroundTime+0x140>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d202      	bcs.n	8008eea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ee4:	2307      	movs	r3, #7
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	e00a      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eea:	2306      	movs	r3, #6
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	e007      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ef6:	2309      	movs	r3, #9
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	e001      	b.n	8008f00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008efc:	2309      	movs	r3, #9
 8008efe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	029b      	lsls	r3, r3, #10
 8008f14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	00d8acbf 	.word	0x00d8acbf
 8008f30:	00e4e1c0 	.word	0x00e4e1c0
 8008f34:	00f42400 	.word	0x00f42400
 8008f38:	01067380 	.word	0x01067380
 8008f3c:	011a499f 	.word	0x011a499f
 8008f40:	01312cff 	.word	0x01312cff
 8008f44:	014ca43f 	.word	0x014ca43f
 8008f48:	016e3600 	.word	0x016e3600
 8008f4c:	01a6ab1f 	.word	0x01a6ab1f
 8008f50:	01e84800 	.word	0x01e84800

08008f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f043 0201 	orr.w	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 0201 	bic.w	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d115      	bne.n	8008fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f7fa fcde 	bl	8003988 <HAL_Delay>
      ms++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fa45 	bl	800a462 <USB_GetMode>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d01e      	beq.n	800901c <USB_SetCurrentMode+0x84>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b31      	cmp	r3, #49	; 0x31
 8008fe2:	d9f0      	bls.n	8008fc6 <USB_SetCurrentMode+0x2e>
 8008fe4:	e01a      	b.n	800901c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d115      	bne.n	8009018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	f7fa fcc5 	bl	8003988 <HAL_Delay>
      ms++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 fa2c 	bl	800a462 <USB_GetMode>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <USB_SetCurrentMode+0x84>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b31      	cmp	r3, #49	; 0x31
 8009014:	d9f0      	bls.n	8008ff8 <USB_SetCurrentMode+0x60>
 8009016:	e001      	b.n	800901c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e005      	b.n	8009028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b32      	cmp	r3, #50	; 0x32
 8009020:	d101      	bne.n	8009026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009030:	b084      	sub	sp, #16
 8009032:	b580      	push	{r7, lr}
 8009034:	b086      	sub	sp, #24
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800903e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	e009      	b.n	8009064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3340      	adds	r3, #64	; 0x40
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3301      	adds	r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b0e      	cmp	r3, #14
 8009068:	d9f2      	bls.n	8009050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11c      	bne.n	80090aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800907e:	f043 0302 	orr.w	r3, r3, #2
 8009082:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38
 80090a8:	e00b      	b.n	80090c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090c8:	461a      	mov	r2, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	4619      	mov	r1, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090dc:	461a      	mov	r2, r3
 80090de:	680b      	ldr	r3, [r1, #0]
 80090e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d10c      	bne.n	8009102 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090ee:	2100      	movs	r1, #0
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f965 	bl	80093c0 <USB_SetDevSpeed>
 80090f6:	e008      	b.n	800910a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f960 	bl	80093c0 <USB_SetDevSpeed>
 8009100:	e003      	b.n	800910a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009102:	2103      	movs	r1, #3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f95b 	bl	80093c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800910a:	2110      	movs	r1, #16
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8f3 	bl	80092f8 <USB_FlushTxFifo>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f91f 	bl	8009360 <USB_FlushRxFifo>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	461a      	mov	r2, r3
 8009134:	2300      	movs	r3, #0
 8009136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914a:	461a      	mov	r2, r3
 800914c:	2300      	movs	r3, #0
 800914e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	e043      	b.n	80091de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916c:	d118      	bne.n	80091a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	461a      	mov	r2, r3
 8009182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e013      	b.n	80091b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	461a      	mov	r2, r3
 8009198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e008      	b.n	80091b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ac:	461a      	mov	r2, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	461a      	mov	r2, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	461a      	mov	r2, r3
 80091d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3301      	adds	r3, #1
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d3b7      	bcc.n	8009156 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	e043      	b.n	8009274 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009202:	d118      	bne.n	8009236 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	461a      	mov	r2, r3
 8009218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e013      	b.n	8009248 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922c:	461a      	mov	r2, r3
 800922e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e008      	b.n	8009248 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	461a      	mov	r2, r3
 8009244:	2300      	movs	r3, #0
 8009246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009254:	461a      	mov	r2, r3
 8009256:	2300      	movs	r3, #0
 8009258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009266:	461a      	mov	r2, r3
 8009268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800926c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3301      	adds	r3, #1
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	429a      	cmp	r2, r3
 800927a:	d3b7      	bcc.n	80091ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800928e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800929c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f043 0210 	orr.w	r2, r3, #16
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <USB_DevInit+0x2c4>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f043 0208 	orr.w	r2, r3, #8
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d107      	bne.n	80092e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092dc:	f043 0304 	orr.w	r3, r3, #4
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092f0:	b004      	add	sp, #16
 80092f2:	4770      	bx	lr
 80092f4:	803c3800 	.word	0x803c3800

080092f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a13      	ldr	r2, [pc, #76]	; (800935c <USB_FlushTxFifo+0x64>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d901      	bls.n	8009318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e01b      	b.n	8009350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	daf2      	bge.n	8009306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	019b      	lsls	r3, r3, #6
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3301      	adds	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <USB_FlushTxFifo+0x64>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e006      	b.n	8009350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b20      	cmp	r3, #32
 800934c:	d0f0      	beq.n	8009330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	00030d40 	.word	0x00030d40

08009360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a11      	ldr	r2, [pc, #68]	; (80093bc <USB_FlushRxFifo+0x5c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d901      	bls.n	800937e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e018      	b.n	80093b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	daf2      	bge.n	800936c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2210      	movs	r2, #16
 800938e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <USB_FlushRxFifo+0x5c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d901      	bls.n	80093a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e006      	b.n	80093b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d0f0      	beq.n	8009390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	00030d40 	.word	0x00030d40

080093c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e0:	4313      	orrs	r3, r2
 80093e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b087      	sub	sp, #28
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0306 	and.w	r3, r3, #6
 800940a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
 8009416:	e00a      	b.n	800942e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d002      	beq.n	8009424 <USB_GetDevSpeed+0x32>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b06      	cmp	r3, #6
 8009422:	d102      	bne.n	800942a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009424:	2302      	movs	r3, #2
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	e001      	b.n	800942e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800942a:	230f      	movs	r3, #15
 800942c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009430:	4618      	mov	r0, r3
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d13a      	bne.n	80094ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	2101      	movs	r1, #1
 800946a:	fa01 f303 	lsl.w	r3, r1, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009476:	4313      	orrs	r3, r2
 8009478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d155      	bne.n	800953c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094b4:	4313      	orrs	r3, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	e036      	b.n	800953c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	2101      	movs	r1, #1
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	041b      	lsls	r3, r3, #16
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ec:	4313      	orrs	r3, r2
 80094ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11a      	bne.n	800953c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	791b      	ldrb	r3, [r3, #4]
 8009520:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009522:	430b      	orrs	r3, r1
 8009524:	4313      	orrs	r3, r2
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d161      	bne.n	800962c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800957a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800957e:	d11f      	bne.n	80095c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	0151      	lsls	r1, r2, #5
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	440a      	add	r2, r1
 8009596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800959e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	2101      	movs	r1, #1
 80095d2:	fa01 f303 	lsl.w	r3, r1, r3
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	43db      	mvns	r3, r3
 80095da:	68f9      	ldr	r1, [r7, #12]
 80095dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e0:	4013      	ands	r3, r2
 80095e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	69da      	ldr	r2, [r3, #28]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f303 	lsl.w	r3, r1, r3
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	43db      	mvns	r3, r3
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009604:	4013      	ands	r3, r2
 8009606:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	0159      	lsls	r1, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	440b      	add	r3, r1
 800961e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009622:	4619      	mov	r1, r3
 8009624:	4b35      	ldr	r3, [pc, #212]	; (80096fc <USB_DeactivateEndpoint+0x1b0>)
 8009626:	4013      	ands	r3, r2
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	e060      	b.n	80096ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800963e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009642:	d11f      	bne.n	8009684 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	0151      	lsls	r1, r2, #5
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	440a      	add	r2, r1
 800965a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800965e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009662:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	0151      	lsls	r1, r2, #5
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	440a      	add	r2, r1
 800967a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	2101      	movs	r1, #1
 8009696:	fa01 f303 	lsl.w	r3, r1, r3
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	43db      	mvns	r3, r3
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096a4:	4013      	ands	r3, r2
 80096a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f303 	lsl.w	r3, r1, r3
 80096be:	041b      	lsls	r3, r3, #16
 80096c0:	43db      	mvns	r3, r3
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096c8:	4013      	ands	r3, r2
 80096ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	0159      	lsls	r1, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	440b      	add	r3, r1
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	4619      	mov	r1, r3
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <USB_DeactivateEndpoint+0x1b4>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	ec337800 	.word	0xec337800
 8009700:	eff37800 	.word	0xeff37800

08009704 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	; 0x28
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 815c 	bne.w	80099de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d132      	bne.n	8009794 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800974c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	0151      	lsls	r1, r2, #5
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	440a      	add	r2, r1
 8009788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978c:	0cdb      	lsrs	r3, r3, #19
 800978e:	04db      	lsls	r3, r3, #19
 8009790:	6113      	str	r3, [r2, #16]
 8009792:	e074      	b.n	800987e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	0cdb      	lsrs	r3, r3, #19
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6999      	ldr	r1, [r3, #24]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	440b      	add	r3, r1
 80097f0:	1e59      	subs	r1, r3, #1
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80097fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097fc:	4b9d      	ldr	r3, [pc, #628]	; (8009a74 <USB_EPStartXfer+0x370>)
 80097fe:	400b      	ands	r3, r1
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	0148      	lsls	r0, r1, #5
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	4401      	add	r1, r0
 8009808:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800980c:	4313      	orrs	r3, r2
 800980e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	0148      	lsls	r0, r1, #5
 800982a:	69f9      	ldr	r1, [r7, #28]
 800982c:	4401      	add	r1, r0
 800982e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009832:	4313      	orrs	r3, r2
 8009834:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	791b      	ldrb	r3, [r3, #4]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d11f      	bne.n	800987e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800985c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800987c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d14b      	bne.n	800991c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	461a      	mov	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	791b      	ldrb	r3, [r3, #4]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d128      	bne.n	80098fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d110      	bne.n	80098da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	e00f      	b.n	80098fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e133      	b.n	8009b84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800993a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	791b      	ldrb	r3, [r3, #4]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d015      	beq.n	8009970 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 811b 	beq.w	8009b84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	2101      	movs	r1, #1
 8009960:	fa01 f303 	lsl.w	r3, r1, r3
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800996a:	4313      	orrs	r3, r2
 800996c:	634b      	str	r3, [r1, #52]	; 0x34
 800996e:	e109      	b.n	8009b84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997c:	2b00      	cmp	r3, #0
 800997e:	d110      	bne.n	80099a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	e00f      	b.n	80099c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6919      	ldr	r1, [r3, #16]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	b298      	uxth	r0, r3
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	4603      	mov	r3, r0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fade 	bl	8009f98 <USB_WritePacket>
 80099dc:	e0d2      	b.n	8009b84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f8:	0cdb      	lsrs	r3, r3, #19
 80099fa:	04db      	lsls	r3, r3, #19
 80099fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d126      	bne.n	8009a78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a36:	691a      	ldr	r2, [r3, #16]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	0148      	lsls	r0, r1, #5
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	4401      	add	r1, r0
 8009a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a6e:	6113      	str	r3, [r2, #16]
 8009a70:	e03a      	b.n	8009ae8 <USB_EPStartXfer+0x3e4>
 8009a72:	bf00      	nop
 8009a74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	4413      	add	r3, r2
 8009a82:	1e5a      	subs	r2, r3, #1
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	8afa      	ldrh	r2, [r7, #22]
 8009a94:	fb03 f202 	mul.w	r2, r3, r2
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	8afb      	ldrh	r3, [r7, #22]
 8009aac:	04d9      	lsls	r1, r3, #19
 8009aae:	4b38      	ldr	r3, [pc, #224]	; (8009b90 <USB_EPStartXfer+0x48c>)
 8009ab0:	400b      	ands	r3, r1
 8009ab2:	69b9      	ldr	r1, [r7, #24]
 8009ab4:	0148      	lsls	r0, r1, #5
 8009ab6:	69f9      	ldr	r1, [r7, #28]
 8009ab8:	4401      	add	r1, r0
 8009aba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ad8:	69b9      	ldr	r1, [r7, #24]
 8009ada:	0148      	lsls	r0, r1, #5
 8009adc:	69f9      	ldr	r1, [r7, #28]
 8009ade:	4401      	add	r1, r0
 8009ae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d10d      	bne.n	8009b0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d009      	beq.n	8009b0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6919      	ldr	r1, [r3, #16]
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	460a      	mov	r2, r1
 8009b08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	791b      	ldrb	r3, [r3, #4]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d128      	bne.n	8009b64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d110      	bne.n	8009b44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	0151      	lsls	r1, r2, #5
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	440a      	add	r2, r1
 8009b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	e00f      	b.n	8009b64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	0151      	lsls	r1, r2, #5
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	440a      	add	r2, r1
 8009b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	1ff80000 	.word	0x1ff80000

08009b94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	f040 80ce 	bne.w	8009d52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d132      	bne.n	8009c24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1c:	0cdb      	lsrs	r3, r3, #19
 8009c1e:	04db      	lsls	r3, r3, #19
 8009c20:	6113      	str	r3, [r2, #16]
 8009c22:	e04e      	b.n	8009cc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3e:	0cdb      	lsrs	r3, r3, #19
 8009c40:	04db      	lsls	r3, r3, #19
 8009c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d903      	bls.n	8009c7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb2:	6939      	ldr	r1, [r7, #16]
 8009cb4:	0148      	lsls	r0, r1, #5
 8009cb6:	6979      	ldr	r1, [r7, #20]
 8009cb8:	4401      	add	r1, r0
 8009cba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d11e      	bne.n	8009d06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d009      	beq.n	8009ce4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	e097      	b.n	8009e36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 8083 	beq.w	8009e36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	6979      	ldr	r1, [r7, #20]
 8009d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	634b      	str	r3, [r1, #52]	; 0x34
 8009d50:	e071      	b.n	8009e36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	0151      	lsls	r1, r2, #5
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	440a      	add	r2, r1
 8009d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d6c:	0cdb      	lsrs	r3, r3, #19
 8009d6e:	04db      	lsls	r3, r3, #19
 8009d70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	0151      	lsls	r1, r2, #5
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	440a      	add	r2, r1
 8009d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de4:	6939      	ldr	r1, [r7, #16]
 8009de6:	0148      	lsls	r0, r1, #5
 8009de8:	6979      	ldr	r1, [r7, #20]
 8009dea:	4401      	add	r1, r0
 8009dec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009df0:	4313      	orrs	r3, r2
 8009df2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10d      	bne.n	8009e16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6919      	ldr	r1, [r3, #16]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e12:	460a      	mov	r2, r1
 8009e14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	371c      	adds	r7, #28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d14a      	bne.n	8009ef8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e7a:	f040 8086 	bne.w	8009f8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	7812      	ldrb	r2, [r2, #0]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ea0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d902      	bls.n	8009edc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eda:	e056      	b.n	8009f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ef4:	d0e7      	beq.n	8009ec6 <USB_EPStopXfer+0x82>
 8009ef6:	e048      	b.n	8009f8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f10:	d13b      	bne.n	8009f8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	7812      	ldrb	r2, [r2, #0]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	7812      	ldrb	r2, [r2, #0]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d902      	bls.n	8009f70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6e:	e00c      	b.n	8009f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f88:	d0e7      	beq.n	8009f5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	371c      	adds	r7, #28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b089      	sub	sp, #36	; 0x24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	71fb      	strb	r3, [r7, #7]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d123      	bne.n	800a006 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fbe:	88bb      	ldrh	r3, [r7, #4]
 8009fc0:	3303      	adds	r3, #3
 8009fc2:	089b      	lsrs	r3, r3, #2
 8009fc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61bb      	str	r3, [r7, #24]
 8009fca:	e018      	b.n	8009ffe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	031a      	lsls	r2, r3, #12
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd8:	461a      	mov	r2, r3
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	429a      	cmp	r2, r3
 800a004:	d3e2      	bcc.n	8009fcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3724      	adds	r7, #36	; 0x24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a014:	b480      	push	{r7}
 800a016:	b08b      	sub	sp, #44	; 0x2c
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a02a:	88fb      	ldrh	r3, [r7, #6]
 800a02c:	089b      	lsrs	r3, r3, #2
 800a02e:	b29b      	uxth	r3, r3
 800a030:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	f003 0303 	and.w	r3, r3, #3
 800a038:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a03a:	2300      	movs	r3, #0
 800a03c:	623b      	str	r3, [r7, #32]
 800a03e:	e014      	b.n	800a06a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	3301      	adds	r3, #1
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	3301      	adds	r3, #1
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	3301      	adds	r3, #1
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	3301      	adds	r3, #1
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	3301      	adds	r3, #1
 800a068:	623b      	str	r3, [r7, #32]
 800a06a:	6a3a      	ldr	r2, [r7, #32]
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d3e6      	bcc.n	800a040 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a072:	8bfb      	ldrh	r3, [r7, #30]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01e      	beq.n	800a0b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a082:	461a      	mov	r2, r3
 800a084:	f107 0310 	add.w	r3, r7, #16
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	b2db      	uxtb	r3, r3
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	701a      	strb	r2, [r3, #0]
      i++;
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a0aa:	8bfb      	ldrh	r3, [r7, #30]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0b0:	8bfb      	ldrh	r3, [r7, #30]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1ea      	bne.n	800a08c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	372c      	adds	r7, #44	; 0x2c
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	785b      	ldrb	r3, [r3, #1]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d12c      	bne.n	800a13a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	db12      	blt.n	800a118 <USB_EPSetStall+0x54>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00f      	beq.n	800a118 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	0151      	lsls	r1, r2, #5
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	440a      	add	r2, r1
 800a10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a116:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	e02b      	b.n	800a192 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db12      	blt.n	800a172 <USB_EPSetStall+0xae>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a170:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a18c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d128      	bne.n	800a20e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	791b      	ldrb	r3, [r3, #4]
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d003      	beq.n	800a1ec <USB_EPClearStall+0x4c>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	791b      	ldrb	r3, [r3, #4]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d138      	bne.n	800a25e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	e027      	b.n	800a25e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	440a      	add	r2, r1
 800a224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a22c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	791b      	ldrb	r3, [r3, #4]
 800a232:	2b03      	cmp	r3, #3
 800a234:	d003      	beq.n	800a23e <USB_EPClearStall+0x9e>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	791b      	ldrb	r3, [r3, #4]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d10f      	bne.n	800a25e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a25c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a28a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a28e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a2a0:	68f9      	ldr	r1, [r7, #12]
 800a2a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2e6:	f023 0302 	bic.w	r3, r3, #2
 800a2ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a328:	f043 0302 	orr.w	r3, r3, #2
 800a32c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4013      	ands	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a354:	68fb      	ldr	r3, [r7, #12]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	4013      	ands	r3, r2
 800a384:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	0c1b      	lsrs	r3, r3, #16
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	b29b      	uxth	r3, r3
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a406:	b480      	push	{r7}
 800a408:	b087      	sub	sp, #28
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a428:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a42a:	78fb      	ldrb	r3, [r7, #3]
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	fa22 f303 	lsr.w	r3, r2, r3
 800a436:	01db      	lsls	r3, r3, #7
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4013      	ands	r3, r2
 800a452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a454:	68bb      	ldr	r3, [r7, #8]
}
 800a456:	4618      	mov	r0, r3
 800a458:	371c      	adds	r7, #28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0301 	and.w	r3, r3, #1
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a498:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a49c:	f023 0307 	bic.w	r3, r3, #7
 800a4a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	333c      	adds	r3, #60	; 0x3c
 800a4da:	3304      	adds	r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	4a26      	ldr	r2, [pc, #152]	; (800a57c <USB_EP0_OutStart+0xb8>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d90a      	bls.n	800a4fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4f8:	d101      	bne.n	800a4fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e037      	b.n	800a56e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a504:	461a      	mov	r2, r3
 800a506:	2300      	movs	r3, #0
 800a508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a51c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52c:	f043 0318 	orr.w	r3, r3, #24
 800a530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a540:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10f      	bne.n	800a56c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a552:	461a      	mov	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a566:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a56a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	4f54300a 	.word	0x4f54300a

0800a580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4a13      	ldr	r2, [pc, #76]	; (800a5e4 <USB_CoreReset+0x64>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d901      	bls.n	800a59e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e01b      	b.n	800a5d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	daf2      	bge.n	800a58c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f043 0201 	orr.w	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4a09      	ldr	r2, [pc, #36]	; (800a5e4 <USB_CoreReset+0x64>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d901      	bls.n	800a5c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e006      	b.n	800a5d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d0f0      	beq.n	800a5b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	00030d40 	.word	0x00030d40

0800a5e8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800a5f4:	2018      	movs	r0, #24
 800a5f6:	f004 f901 	bl	800e7fc <USBD_static_malloc>
 800a5fa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d105      	bne.n	800a60e <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a60a:	2302      	movs	r3, #2
 800a60c:	e038      	b.n	800a680 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	7c1b      	ldrb	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d107      	bne.n	800a62e <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2205      	movs	r2, #5
 800a622:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2205      	movs	r2, #5
 800a628:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800a62c:	e006      	b.n	800a63c <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	220a      	movs	r2, #10
 800a632:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	220a      	movs	r2, #10
 800a638:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	2203      	movs	r2, #3
 800a640:	2181      	movs	r1, #129	; 0x81
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f003 ffc9 	bl	800e5da <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800a64e:	2340      	movs	r3, #64	; 0x40
 800a650:	2203      	movs	r2, #3
 800a652:	2101      	movs	r1, #1
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f003 ffc0 	bl	800e5da <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	2302      	movs	r3, #2
 800a676:	2101      	movs	r1, #1
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f004 f89d 	bl	800e7b8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800a694:	2181      	movs	r1, #129	; 0x81
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f003 ffc5 	bl	800e626 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f003 ffbb 	bl	800e626 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00e      	beq.n	800a6e8 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f004 f89c 	bl	800e818 <USBD_static_free>
    pdev->pClassData = NULL;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a704:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e0ed      	b.n	800a8fc <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d052      	beq.n	800a7d2 <USBD_CUSTOM_HID_Setup+0xde>
 800a72c:	2b20      	cmp	r3, #32
 800a72e:	f040 80dd 	bne.w	800a8ec <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	3b02      	subs	r3, #2
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d842      	bhi.n	800a7c2 <USBD_CUSTOM_HID_Setup+0xce>
 800a73c:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <USBD_CUSTOM_HID_Setup+0x50>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a79d 	.word	0x0800a79d
 800a748:	0800a77b 	.word	0x0800a77b
 800a74c:	0800a7c3 	.word	0x0800a7c3
 800a750:	0800a7c3 	.word	0x0800a7c3
 800a754:	0800a7c3 	.word	0x0800a7c3
 800a758:	0800a7c3 	.word	0x0800a7c3
 800a75c:	0800a7c3 	.word	0x0800a7c3
 800a760:	0800a7ad 	.word	0x0800a7ad
 800a764:	0800a78b 	.word	0x0800a78b
 800a768:	0800a76d 	.word	0x0800a76d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	885b      	ldrh	r3, [r3, #2]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	605a      	str	r2, [r3, #4]
          break;
 800a778:	e02a      	b.n	800a7d0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3304      	adds	r3, #4
 800a77e:	2201      	movs	r2, #1
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 fa8f 	bl	800bca6 <USBD_CtlSendData>
          break;
 800a788:	e022      	b.n	800a7d0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	885b      	ldrh	r3, [r3, #2]
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	b29b      	uxth	r3, r3
 800a792:	b2db      	uxtb	r3, r3
 800a794:	461a      	mov	r2, r3
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	609a      	str	r2, [r3, #8]
          break;
 800a79a:	e019      	b.n	800a7d0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	3308      	adds	r3, #8
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fa7e 	bl	800bca6 <USBD_CtlSendData>
          break;
 800a7aa:	e011      	b.n	800a7d0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a7b2:	6939      	ldr	r1, [r7, #16]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	88db      	ldrh	r3, [r3, #6]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fa9f 	bl	800bcfe <USBD_CtlPrepareRx>
          break;
 800a7c0:	e006      	b.n	800a7d0 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f9fd 	bl	800bbc4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ce:	bf00      	nop
      }
      break;
 800a7d0:	e093      	b.n	800a8fa <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2b0b      	cmp	r3, #11
 800a7d8:	d87f      	bhi.n	800a8da <USBD_CUSTOM_HID_Setup+0x1e6>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBD_CUSTOM_HID_Setup+0xec>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a811 	.word	0x0800a811
 800a7e4:	0800a8e9 	.word	0x0800a8e9
 800a7e8:	0800a8db 	.word	0x0800a8db
 800a7ec:	0800a8db 	.word	0x0800a8db
 800a7f0:	0800a8db 	.word	0x0800a8db
 800a7f4:	0800a8db 	.word	0x0800a8db
 800a7f8:	0800a83b 	.word	0x0800a83b
 800a7fc:	0800a8db 	.word	0x0800a8db
 800a800:	0800a8db 	.word	0x0800a8db
 800a804:	0800a8db 	.word	0x0800a8db
 800a808:	0800a889 	.word	0x0800a889
 800a80c:	0800a8b3 	.word	0x0800a8b3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d107      	bne.n	800a82c <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a81c:	f107 030e 	add.w	r3, r7, #14
 800a820:	2202      	movs	r2, #2
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fa3e 	bl	800bca6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a82a:	e05e      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f9c8 	bl	800bbc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	75fb      	strb	r3, [r7, #23]
          break;
 800a838:	e057      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	885b      	ldrh	r3, [r3, #2]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b22      	cmp	r3, #34	; 0x22
 800a844:	d10b      	bne.n	800a85e <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	88db      	ldrh	r3, [r3, #6]
 800a84a:	2b21      	cmp	r3, #33	; 0x21
 800a84c:	bf28      	it	cs
 800a84e:	2321      	movcs	r3, #33	; 0x21
 800a850:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	61bb      	str	r3, [r7, #24]
 800a85c:	e00d      	b.n	800a87a <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	885b      	ldrh	r3, [r3, #2]
 800a862:	0a1b      	lsrs	r3, r3, #8
 800a864:	b29b      	uxth	r3, r3
 800a866:	2b21      	cmp	r3, #33	; 0x21
 800a868:	d107      	bne.n	800a87a <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800a86a:	4b26      	ldr	r3, [pc, #152]	; (800a904 <USBD_CUSTOM_HID_Setup+0x210>)
 800a86c:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	2b09      	cmp	r3, #9
 800a874:	bf28      	it	cs
 800a876:	2309      	movcs	r3, #9
 800a878:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a87a:	8bfb      	ldrh	r3, [r7, #30]
 800a87c:	461a      	mov	r2, r3
 800a87e:	69b9      	ldr	r1, [r7, #24]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fa10 	bl	800bca6 <USBD_CtlSendData>
          break;
 800a886:	e030      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b03      	cmp	r3, #3
 800a892:	d107      	bne.n	800a8a4 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	330c      	adds	r3, #12
 800a898:	2201      	movs	r2, #1
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fa02 	bl	800bca6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8a2:	e022      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 f98c 	bl	800bbc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a8b0:	e01b      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d106      	bne.n	800a8cc <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	885b      	ldrh	r3, [r3, #2]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8ca:	e00e      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 f978 	bl	800bbc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a8d8:	e007      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f971 	bl	800bbc4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8e6:	e000      	b.n	800a8ea <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 800a8e8:	bf00      	nop
      }
      break;
 800a8ea:	e006      	b.n	800a8fa <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 f968 	bl	800bbc4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f8:	bf00      	nop
  }
  return (uint8_t)ret;
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000148 	.word	0x20000148

0800a908 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	e01a      	b.n	800a95a <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a92a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b03      	cmp	r3, #3
 800a936:	d10f      	bne.n	800a958 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	7d1b      	ldrb	r3, [r3, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d109      	bne.n	800a954 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2201      	movs	r2, #1
 800a944:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	2181      	movs	r1, #129	; 0x81
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f003 ff12 	bl	800e776 <USBD_LL_Transmit>
 800a952:	e001      	b.n	800a958 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a954:	2301      	movs	r3, #1
 800a956:	e000      	b.n	800a95a <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2229      	movs	r2, #41	; 0x29
 800a970:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800a972:	4b03      	ldr	r3, [pc, #12]	; (800a980 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	200000c4 	.word	0x200000c4

0800a984 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2229      	movs	r2, #41	; 0x29
 800a990:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800a992:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	200000f0 	.word	0x200000f0

0800a9a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2229      	movs	r2, #41	; 0x29
 800a9b0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a9b2:	4b03      	ldr	r3, [pc, #12]	; (800a9c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	2000011c 	.word	0x2000011c

0800a9c4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9fa:	60fb      	str	r3, [r7, #12]
	((USBD_CUSTOM_HID_ItfTypeDef *) pdev->pUserData)->OutEvent(hhid->Report_buf);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4610      	mov	r0, r2
 800aa08:	4798      	blx	r3
    USBD_LL_PrepareReceive (pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	2101      	movs	r1, #1
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f003 fed1 	bl	800e7b8 <USBD_LL_PrepareReceive>
    return (uint8_t) USBD_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e00a      	b.n	800aa4c <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	2302      	movs	r3, #2
 800aa42:	2101      	movs	r1, #1
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f003 feb7 	bl	800e7b8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa62:	60fb      	str	r3, [r7, #12]

	if (hhid->IsReportAvailable == 1)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d109      	bne.n	800aa80 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
	{
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4610      	mov	r0, r2
 800aa78:	4798      	blx	r3
		hhid->IsReportAvailable = 0;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	611a      	str	r2, [r3, #16]
	}
	return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	220a      	movs	r2, #10
 800aa98:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800aa9a:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	20000154 	.word	0x20000154

0800aaac <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e004      	b.n	800aaca <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b086      	sub	sp, #24
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	4613      	mov	r3, r2
 800aae2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e01f      	b.n	800ab2e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	79fa      	ldrb	r2, [r7, #7]
 800ab20:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f003 fcf2 	bl	800e50c <USBD_LL_Init>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e016      	b.n	800ab7c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	f107 020e 	add.w	r2, r7, #14
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4798      	blx	r3
 800ab72:	4602      	mov	r2, r0
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f003 fd09 	bl	800e5a4 <USBD_LL_Start>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800abbe:	2303      	movs	r3, #3
 800abc0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	4611      	mov	r1, r2
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
 800abdc:	4603      	mov	r3, r0
 800abde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	460b      	mov	r3, r1
 800abf4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d007      	beq.n	800ac10 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
  }

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 ff8f 	bl	800bb50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac40:	461a      	mov	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac4e:	f003 031f 	and.w	r3, r3, #31
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d01a      	beq.n	800ac8c <USBD_LL_SetupStage+0x72>
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d822      	bhi.n	800aca0 <USBD_LL_SetupStage+0x86>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <USBD_LL_SetupStage+0x4a>
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d00a      	beq.n	800ac78 <USBD_LL_SetupStage+0x5e>
 800ac62:	e01d      	b.n	800aca0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fa61 	bl	800b134 <USBD_StdDevReq>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
      break;
 800ac76:	e020      	b.n	800acba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fac5 	bl	800b210 <USBD_StdItfReq>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8a:	e016      	b.n	800acba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fb04 	bl	800b2a2 <USBD_StdEPReq>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9e:	e00c      	b.n	800acba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f003 fcd8 	bl	800e664 <USBD_LL_StallEP>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73fb      	strb	r3, [r7, #15]
      break;
 800acb8:	bf00      	nop
  }

  return ret;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	460b      	mov	r3, r1
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d138      	bne.n	800ad4a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800acde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d14a      	bne.n	800ad80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d913      	bls.n	800ad1e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	bf28      	it	cs
 800ad10:	4613      	movcs	r3, r2
 800ad12:	461a      	mov	r2, r3
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f001 f80e 	bl	800bd38 <USBD_CtlContinueRx>
 800ad1c:	e030      	b.n	800ad80 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d10b      	bne.n	800ad42 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f001 f809 	bl	800bd5a <USBD_CtlSendStatus>
 800ad48:	e01a      	b.n	800ad80 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d114      	bne.n	800ad80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00e      	beq.n	800ad80 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	7afa      	ldrb	r2, [r7, #11]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	4798      	blx	r3
 800ad72:	4603      	mov	r3, r0
 800ad74:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	e000      	b.n	800ad82 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	460b      	mov	r3, r1
 800ad94:	607a      	str	r2, [r7, #4]
 800ad96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d16b      	bne.n	800ae76 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3314      	adds	r3, #20
 800ada2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d156      	bne.n	800ae5c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d914      	bls.n	800ade4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	461a      	mov	r2, r3
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 ff83 	bl	800bcdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800add6:	2300      	movs	r3, #0
 800add8:	2200      	movs	r2, #0
 800adda:	2100      	movs	r1, #0
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f003 fceb 	bl	800e7b8 <USBD_LL_PrepareReceive>
 800ade2:	e03b      	b.n	800ae5c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	68da      	ldr	r2, [r3, #12]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	d11c      	bne.n	800ae2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d316      	bcc.n	800ae2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d20f      	bcs.n	800ae2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 ff64 	bl	800bcdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f003 fcc8 	bl	800e7b8 <USBD_LL_PrepareReceive>
 800ae28:	e018      	b.n	800ae5c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d10b      	bne.n	800ae4e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae4e:	2180      	movs	r1, #128	; 0x80
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f003 fc07 	bl	800e664 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 ff92 	bl	800bd80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d122      	bne.n	800aeac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fe98 	bl	800ab9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae74:	e01a      	b.n	800aeac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d114      	bne.n	800aeac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00e      	beq.n	800aeac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	7afa      	ldrb	r2, [r7, #11]
 800ae98:	4611      	mov	r1, r2
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	4798      	blx	r3
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
 800aeaa:	e000      	b.n	800aeae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e02f      	b.n	800af4a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00f      	beq.n	800af14 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d009      	beq.n	800af14 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	6852      	ldr	r2, [r2, #4]
 800af0c:	b2d2      	uxtb	r2, r2
 800af0e:	4611      	mov	r1, r2
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af14:	2340      	movs	r3, #64	; 0x40
 800af16:	2200      	movs	r2, #0
 800af18:	2100      	movs	r1, #0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f003 fb5d 	bl	800e5da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2240      	movs	r2, #64	; 0x40
 800af2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	2200      	movs	r2, #0
 800af34:	2180      	movs	r1, #128	; 0x80
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f003 fb4f 	bl	800e5da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2240      	movs	r2, #64	; 0x40
 800af46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	460b      	mov	r3, r1
 800af5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	78fa      	ldrb	r2, [r7, #3]
 800af62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af80:	b2da      	uxtb	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2204      	movs	r2, #4
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d106      	bne.n	800afc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e012      	b.n	800b00a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d10b      	bne.n	800b008 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d005      	beq.n	800b008 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	e014      	b.n	800b056 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b03      	cmp	r3, #3
 800b036:	d10d      	bne.n	800b054 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	78fa      	ldrb	r2, [r7, #3]
 800b04e:	4611      	mov	r1, r2
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	460b      	mov	r3, r1
 800b068:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b074:	2303      	movs	r3, #3
 800b076:	e014      	b.n	800b0a2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b03      	cmp	r3, #3
 800b082:	d10d      	bne.n	800b0a0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d007      	beq.n	800b0a0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	78fa      	ldrb	r2, [r7, #3]
 800b09a:	4611      	mov	r1, r2
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d009      	beq.n	800b0ee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6852      	ldr	r2, [r2, #4]
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
  }

  return USBD_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	3301      	adds	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b116:	8a3b      	ldrh	r3, [r7, #16]
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	b21a      	sxth	r2, r3
 800b11c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b120:	4313      	orrs	r3, r2
 800b122:	b21b      	sxth	r3, r3
 800b124:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b126:	89fb      	ldrh	r3, [r7, #14]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b14a:	2b40      	cmp	r3, #64	; 0x40
 800b14c:	d005      	beq.n	800b15a <USBD_StdDevReq+0x26>
 800b14e:	2b40      	cmp	r3, #64	; 0x40
 800b150:	d853      	bhi.n	800b1fa <USBD_StdDevReq+0xc6>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00b      	beq.n	800b16e <USBD_StdDevReq+0x3a>
 800b156:	2b20      	cmp	r3, #32
 800b158:	d14f      	bne.n	800b1fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	4798      	blx	r3
 800b168:	4603      	mov	r3, r0
 800b16a:	73fb      	strb	r3, [r7, #15]
      break;
 800b16c:	e04a      	b.n	800b204 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	2b09      	cmp	r3, #9
 800b174:	d83b      	bhi.n	800b1ee <USBD_StdDevReq+0xba>
 800b176:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <USBD_StdDevReq+0x48>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b1d1 	.word	0x0800b1d1
 800b180:	0800b1e5 	.word	0x0800b1e5
 800b184:	0800b1ef 	.word	0x0800b1ef
 800b188:	0800b1db 	.word	0x0800b1db
 800b18c:	0800b1ef 	.word	0x0800b1ef
 800b190:	0800b1af 	.word	0x0800b1af
 800b194:	0800b1a5 	.word	0x0800b1a5
 800b198:	0800b1ef 	.word	0x0800b1ef
 800b19c:	0800b1c7 	.word	0x0800b1c7
 800b1a0:	0800b1b9 	.word	0x0800b1b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f9de 	bl	800b568 <USBD_GetDescriptor>
          break;
 800b1ac:	e024      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fb43 	bl	800b83c <USBD_SetAddress>
          break;
 800b1b6:	e01f      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fb82 	bl	800b8c4 <USBD_SetConfig>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]
          break;
 800b1c4:	e018      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fc21 	bl	800ba10 <USBD_GetConfig>
          break;
 800b1ce:	e013      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fc52 	bl	800ba7c <USBD_GetStatus>
          break;
 800b1d8:	e00e      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc81 	bl	800bae4 <USBD_SetFeature>
          break;
 800b1e2:	e009      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fc90 	bl	800bb0c <USBD_ClrFeature>
          break;
 800b1ec:	e004      	b.n	800b1f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fce7 	bl	800bbc4 <USBD_CtlError>
          break;
 800b1f6:	bf00      	nop
      }
      break;
 800b1f8:	e004      	b.n	800b204 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fce1 	bl	800bbc4 <USBD_CtlError>
      break;
 800b202:	bf00      	nop
  }

  return ret;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop

0800b210 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b226:	2b40      	cmp	r3, #64	; 0x40
 800b228:	d005      	beq.n	800b236 <USBD_StdItfReq+0x26>
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d82f      	bhi.n	800b28e <USBD_StdItfReq+0x7e>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <USBD_StdItfReq+0x26>
 800b232:	2b20      	cmp	r3, #32
 800b234:	d12b      	bne.n	800b28e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	3b01      	subs	r3, #1
 800b240:	2b02      	cmp	r3, #2
 800b242:	d81d      	bhi.n	800b280 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	889b      	ldrh	r3, [r3, #4]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d813      	bhi.n	800b276 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	88db      	ldrh	r3, [r3, #6]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d110      	bne.n	800b28a <USBD_StdItfReq+0x7a>
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10d      	bne.n	800b28a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fd73 	bl	800bd5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b274:	e009      	b.n	800b28a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fca3 	bl	800bbc4 <USBD_CtlError>
          break;
 800b27e:	e004      	b.n	800b28a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fc9e 	bl	800bbc4 <USBD_CtlError>
          break;
 800b288:	e000      	b.n	800b28c <USBD_StdItfReq+0x7c>
          break;
 800b28a:	bf00      	nop
      }
      break;
 800b28c:	e004      	b.n	800b298 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fc97 	bl	800bbc4 <USBD_CtlError>
      break;
 800b296:	bf00      	nop
  }

  return ret;
 800b298:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	889b      	ldrh	r3, [r3, #4]
 800b2b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2be:	2b40      	cmp	r3, #64	; 0x40
 800b2c0:	d007      	beq.n	800b2d2 <USBD_StdEPReq+0x30>
 800b2c2:	2b40      	cmp	r3, #64	; 0x40
 800b2c4:	f200 8145 	bhi.w	800b552 <USBD_StdEPReq+0x2b0>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00c      	beq.n	800b2e6 <USBD_StdEPReq+0x44>
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	f040 8140 	bne.w	800b552 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	4798      	blx	r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e4:	e13a      	b.n	800b55c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	785b      	ldrb	r3, [r3, #1]
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d007      	beq.n	800b2fe <USBD_StdEPReq+0x5c>
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	f300 8129 	bgt.w	800b546 <USBD_StdEPReq+0x2a4>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d07f      	beq.n	800b3f8 <USBD_StdEPReq+0x156>
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d03c      	beq.n	800b376 <USBD_StdEPReq+0xd4>
 800b2fc:	e123      	b.n	800b546 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d002      	beq.n	800b310 <USBD_StdEPReq+0x6e>
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d016      	beq.n	800b33c <USBD_StdEPReq+0x9a>
 800b30e:	e02c      	b.n	800b36a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00d      	beq.n	800b332 <USBD_StdEPReq+0x90>
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b80      	cmp	r3, #128	; 0x80
 800b31a:	d00a      	beq.n	800b332 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f003 f99f 	bl	800e664 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b326:	2180      	movs	r1, #128	; 0x80
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f003 f99b 	bl	800e664 <USBD_LL_StallEP>
 800b32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b330:	e020      	b.n	800b374 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fc45 	bl	800bbc4 <USBD_CtlError>
              break;
 800b33a:	e01b      	b.n	800b374 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	885b      	ldrh	r3, [r3, #2]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10e      	bne.n	800b362 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <USBD_StdEPReq+0xc0>
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	2b80      	cmp	r3, #128	; 0x80
 800b34e:	d008      	beq.n	800b362 <USBD_StdEPReq+0xc0>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	88db      	ldrh	r3, [r3, #6]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f003 f981 	bl	800e664 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fcf9 	bl	800bd5a <USBD_CtlSendStatus>

              break;
 800b368:	e004      	b.n	800b374 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fc29 	bl	800bbc4 <USBD_CtlError>
              break;
 800b372:	bf00      	nop
          }
          break;
 800b374:	e0ec      	b.n	800b550 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d002      	beq.n	800b388 <USBD_StdEPReq+0xe6>
 800b382:	2b03      	cmp	r3, #3
 800b384:	d016      	beq.n	800b3b4 <USBD_StdEPReq+0x112>
 800b386:	e030      	b.n	800b3ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <USBD_StdEPReq+0x108>
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	2b80      	cmp	r3, #128	; 0x80
 800b392:	d00a      	beq.n	800b3aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f003 f963 	bl	800e664 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f003 f95f 	bl	800e664 <USBD_LL_StallEP>
 800b3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3a8:	e025      	b.n	800b3f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc09 	bl	800bbc4 <USBD_CtlError>
              break;
 800b3b2:	e020      	b.n	800b3f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	885b      	ldrh	r3, [r3, #2]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d11b      	bne.n	800b3f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f003 f969 	bl	800e6a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fcc2 	bl	800bd5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	4798      	blx	r3
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b3e8:	e004      	b.n	800b3f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fbe9 	bl	800bbc4 <USBD_CtlError>
              break;
 800b3f2:	e000      	b.n	800b3f6 <USBD_StdEPReq+0x154>
              break;
 800b3f4:	bf00      	nop
          }
          break;
 800b3f6:	e0ab      	b.n	800b550 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b02      	cmp	r3, #2
 800b402:	d002      	beq.n	800b40a <USBD_StdEPReq+0x168>
 800b404:	2b03      	cmp	r3, #3
 800b406:	d032      	beq.n	800b46e <USBD_StdEPReq+0x1cc>
 800b408:	e097      	b.n	800b53a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d007      	beq.n	800b420 <USBD_StdEPReq+0x17e>
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	2b80      	cmp	r3, #128	; 0x80
 800b414:	d004      	beq.n	800b420 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fbd3 	bl	800bbc4 <USBD_CtlError>
                break;
 800b41e:	e091      	b.n	800b544 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	da0b      	bge.n	800b440 <USBD_StdEPReq+0x19e>
 800b428:	7bbb      	ldrb	r3, [r7, #14]
 800b42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	3310      	adds	r3, #16
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	3304      	adds	r3, #4
 800b43e:	e00b      	b.n	800b458 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b446:	4613      	mov	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	3304      	adds	r3, #4
 800b458:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2202      	movs	r2, #2
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fc1d 	bl	800bca6 <USBD_CtlSendData>
              break;
 800b46c:	e06a      	b.n	800b544 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b46e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b472:	2b00      	cmp	r3, #0
 800b474:	da11      	bge.n	800b49a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	f003 020f 	and.w	r2, r3, #15
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	3324      	adds	r3, #36	; 0x24
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d117      	bne.n	800b4c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fb96 	bl	800bbc4 <USBD_CtlError>
                  break;
 800b498:	e054      	b.n	800b544 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	f003 020f 	and.w	r2, r3, #15
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	440b      	add	r3, r1
 800b4ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d104      	bne.n	800b4c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fb83 	bl	800bbc4 <USBD_CtlError>
                  break;
 800b4be:	e041      	b.n	800b544 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da0b      	bge.n	800b4e0 <USBD_StdEPReq+0x23e>
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	3310      	adds	r3, #16
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	4413      	add	r3, r2
 800b4dc:	3304      	adds	r3, #4
 800b4de:	e00b      	b.n	800b4f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <USBD_StdEPReq+0x264>
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b80      	cmp	r3, #128	; 0x80
 800b504:	d103      	bne.n	800b50e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e00e      	b.n	800b52c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f003 f8e4 	bl	800e6e0 <USBD_LL_IsStallEP>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2201      	movs	r2, #1
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	e002      	b.n	800b52c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2202      	movs	r2, #2
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fbb7 	bl	800bca6 <USBD_CtlSendData>
              break;
 800b538:	e004      	b.n	800b544 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b53a:	6839      	ldr	r1, [r7, #0]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fb41 	bl	800bbc4 <USBD_CtlError>
              break;
 800b542:	bf00      	nop
          }
          break;
 800b544:	e004      	b.n	800b550 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fb3b 	bl	800bbc4 <USBD_CtlError>
          break;
 800b54e:	bf00      	nop
      }
      break;
 800b550:	e004      	b.n	800b55c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fb35 	bl	800bbc4 <USBD_CtlError>
      break;
 800b55a:	bf00      	nop
  }

  return ret;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	885b      	ldrh	r3, [r3, #2]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	b29b      	uxth	r3, r3
 800b586:	3b01      	subs	r3, #1
 800b588:	2b06      	cmp	r3, #6
 800b58a:	f200 8128 	bhi.w	800b7de <USBD_GetDescriptor+0x276>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <USBD_GetDescriptor+0x2c>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5b1 	.word	0x0800b5b1
 800b598:	0800b5c9 	.word	0x0800b5c9
 800b59c:	0800b609 	.word	0x0800b609
 800b5a0:	0800b7df 	.word	0x0800b7df
 800b5a4:	0800b7df 	.word	0x0800b7df
 800b5a8:	0800b77f 	.word	0x0800b77f
 800b5ac:	0800b7ab 	.word	0x0800b7ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	7c12      	ldrb	r2, [r2, #16]
 800b5bc:	f107 0108 	add.w	r1, r7, #8
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
 800b5c4:	60f8      	str	r0, [r7, #12]
      break;
 800b5c6:	e112      	b.n	800b7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	7c1b      	ldrb	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10d      	bne.n	800b5ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d8:	f107 0208 	add.w	r2, r7, #8
 800b5dc:	4610      	mov	r0, r2
 800b5de:	4798      	blx	r3
 800b5e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5ea:	e100      	b.n	800b7ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	f107 0208 	add.w	r2, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3301      	adds	r3, #1
 800b602:	2202      	movs	r2, #2
 800b604:	701a      	strb	r2, [r3, #0]
      break;
 800b606:	e0f2      	b.n	800b7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	885b      	ldrh	r3, [r3, #2]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b05      	cmp	r3, #5
 800b610:	f200 80ac 	bhi.w	800b76c <USBD_GetDescriptor+0x204>
 800b614:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <USBD_GetDescriptor+0xb4>)
 800b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61a:	bf00      	nop
 800b61c:	0800b635 	.word	0x0800b635
 800b620:	0800b669 	.word	0x0800b669
 800b624:	0800b69d 	.word	0x0800b69d
 800b628:	0800b6d1 	.word	0x0800b6d1
 800b62c:	0800b705 	.word	0x0800b705
 800b630:	0800b739 	.word	0x0800b739
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	7c12      	ldrb	r2, [r2, #16]
 800b64c:	f107 0108 	add.w	r1, r7, #8
 800b650:	4610      	mov	r0, r2
 800b652:	4798      	blx	r3
 800b654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b656:	e091      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fab2 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b660:	7afb      	ldrb	r3, [r7, #11]
 800b662:	3301      	adds	r3, #1
 800b664:	72fb      	strb	r3, [r7, #11]
          break;
 800b666:	e089      	b.n	800b77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00b      	beq.n	800b68c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	7c12      	ldrb	r2, [r2, #16]
 800b680:	f107 0108 	add.w	r1, r7, #8
 800b684:	4610      	mov	r0, r2
 800b686:	4798      	blx	r3
 800b688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68a:	e077      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa98 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b694:	7afb      	ldrb	r3, [r7, #11]
 800b696:	3301      	adds	r3, #1
 800b698:	72fb      	strb	r3, [r7, #11]
          break;
 800b69a:	e06f      	b.n	800b77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	7c12      	ldrb	r2, [r2, #16]
 800b6b4:	f107 0108 	add.w	r1, r7, #8
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	4798      	blx	r3
 800b6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6be:	e05d      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fa7e 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b6c8:	7afb      	ldrb	r3, [r7, #11]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ce:	e055      	b.n	800b77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00b      	beq.n	800b6f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	7c12      	ldrb	r2, [r2, #16]
 800b6e8:	f107 0108 	add.w	r1, r7, #8
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f2:	e043      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa64 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	3301      	adds	r3, #1
 800b700:	72fb      	strb	r3, [r7, #11]
          break;
 800b702:	e03b      	b.n	800b77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00b      	beq.n	800b728 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	7c12      	ldrb	r2, [r2, #16]
 800b71c:	f107 0108 	add.w	r1, r7, #8
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3
 800b724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b726:	e029      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fa4a 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	3301      	adds	r3, #1
 800b734:	72fb      	strb	r3, [r7, #11]
          break;
 800b736:	e021      	b.n	800b77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00b      	beq.n	800b75c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	7c12      	ldrb	r2, [r2, #16]
 800b750:	f107 0108 	add.w	r1, r7, #8
 800b754:	4610      	mov	r0, r2
 800b756:	4798      	blx	r3
 800b758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b75a:	e00f      	b.n	800b77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fa30 	bl	800bbc4 <USBD_CtlError>
            err++;
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	3301      	adds	r3, #1
 800b768:	72fb      	strb	r3, [r7, #11]
          break;
 800b76a:	e007      	b.n	800b77c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa28 	bl	800bbc4 <USBD_CtlError>
          err++;
 800b774:	7afb      	ldrb	r3, [r7, #11]
 800b776:	3301      	adds	r3, #1
 800b778:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b77a:	bf00      	nop
      }
      break;
 800b77c:	e037      	b.n	800b7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	7c1b      	ldrb	r3, [r3, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d109      	bne.n	800b79a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78e:	f107 0208 	add.w	r2, r7, #8
 800b792:	4610      	mov	r0, r2
 800b794:	4798      	blx	r3
 800b796:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b798:	e029      	b.n	800b7ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fa11 	bl	800bbc4 <USBD_CtlError>
        err++;
 800b7a2:	7afb      	ldrb	r3, [r7, #11]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b7a8:	e021      	b.n	800b7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7c1b      	ldrb	r3, [r3, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10d      	bne.n	800b7ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	f107 0208 	add.w	r2, r7, #8
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4798      	blx	r3
 800b7c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	2207      	movs	r2, #7
 800b7ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7cc:	e00f      	b.n	800b7ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f9f7 	bl	800bbc4 <USBD_CtlError>
        err++;
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	72fb      	strb	r3, [r7, #11]
      break;
 800b7dc:	e007      	b.n	800b7ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f9ef 	bl	800bbc4 <USBD_CtlError>
      err++;
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b7ec:	bf00      	nop
  }

  if (err != 0U)
 800b7ee:	7afb      	ldrb	r3, [r7, #11]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d11e      	bne.n	800b832 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	88db      	ldrh	r3, [r3, #6]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d016      	beq.n	800b82a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b7fc:	893b      	ldrh	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00e      	beq.n	800b820 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	88da      	ldrh	r2, [r3, #6]
 800b806:	893b      	ldrh	r3, [r7, #8]
 800b808:	4293      	cmp	r3, r2
 800b80a:	bf28      	it	cs
 800b80c:	4613      	movcs	r3, r2
 800b80e:	b29b      	uxth	r3, r3
 800b810:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b812:	893b      	ldrh	r3, [r7, #8]
 800b814:	461a      	mov	r2, r3
 800b816:	68f9      	ldr	r1, [r7, #12]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa44 	bl	800bca6 <USBD_CtlSendData>
 800b81e:	e009      	b.n	800b834 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f9ce 	bl	800bbc4 <USBD_CtlError>
 800b828:	e004      	b.n	800b834 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa95 	bl	800bd5a <USBD_CtlSendStatus>
 800b830:	e000      	b.n	800b834 <USBD_GetDescriptor+0x2cc>
    return;
 800b832:	bf00      	nop
  }
}
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop

0800b83c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	889b      	ldrh	r3, [r3, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d131      	bne.n	800b8b2 <USBD_SetAddress+0x76>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	88db      	ldrh	r3, [r3, #6]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d12d      	bne.n	800b8b2 <USBD_SetAddress+0x76>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	2b7f      	cmp	r3, #127	; 0x7f
 800b85c:	d829      	bhi.n	800b8b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	885b      	ldrh	r3, [r3, #2]
 800b862:	b2db      	uxtb	r3, r3
 800b864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b868:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d104      	bne.n	800b880 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f9a3 	bl	800bbc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87e:	e01d      	b.n	800b8bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7bfa      	ldrb	r2, [r7, #15]
 800b884:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f002 ff53 	bl	800e738 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fa61 	bl	800bd5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a6:	e009      	b.n	800b8bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b0:	e004      	b.n	800b8bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f985 	bl	800bbc4 <USBD_CtlError>
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	885b      	ldrh	r3, [r3, #2]
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	4b4c      	ldr	r3, [pc, #304]	; (800ba0c <USBD_SetConfig+0x148>)
 800b8da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8dc:	4b4b      	ldr	r3, [pc, #300]	; (800ba0c <USBD_SetConfig+0x148>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d905      	bls.n	800b8f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f96c 	bl	800bbc4 <USBD_CtlError>
    return USBD_FAIL;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e088      	b.n	800ba02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d002      	beq.n	800b902 <USBD_SetConfig+0x3e>
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d025      	beq.n	800b94c <USBD_SetConfig+0x88>
 800b900:	e071      	b.n	800b9e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b902:	4b42      	ldr	r3, [pc, #264]	; (800ba0c <USBD_SetConfig+0x148>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d01c      	beq.n	800b944 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b90a:	4b40      	ldr	r3, [pc, #256]	; (800ba0c <USBD_SetConfig+0x148>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b914:	4b3d      	ldr	r3, [pc, #244]	; (800ba0c <USBD_SetConfig+0x148>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff f949 	bl	800abb2 <USBD_SetClassConfig>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b924:	7bfb      	ldrb	r3, [r7, #15]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f949 	bl	800bbc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b932:	e065      	b.n	800ba00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa10 	bl	800bd5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2203      	movs	r2, #3
 800b93e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b942:	e05d      	b.n	800ba00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fa08 	bl	800bd5a <USBD_CtlSendStatus>
      break;
 800b94a:	e059      	b.n	800ba00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b94c:	4b2f      	ldr	r3, [pc, #188]	; (800ba0c <USBD_SetConfig+0x148>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d112      	bne.n	800b97a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b95c:	4b2b      	ldr	r3, [pc, #172]	; (800ba0c <USBD_SetConfig+0x148>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b966:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <USBD_SetConfig+0x148>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff f93c 	bl	800abea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9f1 	bl	800bd5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b978:	e042      	b.n	800ba00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <USBD_SetConfig+0x148>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	429a      	cmp	r2, r3
 800b986:	d02a      	beq.n	800b9de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff f92a 	bl	800abea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b996:	4b1d      	ldr	r3, [pc, #116]	; (800ba0c <USBD_SetConfig+0x148>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <USBD_SetConfig+0x148>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff f903 	bl	800abb2 <USBD_SetClassConfig>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00f      	beq.n	800b9d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f903 	bl	800bbc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff f90f 	bl	800abea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b9d4:	e014      	b.n	800ba00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f9bf 	bl	800bd5a <USBD_CtlSendStatus>
      break;
 800b9dc:	e010      	b.n	800ba00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f9bb 	bl	800bd5a <USBD_CtlSendStatus>
      break;
 800b9e4:	e00c      	b.n	800ba00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f8eb 	bl	800bbc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <USBD_SetConfig+0x148>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff f8f8 	bl	800abea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9fe:	bf00      	nop
  }

  return ret;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20001b68 	.word	0x20001b68

0800ba10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	88db      	ldrh	r3, [r3, #6]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d004      	beq.n	800ba2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f8cd 	bl	800bbc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba2a:	e023      	b.n	800ba74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	dc02      	bgt.n	800ba3e <USBD_GetConfig+0x2e>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc03      	bgt.n	800ba44 <USBD_GetConfig+0x34>
 800ba3c:	e015      	b.n	800ba6a <USBD_GetConfig+0x5a>
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d00b      	beq.n	800ba5a <USBD_GetConfig+0x4a>
 800ba42:	e012      	b.n	800ba6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	2201      	movs	r2, #1
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f927 	bl	800bca6 <USBD_CtlSendData>
        break;
 800ba58:	e00c      	b.n	800ba74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	2201      	movs	r2, #1
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f91f 	bl	800bca6 <USBD_CtlSendData>
        break;
 800ba68:	e004      	b.n	800ba74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f8a9 	bl	800bbc4 <USBD_CtlError>
        break;
 800ba72:	bf00      	nop
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d81e      	bhi.n	800bad2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	88db      	ldrh	r3, [r3, #6]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d004      	beq.n	800baa6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f890 	bl	800bbc4 <USBD_CtlError>
        break;
 800baa4:	e01a      	b.n	800badc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d005      	beq.n	800bac2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f043 0202 	orr.w	r2, r3, #2
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	330c      	adds	r3, #12
 800bac6:	2202      	movs	r2, #2
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f8eb 	bl	800bca6 <USBD_CtlSendData>
      break;
 800bad0:	e004      	b.n	800badc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f875 	bl	800bbc4 <USBD_CtlError>
      break;
 800bada:	bf00      	nop
  }
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	885b      	ldrh	r3, [r3, #2]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d106      	bne.n	800bb04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f92b 	bl	800bd5a <USBD_CtlSendStatus>
  }
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d80b      	bhi.n	800bb3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	885b      	ldrh	r3, [r3, #2]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d10c      	bne.n	800bb46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f910 	bl	800bd5a <USBD_CtlSendStatus>
      }
      break;
 800bb3a:	e004      	b.n	800bb46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f840 	bl	800bbc4 <USBD_CtlError>
      break;
 800bb44:	e000      	b.n	800bb48 <USBD_ClrFeature+0x3c>
      break;
 800bb46:	bf00      	nop
  }
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	781a      	ldrb	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3301      	adds	r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fabc 	bl	800b0f8 <SWAPBYTE>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff faaf 	bl	800b0f8 <SWAPBYTE>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff faa2 	bl	800b0f8 <SWAPBYTE>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	80da      	strh	r2, [r3, #6]
}
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbce:	2180      	movs	r1, #128	; 0x80
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f002 fd47 	bl	800e664 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f002 fd43 	bl	800e664 <USBD_LL_StallEP>
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b086      	sub	sp, #24
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d036      	beq.n	800bc6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc00:	6938      	ldr	r0, [r7, #16]
 800bc02:	f000 f836 	bl	800bc72 <USBD_GetLen>
 800bc06:	4603      	mov	r3, r0
 800bc08:	3301      	adds	r3, #1
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4413      	add	r3, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	7812      	ldrb	r2, [r2, #0]
 800bc1e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	3301      	adds	r3, #1
 800bc24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	2203      	movs	r2, #3
 800bc2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	3301      	adds	r3, #1
 800bc34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc36:	e013      	b.n	800bc60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	7812      	ldrb	r2, [r2, #0]
 800bc42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	3301      	adds	r3, #1
 800bc48:	613b      	str	r3, [r7, #16]
    idx++;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	4413      	add	r3, r2
 800bc56:	2200      	movs	r2, #0
 800bc58:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e7      	bne.n	800bc38 <USBD_GetString+0x52>
 800bc68:	e000      	b.n	800bc6c <USBD_GetString+0x86>
    return;
 800bc6a:	bf00      	nop
  }
}
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b085      	sub	sp, #20
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc82:	e005      	b.n	800bc90 <USBD_GetLen+0x1e>
  {
    len++;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	3301      	adds	r3, #1
 800bc88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1f5      	bne.n	800bc84 <USBD_GetLen+0x12>
  }

  return len;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	2100      	movs	r1, #0
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f002 fd52 	bl	800e776 <USBD_LL_Transmit>

  return USBD_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	2100      	movs	r1, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f002 fd41 	bl	800e776 <USBD_LL_Transmit>

  return USBD_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b084      	sub	sp, #16
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	60f8      	str	r0, [r7, #12]
 800bd06:	60b9      	str	r1, [r7, #8]
 800bd08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	2100      	movs	r1, #0
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f002 fd45 	bl	800e7b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f002 fd34 	bl	800e7b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2204      	movs	r2, #4
 800bd66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f002 fd00 	bl	800e776 <USBD_LL_Transmit>

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2205      	movs	r2, #5
 800bd8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd90:	2300      	movs	r3, #0
 800bd92:	2200      	movs	r2, #0
 800bd94:	2100      	movs	r1, #0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f002 fd0e 	bl	800e7b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bda6:	b480      	push	{r7}
 800bda8:	b083      	sub	sp, #12
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f103 0208 	add.w	r2, r3, #8
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f04f 32ff 	mov.w	r2, #4294967295
 800bdbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f103 0208 	add.w	r2, r3, #8
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f103 0208 	add.w	r2, r3, #8
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	601a      	str	r2, [r3, #0]
}
 800be3c:	bf00      	nop
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5e:	d103      	bne.n	800be68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e00c      	b.n	800be82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3308      	adds	r3, #8
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	e002      	b.n	800be76 <vListInsert+0x2e>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d2f6      	bcs.n	800be70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	601a      	str	r2, [r3, #0]
}
 800beae:	bf00      	nop
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beba:	b480      	push	{r7}
 800bebc:	b085      	sub	sp, #20
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	6892      	ldr	r2, [r2, #8]
 800bed0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6852      	ldr	r2, [r2, #4]
 800beda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d103      	bne.n	800beee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	689a      	ldr	r2, [r3, #8]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	1e5a      	subs	r2, r3, #1
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
	...

0800bf10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10a      	bne.n	800bf3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf3a:	f001 fce3 	bl	800d904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf46:	68f9      	ldr	r1, [r7, #12]
 800bf48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf4a:	fb01 f303 	mul.w	r3, r1, r3
 800bf4e:	441a      	add	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	68f9      	ldr	r1, [r7, #12]
 800bf6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf70:	fb01 f303 	mul.w	r3, r1, r3
 800bf74:	441a      	add	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	22ff      	movs	r2, #255	; 0xff
 800bf86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d114      	bne.n	800bfba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01a      	beq.n	800bfce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3310      	adds	r3, #16
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 f8bb 	bl	800d118 <xTaskRemoveFromEventList>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d012      	beq.n	800bfce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <xQueueGenericReset+0xcc>)
 800bfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	e009      	b.n	800bfce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3310      	adds	r3, #16
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff fef1 	bl	800bda6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3324      	adds	r3, #36	; 0x24
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff feec 	bl	800bda6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfce:	f001 fcc9 	bl	800d964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfd2:	2301      	movs	r3, #1
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	e000ed04 	.word	0xe000ed04

0800bfe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08a      	sub	sp, #40	; 0x28
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	4613      	mov	r3, r2
 800bfec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	3348      	adds	r3, #72	; 0x48
 800c018:	4618      	mov	r0, r3
 800c01a:	f001 fd95 	bl	800db48 <pvPortMalloc>
 800c01e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d011      	beq.n	800c04a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	3348      	adds	r3, #72	; 0x48
 800c02e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c038:	79fa      	ldrb	r2, [r7, #7]
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	4613      	mov	r3, r2
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 f805 	bl	800c054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c04a:	69bb      	ldr	r3, [r7, #24]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	e002      	b.n	800c076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c082:	2101      	movs	r1, #1
 800c084:	69b8      	ldr	r0, [r7, #24]
 800c086:	f7ff ff43 	bl	800bf10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08e      	sub	sp, #56	; 0x38
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
 800c0a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <xQueueGenericSend+0x32>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d103      	bne.n	800c0d4 <xQueueGenericSend+0x40>
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <xQueueGenericSend+0x44>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e000      	b.n	800c0da <xQueueGenericSend+0x46>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <xQueueGenericSend+0x60>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d103      	bne.n	800c102 <xQueueGenericSend+0x6e>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d101      	bne.n	800c106 <xQueueGenericSend+0x72>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <xQueueGenericSend+0x74>
 800c106:	2300      	movs	r3, #0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xQueueGenericSend+0x8e>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	623b      	str	r3, [r7, #32]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c122:	f001 f9b5 	bl	800d490 <xTaskGetSchedulerState>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <xQueueGenericSend+0x9e>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <xQueueGenericSend+0xa2>
 800c132:	2301      	movs	r3, #1
 800c134:	e000      	b.n	800c138 <xQueueGenericSend+0xa4>
 800c136:	2300      	movs	r3, #0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <xQueueGenericSend+0xbe>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	61fb      	str	r3, [r7, #28]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c152:	f001 fbd7 	bl	800d904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15e:	429a      	cmp	r2, r3
 800c160:	d302      	bcc.n	800c168 <xQueueGenericSend+0xd4>
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b02      	cmp	r3, #2
 800c166:	d129      	bne.n	800c1bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16e:	f000 fa29 	bl	800c5c4 <prvCopyDataToQueue>
 800c172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	3324      	adds	r3, #36	; 0x24
 800c180:	4618      	mov	r0, r3
 800c182:	f000 ffc9 	bl	800d118 <xTaskRemoveFromEventList>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d013      	beq.n	800c1b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c18c:	4b3f      	ldr	r3, [pc, #252]	; (800c28c <xQueueGenericSend+0x1f8>)
 800c18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	e00a      	b.n	800c1b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1a4:	4b39      	ldr	r3, [pc, #228]	; (800c28c <xQueueGenericSend+0x1f8>)
 800c1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1b4:	f001 fbd6 	bl	800d964 <vPortExitCritical>
				return pdPASS;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e063      	b.n	800c284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d103      	bne.n	800c1ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1c2:	f001 fbcf 	bl	800d964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	e05c      	b.n	800c284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1d0:	f107 0314 	add.w	r3, r7, #20
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f801 	bl	800d1dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1de:	f001 fbc1 	bl	800d964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1e2:	f000 fdb7 	bl	800cd54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1e6:	f001 fb8d 	bl	800d904 <vPortEnterCritical>
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d103      	bne.n	800c200 <xQueueGenericSend+0x16c>
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c206:	b25b      	sxtb	r3, r3
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20c:	d103      	bne.n	800c216 <xQueueGenericSend+0x182>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c216:	f001 fba5 	bl	800d964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c21a:	1d3a      	adds	r2, r7, #4
 800c21c:	f107 0314 	add.w	r3, r7, #20
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fff0 	bl	800d208 <xTaskCheckForTimeOut>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d124      	bne.n	800c278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c22e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c230:	f000 fac0 	bl	800c7b4 <prvIsQueueFull>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d018      	beq.n	800c26c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	3310      	adds	r3, #16
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f000 ff44 	bl	800d0d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c24a:	f000 fa4b 	bl	800c6e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c24e:	f000 fd8f 	bl	800cd70 <xTaskResumeAll>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	f47f af7c 	bne.w	800c152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <xQueueGenericSend+0x1f8>)
 800c25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	e772      	b.n	800c152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c26e:	f000 fa39 	bl	800c6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c272:	f000 fd7d 	bl	800cd70 <xTaskResumeAll>
 800c276:	e76c      	b.n	800c152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c27a:	f000 fa33 	bl	800c6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27e:	f000 fd77 	bl	800cd70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c284:	4618      	mov	r0, r3
 800c286:	3738      	adds	r7, #56	; 0x38
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	e000ed04 	.word	0xe000ed04

0800c290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b090      	sub	sp, #64	; 0x40
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2ba:	bf00      	nop
 800c2bc:	e7fe      	b.n	800c2bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d103      	bne.n	800c2cc <xQueueGenericSendFromISR+0x3c>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <xQueueGenericSendFromISR+0x40>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <xQueueGenericSendFromISR+0x42>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d103      	bne.n	800c2fa <xQueueGenericSendFromISR+0x6a>
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d101      	bne.n	800c2fe <xQueueGenericSendFromISR+0x6e>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e000      	b.n	800c300 <xQueueGenericSendFromISR+0x70>
 800c2fe:	2300      	movs	r3, #0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10a      	bne.n	800c31a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	623b      	str	r3, [r7, #32]
}
 800c316:	bf00      	nop
 800c318:	e7fe      	b.n	800c318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c31a:	f001 fbd5 	bl	800dac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c31e:	f3ef 8211 	mrs	r2, BASEPRI
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61fa      	str	r2, [r7, #28]
 800c334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	429a      	cmp	r2, r3
 800c344:	d302      	bcc.n	800c34c <xQueueGenericSendFromISR+0xbc>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d12f      	bne.n	800c3ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c362:	f000 f92f 	bl	800c5c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36e:	d112      	bne.n	800c396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	d016      	beq.n	800c3a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	3324      	adds	r3, #36	; 0x24
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fecb 	bl	800d118 <xTaskRemoveFromEventList>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00e      	beq.n	800c3a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	e007      	b.n	800c3a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c39a:	3301      	adds	r3, #1
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	b25a      	sxtb	r2, r3
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3aa:	e001      	b.n	800c3b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3740      	adds	r7, #64	; 0x40
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08c      	sub	sp, #48	; 0x30
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <xQueueReceive+0x30>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	623b      	str	r3, [r7, #32]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <xQueueReceive+0x3e>
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <xQueueReceive+0x42>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueReceive+0x44>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xQueueReceive+0x5e>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	61fb      	str	r3, [r7, #28]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c426:	f001 f833 	bl	800d490 <xTaskGetSchedulerState>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <xQueueReceive+0x6e>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <xQueueReceive+0x72>
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <xQueueReceive+0x74>
 800c43a:	2300      	movs	r3, #0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10a      	bne.n	800c456 <xQueueReceive+0x8e>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	61bb      	str	r3, [r7, #24]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c456:	f001 fa55 	bl	800d904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	2b00      	cmp	r3, #0
 800c464:	d01f      	beq.n	800c4a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c46a:	f000 f915 	bl	800c698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00f      	beq.n	800c49e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	3310      	adds	r3, #16
 800c482:	4618      	mov	r0, r3
 800c484:	f000 fe48 	bl	800d118 <xTaskRemoveFromEventList>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c48e:	4b3d      	ldr	r3, [pc, #244]	; (800c584 <xQueueReceive+0x1bc>)
 800c490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c49e:	f001 fa61 	bl	800d964 <vPortExitCritical>
				return pdPASS;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e069      	b.n	800c57a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d103      	bne.n	800c4b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4ac:	f001 fa5a 	bl	800d964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e062      	b.n	800c57a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4ba:	f107 0310 	add.w	r3, r7, #16
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fe8c 	bl	800d1dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4c8:	f001 fa4c 	bl	800d964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4cc:	f000 fc42 	bl	800cd54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4d0:	f001 fa18 	bl	800d904 <vPortEnterCritical>
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4da:	b25b      	sxtb	r3, r3
 800c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e0:	d103      	bne.n	800c4ea <xQueueReceive+0x122>
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4f0:	b25b      	sxtb	r3, r3
 800c4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f6:	d103      	bne.n	800c500 <xQueueReceive+0x138>
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c500:	f001 fa30 	bl	800d964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c504:	1d3a      	adds	r2, r7, #4
 800c506:	f107 0310 	add.w	r3, r7, #16
 800c50a:	4611      	mov	r1, r2
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fe7b 	bl	800d208 <xTaskCheckForTimeOut>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d123      	bne.n	800c560 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51a:	f000 f935 	bl	800c788 <prvIsQueueEmpty>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d017      	beq.n	800c554 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	3324      	adds	r3, #36	; 0x24
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 fdcf 	bl	800d0d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c534:	f000 f8d6 	bl	800c6e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c538:	f000 fc1a 	bl	800cd70 <xTaskResumeAll>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d189      	bne.n	800c456 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c542:	4b10      	ldr	r3, [pc, #64]	; (800c584 <xQueueReceive+0x1bc>)
 800c544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	e780      	b.n	800c456 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c556:	f000 f8c5 	bl	800c6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c55a:	f000 fc09 	bl	800cd70 <xTaskResumeAll>
 800c55e:	e77a      	b.n	800c456 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c562:	f000 f8bf 	bl	800c6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c566:	f000 fc03 	bl	800cd70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c56c:	f000 f90c 	bl	800c788 <prvIsQueueEmpty>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	f43f af6f 	beq.w	800c456 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3730      	adds	r7, #48	; 0x30
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10a      	bne.n	800c5ac <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	60bb      	str	r3, [r7, #8]
}
 800c5a8:	bf00      	nop
 800c5aa:	e7fe      	b.n	800c5aa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c5ac:	f001 f9aa 	bl	800d904 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c5b6:	f001 f9d5 	bl	800d964 <vPortExitCritical>

	return uxReturn;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10d      	bne.n	800c5fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d14d      	bne.n	800c686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 ff6c 	bl	800d4cc <xTaskPriorityDisinherit>
 800c5f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	609a      	str	r2, [r3, #8]
 800c5fc:	e043      	b.n	800c686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d119      	bne.n	800c638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6858      	ldr	r0, [r3, #4]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	461a      	mov	r2, r3
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	f002 f962 	bl	800e8d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d32b      	bcc.n	800c686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	605a      	str	r2, [r3, #4]
 800c636:	e026      	b.n	800c686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68d8      	ldr	r0, [r3, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	461a      	mov	r2, r3
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	f002 f948 	bl	800e8d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	425b      	negs	r3, r3
 800c652:	441a      	add	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68da      	ldr	r2, [r3, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	d207      	bcs.n	800c674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	689a      	ldr	r2, [r3, #8]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66c:	425b      	negs	r3, r3
 800c66e:	441a      	add	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b02      	cmp	r3, #2
 800c678:	d105      	bne.n	800c686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	3b01      	subs	r3, #1
 800c684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c68e:	697b      	ldr	r3, [r7, #20]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d018      	beq.n	800c6dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b2:	441a      	add	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68da      	ldr	r2, [r3, #12]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d303      	bcc.n	800c6cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68d9      	ldr	r1, [r3, #12]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f002 f8fe 	bl	800e8d8 <memcpy>
	}
}
 800c6dc:	bf00      	nop
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6ec:	f001 f90a 	bl	800d904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6f8:	e011      	b.n	800c71e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d012      	beq.n	800c728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3324      	adds	r3, #36	; 0x24
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fd06 	bl	800d118 <xTaskRemoveFromEventList>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c712:	f000 fddb 	bl	800d2cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	3b01      	subs	r3, #1
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c722:	2b00      	cmp	r3, #0
 800c724:	dce9      	bgt.n	800c6fa <prvUnlockQueue+0x16>
 800c726:	e000      	b.n	800c72a <prvUnlockQueue+0x46>
					break;
 800c728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	22ff      	movs	r2, #255	; 0xff
 800c72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c732:	f001 f917 	bl	800d964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c736:	f001 f8e5 	bl	800d904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c742:	e011      	b.n	800c768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d012      	beq.n	800c772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3310      	adds	r3, #16
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fce1 	bl	800d118 <xTaskRemoveFromEventList>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c75c:	f000 fdb6 	bl	800d2cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	3b01      	subs	r3, #1
 800c764:	b2db      	uxtb	r3, r3
 800c766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	dce9      	bgt.n	800c744 <prvUnlockQueue+0x60>
 800c770:	e000      	b.n	800c774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	22ff      	movs	r2, #255	; 0xff
 800c778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c77c:	f001 f8f2 	bl	800d964 <vPortExitCritical>
}
 800c780:	bf00      	nop
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c790:	f001 f8b8 	bl	800d904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	e001      	b.n	800c7a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7a6:	f001 f8dd 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7bc:	f001 f8a2 	bl	800d904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d102      	bne.n	800c7d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	e001      	b.n	800c7d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7d6:	f001 f8c5 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800c7da:	68fb      	ldr	r3, [r7, #12]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08e      	sub	sp, #56	; 0x38
 800c7e8:	af04      	add	r7, sp, #16
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10a      	bne.n	800c80e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	623b      	str	r3, [r7, #32]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <xTaskCreateStatic+0x46>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	61fb      	str	r3, [r7, #28]
}
 800c826:	bf00      	nop
 800c828:	e7fe      	b.n	800c828 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c82a:	2354      	movs	r3, #84	; 0x54
 800c82c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b54      	cmp	r3, #84	; 0x54
 800c832:	d00a      	beq.n	800c84a <xTaskCreateStatic+0x66>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	61bb      	str	r3, [r7, #24]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c84a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d01e      	beq.n	800c890 <xTaskCreateStatic+0xac>
 800c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01b      	beq.n	800c890 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c860:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	2202      	movs	r2, #2
 800c866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c86a:	2300      	movs	r3, #0
 800c86c:	9303      	str	r3, [sp, #12]
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	9302      	str	r3, [sp, #8]
 800c872:	f107 0314 	add.w	r3, r7, #20
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 f850 	bl	800c928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c88a:	f000 f8d5 	bl	800ca38 <prvAddNewTaskToReadyList>
 800c88e:	e001      	b.n	800c894 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c894:	697b      	ldr	r3, [r7, #20]
	}
 800c896:	4618      	mov	r0, r3
 800c898:	3728      	adds	r7, #40	; 0x28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b08c      	sub	sp, #48	; 0x30
 800c8a2:	af04      	add	r7, sp, #16
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	603b      	str	r3, [r7, #0]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8ae:	88fb      	ldrh	r3, [r7, #6]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 f948 	bl	800db48 <pvPortMalloc>
 800c8b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00e      	beq.n	800c8de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8c0:	2054      	movs	r0, #84	; 0x54
 800c8c2:	f001 f941 	bl	800db48 <pvPortMalloc>
 800c8c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	631a      	str	r2, [r3, #48]	; 0x30
 800c8d4:	e005      	b.n	800c8e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8d6:	6978      	ldr	r0, [r7, #20]
 800c8d8:	f001 fa02 	bl	800dce0 <vPortFree>
 800c8dc:	e001      	b.n	800c8e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d017      	beq.n	800c918 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8f0:	88fa      	ldrh	r2, [r7, #6]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9303      	str	r3, [sp, #12]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	9302      	str	r3, [sp, #8]
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f000 f80e 	bl	800c928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c90c:	69f8      	ldr	r0, [r7, #28]
 800c90e:	f000 f893 	bl	800ca38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c912:	2301      	movs	r3, #1
 800c914:	61bb      	str	r3, [r7, #24]
 800c916:	e002      	b.n	800c91e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c918:	f04f 33ff 	mov.w	r3, #4294967295
 800c91c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c91e:	69bb      	ldr	r3, [r7, #24]
	}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c940:	3b01      	subs	r3, #1
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	f023 0307 	bic.w	r3, r3, #7
 800c94e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	f003 0307 	and.w	r3, r3, #7
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	617b      	str	r3, [r7, #20]
}
 800c96c:	bf00      	nop
 800c96e:	e7fe      	b.n	800c96e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d01f      	beq.n	800c9b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c976:	2300      	movs	r3, #0
 800c978:	61fb      	str	r3, [r7, #28]
 800c97a:	e012      	b.n	800c9a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	4413      	add	r3, r2
 800c982:	7819      	ldrb	r1, [r3, #0]
 800c984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	4413      	add	r3, r2
 800c98a:	3334      	adds	r3, #52	; 0x34
 800c98c:	460a      	mov	r2, r1
 800c98e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	4413      	add	r3, r2
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d006      	beq.n	800c9aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	2b0f      	cmp	r3, #15
 800c9a6:	d9e9      	bls.n	800c97c <prvInitialiseNewTask+0x54>
 800c9a8:	e000      	b.n	800c9ac <prvInitialiseNewTask+0x84>
			{
				break;
 800c9aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9b4:	e003      	b.n	800c9be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	2b06      	cmp	r3, #6
 800c9c2:	d901      	bls.n	800c9c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9c4:	2306      	movs	r3, #6
 800c9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	3304      	adds	r3, #4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff fa01 	bl	800bde6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	3318      	adds	r3, #24
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff f9fc 	bl	800bde6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	f1c3 0207 	rsb	r2, r3, #7
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	2200      	movs	r2, #0
 800ca08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	68f9      	ldr	r1, [r7, #12]
 800ca16:	69b8      	ldr	r0, [r7, #24]
 800ca18:	f000 fe44 	bl	800d6a4 <pxPortInitialiseStack>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca2e:	bf00      	nop
 800ca30:	3720      	adds	r7, #32
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
	...

0800ca38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca40:	f000 ff60 	bl	800d904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca44:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a29      	ldr	r2, [pc, #164]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca4e:	4b29      	ldr	r3, [pc, #164]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d109      	bne.n	800ca6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca56:	4a27      	ldr	r2, [pc, #156]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca5c:	4b24      	ldr	r3, [pc, #144]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d110      	bne.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca64:	f000 fc56 	bl	800d314 <prvInitialiseTaskLists>
 800ca68:	e00d      	b.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca6a:	4b23      	ldr	r3, [pc, #140]	; (800caf8 <prvAddNewTaskToReadyList+0xc0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d109      	bne.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d802      	bhi.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca80:	4a1c      	ldr	r2, [pc, #112]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca86:	4b1d      	ldr	r3, [pc, #116]	; (800cafc <prvAddNewTaskToReadyList+0xc4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	4a1b      	ldr	r2, [pc, #108]	; (800cafc <prvAddNewTaskToReadyList+0xc4>)
 800ca8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	2201      	movs	r2, #1
 800ca96:	409a      	lsls	r2, r3
 800ca98:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <prvAddNewTaskToReadyList+0xc8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	4a18      	ldr	r2, [pc, #96]	; (800cb00 <prvAddNewTaskToReadyList+0xc8>)
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4a15      	ldr	r2, [pc, #84]	; (800cb04 <prvAddNewTaskToReadyList+0xcc>)
 800cab0:	441a      	add	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7ff f9a1 	bl	800be00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cabe:	f000 ff51 	bl	800d964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cac2:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <prvAddNewTaskToReadyList+0xc0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00e      	beq.n	800cae8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800caca:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d207      	bcs.n	800cae8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cad8:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <prvAddNewTaskToReadyList+0xd0>)
 800cada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20001c6c 	.word	0x20001c6c
 800caf4:	20001b6c 	.word	0x20001b6c
 800caf8:	20001c78 	.word	0x20001c78
 800cafc:	20001c88 	.word	0x20001c88
 800cb00:	20001c74 	.word	0x20001c74
 800cb04:	20001b70 	.word	0x20001b70
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cb14:	f000 fef6 	bl	800d904 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d102      	bne.n	800cb24 <vTaskDelete+0x18>
 800cb1e:	4b39      	ldr	r3, [pc, #228]	; (800cc04 <vTaskDelete+0xf8>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	e000      	b.n	800cb26 <vTaskDelete+0x1a>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff f9c4 	bl	800beba <uxListRemove>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d115      	bne.n	800cb64 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3c:	4932      	ldr	r1, [pc, #200]	; (800cc08 <vTaskDelete+0xfc>)
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	440b      	add	r3, r1
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <vTaskDelete+0x58>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb52:	2201      	movs	r2, #1
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	43da      	mvns	r2, r3
 800cb5a:	4b2c      	ldr	r3, [pc, #176]	; (800cc0c <vTaskDelete+0x100>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	4a2a      	ldr	r2, [pc, #168]	; (800cc0c <vTaskDelete+0x100>)
 800cb62:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3318      	adds	r3, #24
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff f9a2 	bl	800beba <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cb76:	4b26      	ldr	r3, [pc, #152]	; (800cc10 <vTaskDelete+0x104>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	4a24      	ldr	r2, [pc, #144]	; (800cc10 <vTaskDelete+0x104>)
 800cb7e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cb80:	4b20      	ldr	r3, [pc, #128]	; (800cc04 <vTaskDelete+0xf8>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d10b      	bne.n	800cba2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4820      	ldr	r0, [pc, #128]	; (800cc14 <vTaskDelete+0x108>)
 800cb92:	f7ff f935 	bl	800be00 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cb96:	4b20      	ldr	r3, [pc, #128]	; (800cc18 <vTaskDelete+0x10c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <vTaskDelete+0x10c>)
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	e009      	b.n	800cbb6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cba2:	4b1e      	ldr	r3, [pc, #120]	; (800cc1c <vTaskDelete+0x110>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	4a1c      	ldr	r2, [pc, #112]	; (800cc1c <vTaskDelete+0x110>)
 800cbaa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f000 fc1f 	bl	800d3f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cbb2:	f000 fc4d 	bl	800d450 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800cbb6:	f000 fed5 	bl	800d964 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cbba:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <vTaskDelete+0x114>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d01b      	beq.n	800cbfa <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800cbc2:	4b10      	ldr	r3, [pc, #64]	; (800cc04 <vTaskDelete+0xf8>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d116      	bne.n	800cbfa <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cbcc:	4b15      	ldr	r3, [pc, #84]	; (800cc24 <vTaskDelete+0x118>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <vTaskDelete+0xde>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	60bb      	str	r3, [r7, #8]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800cbea:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <vTaskDelete+0x11c>)
 800cbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20001b6c 	.word	0x20001b6c
 800cc08:	20001b70 	.word	0x20001b70
 800cc0c:	20001c74 	.word	0x20001c74
 800cc10:	20001c88 	.word	0x20001c88
 800cc14:	20001c40 	.word	0x20001c40
 800cc18:	20001c54 	.word	0x20001c54
 800cc1c:	20001c6c 	.word	0x20001c6c
 800cc20:	20001c78 	.word	0x20001c78
 800cc24:	20001c94 	.word	0x20001c94
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d017      	beq.n	800cc6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc3e:	4b13      	ldr	r3, [pc, #76]	; (800cc8c <vTaskDelay+0x60>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <vTaskDelay+0x30>
	__asm volatile
 800cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	60bb      	str	r3, [r7, #8]
}
 800cc58:	bf00      	nop
 800cc5a:	e7fe      	b.n	800cc5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc5c:	f000 f87a 	bl	800cd54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc60:	2100      	movs	r1, #0
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fcb8 	bl	800d5d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc68:	f000 f882 	bl	800cd70 <xTaskResumeAll>
 800cc6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d107      	bne.n	800cc84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <vTaskDelay+0x64>)
 800cc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc84:	bf00      	nop
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	20001c94 	.word	0x20001c94
 800cc90:	e000ed04 	.word	0xe000ed04

0800cc94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cca2:	463a      	mov	r2, r7
 800cca4:	1d39      	adds	r1, r7, #4
 800cca6:	f107 0308 	add.w	r3, r7, #8
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7f4 f8f6 	bl	8000e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	9202      	str	r2, [sp, #8]
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	460a      	mov	r2, r1
 800ccc2:	491e      	ldr	r1, [pc, #120]	; (800cd3c <vTaskStartScheduler+0xa8>)
 800ccc4:	481e      	ldr	r0, [pc, #120]	; (800cd40 <vTaskStartScheduler+0xac>)
 800ccc6:	f7ff fd8d 	bl	800c7e4 <xTaskCreateStatic>
 800ccca:	4603      	mov	r3, r0
 800cccc:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <vTaskStartScheduler+0xb0>)
 800ccce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccd0:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <vTaskStartScheduler+0xb0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	e001      	b.n	800cce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d116      	bne.n	800cd16 <vTaskStartScheduler+0x82>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	613b      	str	r3, [r7, #16]
}
 800ccfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccfc:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <vTaskStartScheduler+0xb4>)
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd04:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <vTaskStartScheduler+0xb8>)
 800cd06:	2201      	movs	r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd0a:	4b11      	ldr	r3, [pc, #68]	; (800cd50 <vTaskStartScheduler+0xbc>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd10:	f000 fd56 	bl	800d7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd14:	e00e      	b.n	800cd34 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1c:	d10a      	bne.n	800cd34 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	60fb      	str	r3, [r7, #12]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <vTaskStartScheduler+0x9e>
}
 800cd34:	bf00      	nop
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	0800ebb8 	.word	0x0800ebb8
 800cd40:	0800d2e5 	.word	0x0800d2e5
 800cd44:	20001c90 	.word	0x20001c90
 800cd48:	20001c8c 	.word	0x20001c8c
 800cd4c:	20001c78 	.word	0x20001c78
 800cd50:	20001c70 	.word	0x20001c70

0800cd54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd58:	4b04      	ldr	r3, [pc, #16]	; (800cd6c <vTaskSuspendAll+0x18>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	4a03      	ldr	r2, [pc, #12]	; (800cd6c <vTaskSuspendAll+0x18>)
 800cd60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd62:	bf00      	nop
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	20001c94 	.word	0x20001c94

0800cd70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd7e:	4b41      	ldr	r3, [pc, #260]	; (800ce84 <xTaskResumeAll+0x114>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <xTaskResumeAll+0x2c>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	603b      	str	r3, [r7, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd9c:	f000 fdb2 	bl	800d904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cda0:	4b38      	ldr	r3, [pc, #224]	; (800ce84 <xTaskResumeAll+0x114>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	4a37      	ldr	r2, [pc, #220]	; (800ce84 <xTaskResumeAll+0x114>)
 800cda8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdaa:	4b36      	ldr	r3, [pc, #216]	; (800ce84 <xTaskResumeAll+0x114>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d161      	bne.n	800ce76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdb2:	4b35      	ldr	r3, [pc, #212]	; (800ce88 <xTaskResumeAll+0x118>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d05d      	beq.n	800ce76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdba:	e02e      	b.n	800ce1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdbc:	4b33      	ldr	r3, [pc, #204]	; (800ce8c <xTaskResumeAll+0x11c>)
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3318      	adds	r3, #24
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff f876 	bl	800beba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff f871 	bl	800beba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cddc:	2201      	movs	r2, #1
 800cdde:	409a      	lsls	r2, r3
 800cde0:	4b2b      	ldr	r3, [pc, #172]	; (800ce90 <xTaskResumeAll+0x120>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	4a2a      	ldr	r2, [pc, #168]	; (800ce90 <xTaskResumeAll+0x120>)
 800cde8:	6013      	str	r3, [r2, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a27      	ldr	r2, [pc, #156]	; (800ce94 <xTaskResumeAll+0x124>)
 800cdf8:	441a      	add	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	4619      	mov	r1, r3
 800ce00:	4610      	mov	r0, r2
 800ce02:	f7fe fffd 	bl	800be00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0a:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <xTaskResumeAll+0x128>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d302      	bcc.n	800ce1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ce14:	4b21      	ldr	r3, [pc, #132]	; (800ce9c <xTaskResumeAll+0x12c>)
 800ce16:	2201      	movs	r2, #1
 800ce18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce1a:	4b1c      	ldr	r3, [pc, #112]	; (800ce8c <xTaskResumeAll+0x11c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1cc      	bne.n	800cdbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce28:	f000 fb12 	bl	800d450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce2c:	4b1c      	ldr	r3, [pc, #112]	; (800cea0 <xTaskResumeAll+0x130>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d010      	beq.n	800ce5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce38:	f000 f836 	bl	800cea8 <xTaskIncrementTick>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ce42:	4b16      	ldr	r3, [pc, #88]	; (800ce9c <xTaskResumeAll+0x12c>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1f1      	bne.n	800ce38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ce54:	4b12      	ldr	r3, [pc, #72]	; (800cea0 <xTaskResumeAll+0x130>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce5a:	4b10      	ldr	r3, [pc, #64]	; (800ce9c <xTaskResumeAll+0x12c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d009      	beq.n	800ce76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce62:	2301      	movs	r3, #1
 800ce64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <xTaskResumeAll+0x134>)
 800ce68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce76:	f000 fd75 	bl	800d964 <vPortExitCritical>

	return xAlreadyYielded;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20001c94 	.word	0x20001c94
 800ce88:	20001c6c 	.word	0x20001c6c
 800ce8c:	20001c2c 	.word	0x20001c2c
 800ce90:	20001c74 	.word	0x20001c74
 800ce94:	20001b70 	.word	0x20001b70
 800ce98:	20001b6c 	.word	0x20001b6c
 800ce9c:	20001c80 	.word	0x20001c80
 800cea0:	20001c7c 	.word	0x20001c7c
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceb2:	4b4e      	ldr	r3, [pc, #312]	; (800cfec <xTaskIncrementTick+0x144>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f040 808e 	bne.w	800cfd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cebc:	4b4c      	ldr	r3, [pc, #304]	; (800cff0 <xTaskIncrementTick+0x148>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3301      	adds	r3, #1
 800cec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cec4:	4a4a      	ldr	r2, [pc, #296]	; (800cff0 <xTaskIncrementTick+0x148>)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d120      	bne.n	800cf12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ced0:	4b48      	ldr	r3, [pc, #288]	; (800cff4 <xTaskIncrementTick+0x14c>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	603b      	str	r3, [r7, #0]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <xTaskIncrementTick+0x46>
 800cef0:	4b40      	ldr	r3, [pc, #256]	; (800cff4 <xTaskIncrementTick+0x14c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	60fb      	str	r3, [r7, #12]
 800cef6:	4b40      	ldr	r3, [pc, #256]	; (800cff8 <xTaskIncrementTick+0x150>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a3e      	ldr	r2, [pc, #248]	; (800cff4 <xTaskIncrementTick+0x14c>)
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	4a3e      	ldr	r2, [pc, #248]	; (800cff8 <xTaskIncrementTick+0x150>)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	4b3d      	ldr	r3, [pc, #244]	; (800cffc <xTaskIncrementTick+0x154>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	4a3c      	ldr	r2, [pc, #240]	; (800cffc <xTaskIncrementTick+0x154>)
 800cf0c:	6013      	str	r3, [r2, #0]
 800cf0e:	f000 fa9f 	bl	800d450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf12:	4b3b      	ldr	r3, [pc, #236]	; (800d000 <xTaskIncrementTick+0x158>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d348      	bcc.n	800cfae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf1c:	4b35      	ldr	r3, [pc, #212]	; (800cff4 <xTaskIncrementTick+0x14c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d104      	bne.n	800cf30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf26:	4b36      	ldr	r3, [pc, #216]	; (800d000 <xTaskIncrementTick+0x158>)
 800cf28:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2c:	601a      	str	r2, [r3, #0]
					break;
 800cf2e:	e03e      	b.n	800cfae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf30:	4b30      	ldr	r3, [pc, #192]	; (800cff4 <xTaskIncrementTick+0x14c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf40:	693a      	ldr	r2, [r7, #16]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d203      	bcs.n	800cf50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf48:	4a2d      	ldr	r2, [pc, #180]	; (800d000 <xTaskIncrementTick+0x158>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf4e:	e02e      	b.n	800cfae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe ffb0 	bl	800beba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	3318      	adds	r3, #24
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe ffa7 	bl	800beba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	2201      	movs	r2, #1
 800cf72:	409a      	lsls	r2, r3
 800cf74:	4b23      	ldr	r3, [pc, #140]	; (800d004 <xTaskIncrementTick+0x15c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	4a22      	ldr	r2, [pc, #136]	; (800d004 <xTaskIncrementTick+0x15c>)
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf82:	4613      	mov	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4a1f      	ldr	r2, [pc, #124]	; (800d008 <xTaskIncrementTick+0x160>)
 800cf8c:	441a      	add	r2, r3
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	3304      	adds	r3, #4
 800cf92:	4619      	mov	r1, r3
 800cf94:	4610      	mov	r0, r2
 800cf96:	f7fe ff33 	bl	800be00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <xTaskIncrementTick+0x164>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d3b9      	bcc.n	800cf1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfac:	e7b6      	b.n	800cf1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfae:	4b17      	ldr	r3, [pc, #92]	; (800d00c <xTaskIncrementTick+0x164>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb4:	4914      	ldr	r1, [pc, #80]	; (800d008 <xTaskIncrementTick+0x160>)
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	440b      	add	r3, r1
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d901      	bls.n	800cfca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfca:	4b11      	ldr	r3, [pc, #68]	; (800d010 <xTaskIncrementTick+0x168>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d007      	beq.n	800cfe2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	e004      	b.n	800cfe2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfd8:	4b0e      	ldr	r3, [pc, #56]	; (800d014 <xTaskIncrementTick+0x16c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4a0d      	ldr	r2, [pc, #52]	; (800d014 <xTaskIncrementTick+0x16c>)
 800cfe0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfe2:	697b      	ldr	r3, [r7, #20]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	20001c94 	.word	0x20001c94
 800cff0:	20001c70 	.word	0x20001c70
 800cff4:	20001c24 	.word	0x20001c24
 800cff8:	20001c28 	.word	0x20001c28
 800cffc:	20001c84 	.word	0x20001c84
 800d000:	20001c8c 	.word	0x20001c8c
 800d004:	20001c74 	.word	0x20001c74
 800d008:	20001b70 	.word	0x20001b70
 800d00c:	20001b6c 	.word	0x20001b6c
 800d010:	20001c80 	.word	0x20001c80
 800d014:	20001c7c 	.word	0x20001c7c

0800d018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d01e:	4b27      	ldr	r3, [pc, #156]	; (800d0bc <vTaskSwitchContext+0xa4>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d026:	4b26      	ldr	r3, [pc, #152]	; (800d0c0 <vTaskSwitchContext+0xa8>)
 800d028:	2201      	movs	r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d02c:	e03f      	b.n	800d0ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d02e:	4b24      	ldr	r3, [pc, #144]	; (800d0c0 <vTaskSwitchContext+0xa8>)
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d034:	4b23      	ldr	r3, [pc, #140]	; (800d0c4 <vTaskSwitchContext+0xac>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	fab3 f383 	clz	r3, r3
 800d040:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d042:	7afb      	ldrb	r3, [r7, #11]
 800d044:	f1c3 031f 	rsb	r3, r3, #31
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	491f      	ldr	r1, [pc, #124]	; (800d0c8 <vTaskSwitchContext+0xb0>)
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	440b      	add	r3, r1
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10a      	bne.n	800d074 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	607b      	str	r3, [r7, #4]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <vTaskSwitchContext+0x5a>
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4a12      	ldr	r2, [pc, #72]	; (800d0c8 <vTaskSwitchContext+0xb0>)
 800d080:	4413      	add	r3, r2
 800d082:	613b      	str	r3, [r7, #16]
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	3308      	adds	r3, #8
 800d096:	429a      	cmp	r2, r3
 800d098:	d104      	bne.n	800d0a4 <vTaskSwitchContext+0x8c>
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	605a      	str	r2, [r3, #4]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	4a08      	ldr	r2, [pc, #32]	; (800d0cc <vTaskSwitchContext+0xb4>)
 800d0ac:	6013      	str	r3, [r2, #0]
}
 800d0ae:	bf00      	nop
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	20001c94 	.word	0x20001c94
 800d0c0:	20001c80 	.word	0x20001c80
 800d0c4:	20001c74 	.word	0x20001c74
 800d0c8:	20001b70 	.word	0x20001b70
 800d0cc:	20001b6c 	.word	0x20001b6c

0800d0d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	60fb      	str	r3, [r7, #12]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0f6:	4b07      	ldr	r3, [pc, #28]	; (800d114 <vTaskPlaceOnEventList+0x44>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7fe fea2 	bl	800be48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d104:	2101      	movs	r1, #1
 800d106:	6838      	ldr	r0, [r7, #0]
 800d108:	f000 fa66 	bl	800d5d8 <prvAddCurrentTaskToDelayedList>
}
 800d10c:	bf00      	nop
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20001b6c 	.word	0x20001b6c

0800d118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	60fb      	str	r3, [r7, #12]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	3318      	adds	r3, #24
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fe feb6 	bl	800beba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d14e:	4b1d      	ldr	r3, [pc, #116]	; (800d1c4 <xTaskRemoveFromEventList+0xac>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d11c      	bne.n	800d190 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	3304      	adds	r3, #4
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fead 	bl	800beba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	2201      	movs	r2, #1
 800d166:	409a      	lsls	r2, r3
 800d168:	4b17      	ldr	r3, [pc, #92]	; (800d1c8 <xTaskRemoveFromEventList+0xb0>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	4a16      	ldr	r2, [pc, #88]	; (800d1c8 <xTaskRemoveFromEventList+0xb0>)
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4a13      	ldr	r2, [pc, #76]	; (800d1cc <xTaskRemoveFromEventList+0xb4>)
 800d180:	441a      	add	r2, r3
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	3304      	adds	r3, #4
 800d186:	4619      	mov	r1, r3
 800d188:	4610      	mov	r0, r2
 800d18a:	f7fe fe39 	bl	800be00 <vListInsertEnd>
 800d18e:	e005      	b.n	800d19c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	3318      	adds	r3, #24
 800d194:	4619      	mov	r1, r3
 800d196:	480e      	ldr	r0, [pc, #56]	; (800d1d0 <xTaskRemoveFromEventList+0xb8>)
 800d198:	f7fe fe32 	bl	800be00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a0:	4b0c      	ldr	r3, [pc, #48]	; (800d1d4 <xTaskRemoveFromEventList+0xbc>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d905      	bls.n	800d1b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1ae:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <xTaskRemoveFromEventList+0xc0>)
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	e001      	b.n	800d1ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1ba:	697b      	ldr	r3, [r7, #20]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	20001c94 	.word	0x20001c94
 800d1c8:	20001c74 	.word	0x20001c74
 800d1cc:	20001b70 	.word	0x20001b70
 800d1d0:	20001c2c 	.word	0x20001c2c
 800d1d4:	20001b6c 	.word	0x20001b6c
 800d1d8:	20001c80 	.word	0x20001c80

0800d1dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <vTaskInternalSetTimeOutState+0x24>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <vTaskInternalSetTimeOutState+0x28>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	605a      	str	r2, [r3, #4]
}
 800d1f4:	bf00      	nop
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	20001c84 	.word	0x20001c84
 800d204:	20001c70 	.word	0x20001c70

0800d208 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10a      	bne.n	800d22e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	613b      	str	r3, [r7, #16]
}
 800d22a:	bf00      	nop
 800d22c:	e7fe      	b.n	800d22c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	60fb      	str	r3, [r7, #12]
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d24a:	f000 fb5b 	bl	800d904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d24e:	4b1d      	ldr	r3, [pc, #116]	; (800d2c4 <xTaskCheckForTimeOut+0xbc>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	69ba      	ldr	r2, [r7, #24]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d266:	d102      	bne.n	800d26e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	61fb      	str	r3, [r7, #28]
 800d26c:	e023      	b.n	800d2b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	4b15      	ldr	r3, [pc, #84]	; (800d2c8 <xTaskCheckForTimeOut+0xc0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	429a      	cmp	r2, r3
 800d278:	d007      	beq.n	800d28a <xTaskCheckForTimeOut+0x82>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	429a      	cmp	r2, r3
 800d282:	d302      	bcc.n	800d28a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d284:	2301      	movs	r3, #1
 800d286:	61fb      	str	r3, [r7, #28]
 800d288:	e015      	b.n	800d2b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	697a      	ldr	r2, [r7, #20]
 800d290:	429a      	cmp	r2, r3
 800d292:	d20b      	bcs.n	800d2ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	1ad2      	subs	r2, r2, r3
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff9b 	bl	800d1dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61fb      	str	r3, [r7, #28]
 800d2aa:	e004      	b.n	800d2b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2b6:	f000 fb55 	bl	800d964 <vPortExitCritical>

	return xReturn;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3720      	adds	r7, #32
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20001c70 	.word	0x20001c70
 800d2c8:	20001c84 	.word	0x20001c84

0800d2cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2d0:	4b03      	ldr	r3, [pc, #12]	; (800d2e0 <vTaskMissedYield+0x14>)
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	601a      	str	r2, [r3, #0]
}
 800d2d6:	bf00      	nop
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	20001c80 	.word	0x20001c80

0800d2e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2ec:	f000 f852 	bl	800d394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2f0:	4b06      	ldr	r3, [pc, #24]	; (800d30c <prvIdleTask+0x28>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d9f9      	bls.n	800d2ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800d2f8:	4b05      	ldr	r3, [pc, #20]	; (800d310 <prvIdleTask+0x2c>)
 800d2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d308:	e7f0      	b.n	800d2ec <prvIdleTask+0x8>
 800d30a:	bf00      	nop
 800d30c:	20001b70 	.word	0x20001b70
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d31a:	2300      	movs	r3, #0
 800d31c:	607b      	str	r3, [r7, #4]
 800d31e:	e00c      	b.n	800d33a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	4613      	mov	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4a12      	ldr	r2, [pc, #72]	; (800d374 <prvInitialiseTaskLists+0x60>)
 800d32c:	4413      	add	r3, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fd39 	bl	800bda6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3301      	adds	r3, #1
 800d338:	607b      	str	r3, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b06      	cmp	r3, #6
 800d33e:	d9ef      	bls.n	800d320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d340:	480d      	ldr	r0, [pc, #52]	; (800d378 <prvInitialiseTaskLists+0x64>)
 800d342:	f7fe fd30 	bl	800bda6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d346:	480d      	ldr	r0, [pc, #52]	; (800d37c <prvInitialiseTaskLists+0x68>)
 800d348:	f7fe fd2d 	bl	800bda6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d34c:	480c      	ldr	r0, [pc, #48]	; (800d380 <prvInitialiseTaskLists+0x6c>)
 800d34e:	f7fe fd2a 	bl	800bda6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d352:	480c      	ldr	r0, [pc, #48]	; (800d384 <prvInitialiseTaskLists+0x70>)
 800d354:	f7fe fd27 	bl	800bda6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d358:	480b      	ldr	r0, [pc, #44]	; (800d388 <prvInitialiseTaskLists+0x74>)
 800d35a:	f7fe fd24 	bl	800bda6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d35e:	4b0b      	ldr	r3, [pc, #44]	; (800d38c <prvInitialiseTaskLists+0x78>)
 800d360:	4a05      	ldr	r2, [pc, #20]	; (800d378 <prvInitialiseTaskLists+0x64>)
 800d362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d364:	4b0a      	ldr	r3, [pc, #40]	; (800d390 <prvInitialiseTaskLists+0x7c>)
 800d366:	4a05      	ldr	r2, [pc, #20]	; (800d37c <prvInitialiseTaskLists+0x68>)
 800d368:	601a      	str	r2, [r3, #0]
}
 800d36a:	bf00      	nop
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20001b70 	.word	0x20001b70
 800d378:	20001bfc 	.word	0x20001bfc
 800d37c:	20001c10 	.word	0x20001c10
 800d380:	20001c2c 	.word	0x20001c2c
 800d384:	20001c40 	.word	0x20001c40
 800d388:	20001c58 	.word	0x20001c58
 800d38c:	20001c24 	.word	0x20001c24
 800d390:	20001c28 	.word	0x20001c28

0800d394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d39a:	e019      	b.n	800d3d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d39c:	f000 fab2 	bl	800d904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a0:	4b10      	ldr	r3, [pc, #64]	; (800d3e4 <prvCheckTasksWaitingTermination+0x50>)
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe fd84 	bl	800beba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3b2:	4b0d      	ldr	r3, [pc, #52]	; (800d3e8 <prvCheckTasksWaitingTermination+0x54>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	4a0b      	ldr	r2, [pc, #44]	; (800d3e8 <prvCheckTasksWaitingTermination+0x54>)
 800d3ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <prvCheckTasksWaitingTermination+0x58>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	4a0a      	ldr	r2, [pc, #40]	; (800d3ec <prvCheckTasksWaitingTermination+0x58>)
 800d3c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3c6:	f000 facd 	bl	800d964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f810 	bl	800d3f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3d0:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <prvCheckTasksWaitingTermination+0x58>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e1      	bne.n	800d39c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3d8:	bf00      	nop
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20001c40 	.word	0x20001c40
 800d3e8:	20001c6c 	.word	0x20001c6c
 800d3ec:	20001c54 	.word	0x20001c54

0800d3f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d108      	bne.n	800d414 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fc6a 	bl	800dce0 <vPortFree>
				vPortFree( pxTCB );
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 fc67 	bl	800dce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d412:	e018      	b.n	800d446 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d103      	bne.n	800d426 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fc5e 	bl	800dce0 <vPortFree>
	}
 800d424:	e00f      	b.n	800d446 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d00a      	beq.n	800d446 <prvDeleteTCB+0x56>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	60fb      	str	r3, [r7, #12]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <prvDeleteTCB+0x54>
	}
 800d446:	bf00      	nop
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
	...

0800d450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <prvResetNextTaskUnblockTime+0x38>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d460:	4b0a      	ldr	r3, [pc, #40]	; (800d48c <prvResetNextTaskUnblockTime+0x3c>)
 800d462:	f04f 32ff 	mov.w	r2, #4294967295
 800d466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d468:	e008      	b.n	800d47c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d46a:	4b07      	ldr	r3, [pc, #28]	; (800d488 <prvResetNextTaskUnblockTime+0x38>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	4a04      	ldr	r2, [pc, #16]	; (800d48c <prvResetNextTaskUnblockTime+0x3c>)
 800d47a:	6013      	str	r3, [r2, #0]
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	20001c24 	.word	0x20001c24
 800d48c:	20001c8c 	.word	0x20001c8c

0800d490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <xTaskGetSchedulerState+0x34>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d102      	bne.n	800d4a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	607b      	str	r3, [r7, #4]
 800d4a2:	e008      	b.n	800d4b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4a4:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <xTaskGetSchedulerState+0x38>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	e001      	b.n	800d4b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4b6:	687b      	ldr	r3, [r7, #4]
	}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	20001c78 	.word	0x20001c78
 800d4c8:	20001c94 	.word	0x20001c94

0800d4cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d06e      	beq.n	800d5c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4e2:	4b3a      	ldr	r3, [pc, #232]	; (800d5cc <xTaskPriorityDisinherit+0x100>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d00a      	beq.n	800d502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	60fb      	str	r3, [r7, #12]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10a      	bne.n	800d520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d524:	1e5a      	subs	r2, r3, #1
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d532:	429a      	cmp	r2, r3
 800d534:	d044      	beq.n	800d5c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d140      	bne.n	800d5c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3304      	adds	r3, #4
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fcb9 	bl	800beba <uxListRemove>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d115      	bne.n	800d57a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d552:	491f      	ldr	r1, [pc, #124]	; (800d5d0 <xTaskPriorityDisinherit+0x104>)
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	440b      	add	r3, r1
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10a      	bne.n	800d57a <xTaskPriorityDisinherit+0xae>
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	2201      	movs	r2, #1
 800d56a:	fa02 f303 	lsl.w	r3, r2, r3
 800d56e:	43da      	mvns	r2, r3
 800d570:	4b18      	ldr	r3, [pc, #96]	; (800d5d4 <xTaskPriorityDisinherit+0x108>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4013      	ands	r3, r2
 800d576:	4a17      	ldr	r2, [pc, #92]	; (800d5d4 <xTaskPriorityDisinherit+0x108>)
 800d578:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	f1c3 0207 	rsb	r2, r3, #7
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d592:	2201      	movs	r2, #1
 800d594:	409a      	lsls	r2, r3
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <xTaskPriorityDisinherit+0x108>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	4a0d      	ldr	r2, [pc, #52]	; (800d5d4 <xTaskPriorityDisinherit+0x108>)
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4a08      	ldr	r2, [pc, #32]	; (800d5d0 <xTaskPriorityDisinherit+0x104>)
 800d5ae:	441a      	add	r2, r3
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f7fe fc22 	bl	800be00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5c0:	697b      	ldr	r3, [r7, #20]
	}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20001b6c 	.word	0x20001b6c
 800d5d0:	20001b70 	.word	0x20001b70
 800d5d4:	20001c74 	.word	0x20001c74

0800d5d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5e2:	4b29      	ldr	r3, [pc, #164]	; (800d688 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5e8:	4b28      	ldr	r3, [pc, #160]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fc63 	bl	800beba <uxListRemove>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d5fa:	4b24      	ldr	r3, [pc, #144]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	2201      	movs	r2, #1
 800d602:	fa02 f303 	lsl.w	r3, r2, r3
 800d606:	43da      	mvns	r2, r3
 800d608:	4b21      	ldr	r3, [pc, #132]	; (800d690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4013      	ands	r3, r2
 800d60e:	4a20      	ldr	r2, [pc, #128]	; (800d690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d618:	d10a      	bne.n	800d630 <prvAddCurrentTaskToDelayedList+0x58>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d620:	4b1a      	ldr	r3, [pc, #104]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3304      	adds	r3, #4
 800d626:	4619      	mov	r1, r3
 800d628:	481a      	ldr	r0, [pc, #104]	; (800d694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d62a:	f7fe fbe9 	bl	800be00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d62e:	e026      	b.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4413      	add	r3, r2
 800d636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d638:	4b14      	ldr	r3, [pc, #80]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	429a      	cmp	r2, r3
 800d646:	d209      	bcs.n	800d65c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d648:	4b13      	ldr	r3, [pc, #76]	; (800d698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3304      	adds	r3, #4
 800d652:	4619      	mov	r1, r3
 800d654:	4610      	mov	r0, r2
 800d656:	f7fe fbf7 	bl	800be48 <vListInsert>
}
 800d65a:	e010      	b.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d65c:	4b0f      	ldr	r3, [pc, #60]	; (800d69c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3304      	adds	r3, #4
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fe fbed 	bl	800be48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d66e:	4b0c      	ldr	r3, [pc, #48]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	429a      	cmp	r2, r3
 800d676:	d202      	bcs.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d678:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6013      	str	r3, [r2, #0]
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	20001c70 	.word	0x20001c70
 800d68c:	20001b6c 	.word	0x20001b6c
 800d690:	20001c74 	.word	0x20001c74
 800d694:	20001c58 	.word	0x20001c58
 800d698:	20001c28 	.word	0x20001c28
 800d69c:	20001c24 	.word	0x20001c24
 800d6a0:	20001c8c 	.word	0x20001c8c

0800d6a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	3b04      	subs	r3, #4
 800d6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3b04      	subs	r3, #4
 800d6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f023 0201 	bic.w	r2, r3, #1
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3b04      	subs	r3, #4
 800d6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6d4:	4a0c      	ldr	r2, [pc, #48]	; (800d708 <pxPortInitialiseStack+0x64>)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3b14      	subs	r3, #20
 800d6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f06f 0202 	mvn.w	r2, #2
 800d6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3b20      	subs	r3, #32
 800d6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	0800d70d 	.word	0x0800d70d

0800d70c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d716:	4b12      	ldr	r3, [pc, #72]	; (800d760 <prvTaskExitError+0x54>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71e:	d00a      	beq.n	800d736 <prvTaskExitError+0x2a>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	60fb      	str	r3, [r7, #12]
}
 800d732:	bf00      	nop
 800d734:	e7fe      	b.n	800d734 <prvTaskExitError+0x28>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	60bb      	str	r3, [r7, #8]
}
 800d748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d74a:	bf00      	nop
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0fc      	beq.n	800d74c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d752:	bf00      	nop
 800d754:	bf00      	nop
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	20000160 	.word	0x20000160
	...

0800d770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d770:	4b07      	ldr	r3, [pc, #28]	; (800d790 <pxCurrentTCBConst2>)
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	6808      	ldr	r0, [r1, #0]
 800d776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	f380 8809 	msr	PSP, r0
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f04f 0000 	mov.w	r0, #0
 800d786:	f380 8811 	msr	BASEPRI, r0
 800d78a:	4770      	bx	lr
 800d78c:	f3af 8000 	nop.w

0800d790 <pxCurrentTCBConst2>:
 800d790:	20001b6c 	.word	0x20001b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop

0800d798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d798:	4808      	ldr	r0, [pc, #32]	; (800d7bc <prvPortStartFirstTask+0x24>)
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	6800      	ldr	r0, [r0, #0]
 800d79e:	f380 8808 	msr	MSP, r0
 800d7a2:	f04f 0000 	mov.w	r0, #0
 800d7a6:	f380 8814 	msr	CONTROL, r0
 800d7aa:	b662      	cpsie	i
 800d7ac:	b661      	cpsie	f
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	df00      	svc	0
 800d7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7ba:	bf00      	nop
 800d7bc:	e000ed08 	.word	0xe000ed08

0800d7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7c6:	4b46      	ldr	r3, [pc, #280]	; (800d8e0 <xPortStartScheduler+0x120>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a46      	ldr	r2, [pc, #280]	; (800d8e4 <xPortStartScheduler+0x124>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d10a      	bne.n	800d7e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	613b      	str	r3, [r7, #16]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7e6:	4b3e      	ldr	r3, [pc, #248]	; (800d8e0 <xPortStartScheduler+0x120>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a3f      	ldr	r2, [pc, #252]	; (800d8e8 <xPortStartScheduler+0x128>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d10a      	bne.n	800d806 <xPortStartScheduler+0x46>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	60fb      	str	r3, [r7, #12]
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d806:	4b39      	ldr	r3, [pc, #228]	; (800d8ec <xPortStartScheduler+0x12c>)
 800d808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	22ff      	movs	r2, #255	; 0xff
 800d816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	4b31      	ldr	r3, [pc, #196]	; (800d8f0 <xPortStartScheduler+0x130>)
 800d82c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d82e:	4b31      	ldr	r3, [pc, #196]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d830:	2207      	movs	r2, #7
 800d832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d834:	e009      	b.n	800d84a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d836:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	4a2d      	ldr	r2, [pc, #180]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d83e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d852:	2b80      	cmp	r3, #128	; 0x80
 800d854:	d0ef      	beq.n	800d836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d856:	4b27      	ldr	r3, [pc, #156]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1c3 0307 	rsb	r3, r3, #7
 800d85e:	2b04      	cmp	r3, #4
 800d860:	d00a      	beq.n	800d878 <xPortStartScheduler+0xb8>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	60bb      	str	r3, [r7, #8]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d878:	4b1e      	ldr	r3, [pc, #120]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	4a1d      	ldr	r2, [pc, #116]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d882:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d88a:	4a1a      	ldr	r2, [pc, #104]	; (800d8f4 <xPortStartScheduler+0x134>)
 800d88c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	b2da      	uxtb	r2, r3
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d896:	4b18      	ldr	r3, [pc, #96]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a17      	ldr	r2, [pc, #92]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8a2:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a14      	ldr	r2, [pc, #80]	; (800d8f8 <xPortStartScheduler+0x138>)
 800d8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d8ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8ae:	f000 f8dd 	bl	800da6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8b2:	4b12      	ldr	r3, [pc, #72]	; (800d8fc <xPortStartScheduler+0x13c>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8b8:	f000 f8fc 	bl	800dab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <xPortStartScheduler+0x140>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a0f      	ldr	r2, [pc, #60]	; (800d900 <xPortStartScheduler+0x140>)
 800d8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8c8:	f7ff ff66 	bl	800d798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8cc:	f7ff fba4 	bl	800d018 <vTaskSwitchContext>
	prvTaskExitError();
 800d8d0:	f7ff ff1c 	bl	800d70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	e000ed00 	.word	0xe000ed00
 800d8e4:	410fc271 	.word	0x410fc271
 800d8e8:	410fc270 	.word	0x410fc270
 800d8ec:	e000e400 	.word	0xe000e400
 800d8f0:	20001c98 	.word	0x20001c98
 800d8f4:	20001c9c 	.word	0x20001c9c
 800d8f8:	e000ed20 	.word	0xe000ed20
 800d8fc:	20000160 	.word	0x20000160
 800d900:	e000ef34 	.word	0xe000ef34

0800d904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	607b      	str	r3, [r7, #4]
}
 800d91c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <vPortEnterCritical+0x58>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	4a0d      	ldr	r2, [pc, #52]	; (800d95c <vPortEnterCritical+0x58>)
 800d926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <vPortEnterCritical+0x58>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d10f      	bne.n	800d950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <vPortEnterCritical+0x5c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00a      	beq.n	800d950 <vPortEnterCritical+0x4c>
	__asm volatile
 800d93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	603b      	str	r3, [r7, #0]
}
 800d94c:	bf00      	nop
 800d94e:	e7fe      	b.n	800d94e <vPortEnterCritical+0x4a>
	}
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	20000160 	.word	0x20000160
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d96a:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <vPortExitCritical+0x50>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <vPortExitCritical+0x24>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	607b      	str	r3, [r7, #4]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d988:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <vPortExitCritical+0x50>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	4a09      	ldr	r2, [pc, #36]	; (800d9b4 <vPortExitCritical+0x50>)
 800d990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d992:	4b08      	ldr	r3, [pc, #32]	; (800d9b4 <vPortExitCritical+0x50>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d105      	bne.n	800d9a6 <vPortExitCritical+0x42>
 800d99a:	2300      	movs	r3, #0
 800d99c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	f383 8811 	msr	BASEPRI, r3
}
 800d9a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20000160 	.word	0x20000160
	...

0800d9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9c0:	f3ef 8009 	mrs	r0, PSP
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	4b15      	ldr	r3, [pc, #84]	; (800da20 <pxCurrentTCBConst>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	f01e 0f10 	tst.w	lr, #16
 800d9d0:	bf08      	it	eq
 800d9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9da:	6010      	str	r0, [r2, #0]
 800d9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9e4:	f380 8811 	msr	BASEPRI, r0
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f7ff fb12 	bl	800d018 <vTaskSwitchContext>
 800d9f4:	f04f 0000 	mov.w	r0, #0
 800d9f8:	f380 8811 	msr	BASEPRI, r0
 800d9fc:	bc09      	pop	{r0, r3}
 800d9fe:	6819      	ldr	r1, [r3, #0]
 800da00:	6808      	ldr	r0, [r1, #0]
 800da02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da06:	f01e 0f10 	tst.w	lr, #16
 800da0a:	bf08      	it	eq
 800da0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da10:	f380 8809 	msr	PSP, r0
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	f3af 8000 	nop.w

0800da20 <pxCurrentTCBConst>:
 800da20:	20001b6c 	.word	0x20001b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop

0800da28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	607b      	str	r3, [r7, #4]
}
 800da40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da42:	f7ff fa31 	bl	800cea8 <xTaskIncrementTick>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <SysTick_Handler+0x40>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	2300      	movs	r3, #0
 800da56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f383 8811 	msr	BASEPRI, r3
}
 800da5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	e000ed04 	.word	0xe000ed04

0800da6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da6c:	b480      	push	{r7}
 800da6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <vPortSetupTimerInterrupt+0x34>)
 800da72:	2200      	movs	r2, #0
 800da74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da76:	4b0b      	ldr	r3, [pc, #44]	; (800daa4 <vPortSetupTimerInterrupt+0x38>)
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da7c:	4b0a      	ldr	r3, [pc, #40]	; (800daa8 <vPortSetupTimerInterrupt+0x3c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a0a      	ldr	r2, [pc, #40]	; (800daac <vPortSetupTimerInterrupt+0x40>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	099b      	lsrs	r3, r3, #6
 800da88:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <vPortSetupTimerInterrupt+0x44>)
 800da8a:	3b01      	subs	r3, #1
 800da8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da8e:	4b04      	ldr	r3, [pc, #16]	; (800daa0 <vPortSetupTimerInterrupt+0x34>)
 800da90:	2207      	movs	r2, #7
 800da92:	601a      	str	r2, [r3, #0]
}
 800da94:	bf00      	nop
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	e000e010 	.word	0xe000e010
 800daa4:	e000e018 	.word	0xe000e018
 800daa8:	20000080 	.word	0x20000080
 800daac:	10624dd3 	.word	0x10624dd3
 800dab0:	e000e014 	.word	0xe000e014

0800dab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dac4 <vPortEnableVFP+0x10>
 800dab8:	6801      	ldr	r1, [r0, #0]
 800daba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dabe:	6001      	str	r1, [r0, #0]
 800dac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dac2:	bf00      	nop
 800dac4:	e000ed88 	.word	0xe000ed88

0800dac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dace:	f3ef 8305 	mrs	r3, IPSR
 800dad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b0f      	cmp	r3, #15
 800dad8:	d914      	bls.n	800db04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dada:	4a17      	ldr	r2, [pc, #92]	; (800db38 <vPortValidateInterruptPriority+0x70>)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dae4:	4b15      	ldr	r3, [pc, #84]	; (800db3c <vPortValidateInterruptPriority+0x74>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	7afa      	ldrb	r2, [r7, #11]
 800daea:	429a      	cmp	r2, r3
 800daec:	d20a      	bcs.n	800db04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	607b      	str	r3, [r7, #4]
}
 800db00:	bf00      	nop
 800db02:	e7fe      	b.n	800db02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db04:	4b0e      	ldr	r3, [pc, #56]	; (800db40 <vPortValidateInterruptPriority+0x78>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db0c:	4b0d      	ldr	r3, [pc, #52]	; (800db44 <vPortValidateInterruptPriority+0x7c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d90a      	bls.n	800db2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	603b      	str	r3, [r7, #0]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <vPortValidateInterruptPriority+0x60>
	}
 800db2a:	bf00      	nop
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	e000e3f0 	.word	0xe000e3f0
 800db3c:	20001c98 	.word	0x20001c98
 800db40:	e000ed0c 	.word	0xe000ed0c
 800db44:	20001c9c 	.word	0x20001c9c

0800db48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08a      	sub	sp, #40	; 0x28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db50:	2300      	movs	r3, #0
 800db52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db54:	f7ff f8fe 	bl	800cd54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db58:	4b5b      	ldr	r3, [pc, #364]	; (800dcc8 <pvPortMalloc+0x180>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db60:	f000 f920 	bl	800dda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db64:	4b59      	ldr	r3, [pc, #356]	; (800dccc <pvPortMalloc+0x184>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4013      	ands	r3, r2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f040 8093 	bne.w	800dc98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01d      	beq.n	800dbb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db78:	2208      	movs	r2, #8
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f003 0307 	and.w	r3, r3, #7
 800db86:	2b00      	cmp	r3, #0
 800db88:	d014      	beq.n	800dbb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f023 0307 	bic.w	r3, r3, #7
 800db90:	3308      	adds	r3, #8
 800db92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <pvPortMalloc+0x6c>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	617b      	str	r3, [r7, #20]
}
 800dbb0:	bf00      	nop
 800dbb2:	e7fe      	b.n	800dbb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d06e      	beq.n	800dc98 <pvPortMalloc+0x150>
 800dbba:	4b45      	ldr	r3, [pc, #276]	; (800dcd0 <pvPortMalloc+0x188>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d869      	bhi.n	800dc98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbc4:	4b43      	ldr	r3, [pc, #268]	; (800dcd4 <pvPortMalloc+0x18c>)
 800dbc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbc8:	4b42      	ldr	r3, [pc, #264]	; (800dcd4 <pvPortMalloc+0x18c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbce:	e004      	b.n	800dbda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <pvPortMalloc+0xa4>
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f1      	bne.n	800dbd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbec:	4b36      	ldr	r3, [pc, #216]	; (800dcc8 <pvPortMalloc+0x180>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d050      	beq.n	800dc98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2208      	movs	r2, #8
 800dbfc:	4413      	add	r3, r2
 800dbfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	2308      	movs	r3, #8
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d91f      	bls.n	800dc58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <pvPortMalloc+0xf8>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	613b      	str	r3, [r7, #16]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	1ad2      	subs	r2, r2, r3
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc52:	69b8      	ldr	r0, [r7, #24]
 800dc54:	f000 f908 	bl	800de68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc58:	4b1d      	ldr	r3, [pc, #116]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	4a1b      	ldr	r2, [pc, #108]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc66:	4b1a      	ldr	r3, [pc, #104]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	4b1b      	ldr	r3, [pc, #108]	; (800dcd8 <pvPortMalloc+0x190>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d203      	bcs.n	800dc7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc72:	4b17      	ldr	r3, [pc, #92]	; (800dcd0 <pvPortMalloc+0x188>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a18      	ldr	r2, [pc, #96]	; (800dcd8 <pvPortMalloc+0x190>)
 800dc78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	4b13      	ldr	r3, [pc, #76]	; (800dccc <pvPortMalloc+0x184>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	431a      	orrs	r2, r3
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <pvPortMalloc+0x194>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3301      	adds	r3, #1
 800dc94:	4a11      	ldr	r2, [pc, #68]	; (800dcdc <pvPortMalloc+0x194>)
 800dc96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc98:	f7ff f86a 	bl	800cd70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00a      	beq.n	800dcbc <pvPortMalloc+0x174>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	60fb      	str	r3, [r7, #12]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <pvPortMalloc+0x172>
	return pvReturn;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3728      	adds	r7, #40	; 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	200058a8 	.word	0x200058a8
 800dccc:	200058bc 	.word	0x200058bc
 800dcd0:	200058ac 	.word	0x200058ac
 800dcd4:	200058a0 	.word	0x200058a0
 800dcd8:	200058b0 	.word	0x200058b0
 800dcdc:	200058b4 	.word	0x200058b4

0800dce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d04d      	beq.n	800dd8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dcf2:	2308      	movs	r3, #8
 800dcf4:	425b      	negs	r3, r3
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <vPortFree+0xb8>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4013      	ands	r3, r2
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <vPortFree+0x44>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60fb      	str	r3, [r7, #12]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <vPortFree+0x62>
	__asm volatile
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	60bb      	str	r3, [r7, #8]
}
 800dd3e:	bf00      	nop
 800dd40:	e7fe      	b.n	800dd40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	4b14      	ldr	r3, [pc, #80]	; (800dd98 <vPortFree+0xb8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01e      	beq.n	800dd8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d11a      	bne.n	800dd8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	4b0e      	ldr	r3, [pc, #56]	; (800dd98 <vPortFree+0xb8>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	43db      	mvns	r3, r3
 800dd62:	401a      	ands	r2, r3
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd68:	f7fe fff4 	bl	800cd54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <vPortFree+0xbc>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4413      	add	r3, r2
 800dd76:	4a09      	ldr	r2, [pc, #36]	; (800dd9c <vPortFree+0xbc>)
 800dd78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd7a:	6938      	ldr	r0, [r7, #16]
 800dd7c:	f000 f874 	bl	800de68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <vPortFree+0xc0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	4a06      	ldr	r2, [pc, #24]	; (800dda0 <vPortFree+0xc0>)
 800dd88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd8a:	f7fe fff1 	bl	800cd70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd8e:	bf00      	nop
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	200058bc 	.word	0x200058bc
 800dd9c:	200058ac 	.word	0x200058ac
 800dda0:	200058b8 	.word	0x200058b8

0800dda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ddae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddb0:	4b27      	ldr	r3, [pc, #156]	; (800de50 <prvHeapInit+0xac>)
 800ddb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 0307 	and.w	r3, r3, #7
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00c      	beq.n	800ddd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3307      	adds	r3, #7
 800ddc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f023 0307 	bic.w	r3, r3, #7
 800ddca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	4a1f      	ldr	r2, [pc, #124]	; (800de50 <prvHeapInit+0xac>)
 800ddd4:	4413      	add	r3, r2
 800ddd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dddc:	4a1d      	ldr	r2, [pc, #116]	; (800de54 <prvHeapInit+0xb0>)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dde2:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <prvHeapInit+0xb0>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	4413      	add	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ddf0:	2208      	movs	r2, #8
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f023 0307 	bic.w	r3, r3, #7
 800ddfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	4a15      	ldr	r2, [pc, #84]	; (800de58 <prvHeapInit+0xb4>)
 800de04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de06:	4b14      	ldr	r3, [pc, #80]	; (800de58 <prvHeapInit+0xb4>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de0e:	4b12      	ldr	r3, [pc, #72]	; (800de58 <prvHeapInit+0xb4>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de24:	4b0c      	ldr	r3, [pc, #48]	; (800de58 <prvHeapInit+0xb4>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	4a0a      	ldr	r2, [pc, #40]	; (800de5c <prvHeapInit+0xb8>)
 800de32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	4a09      	ldr	r2, [pc, #36]	; (800de60 <prvHeapInit+0xbc>)
 800de3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <prvHeapInit+0xc0>)
 800de3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de42:	601a      	str	r2, [r3, #0]
}
 800de44:	bf00      	nop
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	20001ca0 	.word	0x20001ca0
 800de54:	200058a0 	.word	0x200058a0
 800de58:	200058a8 	.word	0x200058a8
 800de5c:	200058b0 	.word	0x200058b0
 800de60:	200058ac 	.word	0x200058ac
 800de64:	200058bc 	.word	0x200058bc

0800de68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de70:	4b28      	ldr	r3, [pc, #160]	; (800df14 <prvInsertBlockIntoFreeList+0xac>)
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e002      	b.n	800de7c <prvInsertBlockIntoFreeList+0x14>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d8f7      	bhi.n	800de76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	4413      	add	r3, r2
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d108      	bne.n	800deaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	441a      	add	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	441a      	add	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	429a      	cmp	r2, r3
 800debc:	d118      	bne.n	800def0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	4b15      	ldr	r3, [pc, #84]	; (800df18 <prvInsertBlockIntoFreeList+0xb0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d00d      	beq.n	800dee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	441a      	add	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	e008      	b.n	800def8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dee6:	4b0c      	ldr	r3, [pc, #48]	; (800df18 <prvInsertBlockIntoFreeList+0xb0>)
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	e003      	b.n	800def8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	429a      	cmp	r2, r3
 800defe:	d002      	beq.n	800df06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	200058a0 	.word	0x200058a0
 800df18:	200058a8 	.word	0x200058a8

0800df1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df20:	2200      	movs	r2, #0
 800df22:	4912      	ldr	r1, [pc, #72]	; (800df6c <MX_USB_DEVICE_Init+0x50>)
 800df24:	4812      	ldr	r0, [pc, #72]	; (800df70 <MX_USB_DEVICE_Init+0x54>)
 800df26:	f7fc fdd6 	bl	800aad6 <USBD_Init>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df30:	f7f4 ff24 	bl	8002d7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800df34:	490f      	ldr	r1, [pc, #60]	; (800df74 <MX_USB_DEVICE_Init+0x58>)
 800df36:	480e      	ldr	r0, [pc, #56]	; (800df70 <MX_USB_DEVICE_Init+0x54>)
 800df38:	f7fc fdfd 	bl	800ab36 <USBD_RegisterClass>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df42:	f7f4 ff1b 	bl	8002d7c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800df46:	490c      	ldr	r1, [pc, #48]	; (800df78 <MX_USB_DEVICE_Init+0x5c>)
 800df48:	4809      	ldr	r0, [pc, #36]	; (800df70 <MX_USB_DEVICE_Init+0x54>)
 800df4a:	f7fc fdaf 	bl	800aaac <USBD_CUSTOM_HID_RegisterInterface>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df54:	f7f4 ff12 	bl	8002d7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df58:	4805      	ldr	r0, [pc, #20]	; (800df70 <MX_USB_DEVICE_Init+0x54>)
 800df5a:	f7fc fe13 	bl	800ab84 <USBD_Start>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df64:	f7f4 ff0a 	bl	8002d7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df68:	bf00      	nop
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20000198 	.word	0x20000198
 800df70:	200058c0 	.word	0x200058c0
 800df74:	2000008c 	.word	0x2000008c
 800df78:	20000188 	.word	0x20000188

0800df7c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800df7c:	b480      	push	{r7}
 800df7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df82:	4618      	mov	r0, r3
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800df8c:	b480      	push	{r7}
 800df8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800df90:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df92:	4618      	mov	r0, r3
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 800df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	memcpy (buffer, state, 0x40);
 800dfa4:	4a27      	ldr	r2, [pc, #156]	; (800e044 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	461c      	mov	r4, r3
 800dfaa:	4616      	mov	r6, r2
 800dfac:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800dfb0:	4635      	mov	r5, r6
 800dfb2:	4623      	mov	r3, r4
 800dfb4:	6818      	ldr	r0, [r3, #0]
 800dfb6:	6859      	ldr	r1, [r3, #4]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfbe:	3410      	adds	r4, #16
 800dfc0:	3610      	adds	r6, #16
 800dfc2:	4564      	cmp	r4, ip
 800dfc4:	d1f4      	bne.n	800dfb0 <CUSTOM_HID_OutEvent_FS+0x14>
	/* Start next USB packet transfer once data processing is completed */
	static uint32_t k = 0;
	/* Start next USB packet transfer once data processing is completed */
	if(buffer[0] == '#'){
 800dfc6:	4b1f      	ldr	r3, [pc, #124]	; (800e044 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	2b23      	cmp	r3, #35	; 0x23
 800dfcc:	d11e      	bne.n	800e00c <CUSTOM_HID_OutEvent_FS+0x70>
		USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800dfce:	481e      	ldr	r0, [pc, #120]	; (800e048 <CUSTOM_HID_OutEvent_FS+0xac>)
 800dfd0:	f7fc fd26 	bl	800aa20 <USBD_CUSTOM_HID_ReceivePacket>
		USBD_CUSTOM_HID_SendReport (&hUsbDeviceFS, &buffer_usb[k], 64);
 800dfd4:	4b1d      	ldr	r3, [pc, #116]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a1d      	ldr	r2, [pc, #116]	; (800e050 <CUSTOM_HID_OutEvent_FS+0xb4>)
 800dfda:	4413      	add	r3, r2
 800dfdc:	2240      	movs	r2, #64	; 0x40
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4819      	ldr	r0, [pc, #100]	; (800e048 <CUSTOM_HID_OutEvent_FS+0xac>)
 800dfe2:	f7fc fc91 	bl	800a908 <USBD_CUSTOM_HID_SendReport>
		k += 64;
 800dfe6:	4b19      	ldr	r3, [pc, #100]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3340      	adds	r3, #64	; 0x40
 800dfec:	4a17      	ldr	r2, [pc, #92]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800dfee:	6013      	str	r3, [r2, #0]
		if(k==1024){
 800dff0:	4b16      	ldr	r3, [pc, #88]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dff8:	d108      	bne.n	800e00c <CUSTOM_HID_OutEvent_FS+0x70>
			HAL_ADC_Start_DMA(&hadc1, buffer_adc, NS);
 800dffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dffe:	4915      	ldr	r1, [pc, #84]	; (800e054 <CUSTOM_HID_OutEvent_FS+0xb8>)
 800e000:	4815      	ldr	r0, [pc, #84]	; (800e058 <CUSTOM_HID_OutEvent_FS+0xbc>)
 800e002:	f7f5 fd29 	bl	8003a58 <HAL_ADC_Start_DMA>
			k=0;
 800e006:	4b11      	ldr	r3, [pc, #68]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
		}
	}
	if(buffer[0] == 'C'){
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b43      	cmp	r3, #67	; 0x43
 800e012:	d102      	bne.n	800e01a <CUSTOM_HID_OutEvent_FS+0x7e>
		k=0;
 800e014:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
	}
	if(buffer[0] == 'D'){
 800e01a:	4b0a      	ldr	r3, [pc, #40]	; (800e044 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b44      	cmp	r3, #68	; 0x44
 800e020:	d102      	bne.n	800e028 <CUSTOM_HID_OutEvent_FS+0x8c>
			k=0;
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <CUSTOM_HID_OutEvent_FS+0xb0>)
 800e024:	2200      	movs	r2, #0
 800e026:	601a      	str	r2, [r3, #0]
	}
	if(buffer[0] == '$'){
 800e028:	4b06      	ldr	r3, [pc, #24]	; (800e044 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b24      	cmp	r3, #36	; 0x24
 800e02e:	d104      	bne.n	800e03a <CUSTOM_HID_OutEvent_FS+0x9e>
		USBD_CUSTOM_HID_SendReport (&hUsbDeviceFS, &bufferAUX[0], 25);
 800e030:	2219      	movs	r2, #25
 800e032:	490a      	ldr	r1, [pc, #40]	; (800e05c <CUSTOM_HID_OutEvent_FS+0xc0>)
 800e034:	4804      	ldr	r0, [pc, #16]	; (800e048 <CUSTOM_HID_OutEvent_FS+0xac>)
 800e036:	f7fc fc67 	bl	800a908 <USBD_CUSTOM_HID_SendReport>
	}
	return (USBD_OK);
 800e03a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e044:	20005b90 	.word	0x20005b90
 800e048:	200058c0 	.word	0x200058c0
 800e04c:	20005bd0 	.word	0x20005bd0
 800e050:	200006d8 	.word	0x200006d8
 800e054:	20000ad8 	.word	0x20000ad8
 800e058:	200004bc 	.word	0x200004bc
 800e05c:	20000000 	.word	0x20000000

0800e060 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	6039      	str	r1, [r7, #0]
 800e06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2212      	movs	r2, #18
 800e070:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e072:	4b03      	ldr	r3, [pc, #12]	; (800e080 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	200001b4 	.word	0x200001b4

0800e084 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	6039      	str	r1, [r7, #0]
 800e08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2204      	movs	r2, #4
 800e094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e096:	4b03      	ldr	r3, [pc, #12]	; (800e0a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	200001c8 	.word	0x200001c8

0800e0a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	6039      	str	r1, [r7, #0]
 800e0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	4907      	ldr	r1, [pc, #28]	; (800e0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800e0be:	4808      	ldr	r0, [pc, #32]	; (800e0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0c0:	f7fd fd91 	bl	800bbe6 <USBD_GetString>
 800e0c4:	e004      	b.n	800e0d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	4904      	ldr	r1, [pc, #16]	; (800e0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800e0ca:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0cc:	f7fd fd8b 	bl	800bbe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0d0:	4b02      	ldr	r3, [pc, #8]	; (800e0dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20005bd4 	.word	0x20005bd4
 800e0e0:	0800ebc0 	.word	0x0800ebc0

0800e0e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	6039      	str	r1, [r7, #0]
 800e0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	4904      	ldr	r1, [pc, #16]	; (800e104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0f4:	4804      	ldr	r0, [pc, #16]	; (800e108 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0f6:	f7fd fd76 	bl	800bbe6 <USBD_GetString>
  return USBD_StrDesc;
 800e0fa:	4b02      	ldr	r3, [pc, #8]	; (800e104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	20005bd4 	.word	0x20005bd4
 800e108:	0800ebe0 	.word	0x0800ebe0

0800e10c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	4603      	mov	r3, r0
 800e114:	6039      	str	r1, [r7, #0]
 800e116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	221a      	movs	r2, #26
 800e11c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e11e:	f000 f843 	bl	800e1a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e122:	4b02      	ldr	r3, [pc, #8]	; (800e12c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e124:	4618      	mov	r0, r3
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	200001cc 	.word	0x200001cc

0800e130 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	6039      	str	r1, [r7, #0]
 800e13a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e13c:	79fb      	ldrb	r3, [r7, #7]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d105      	bne.n	800e14e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4907      	ldr	r1, [pc, #28]	; (800e164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e146:	4808      	ldr	r0, [pc, #32]	; (800e168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e148:	f7fd fd4d 	bl	800bbe6 <USBD_GetString>
 800e14c:	e004      	b.n	800e158 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	4904      	ldr	r1, [pc, #16]	; (800e164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e152:	4805      	ldr	r0, [pc, #20]	; (800e168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e154:	f7fd fd47 	bl	800bbe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e158:	4b02      	ldr	r3, [pc, #8]	; (800e164 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20005bd4 	.word	0x20005bd4
 800e168:	0800ebf4 	.word	0x0800ebf4

0800e16c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	4603      	mov	r3, r0
 800e174:	6039      	str	r1, [r7, #0]
 800e176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d105      	bne.n	800e18a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	4907      	ldr	r1, [pc, #28]	; (800e1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e182:	4808      	ldr	r0, [pc, #32]	; (800e1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e184:	f7fd fd2f 	bl	800bbe6 <USBD_GetString>
 800e188:	e004      	b.n	800e194 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e18a:	683a      	ldr	r2, [r7, #0]
 800e18c:	4904      	ldr	r1, [pc, #16]	; (800e1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e18e:	4805      	ldr	r0, [pc, #20]	; (800e1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e190:	f7fd fd29 	bl	800bbe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20005bd4 	.word	0x20005bd4
 800e1a4:	0800ec08 	.word	0x0800ec08

0800e1a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e1ae:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <Get_SerialNum+0x44>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e1b4:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <Get_SerialNum+0x48>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e1ba:	4b0e      	ldr	r3, [pc, #56]	; (800e1f4 <Get_SerialNum+0x4c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d009      	beq.n	800e1e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e1ce:	2208      	movs	r2, #8
 800e1d0:	4909      	ldr	r1, [pc, #36]	; (800e1f8 <Get_SerialNum+0x50>)
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 f814 	bl	800e200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e1d8:	2204      	movs	r2, #4
 800e1da:	4908      	ldr	r1, [pc, #32]	; (800e1fc <Get_SerialNum+0x54>)
 800e1dc:	68b8      	ldr	r0, [r7, #8]
 800e1de:	f000 f80f 	bl	800e200 <IntToUnicode>
  }
}
 800e1e2:	bf00      	nop
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	1fff7a10 	.word	0x1fff7a10
 800e1f0:	1fff7a14 	.word	0x1fff7a14
 800e1f4:	1fff7a18 	.word	0x1fff7a18
 800e1f8:	200001ce 	.word	0x200001ce
 800e1fc:	200001de 	.word	0x200001de

0800e200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e200:	b480      	push	{r7}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	4613      	mov	r3, r2
 800e20c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e212:	2300      	movs	r3, #0
 800e214:	75fb      	strb	r3, [r7, #23]
 800e216:	e027      	b.n	800e268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	0f1b      	lsrs	r3, r3, #28
 800e21c:	2b09      	cmp	r3, #9
 800e21e:	d80b      	bhi.n	800e238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	0f1b      	lsrs	r3, r3, #28
 800e224:	b2da      	uxtb	r2, r3
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	4619      	mov	r1, r3
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	440b      	add	r3, r1
 800e230:	3230      	adds	r2, #48	; 0x30
 800e232:	b2d2      	uxtb	r2, r2
 800e234:	701a      	strb	r2, [r3, #0]
 800e236:	e00a      	b.n	800e24e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	0f1b      	lsrs	r3, r3, #28
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	7dfb      	ldrb	r3, [r7, #23]
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	4619      	mov	r1, r3
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	440b      	add	r3, r1
 800e248:	3237      	adds	r2, #55	; 0x37
 800e24a:	b2d2      	uxtb	r2, r2
 800e24c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	011b      	lsls	r3, r3, #4
 800e252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e254:	7dfb      	ldrb	r3, [r7, #23]
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	3301      	adds	r3, #1
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	4413      	add	r3, r2
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e262:	7dfb      	ldrb	r3, [r7, #23]
 800e264:	3301      	adds	r3, #1
 800e266:	75fb      	strb	r3, [r7, #23]
 800e268:	7dfa      	ldrb	r2, [r7, #23]
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d3d3      	bcc.n	800e218 <IntToUnicode+0x18>
  }
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	371c      	adds	r7, #28
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
	...

0800e280 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08a      	sub	sp, #40	; 0x28
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e288:	f107 0314 	add.w	r3, r7, #20
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	605a      	str	r2, [r3, #4]
 800e292:	609a      	str	r2, [r3, #8]
 800e294:	60da      	str	r2, [r3, #12]
 800e296:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2a0:	d13a      	bne.n	800e318 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	4b1e      	ldr	r3, [pc, #120]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2aa:	4a1d      	ldr	r2, [pc, #116]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2ac:	f043 0301 	orr.w	r3, r3, #1
 800e2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800e2b2:	4b1b      	ldr	r3, [pc, #108]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	613b      	str	r3, [r7, #16]
 800e2bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e2be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e2c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2cc:	2303      	movs	r3, #3
 800e2ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2d0:	230a      	movs	r3, #10
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2d4:	f107 0314 	add.w	r3, r7, #20
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4812      	ldr	r0, [pc, #72]	; (800e324 <HAL_PCD_MspInit+0xa4>)
 800e2dc:	f7f6 fba8 	bl	8004a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e2e0:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e4:	4a0e      	ldr	r2, [pc, #56]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ea:	6353      	str	r3, [r2, #52]	; 0x34
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f4:	4a0a      	ldr	r2, [pc, #40]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2fa:	6453      	str	r3, [r2, #68]	; 0x44
 800e2fc:	4b08      	ldr	r3, [pc, #32]	; (800e320 <HAL_PCD_MspInit+0xa0>)
 800e2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e308:	2200      	movs	r2, #0
 800e30a:	2100      	movs	r1, #0
 800e30c:	2043      	movs	r0, #67	; 0x43
 800e30e:	f7f5 fff5 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e312:	2043      	movs	r0, #67	; 0x43
 800e314:	f7f6 f80e 	bl	8004334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e318:	bf00      	nop
 800e31a:	3728      	adds	r7, #40	; 0x28
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	40023800 	.word	0x40023800
 800e324:	40020000 	.word	0x40020000

0800e328 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e33c:	4619      	mov	r1, r3
 800e33e:	4610      	mov	r0, r2
 800e340:	f7fc fc6b 	bl	800ac1a <USBD_LL_SetupStage>
}
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	440b      	add	r3, r1
 800e36c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	78fb      	ldrb	r3, [r7, #3]
 800e374:	4619      	mov	r1, r3
 800e376:	f7fc fca5 	bl	800acc4 <USBD_LL_DataOutStage>
}
 800e37a:	bf00      	nop
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	460b      	mov	r3, r1
 800e38c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	6879      	ldr	r1, [r7, #4]
 800e398:	4613      	mov	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	440b      	add	r3, r1
 800e3a2:	334c      	adds	r3, #76	; 0x4c
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	78fb      	ldrb	r3, [r7, #3]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f7fc fcee 	bl	800ad8a <USBD_LL_DataInStage>
}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fc fe02 	bl	800afce <USBD_LL_SOF>
}
 800e3ca:	bf00      	nop
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d102      	bne.n	800e3ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73fb      	strb	r3, [r7, #15]
 800e3ea:	e008      	b.n	800e3fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d102      	bne.n	800e3fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	73fb      	strb	r3, [r7, #15]
 800e3f8:	e001      	b.n	800e3fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e3fa:	f7f4 fcbf 	bl	8002d7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e404:	7bfa      	ldrb	r2, [r7, #15]
 800e406:	4611      	mov	r1, r2
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fc fda2 	bl	800af52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e414:	4618      	mov	r0, r3
 800e416:	f7fc fd4e 	bl	800aeb6 <USBD_LL_Reset>
}
 800e41a:	bf00      	nop
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
	...

0800e424 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e432:	4618      	mov	r0, r3
 800e434:	f7fc fd9d 	bl	800af72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	6812      	ldr	r2, [r2, #0]
 800e446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e44a:	f043 0301 	orr.w	r3, r3, #1
 800e44e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d005      	beq.n	800e464 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e458:	4b04      	ldr	r3, [pc, #16]	; (800e46c <HAL_PCD_SuspendCallback+0x48>)
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	4a03      	ldr	r2, [pc, #12]	; (800e46c <HAL_PCD_SuspendCallback+0x48>)
 800e45e:	f043 0306 	orr.w	r3, r3, #6
 800e462:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	e000ed00 	.word	0xe000ed00

0800e470 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fc fd8d 	bl	800af9e <USBD_LL_Resume>
}
 800e484:	bf00      	nop
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fc fddb 	bl	800b05e <USBD_LL_IsoOUTIncomplete>
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4c2:	78fa      	ldrb	r2, [r7, #3]
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fc fda3 	bl	800b012 <USBD_LL_IsoINIncomplete>
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fc fde1 	bl	800b0aa <USBD_LL_DevConnected>
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fc fdde 	bl	800b0c0 <USBD_LL_DevDisconnected>
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d13c      	bne.n	800e596 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e51c:	4a20      	ldr	r2, [pc, #128]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a1e      	ldr	r2, [pc, #120]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e52c:	4b1c      	ldr	r3, [pc, #112]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e52e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e532:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e534:	4b1a      	ldr	r3, [pc, #104]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e536:	2204      	movs	r2, #4
 800e538:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e53a:	4b19      	ldr	r3, [pc, #100]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e53c:	2202      	movs	r2, #2
 800e53e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e540:	4b17      	ldr	r3, [pc, #92]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e542:	2200      	movs	r2, #0
 800e544:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e546:	4b16      	ldr	r3, [pc, #88]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e548:	2202      	movs	r2, #2
 800e54a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e54c:	4b14      	ldr	r3, [pc, #80]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e54e:	2200      	movs	r2, #0
 800e550:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e552:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e554:	2200      	movs	r2, #0
 800e556:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e558:	4b11      	ldr	r3, [pc, #68]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e55e:	4b10      	ldr	r3, [pc, #64]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e560:	2200      	movs	r2, #0
 800e562:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e564:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e566:	2200      	movs	r2, #0
 800e568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e56a:	480d      	ldr	r0, [pc, #52]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e56c:	f7f7 f871 	bl	8005652 <HAL_PCD_Init>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e576:	f7f4 fc01 	bl	8002d7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e57a:	2180      	movs	r1, #128	; 0x80
 800e57c:	4808      	ldr	r0, [pc, #32]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e57e:	f7f8 fab0 	bl	8006ae2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e582:	2240      	movs	r2, #64	; 0x40
 800e584:	2100      	movs	r1, #0
 800e586:	4806      	ldr	r0, [pc, #24]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e588:	f7f8 fa64 	bl	8006a54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e58c:	2280      	movs	r2, #128	; 0x80
 800e58e:	2101      	movs	r1, #1
 800e590:	4803      	ldr	r0, [pc, #12]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e592:	f7f8 fa5f 	bl	8006a54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20005dd4 	.word	0x20005dd4

0800e5a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7f7 f966 	bl	800588c <HAL_PCD_Start>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f000 f930 	bl	800e82c <USBD_Get_USB_Status>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b084      	sub	sp, #16
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	4608      	mov	r0, r1
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	70fb      	strb	r3, [r7, #3]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	70bb      	strb	r3, [r7, #2]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e602:	78bb      	ldrb	r3, [r7, #2]
 800e604:	883a      	ldrh	r2, [r7, #0]
 800e606:	78f9      	ldrb	r1, [r7, #3]
 800e608:	f7f7 fe37 	bl	800627a <HAL_PCD_EP_Open>
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f90a 	bl	800e82c <USBD_Get_USB_Status>
 800e618:	4603      	mov	r3, r0
 800e61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b084      	sub	sp, #16
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	460b      	mov	r3, r1
 800e630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e640:	78fa      	ldrb	r2, [r7, #3]
 800e642:	4611      	mov	r1, r2
 800e644:	4618      	mov	r0, r3
 800e646:	f7f7 fe80 	bl	800634a <HAL_PCD_EP_Close>
 800e64a:	4603      	mov	r3, r0
 800e64c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
 800e650:	4618      	mov	r0, r3
 800e652:	f000 f8eb 	bl	800e82c <USBD_Get_USB_Status>
 800e656:	4603      	mov	r3, r0
 800e658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e67e:	78fa      	ldrb	r2, [r7, #3]
 800e680:	4611      	mov	r1, r2
 800e682:	4618      	mov	r0, r3
 800e684:	f7f7 ff40 	bl	8006508 <HAL_PCD_EP_SetStall>
 800e688:	4603      	mov	r3, r0
 800e68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f8cc 	bl	800e82c <USBD_Get_USB_Status>
 800e694:	4603      	mov	r3, r0
 800e696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e698:	7bbb      	ldrb	r3, [r7, #14]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6bc:	78fa      	ldrb	r2, [r7, #3]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f7 ff85 	bl	80065d0 <HAL_PCD_EP_ClrStall>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 f8ad 	bl	800e82c <USBD_Get_USB_Status>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e6f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	da0b      	bge.n	800e714 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6fc:	78fb      	ldrb	r3, [r7, #3]
 800e6fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e702:	68f9      	ldr	r1, [r7, #12]
 800e704:	4613      	mov	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	440b      	add	r3, r1
 800e70e:	333e      	adds	r3, #62	; 0x3e
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	e00b      	b.n	800e72c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e71a:	68f9      	ldr	r1, [r7, #12]
 800e71c:	4613      	mov	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	4413      	add	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	440b      	add	r3, r1
 800e726:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e72a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e744:	2300      	movs	r3, #0
 800e746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e748:	2300      	movs	r3, #0
 800e74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e752:	78fa      	ldrb	r2, [r7, #3]
 800e754:	4611      	mov	r1, r2
 800e756:	4618      	mov	r0, r3
 800e758:	f7f7 fd6a 	bl	8006230 <HAL_PCD_SetAddress>
 800e75c:	4603      	mov	r3, r0
 800e75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e760:	7bfb      	ldrb	r3, [r7, #15]
 800e762:	4618      	mov	r0, r3
 800e764:	f000 f862 	bl	800e82c <USBD_Get_USB_Status>
 800e768:	4603      	mov	r3, r0
 800e76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b086      	sub	sp, #24
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	603b      	str	r3, [r7, #0]
 800e782:	460b      	mov	r3, r1
 800e784:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e794:	7af9      	ldrb	r1, [r7, #11]
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	f7f7 fe6b 	bl	8006474 <HAL_PCD_EP_Transmit>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 f841 	bl	800e82c <USBD_Get_USB_Status>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	607a      	str	r2, [r7, #4]
 800e7c2:	603b      	str	r3, [r7, #0]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e7d6:	7af9      	ldrb	r1, [r7, #11]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	f7f7 fdff 	bl	80063de <HAL_PCD_EP_Receive>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7e4:	7dfb      	ldrb	r3, [r7, #23]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f000 f820 	bl	800e82c <USBD_Get_USB_Status>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
	...

0800e7fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800e804:	4b03      	ldr	r3, [pc, #12]	; (800e814 <USBD_static_malloc+0x18>)
}
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	200062e0 	.word	0x200062e0

0800e818 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]

}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	4603      	mov	r3, r0
 800e834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e836:	2300      	movs	r3, #0
 800e838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e83a:	79fb      	ldrb	r3, [r7, #7]
 800e83c:	2b03      	cmp	r3, #3
 800e83e:	d817      	bhi.n	800e870 <USBD_Get_USB_Status+0x44>
 800e840:	a201      	add	r2, pc, #4	; (adr r2, 800e848 <USBD_Get_USB_Status+0x1c>)
 800e842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e846:	bf00      	nop
 800e848:	0800e859 	.word	0x0800e859
 800e84c:	0800e85f 	.word	0x0800e85f
 800e850:	0800e865 	.word	0x0800e865
 800e854:	0800e86b 	.word	0x0800e86b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	73fb      	strb	r3, [r7, #15]
    break;
 800e85c:	e00b      	b.n	800e876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e85e:	2303      	movs	r3, #3
 800e860:	73fb      	strb	r3, [r7, #15]
    break;
 800e862:	e008      	b.n	800e876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e864:	2301      	movs	r3, #1
 800e866:	73fb      	strb	r3, [r7, #15]
    break;
 800e868:	e005      	b.n	800e876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e86a:	2303      	movs	r3, #3
 800e86c:	73fb      	strb	r3, [r7, #15]
    break;
 800e86e:	e002      	b.n	800e876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e870:	2303      	movs	r3, #3
 800e872:	73fb      	strb	r3, [r7, #15]
    break;
 800e874:	bf00      	nop
  }
  return usb_status;
 800e876:	7bfb      	ldrb	r3, [r7, #15]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <__errno>:
 800e884:	4b01      	ldr	r3, [pc, #4]	; (800e88c <__errno+0x8>)
 800e886:	6818      	ldr	r0, [r3, #0]
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	200001e8 	.word	0x200001e8

0800e890 <__libc_init_array>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	4d0d      	ldr	r5, [pc, #52]	; (800e8c8 <__libc_init_array+0x38>)
 800e894:	4c0d      	ldr	r4, [pc, #52]	; (800e8cc <__libc_init_array+0x3c>)
 800e896:	1b64      	subs	r4, r4, r5
 800e898:	10a4      	asrs	r4, r4, #2
 800e89a:	2600      	movs	r6, #0
 800e89c:	42a6      	cmp	r6, r4
 800e89e:	d109      	bne.n	800e8b4 <__libc_init_array+0x24>
 800e8a0:	4d0b      	ldr	r5, [pc, #44]	; (800e8d0 <__libc_init_array+0x40>)
 800e8a2:	4c0c      	ldr	r4, [pc, #48]	; (800e8d4 <__libc_init_array+0x44>)
 800e8a4:	f000 f90c 	bl	800eac0 <_init>
 800e8a8:	1b64      	subs	r4, r4, r5
 800e8aa:	10a4      	asrs	r4, r4, #2
 800e8ac:	2600      	movs	r6, #0
 800e8ae:	42a6      	cmp	r6, r4
 800e8b0:	d105      	bne.n	800e8be <__libc_init_array+0x2e>
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b8:	4798      	blx	r3
 800e8ba:	3601      	adds	r6, #1
 800e8bc:	e7ee      	b.n	800e89c <__libc_init_array+0xc>
 800e8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8c2:	4798      	blx	r3
 800e8c4:	3601      	adds	r6, #1
 800e8c6:	e7f2      	b.n	800e8ae <__libc_init_array+0x1e>
 800e8c8:	0800f238 	.word	0x0800f238
 800e8cc:	0800f238 	.word	0x0800f238
 800e8d0:	0800f238 	.word	0x0800f238
 800e8d4:	0800f23c 	.word	0x0800f23c

0800e8d8 <memcpy>:
 800e8d8:	440a      	add	r2, r1
 800e8da:	4291      	cmp	r1, r2
 800e8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8e0:	d100      	bne.n	800e8e4 <memcpy+0xc>
 800e8e2:	4770      	bx	lr
 800e8e4:	b510      	push	{r4, lr}
 800e8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ee:	4291      	cmp	r1, r2
 800e8f0:	d1f9      	bne.n	800e8e6 <memcpy+0xe>
 800e8f2:	bd10      	pop	{r4, pc}

0800e8f4 <memset>:
 800e8f4:	4402      	add	r2, r0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d100      	bne.n	800e8fe <memset+0xa>
 800e8fc:	4770      	bx	lr
 800e8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e902:	e7f9      	b.n	800e8f8 <memset+0x4>

0800e904 <sqrt>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	ed2d 8b02 	vpush	{d8}
 800e90a:	ec55 4b10 	vmov	r4, r5, d0
 800e90e:	f000 f825 	bl	800e95c <__ieee754_sqrt>
 800e912:	4622      	mov	r2, r4
 800e914:	462b      	mov	r3, r5
 800e916:	4620      	mov	r0, r4
 800e918:	4629      	mov	r1, r5
 800e91a:	eeb0 8a40 	vmov.f32	s16, s0
 800e91e:	eef0 8a60 	vmov.f32	s17, s1
 800e922:	f7f2 f8b3 	bl	8000a8c <__aeabi_dcmpun>
 800e926:	b990      	cbnz	r0, 800e94e <sqrt+0x4a>
 800e928:	2200      	movs	r2, #0
 800e92a:	2300      	movs	r3, #0
 800e92c:	4620      	mov	r0, r4
 800e92e:	4629      	mov	r1, r5
 800e930:	f7f2 f884 	bl	8000a3c <__aeabi_dcmplt>
 800e934:	b158      	cbz	r0, 800e94e <sqrt+0x4a>
 800e936:	f7ff ffa5 	bl	800e884 <__errno>
 800e93a:	2321      	movs	r3, #33	; 0x21
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	2300      	movs	r3, #0
 800e942:	4610      	mov	r0, r2
 800e944:	4619      	mov	r1, r3
 800e946:	f7f1 ff31 	bl	80007ac <__aeabi_ddiv>
 800e94a:	ec41 0b18 	vmov	d8, r0, r1
 800e94e:	eeb0 0a48 	vmov.f32	s0, s16
 800e952:	eef0 0a68 	vmov.f32	s1, s17
 800e956:	ecbd 8b02 	vpop	{d8}
 800e95a:	bd38      	pop	{r3, r4, r5, pc}

0800e95c <__ieee754_sqrt>:
 800e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e960:	ec55 4b10 	vmov	r4, r5, d0
 800e964:	4e55      	ldr	r6, [pc, #340]	; (800eabc <__ieee754_sqrt+0x160>)
 800e966:	43ae      	bics	r6, r5
 800e968:	ee10 0a10 	vmov	r0, s0
 800e96c:	ee10 3a10 	vmov	r3, s0
 800e970:	462a      	mov	r2, r5
 800e972:	4629      	mov	r1, r5
 800e974:	d110      	bne.n	800e998 <__ieee754_sqrt+0x3c>
 800e976:	ee10 2a10 	vmov	r2, s0
 800e97a:	462b      	mov	r3, r5
 800e97c:	f7f1 fdec 	bl	8000558 <__aeabi_dmul>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fc30 	bl	80001ec <__adddf3>
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	ec45 4b10 	vmov	d0, r4, r5
 800e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e998:	2d00      	cmp	r5, #0
 800e99a:	dc10      	bgt.n	800e9be <__ieee754_sqrt+0x62>
 800e99c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9a0:	4330      	orrs	r0, r6
 800e9a2:	d0f5      	beq.n	800e990 <__ieee754_sqrt+0x34>
 800e9a4:	b15d      	cbz	r5, 800e9be <__ieee754_sqrt+0x62>
 800e9a6:	ee10 2a10 	vmov	r2, s0
 800e9aa:	462b      	mov	r3, r5
 800e9ac:	ee10 0a10 	vmov	r0, s0
 800e9b0:	f7f1 fc1a 	bl	80001e8 <__aeabi_dsub>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	f7f1 fef8 	bl	80007ac <__aeabi_ddiv>
 800e9bc:	e7e6      	b.n	800e98c <__ieee754_sqrt+0x30>
 800e9be:	1512      	asrs	r2, r2, #20
 800e9c0:	d074      	beq.n	800eaac <__ieee754_sqrt+0x150>
 800e9c2:	07d4      	lsls	r4, r2, #31
 800e9c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e9c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e9cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e9d0:	bf5e      	ittt	pl
 800e9d2:	0fda      	lsrpl	r2, r3, #31
 800e9d4:	005b      	lslpl	r3, r3, #1
 800e9d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e9da:	2400      	movs	r4, #0
 800e9dc:	0fda      	lsrs	r2, r3, #31
 800e9de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e9e2:	107f      	asrs	r7, r7, #1
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	2516      	movs	r5, #22
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e9ee:	1886      	adds	r6, r0, r2
 800e9f0:	428e      	cmp	r6, r1
 800e9f2:	bfde      	ittt	le
 800e9f4:	1b89      	suble	r1, r1, r6
 800e9f6:	18b0      	addle	r0, r6, r2
 800e9f8:	18a4      	addle	r4, r4, r2
 800e9fa:	0049      	lsls	r1, r1, #1
 800e9fc:	3d01      	subs	r5, #1
 800e9fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ea02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ea06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea0a:	d1f0      	bne.n	800e9ee <__ieee754_sqrt+0x92>
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	f04f 0e20 	mov.w	lr, #32
 800ea12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ea16:	4281      	cmp	r1, r0
 800ea18:	eb06 0c05 	add.w	ip, r6, r5
 800ea1c:	dc02      	bgt.n	800ea24 <__ieee754_sqrt+0xc8>
 800ea1e:	d113      	bne.n	800ea48 <__ieee754_sqrt+0xec>
 800ea20:	459c      	cmp	ip, r3
 800ea22:	d811      	bhi.n	800ea48 <__ieee754_sqrt+0xec>
 800ea24:	f1bc 0f00 	cmp.w	ip, #0
 800ea28:	eb0c 0506 	add.w	r5, ip, r6
 800ea2c:	da43      	bge.n	800eab6 <__ieee754_sqrt+0x15a>
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	db41      	blt.n	800eab6 <__ieee754_sqrt+0x15a>
 800ea32:	f100 0801 	add.w	r8, r0, #1
 800ea36:	1a09      	subs	r1, r1, r0
 800ea38:	459c      	cmp	ip, r3
 800ea3a:	bf88      	it	hi
 800ea3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ea40:	eba3 030c 	sub.w	r3, r3, ip
 800ea44:	4432      	add	r2, r6
 800ea46:	4640      	mov	r0, r8
 800ea48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ea4c:	f1be 0e01 	subs.w	lr, lr, #1
 800ea50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ea54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea5c:	d1db      	bne.n	800ea16 <__ieee754_sqrt+0xba>
 800ea5e:	430b      	orrs	r3, r1
 800ea60:	d006      	beq.n	800ea70 <__ieee754_sqrt+0x114>
 800ea62:	1c50      	adds	r0, r2, #1
 800ea64:	bf13      	iteet	ne
 800ea66:	3201      	addne	r2, #1
 800ea68:	3401      	addeq	r4, #1
 800ea6a:	4672      	moveq	r2, lr
 800ea6c:	f022 0201 	bicne.w	r2, r2, #1
 800ea70:	1063      	asrs	r3, r4, #1
 800ea72:	0852      	lsrs	r2, r2, #1
 800ea74:	07e1      	lsls	r1, r4, #31
 800ea76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ea7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ea7e:	bf48      	it	mi
 800ea80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ea84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ea88:	4614      	mov	r4, r2
 800ea8a:	e781      	b.n	800e990 <__ieee754_sqrt+0x34>
 800ea8c:	0ad9      	lsrs	r1, r3, #11
 800ea8e:	3815      	subs	r0, #21
 800ea90:	055b      	lsls	r3, r3, #21
 800ea92:	2900      	cmp	r1, #0
 800ea94:	d0fa      	beq.n	800ea8c <__ieee754_sqrt+0x130>
 800ea96:	02cd      	lsls	r5, r1, #11
 800ea98:	d50a      	bpl.n	800eab0 <__ieee754_sqrt+0x154>
 800ea9a:	f1c2 0420 	rsb	r4, r2, #32
 800ea9e:	fa23 f404 	lsr.w	r4, r3, r4
 800eaa2:	1e55      	subs	r5, r2, #1
 800eaa4:	4093      	lsls	r3, r2
 800eaa6:	4321      	orrs	r1, r4
 800eaa8:	1b42      	subs	r2, r0, r5
 800eaaa:	e78a      	b.n	800e9c2 <__ieee754_sqrt+0x66>
 800eaac:	4610      	mov	r0, r2
 800eaae:	e7f0      	b.n	800ea92 <__ieee754_sqrt+0x136>
 800eab0:	0049      	lsls	r1, r1, #1
 800eab2:	3201      	adds	r2, #1
 800eab4:	e7ef      	b.n	800ea96 <__ieee754_sqrt+0x13a>
 800eab6:	4680      	mov	r8, r0
 800eab8:	e7bd      	b.n	800ea36 <__ieee754_sqrt+0xda>
 800eaba:	bf00      	nop
 800eabc:	7ff00000 	.word	0x7ff00000

0800eac0 <_init>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr

0800eacc <_fini>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr
