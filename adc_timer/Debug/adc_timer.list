
adc_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009750  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe8  08009fe8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff0  08009ff0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a6c  20000088  0800a080  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005af4  0800a080  00025af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001520e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003142  00000000  00000000  000352c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00038408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  000397c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d7  00000000  00000000  0003aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f31  00000000  00000000  000541f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1efe  00000000  00000000  0006b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  0010d078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098d8 	.word	0x080098d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080098d8 	.word	0x080098d8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <vApplicationGetIdleTaskMemory+0x30>)
 8000eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000a4 	.word	0x200000a4
 8000ecc:	200000f8 	.word	0x200000f8

08000ed0 <rms_to_char>:
		texto[pos] = digito + '0';
		pos--;
	}
}
*/
void rms_to_char(float rms, char rms_char[]){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eda:	6038      	str	r0, [r7, #0]

	int entero = (int)rms;							// 1,648 --> entero = 1
 8000edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee4:	ee17 3a90 	vmov	r3, s15
 8000ee8:	61fb      	str	r3, [r7, #28]
	int decimal = (int)((rms - entero)*1000);		// 1,648 --> decimal = 648
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800105c <rms_to_char+0x18c>
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	61bb      	str	r3, [r7, #24]

	int decimal_3 = decimal % 10;					// 1,648 --> dec3 = 8;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4b53      	ldr	r3, [pc, #332]	; (8001060 <rms_to_char+0x190>)
 8000f12:	fb83 1302 	smull	r1, r3, r3, r2
 8000f16:	1099      	asrs	r1, r3, #2
 8000f18:	17d3      	asrs	r3, r2, #31
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
	int decimal_2 = (decimal/10) % 10;				// 1,648 --> dec2 = 4;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <rms_to_char+0x190>)
 8000f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f30:	1092      	asrs	r2, r2, #2
 8000f32:	17db      	asrs	r3, r3, #31
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <rms_to_char+0x190>)
 8000f38:	fb83 1302 	smull	r1, r3, r3, r2
 8000f3c:	1099      	asrs	r1, r3, #2
 8000f3e:	17d3      	asrs	r3, r2, #31
 8000f40:	1ac9      	subs	r1, r1, r3
 8000f42:	460b      	mov	r3, r1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	613b      	str	r3, [r7, #16]
	int decimal_1 = decimal / 100;					// 1,648 --> dec1 = 6:
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4a44      	ldr	r2, [pc, #272]	; (8001064 <rms_to_char+0x194>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1152      	asrs	r2, r2, #5
 8000f58:	17db      	asrs	r3, r3, #31
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]

	if(entero == 0) {
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d136      	bne.n	8000fd2 <rms_to_char+0x102>

		rms_char[0] = '.';
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	222e      	movs	r2, #46	; 0x2e
 8000f68:	701a      	strb	r2, [r3, #0]
		rms_char[1] = decimal_1 + '0';
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	3230      	adds	r2, #48	; 0x30
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]

		if(decimal_3 >= 5 && decimal_2 < 9) rms_char[2] = (decimal_2 + 1) + '0';
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	dd0a      	ble.n	8000f94 <rms_to_char+0xc4>
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	dc07      	bgt.n	8000f94 <rms_to_char+0xc4>
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	3231      	adds	r2, #49	; 0x31
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e054      	b.n	800103e <rms_to_char+0x16e>

		else if(decimal_3 >= 5 && decimal_3 == 9){
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	dd0d      	ble.n	8000fb6 <rms_to_char+0xe6>
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d10a      	bne.n	8000fb6 <rms_to_char+0xe6>
			rms_char[1]++;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	3201      	adds	r2, #1
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
			rms_char[2] = '0';
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	2230      	movs	r2, #48	; 0x30
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e043      	b.n	800103e <rms_to_char+0x16e>
		}

		else if(decimal_3 < 5 && decimal_3 >= 0) rms_char[2] = decimal_2 + '0';
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	dc40      	bgt.n	800103e <rms_to_char+0x16e>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db3d      	blt.n	800103e <rms_to_char+0x16e>
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	3230      	adds	r2, #48	; 0x30
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e035      	b.n	800103e <rms_to_char+0x16e>

	}
	else if(entero > 0){
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd32      	ble.n	800103e <rms_to_char+0x16e>

		rms_char[0] = entero + '0';
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	3330      	adds	r3, #48	; 0x30
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
		rms_char[1] = '.';
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	222e      	movs	r2, #46	; 0x2e
 8000fea:	701a      	strb	r2, [r3, #0]

		if(decimal_2 >= 5 && decimal_1 < 9) rms_char[2] = (decimal_1+1) + '0';
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	dd0a      	ble.n	8001008 <rms_to_char+0x138>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	dc07      	bgt.n	8001008 <rms_to_char+0x138>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	3302      	adds	r3, #2
 8001000:	3231      	adds	r2, #49	; 0x31
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e01a      	b.n	800103e <rms_to_char+0x16e>

		else if(decimal_2 >= 5 && decimal_1 == 9){
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b04      	cmp	r3, #4
 800100c:	dd0d      	ble.n	800102a <rms_to_char+0x15a>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d10a      	bne.n	800102a <rms_to_char+0x15a>
			rms_char[0]++;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	701a      	strb	r2, [r3, #0]
			rms_char[2] = '0';
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3302      	adds	r3, #2
 8001024:	2230      	movs	r2, #48	; 0x30
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e009      	b.n	800103e <rms_to_char+0x16e>
		}

		else if(decimal_2 < 5) rms_char[2] = decimal_1 + '0';
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b04      	cmp	r3, #4
 800102e:	dc06      	bgt.n	800103e <rms_to_char+0x16e>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3302      	adds	r3, #2
 8001038:	3230      	adds	r2, #48	; 0x30
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
	}
	rms_char[3] = 'V';
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3303      	adds	r3, #3
 8001042:	2256      	movs	r2, #86	; 0x56
 8001044:	701a      	strb	r2, [r3, #0]
	rms_char[4] = '\0';
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	447a0000 	.word	0x447a0000
 8001060:	66666667 	.word	0x66666667
 8001064:	51eb851f 	.word	0x51eb851f

08001068 <freq_to_char>:

void freq_to_char(uint32_t Frecuencia, uint8_t *pData){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]

	Frecuencia = (uint32_t)(1.024 * ((float) Frecuencia) -2.1196);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f7ff fa12 	bl	80004a8 <__aeabi_f2d>
 8001084:	a373      	add	r3, pc, #460	; (adr r3, 8001254 <freq_to_char+0x1ec>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fa65 	bl	8000558 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a371      	add	r3, pc, #452	; (adr r3, 800125c <freq_to_char+0x1f4>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f8a4 	bl	80001e8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd06 	bl	8000ab8 <__aeabi_d2uiz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	607b      	str	r3, [r7, #4]

	// Frecuencias entre 10K y 100K
	if(Frecuencia >= 10000 && Frecuencia < 100000){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d946      	bls.n	8001148 <freq_to_char+0xe0>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a60      	ldr	r2, [pc, #384]	; (8001240 <freq_to_char+0x1d8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d842      	bhi.n	8001148 <freq_to_char+0xe0>

		pData[0] = (uint8_t)((Frecuencia/10000) + '0'); 			// 15300/10000  = 1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a5f      	ldr	r2, [pc, #380]	; (8001244 <freq_to_char+0x1dc>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0b5b      	lsrs	r3, r3, #13
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3330      	adds	r3, #48	; 0x30
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
		Frecuencia %=10000;                             			// 15300 % 10000 = 5300
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a5a      	ldr	r2, [pc, #360]	; (8001244 <freq_to_char+0x1dc>)
 80010da:	fba2 1203 	umull	r1, r2, r2, r3
 80010de:	0b52      	lsrs	r2, r2, #13
 80010e0:	f242 7110 	movw	r1, #10000	; 0x2710
 80010e4:	fb01 f202 	mul.w	r2, r1, r2
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	607b      	str	r3, [r7, #4]
		pData[1] = (uint8_t)((Frecuencia/1000) + '0');  			// 5300 / 1000 = 5
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a56      	ldr	r2, [pc, #344]	; (8001248 <freq_to_char+0x1e0>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	3230      	adds	r2, #48	; 0x30
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]
		Frecuencia %= 1000;                             			// 5300 % 1000 = 300
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a50      	ldr	r2, [pc, #320]	; (8001248 <freq_to_char+0x1e0>)
 8001106:	fba2 1203 	umull	r1, r2, r2, r3
 800110a:	0992      	lsrs	r2, r2, #6
 800110c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001110:	fb01 f202 	mul.w	r2, r1, r2
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	607b      	str	r3, [r7, #4]
		pData[2] = ',';
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	222c      	movs	r2, #44	; 0x2c
 800111e:	701a      	strb	r2, [r3, #0]
		pData[3] = (uint8_t)((Frecuencia/100) + '0');   			// 300 / 100 = 3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <freq_to_char+0x1e4>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	b2da      	uxtb	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3303      	adds	r3, #3
 8001130:	3230      	adds	r2, #48	; 0x30
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]
		pData[4] = 'K';
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3304      	adds	r3, #4
 800113a:	224b      	movs	r2, #75	; 0x4b
 800113c:	701a      	strb	r2, [r3, #0]
		pData[5] = 'H';
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3305      	adds	r3, #5
 8001142:	2248      	movs	r2, #72	; 0x48
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e072      	b.n	800122e <freq_to_char+0x1c6>
	}

	// Frecuencias entre 0 y 9999
	else if(Frecuencia > 0){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06f      	beq.n	800122e <freq_to_char+0x1c6>

		if(Frecuencia <1000) pData[0] = ' ';
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001154:	d203      	bcs.n	800115e <freq_to_char+0xf6>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2220      	movs	r2, #32
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e009      	b.n	8001172 <freq_to_char+0x10a>
		else pData[0] = (uint8_t)((Frecuencia/1000) + '0'); 		// 9375 / 1000 = 9
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a39      	ldr	r2, [pc, #228]	; (8001248 <freq_to_char+0x1e0>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	099b      	lsrs	r3, r3, #6
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3330      	adds	r3, #48	; 0x30
 800116c:	b2da      	uxtb	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	701a      	strb	r2, [r3, #0]

		Frecuencia %= 1000;                          				// 9375 % 1000 = 375
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a34      	ldr	r2, [pc, #208]	; (8001248 <freq_to_char+0x1e0>)
 8001176:	fba2 1203 	umull	r1, r2, r2, r3
 800117a:	0992      	lsrs	r2, r2, #6
 800117c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001180:	fb01 f202 	mul.w	r2, r1, r2
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	607b      	str	r3, [r7, #4]
		if(Frecuencia < 100 && pData[0] == ' ') pData[1] = ' ';
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b63      	cmp	r3, #99	; 0x63
 800118c:	d808      	bhi.n	80011a0 <freq_to_char+0x138>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b20      	cmp	r3, #32
 8001194:	d104      	bne.n	80011a0 <freq_to_char+0x138>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	2220      	movs	r2, #32
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e00a      	b.n	80011b6 <freq_to_char+0x14e>
		else pData[1] = (uint8_t)((Frecuencia/100) + '0');  		// 375 / 100 = 3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <freq_to_char+0x1e4>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	3230      	adds	r2, #48	; 0x30
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

		Frecuencia %= 100;                             				// 375 % 100 = 75
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a24      	ldr	r2, [pc, #144]	; (800124c <freq_to_char+0x1e4>)
 80011ba:	fba2 1203 	umull	r1, r2, r2, r3
 80011be:	0952      	lsrs	r2, r2, #5
 80011c0:	2164      	movs	r1, #100	; 0x64
 80011c2:	fb01 f202 	mul.w	r2, r1, r2
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	607b      	str	r3, [r7, #4]
		if(Frecuencia < 10 && pData[1] == ' ') pData[2] = ' ';
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d809      	bhi.n	80011e4 <freq_to_char+0x17c>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d104      	bne.n	80011e4 <freq_to_char+0x17c>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	2220      	movs	r2, #32
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e00a      	b.n	80011fa <freq_to_char+0x192>
		else pData[2] = (uint8_t)((Frecuencia/10) + '0');   		// 75 / 10 = 7
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <freq_to_char+0x1e8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	3302      	adds	r3, #2
 80011f4:	3230      	adds	r2, #48	; 0x30
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

		Frecuencia %= 10;                              				// 75 % 10 = 5
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <freq_to_char+0x1e8>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	08d9      	lsrs	r1, r3, #3
 8001204:	460b      	mov	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	607b      	str	r3, [r7, #4]
		pData[3] = (uint8_t)(Frecuencia + '0');        				// 5
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3303      	adds	r3, #3
 8001218:	3230      	adds	r2, #48	; 0x30
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

		pData[4] = 'H';
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3304      	adds	r3, #4
 8001222:	2248      	movs	r2, #72	; 0x48
 8001224:	701a      	strb	r2, [r3, #0]
		pData[5] = 'z';
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3305      	adds	r3, #5
 800122a:	227a      	movs	r2, #122	; 0x7a
 800122c:	701a      	strb	r2, [r3, #0]
	}

	pData[6] = '\0';
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3306      	adds	r3, #6
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0001869f 	.word	0x0001869f
 8001244:	d1b71759 	.word	0xd1b71759
 8001248:	10624dd3 	.word	0x10624dd3
 800124c:	51eb851f 	.word	0x51eb851f
 8001250:	cccccccd 	.word	0xcccccccd
 8001254:	d2f1a9fc 	.word	0xd2f1a9fc
 8001258:	3ff0624d 	.word	0x3ff0624d
 800125c:	d844d014 	.word	0xd844d014
 8001260:	4000f4f0 	.word	0x4000f4f0

08001264 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a05 	vstr	s0, [r7, #20]
 800126e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001272:	ed87 1a03 	vstr	s2, [r7, #12]
 8001276:	edc7 1a02 	vstr	s3, [r7, #8]
 800127a:	ed87 2a01 	vstr	s4, [r7, #4]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800127e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128a:	edd7 6a01 	vldr	s13, [r7, #4]
 800128e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001292:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001296:	ee67 6a27 	vmul.f32	s13, s14, s15
 800129a:	ed97 7a03 	vldr	s14, [r7, #12]
 800129e:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80012b2:	eeb0 0a67 	vmov.f32	s0, s15
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <display_plot_escala>:

void display_plot_escala(int contador){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	switch(contador){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	f200 815c 	bhi.w	8001588 <display_plot_escala+0x2c8>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <display_plot_escala+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080014e5 	.word	0x080014e5
 80012dc:	08001537 	.word	0x08001537
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800134b 	.word	0x0800134b
 80012e8:	0800139d 	.word	0x0800139d
 80012ec:	080013ef 	.word	0x080013ef
 80012f0:	08001441 	.word	0x08001441
 80012f4:	08001493 	.word	0x08001493

		case AMP_1://A2
			ssd1306_SetCursor(115, 55);
 80012f8:	2137      	movs	r1, #55	; 0x37
 80012fa:	2073      	movs	r0, #115	; 0x73
 80012fc:	f001 fdac 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 8001300:	4ab8      	ldr	r2, [pc, #736]	; (80015e4 <display_plot_escala+0x324>)
 8001302:	2301      	movs	r3, #1
 8001304:	ca06      	ldmia	r2, {r1, r2}
 8001306:	48b8      	ldr	r0, [pc, #736]	; (80015e8 <display_plot_escala+0x328>)
 8001308:	f001 fd80 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800130c:	2109      	movs	r1, #9
 800130e:	2006      	movs	r0, #6
 8001310:	f001 fda2 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 8001314:	4ab3      	ldr	r2, [pc, #716]	; (80015e4 <display_plot_escala+0x324>)
 8001316:	2301      	movs	r3, #1
 8001318:	ca06      	ldmia	r2, {r1, r2}
 800131a:	48b4      	ldr	r0, [pc, #720]	; (80015ec <display_plot_escala+0x32c>)
 800131c:	f001 fd76 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001320:	2121      	movs	r1, #33	; 0x21
 8001322:	2011      	movs	r0, #17
 8001324:	f001 fd98 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001328:	4aae      	ldr	r2, [pc, #696]	; (80015e4 <display_plot_escala+0x324>)
 800132a:	2301      	movs	r3, #1
 800132c:	ca06      	ldmia	r2, {r1, r2}
 800132e:	48b0      	ldr	r0, [pc, #704]	; (80015f0 <display_plot_escala+0x330>)
 8001330:	f001 fd6c 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001334:	2138      	movs	r1, #56	; 0x38
 8001336:	2000      	movs	r0, #0
 8001338:	f001 fd8e 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 800133c:	4aa9      	ldr	r2, [pc, #676]	; (80015e4 <display_plot_escala+0x324>)
 800133e:	2301      	movs	r3, #1
 8001340:	ca06      	ldmia	r2, {r1, r2}
 8001342:	48ac      	ldr	r0, [pc, #688]	; (80015f4 <display_plot_escala+0x334>)
 8001344:	f001 fd62 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001348:	e147      	b.n	80015da <display_plot_escala+0x31a>

		case AMP_3://A3
			ssd1306_SetCursor(115, 55);
 800134a:	2137      	movs	r1, #55	; 0x37
 800134c:	2073      	movs	r0, #115	; 0x73
 800134e:	f001 fd83 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x3", Font_6x8, White);
 8001352:	4aa4      	ldr	r2, [pc, #656]	; (80015e4 <display_plot_escala+0x324>)
 8001354:	2301      	movs	r3, #1
 8001356:	ca06      	ldmia	r2, {r1, r2}
 8001358:	48a7      	ldr	r0, [pc, #668]	; (80015f8 <display_plot_escala+0x338>)
 800135a:	f001 fd57 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800135e:	2109      	movs	r1, #9
 8001360:	2006      	movs	r0, #6
 8001362:	f001 fd79 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0,6", Font_6x8, White);
 8001366:	4a9f      	ldr	r2, [pc, #636]	; (80015e4 <display_plot_escala+0x324>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	48a3      	ldr	r0, [pc, #652]	; (80015fc <display_plot_escala+0x33c>)
 800136e:	f001 fd4d 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001372:	2121      	movs	r1, #33	; 0x21
 8001374:	2011      	movs	r0, #17
 8001376:	f001 fd6f 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800137a:	4a9a      	ldr	r2, [pc, #616]	; (80015e4 <display_plot_escala+0x324>)
 800137c:	2301      	movs	r3, #1
 800137e:	ca06      	ldmia	r2, {r1, r2}
 8001380:	489b      	ldr	r0, [pc, #620]	; (80015f0 <display_plot_escala+0x330>)
 8001382:	f001 fd43 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001386:	2138      	movs	r1, #56	; 0x38
 8001388:	2000      	movs	r0, #0
 800138a:	f001 fd65 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,6", Font_6x8, White);
 800138e:	4a95      	ldr	r2, [pc, #596]	; (80015e4 <display_plot_escala+0x324>)
 8001390:	2301      	movs	r3, #1
 8001392:	ca06      	ldmia	r2, {r1, r2}
 8001394:	489a      	ldr	r0, [pc, #616]	; (8001600 <display_plot_escala+0x340>)
 8001396:	f001 fd39 	bl	8002e0c <ssd1306_WriteString>
		break;
 800139a:	e11e      	b.n	80015da <display_plot_escala+0x31a>

		case AMP_5://A4
			ssd1306_SetCursor(115, 55);
 800139c:	2137      	movs	r1, #55	; 0x37
 800139e:	2073      	movs	r0, #115	; 0x73
 80013a0:	f001 fd5a 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x5", Font_6x8, White);
 80013a4:	4a8f      	ldr	r2, [pc, #572]	; (80015e4 <display_plot_escala+0x324>)
 80013a6:	2301      	movs	r3, #1
 80013a8:	ca06      	ldmia	r2, {r1, r2}
 80013aa:	4896      	ldr	r0, [pc, #600]	; (8001604 <display_plot_escala+0x344>)
 80013ac:	f001 fd2e 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80013b0:	2109      	movs	r1, #9
 80013b2:	2006      	movs	r0, #6
 80013b4:	f001 fd50 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0,3", Font_6x8, White);
 80013b8:	4a8a      	ldr	r2, [pc, #552]	; (80015e4 <display_plot_escala+0x324>)
 80013ba:	2301      	movs	r3, #1
 80013bc:	ca06      	ldmia	r2, {r1, r2}
 80013be:	4892      	ldr	r0, [pc, #584]	; (8001608 <display_plot_escala+0x348>)
 80013c0:	f001 fd24 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80013c4:	2121      	movs	r1, #33	; 0x21
 80013c6:	2011      	movs	r0, #17
 80013c8:	f001 fd46 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80013cc:	4a85      	ldr	r2, [pc, #532]	; (80015e4 <display_plot_escala+0x324>)
 80013ce:	2301      	movs	r3, #1
 80013d0:	ca06      	ldmia	r2, {r1, r2}
 80013d2:	4887      	ldr	r0, [pc, #540]	; (80015f0 <display_plot_escala+0x330>)
 80013d4:	f001 fd1a 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80013d8:	2138      	movs	r1, #56	; 0x38
 80013da:	2000      	movs	r0, #0
 80013dc:	f001 fd3c 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,3", Font_6x8, White);
 80013e0:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <display_plot_escala+0x324>)
 80013e2:	2301      	movs	r3, #1
 80013e4:	ca06      	ldmia	r2, {r1, r2}
 80013e6:	4889      	ldr	r0, [pc, #548]	; (800160c <display_plot_escala+0x34c>)
 80013e8:	f001 fd10 	bl	8002e0c <ssd1306_WriteString>
		break;
 80013ec:	e0f5      	b.n	80015da <display_plot_escala+0x31a>

		case AMP_10://A5
			ssd1306_SetCursor(109, 55);
 80013ee:	2137      	movs	r1, #55	; 0x37
 80013f0:	206d      	movs	r0, #109	; 0x6d
 80013f2:	f001 fd31 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x10", Font_6x8, White);
 80013f6:	4a7b      	ldr	r2, [pc, #492]	; (80015e4 <display_plot_escala+0x324>)
 80013f8:	2301      	movs	r3, #1
 80013fa:	ca06      	ldmia	r2, {r1, r2}
 80013fc:	4884      	ldr	r0, [pc, #528]	; (8001610 <display_plot_escala+0x350>)
 80013fe:	f001 fd05 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8001402:	2109      	movs	r1, #9
 8001404:	2006      	movs	r0, #6
 8001406:	f001 fd27 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0,1", Font_6x8, White);
 800140a:	4a76      	ldr	r2, [pc, #472]	; (80015e4 <display_plot_escala+0x324>)
 800140c:	2301      	movs	r3, #1
 800140e:	ca06      	ldmia	r2, {r1, r2}
 8001410:	4880      	ldr	r0, [pc, #512]	; (8001614 <display_plot_escala+0x354>)
 8001412:	f001 fcfb 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001416:	2121      	movs	r1, #33	; 0x21
 8001418:	2011      	movs	r0, #17
 800141a:	f001 fd1d 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 800141e:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <display_plot_escala+0x324>)
 8001420:	2301      	movs	r3, #1
 8001422:	ca06      	ldmia	r2, {r1, r2}
 8001424:	4872      	ldr	r0, [pc, #456]	; (80015f0 <display_plot_escala+0x330>)
 8001426:	f001 fcf1 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800142a:	2138      	movs	r1, #56	; 0x38
 800142c:	2000      	movs	r0, #0
 800142e:	f001 fd13 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-0,1", Font_6x8, White);
 8001432:	4a6c      	ldr	r2, [pc, #432]	; (80015e4 <display_plot_escala+0x324>)
 8001434:	2301      	movs	r3, #1
 8001436:	ca06      	ldmia	r2, {r1, r2}
 8001438:	4877      	ldr	r0, [pc, #476]	; (8001618 <display_plot_escala+0x358>)
 800143a:	f001 fce7 	bl	8002e0c <ssd1306_WriteString>
		break;
 800143e:	e0cc      	b.n	80015da <display_plot_escala+0x31a>

		case AMP_31://A6
			ssd1306_SetCursor(109, 55);
 8001440:	2137      	movs	r1, #55	; 0x37
 8001442:	206d      	movs	r0, #109	; 0x6d
 8001444:	f001 fd08 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x31", Font_6x8, White);
 8001448:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <display_plot_escala+0x324>)
 800144a:	2301      	movs	r3, #1
 800144c:	ca06      	ldmia	r2, {r1, r2}
 800144e:	4873      	ldr	r0, [pc, #460]	; (800161c <display_plot_escala+0x35c>)
 8001450:	f001 fcdc 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 8001454:	2109      	movs	r1, #9
 8001456:	2006      	movs	r0, #6
 8001458:	f001 fcfe 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("52m", Font_6x8, White);
 800145c:	4a61      	ldr	r2, [pc, #388]	; (80015e4 <display_plot_escala+0x324>)
 800145e:	2301      	movs	r3, #1
 8001460:	ca06      	ldmia	r2, {r1, r2}
 8001462:	486f      	ldr	r0, [pc, #444]	; (8001620 <display_plot_escala+0x360>)
 8001464:	f001 fcd2 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 8001468:	2121      	movs	r1, #33	; 0x21
 800146a:	2011      	movs	r0, #17
 800146c:	f001 fcf4 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001470:	4a5c      	ldr	r2, [pc, #368]	; (80015e4 <display_plot_escala+0x324>)
 8001472:	2301      	movs	r3, #1
 8001474:	ca06      	ldmia	r2, {r1, r2}
 8001476:	485e      	ldr	r0, [pc, #376]	; (80015f0 <display_plot_escala+0x330>)
 8001478:	f001 fcc8 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 800147c:	2138      	movs	r1, #56	; 0x38
 800147e:	2000      	movs	r0, #0
 8001480:	f001 fcea 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-52m", Font_6x8, White);
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <display_plot_escala+0x324>)
 8001486:	2301      	movs	r3, #1
 8001488:	ca06      	ldmia	r2, {r1, r2}
 800148a:	4866      	ldr	r0, [pc, #408]	; (8001624 <display_plot_escala+0x364>)
 800148c:	f001 fcbe 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001490:	e0a3      	b.n	80015da <display_plot_escala+0x31a>

		case AMP_50://A7
			ssd1306_SetCursor(109, 55);
 8001492:	2137      	movs	r1, #55	; 0x37
 8001494:	206d      	movs	r0, #109	; 0x6d
 8001496:	f001 fcdf 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x50", Font_6x8, White);
 800149a:	4a52      	ldr	r2, [pc, #328]	; (80015e4 <display_plot_escala+0x324>)
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	4861      	ldr	r0, [pc, #388]	; (8001628 <display_plot_escala+0x368>)
 80014a2:	f001 fcb3 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 80014a6:	2109      	movs	r1, #9
 80014a8:	2006      	movs	r0, #6
 80014aa:	f001 fcd5 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("33m", Font_6x8, White);
 80014ae:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <display_plot_escala+0x324>)
 80014b0:	2301      	movs	r3, #1
 80014b2:	ca06      	ldmia	r2, {r1, r2}
 80014b4:	485d      	ldr	r0, [pc, #372]	; (800162c <display_plot_escala+0x36c>)
 80014b6:	f001 fca9 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80014ba:	2121      	movs	r1, #33	; 0x21
 80014bc:	2011      	movs	r0, #17
 80014be:	f001 fccb 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80014c2:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <display_plot_escala+0x324>)
 80014c4:	2301      	movs	r3, #1
 80014c6:	ca06      	ldmia	r2, {r1, r2}
 80014c8:	4849      	ldr	r0, [pc, #292]	; (80015f0 <display_plot_escala+0x330>)
 80014ca:	f001 fc9f 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80014ce:	2138      	movs	r1, #56	; 0x38
 80014d0:	2000      	movs	r0, #0
 80014d2:	f001 fcc1 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-33m", Font_6x8, White);
 80014d6:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <display_plot_escala+0x324>)
 80014d8:	2301      	movs	r3, #1
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	4854      	ldr	r0, [pc, #336]	; (8001630 <display_plot_escala+0x370>)
 80014de:	f001 fc95 	bl	8002e0c <ssd1306_WriteString>
		break;
 80014e2:	e07a      	b.n	80015da <display_plot_escala+0x31a>

		case ATEN_03://A0
			ssd1306_SetCursor(109, 55);
 80014e4:	2137      	movs	r1, #55	; 0x37
 80014e6:	206d      	movs	r0, #109	; 0x6d
 80014e8:	f001 fcb6 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x.3", Font_6x8, White);
 80014ec:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <display_plot_escala+0x324>)
 80014ee:	2301      	movs	r3, #1
 80014f0:	ca06      	ldmia	r2, {r1, r2}
 80014f2:	4850      	ldr	r0, [pc, #320]	; (8001634 <display_plot_escala+0x374>)
 80014f4:	f001 fc8a 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 9);
 80014f8:	2109      	movs	r1, #9
 80014fa:	2011      	movs	r0, #17
 80014fc:	f001 fcac 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_6x8, White);
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <display_plot_escala+0x324>)
 8001502:	2301      	movs	r3, #1
 8001504:	ca06      	ldmia	r2, {r1, r2}
 8001506:	484c      	ldr	r0, [pc, #304]	; (8001638 <display_plot_escala+0x378>)
 8001508:	f001 fc80 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800150c:	2121      	movs	r1, #33	; 0x21
 800150e:	2011      	movs	r0, #17
 8001510:	f001 fca2 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <display_plot_escala+0x324>)
 8001516:	2301      	movs	r3, #1
 8001518:	ca06      	ldmia	r2, {r1, r2}
 800151a:	4835      	ldr	r0, [pc, #212]	; (80015f0 <display_plot_escala+0x330>)
 800151c:	f001 fc76 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(11, 56);
 8001520:	2138      	movs	r1, #56	; 0x38
 8001522:	200b      	movs	r0, #11
 8001524:	f001 fc98 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-6", Font_6x8, White);
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <display_plot_escala+0x324>)
 800152a:	2301      	movs	r3, #1
 800152c:	ca06      	ldmia	r2, {r1, r2}
 800152e:	4843      	ldr	r0, [pc, #268]	; (800163c <display_plot_escala+0x37c>)
 8001530:	f001 fc6c 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001534:	e051      	b.n	80015da <display_plot_escala+0x31a>

		case ATEN_05://A1
			ssd1306_SetCursor(109, 55);
 8001536:	2137      	movs	r1, #55	; 0x37
 8001538:	206d      	movs	r0, #109	; 0x6d
 800153a:	f001 fc8d 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x.5", Font_6x8, White);
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <display_plot_escala+0x324>)
 8001540:	2301      	movs	r3, #1
 8001542:	ca06      	ldmia	r2, {r1, r2}
 8001544:	483e      	ldr	r0, [pc, #248]	; (8001640 <display_plot_escala+0x380>)
 8001546:	f001 fc61 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800154a:	2109      	movs	r1, #9
 800154c:	2006      	movs	r0, #6
 800154e:	f001 fc83 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("3,3", Font_6x8, White);
 8001552:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <display_plot_escala+0x324>)
 8001554:	2301      	movs	r3, #1
 8001556:	ca06      	ldmia	r2, {r1, r2}
 8001558:	483a      	ldr	r0, [pc, #232]	; (8001644 <display_plot_escala+0x384>)
 800155a:	f001 fc57 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 800155e:	2121      	movs	r1, #33	; 0x21
 8001560:	2011      	movs	r0, #17
 8001562:	f001 fc79 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 8001566:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <display_plot_escala+0x324>)
 8001568:	2301      	movs	r3, #1
 800156a:	ca06      	ldmia	r2, {r1, r2}
 800156c:	4820      	ldr	r0, [pc, #128]	; (80015f0 <display_plot_escala+0x330>)
 800156e:	f001 fc4d 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 8001572:	2138      	movs	r1, #56	; 0x38
 8001574:	2000      	movs	r0, #0
 8001576:	f001 fc6f 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-3,3", Font_6x8, White);
 800157a:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <display_plot_escala+0x324>)
 800157c:	2301      	movs	r3, #1
 800157e:	ca06      	ldmia	r2, {r1, r2}
 8001580:	4831      	ldr	r0, [pc, #196]	; (8001648 <display_plot_escala+0x388>)
 8001582:	f001 fc43 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001586:	e028      	b.n	80015da <display_plot_escala+0x31a>

		default://A2
			ssd1306_SetCursor(115, 55);
 8001588:	2137      	movs	r1, #55	; 0x37
 800158a:	2073      	movs	r0, #115	; 0x73
 800158c:	f001 fc64 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("x1", Font_6x8, White);
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <display_plot_escala+0x324>)
 8001592:	2301      	movs	r3, #1
 8001594:	ca06      	ldmia	r2, {r1, r2}
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <display_plot_escala+0x328>)
 8001598:	f001 fc38 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(6, 9);
 800159c:	2109      	movs	r1, #9
 800159e:	2006      	movs	r0, #6
 80015a0:	f001 fc5a 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("1,6", Font_6x8, White);
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <display_plot_escala+0x324>)
 80015a6:	2301      	movs	r3, #1
 80015a8:	ca06      	ldmia	r2, {r1, r2}
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <display_plot_escala+0x32c>)
 80015ac:	f001 fc2e 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(17, 33);
 80015b0:	2121      	movs	r1, #33	; 0x21
 80015b2:	2011      	movs	r0, #17
 80015b4:	f001 fc50 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_6x8, White);
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <display_plot_escala+0x324>)
 80015ba:	2301      	movs	r3, #1
 80015bc:	ca06      	ldmia	r2, {r1, r2}
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <display_plot_escala+0x330>)
 80015c0:	f001 fc24 	bl	8002e0c <ssd1306_WriteString>
			ssd1306_SetCursor(0, 56);
 80015c4:	2138      	movs	r1, #56	; 0x38
 80015c6:	2000      	movs	r0, #0
 80015c8:	f001 fc46 	bl	8002e58 <ssd1306_SetCursor>
			ssd1306_WriteString("-1,6", Font_6x8, White);
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <display_plot_escala+0x324>)
 80015ce:	2301      	movs	r3, #1
 80015d0:	ca06      	ldmia	r2, {r1, r2}
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <display_plot_escala+0x334>)
 80015d4:	f001 fc1a 	bl	8002e0c <ssd1306_WriteString>
		break;
 80015d8:	bf00      	nop
	}
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	080098f0 	.word	0x080098f0
 80015ec:	080098f4 	.word	0x080098f4
 80015f0:	080098f8 	.word	0x080098f8
 80015f4:	080098fc 	.word	0x080098fc
 80015f8:	08009904 	.word	0x08009904
 80015fc:	08009908 	.word	0x08009908
 8001600:	0800990c 	.word	0x0800990c
 8001604:	08009914 	.word	0x08009914
 8001608:	08009918 	.word	0x08009918
 800160c:	0800991c 	.word	0x0800991c
 8001610:	08009924 	.word	0x08009924
 8001614:	08009928 	.word	0x08009928
 8001618:	0800992c 	.word	0x0800992c
 800161c:	08009934 	.word	0x08009934
 8001620:	08009938 	.word	0x08009938
 8001624:	0800993c 	.word	0x0800993c
 8001628:	08009944 	.word	0x08009944
 800162c:	08009948 	.word	0x08009948
 8001630:	0800994c 	.word	0x0800994c
 8001634:	08009954 	.word	0x08009954
 8001638:	08009958 	.word	0x08009958
 800163c:	0800995c 	.word	0x0800995c
 8001640:	08009960 	.word	0x08009960
 8001644:	08009964 	.word	0x08009964
 8001648:	08009968 	.word	0x08009968

0800164c <display_plot_grilla>:

void display_plot_grilla(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8001652:	2000      	movs	r0, #0
 8001654:	f001 fab2 	bl	8002bbc <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f001 fbfc 	bl	8002e58 <ssd1306_SetCursor>

	ssd1306_VLine(26, 9, 55, White);   // left vertical line
 8001660:	2301      	movs	r3, #1
 8001662:	2237      	movs	r2, #55	; 0x37
 8001664:	2109      	movs	r1, #9
 8001666:	201a      	movs	r0, #26
 8001668:	f001 fc7a 	bl	8002f60 <ssd1306_VLine>
	ssd1306_VLine(127, 9, 3, White);   // right vertical line up
 800166c:	2301      	movs	r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	2109      	movs	r1, #9
 8001672:	207f      	movs	r0, #127	; 0x7f
 8001674:	f001 fc74 	bl	8002f60 <ssd1306_VLine>
	ssd1306_VLine(127, 60, 3, White);  // right vertical line bottom
 8001678:	2301      	movs	r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	213c      	movs	r1, #60	; 0x3c
 800167e:	207f      	movs	r0, #127	; 0x7f
 8001680:	f001 fc6e 	bl	8002f60 <ssd1306_VLine>

	ssd1306_HLine(24, 9, 7, White);    // Max value auxiliary mark
 8001684:	2301      	movs	r3, #1
 8001686:	2207      	movs	r2, #7
 8001688:	2109      	movs	r1, #9
 800168a:	2018      	movs	r0, #24
 800168c:	f001 fc87 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(24, 36, 2, White);
 8001690:	2301      	movs	r3, #1
 8001692:	2202      	movs	r2, #2
 8001694:	2124      	movs	r1, #36	; 0x24
 8001696:	2018      	movs	r0, #24
 8001698:	f001 fc81 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(24, 63, 7, White);
 800169c:	2301      	movs	r3, #1
 800169e:	2207      	movs	r2, #7
 80016a0:	213f      	movs	r1, #63	; 0x3f
 80016a2:	2018      	movs	r0, #24
 80016a4:	f001 fc7b 	bl	8002f9e <ssd1306_HLine>

	ssd1306_HLine(51, 9, 3, White);    // Max value auxiliary mark
 80016a8:	2301      	movs	r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	2109      	movs	r1, #9
 80016ae:	2033      	movs	r0, #51	; 0x33
 80016b0:	f001 fc75 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(51, 63, 3, White);
 80016b4:	2301      	movs	r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	213f      	movs	r1, #63	; 0x3f
 80016ba:	2033      	movs	r0, #51	; 0x33
 80016bc:	f001 fc6f 	bl	8002f9e <ssd1306_HLine>

	ssd1306_HLine(76, 9, 3, White);    // Max value auxiliary mark
 80016c0:	2301      	movs	r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	2109      	movs	r1, #9
 80016c6:	204c      	movs	r0, #76	; 0x4c
 80016c8:	f001 fc69 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(76, 63, 3, White);
 80016cc:	2301      	movs	r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	213f      	movs	r1, #63	; 0x3f
 80016d2:	204c      	movs	r0, #76	; 0x4c
 80016d4:	f001 fc63 	bl	8002f9e <ssd1306_HLine>

	ssd1306_HLine(101, 9, 3, White);   // Max value auxiliary mark
 80016d8:	2301      	movs	r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	2109      	movs	r1, #9
 80016de:	2065      	movs	r0, #101	; 0x65
 80016e0:	f001 fc5d 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(101, 63, 3, White);
 80016e4:	2301      	movs	r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	213f      	movs	r1, #63	; 0x3f
 80016ea:	2065      	movs	r0, #101	; 0x65
 80016ec:	f001 fc57 	bl	8002f9e <ssd1306_HLine>

	ssd1306_HLine(123, 9, 5, White);   // right side Max value auxiliary mark
 80016f0:	2301      	movs	r3, #1
 80016f2:	2205      	movs	r2, #5
 80016f4:	2109      	movs	r1, #9
 80016f6:	207b      	movs	r0, #123	; 0x7b
 80016f8:	f001 fc51 	bl	8002f9e <ssd1306_HLine>
	ssd1306_HLine(123, 63, 5, White);
 80016fc:	2301      	movs	r3, #1
 80016fe:	2205      	movs	r2, #5
 8001700:	213f      	movs	r1, #63	; 0x3f
 8001702:	207b      	movs	r0, #123	; 0x7b
 8001704:	f001 fc4b 	bl	8002f9e <ssd1306_HLine>

	for (int x = 26; x <= 128; x += 5){
 8001708:	231a      	movs	r3, #26
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e009      	b.n	8001722 <display_plot_grilla+0xd6>
	  ssd1306_HLine(x, 36, 2, White);  // Draw the center line (horizontal line) with a dotted line
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	b2d8      	uxtb	r0, r3
 8001712:	2301      	movs	r3, #1
 8001714:	2202      	movs	r2, #2
 8001716:	2124      	movs	r1, #36	; 0x24
 8001718:	f001 fc41 	bl	8002f9e <ssd1306_HLine>
	for (int x = 26; x <= 128; x += 5){
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3305      	adds	r3, #5
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	ddf2      	ble.n	800170e <display_plot_grilla+0xc2>
	}

	for (int x = (127 - 25); x > 30; x -= 25){
 8001728:	2366      	movs	r3, #102	; 0x66
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	e013      	b.n	8001756 <display_plot_grilla+0x10a>
		for (int y = 10; y < 63; y += 5){
 800172e:	230a      	movs	r3, #10
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	e00a      	b.n	800174a <display_plot_grilla+0xfe>
			ssd1306_VLine(x, y, 2, White); // Draw 3 vertical lines with dotted lines
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	b2d8      	uxtb	r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b2d9      	uxtb	r1, r3
 800173c:	2301      	movs	r3, #1
 800173e:	2202      	movs	r2, #2
 8001740:	f001 fc0e 	bl	8002f60 <ssd1306_VLine>
		for (int y = 10; y < 63; y += 5){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3305      	adds	r3, #5
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b3e      	cmp	r3, #62	; 0x3e
 800174e:	ddf1      	ble.n	8001734 <display_plot_grilla+0xe8>
	for (int x = (127 - 25); x > 30; x -= 25){
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3b19      	subs	r3, #25
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b1e      	cmp	r3, #30
 800175a:	dce8      	bgt.n	800172e <display_plot_grilla+0xe2>
	}

	//ssd1306_SetCursor(14, 0);
	//ssd1306_WriteString("XX.XKH rmsX.XV XXuS", Font_6x8, White);

}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <display_plot_trigger>:

void display_plot_trigger(int trigger){
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

	int trigger_actual = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]

	trigger_actual = map(trigger, 0, 4095, 63, 9);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8001782:	eddf 1a17 	vldr	s3, [pc, #92]	; 80017e0 <display_plot_trigger+0x78>
 8001786:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80017e4 <display_plot_trigger+0x7c>
 800178a:	eddf 0a17 	vldr	s1, [pc, #92]	; 80017e8 <display_plot_trigger+0x80>
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f7ff fd67 	bl	8001264 <map>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
 800179a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179e:	ee17 3a90 	vmov	r3, s15
 80017a2:	60fb      	str	r3, [r7, #12]

	// dibujo el triangulo
	ssd1306_VLine(127, trigger_actual-2, 4, White);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3b02      	subs	r3, #2
 80017aa:	b2d9      	uxtb	r1, r3
 80017ac:	2301      	movs	r3, #1
 80017ae:	2204      	movs	r2, #4
 80017b0:	207f      	movs	r0, #127	; 0x7f
 80017b2:	f001 fbd5 	bl	8002f60 <ssd1306_VLine>
	ssd1306_VLine(126, trigger_actual-1, 2, White);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b2d9      	uxtb	r1, r3
 80017be:	2301      	movs	r3, #1
 80017c0:	2202      	movs	r2, #2
 80017c2:	207e      	movs	r0, #126	; 0x7e
 80017c4:	f001 fbcc 	bl	8002f60 <ssd1306_VLine>
	ssd1306_DrawPixel(125, trigger_actual, White);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	207d      	movs	r0, #125	; 0x7d
 80017d2:	f001 fa3f 	bl	8002c54 <ssd1306_DrawPixel>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	427c0000 	.word	0x427c0000
 80017e4:	457ff000 	.word	0x457ff000
 80017e8:	00000000 	.word	0x00000000

080017ec <display_plot_signal>:

void display_plot_signal(void){
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08b      	sub	sp, #44	; 0x2c
 80017f0:	af02      	add	r7, sp, #8

	int y3 = 0, y4 = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
	int x3 = 0, x4 = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
	int trigger_point = 1;
 8001802:	2301      	movs	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
	int nivel_trigger = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]

	if(uxQueueMessagesWaiting(qTrigger) == 1)
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <display_plot_signal+0x13c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f006 fa7c 	bl	8007d0c <uxQueueMessagesWaiting>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <display_plot_signal+0x3e>
		xQueueReceive(qTrigger, &nivel_trigger, portMAX_DELAY);
 800181a:	4b43      	ldr	r3, [pc, #268]	; (8001928 <display_plot_signal+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4639      	mov	r1, r7
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	4618      	mov	r0, r3
 8001826:	f006 f991 	bl	8007b4c <xQueueReceive>

	for(int i=0; i<=98; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	e014      	b.n	800185a <display_plot_signal+0x6e>

		if((buffer_display[i] > nivel_trigger ) && (buffer_display[i+1]) < nivel_trigger){
 8001830:	4a3e      	ldr	r2, [pc, #248]	; (800192c <display_plot_signal+0x140>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4293      	cmp	r3, r2
 800183c:	d90a      	bls.n	8001854 <display_plot_signal+0x68>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3301      	adds	r3, #1
 8001842:	4a3a      	ldr	r2, [pc, #232]	; (800192c <display_plot_signal+0x140>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4293      	cmp	r3, r2
 800184c:	d202      	bcs.n	8001854 <display_plot_signal+0x68>
			trigger_point = i;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	61fb      	str	r3, [r7, #28]
			break;
 8001852:	e005      	b.n	8001860 <display_plot_signal+0x74>
	for(int i=0; i<=98; i++){
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3301      	adds	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b62      	cmp	r3, #98	; 0x62
 800185e:	dde7      	ble.n	8001830 <display_plot_signal+0x44>
		}
	}

	for(int k=0; k<=98; k++){
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e04f      	b.n	8001906 <display_plot_signal+0x11a>

		x3 = k + trigger_point;
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	60bb      	str	r3, [r7, #8]
		x4 = x3 + 1;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	607b      	str	r3, [r7, #4]

		y3 = map(buffer_display[x3], 0, 4095, 63, 9);
 8001874:	4a2d      	ldr	r2, [pc, #180]	; (800192c <display_plot_signal+0x140>)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8001888:	eddf 1a29 	vldr	s3, [pc, #164]	; 8001930 <display_plot_signal+0x144>
 800188c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8001934 <display_plot_signal+0x148>
 8001890:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001938 <display_plot_signal+0x14c>
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	f7ff fce4 	bl	8001264 <map>
 800189c:	eef0 7a40 	vmov.f32	s15, s0
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 3a90 	vmov	r3, s15
 80018a8:	613b      	str	r3, [r7, #16]
		y4 = map(buffer_display[x4], 0, 4095, 63, 9);
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <display_plot_signal+0x140>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ba:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 80018be:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8001930 <display_plot_signal+0x144>
 80018c2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001934 <display_plot_signal+0x148>
 80018c6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001938 <display_plot_signal+0x14c>
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	f7ff fcc9 	bl	8001264 <map>
 80018d2:	eef0 7a40 	vmov.f32	s15, s0
 80018d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018da:	ee17 3a90 	vmov	r3, s15
 80018de:	60fb      	str	r3, [r7, #12]

		ssd1306_Line(k + 27, y3, k + 28, y4, White);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	331b      	adds	r3, #27
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2d9      	uxtb	r1, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	331c      	adds	r3, #28
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2401      	movs	r4, #1
 80018fa:	9400      	str	r4, [sp, #0]
 80018fc:	f001 fac4 	bl	8002e88 <ssd1306_Line>
	for(int k=0; k<=98; k++){
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b62      	cmp	r3, #98	; 0x62
 800190a:	ddac      	ble.n	8001866 <display_plot_signal+0x7a>
	 }
	display_plot_trigger(nivel_trigger);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff2a 	bl	8001768 <display_plot_trigger>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX_SIZE);
 8001914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001918:	4908      	ldr	r1, [pc, #32]	; (800193c <display_plot_signal+0x150>)
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <display_plot_signal+0x154>)
 800191c:	f001 fef0 	bl	8003700 <HAL_ADC_Start_DMA>
}
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	; 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	20001918 	.word	0x20001918
 800192c:	20001514 	.word	0x20001514
 8001930:	427c0000 	.word	0x427c0000
 8001934:	457ff000 	.word	0x457ff000
 8001938:	00000000 	.word	0x00000000
 800193c:	20000d14 	.word	0x20000d14
 8001940:	200002f8 	.word	0x200002f8

08001944 <display_plot_rms>:

void display_plot_rms(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

	char rms_valor[5];
	static float valor = 0.0;

	if(uxQueueMessagesWaiting(qRMS) == 1)
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <display_plot_rms+0x68>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f006 f9dc 	bl	8007d0c <uxQueueMessagesWaiting>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <display_plot_rms+0x26>
		xQueueReceive(qRMS, &valor, portMAX_DELAY);
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <display_plot_rms+0x68>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 32ff 	mov.w	r2, #4294967295
 8001962:	4913      	ldr	r1, [pc, #76]	; (80019b0 <display_plot_rms+0x6c>)
 8001964:	4618      	mov	r0, r3
 8001966:	f006 f8f1 	bl	8007b4c <xQueueReceive>

	rms_to_char(valor, rms_valor);
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <display_plot_rms+0x6c>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	463b      	mov	r3, r7
 8001972:	4618      	mov	r0, r3
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff faaa 	bl	8000ed0 <rms_to_char>
	ssd1306_SetCursor(56, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	2038      	movs	r0, #56	; 0x38
 8001980:	f001 fa6a 	bl	8002e58 <ssd1306_SetCursor>
	ssd1306_WriteString("rms",Font_6x8,White);
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <display_plot_rms+0x70>)
 8001986:	2301      	movs	r3, #1
 8001988:	ca06      	ldmia	r2, {r1, r2}
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <display_plot_rms+0x74>)
 800198c:	f001 fa3e 	bl	8002e0c <ssd1306_WriteString>
	ssd1306_SetCursor(74, 0);
 8001990:	2100      	movs	r1, #0
 8001992:	204a      	movs	r0, #74	; 0x4a
 8001994:	f001 fa60 	bl	8002e58 <ssd1306_SetCursor>
	ssd1306_WriteString(rms_valor,Font_6x8,White);
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <display_plot_rms+0x70>)
 800199a:	4638      	mov	r0, r7
 800199c:	2301      	movs	r3, #1
 800199e:	ca06      	ldmia	r2, {r1, r2}
 80019a0:	f001 fa34 	bl	8002e0c <ssd1306_WriteString>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000191c 	.word	0x2000191c
 80019b0:	20001924 	.word	0x20001924
 80019b4:	2000000c 	.word	0x2000000c
 80019b8:	08009970 	.word	0x08009970

080019bc <display_plot_tiempo>:

void display_plot_tiempo(int base_temp){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

	ssd1306_SetCursor(104,0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2068      	movs	r0, #104	; 0x68
 80019c8:	f001 fa46 	bl	8002e58 <ssd1306_SetCursor>

	switch(base_temp){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d842      	bhi.n	8001a5a <display_plot_tiempo+0x9e>
 80019d4:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <display_plot_tiempo+0x20>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	080019f9 	.word	0x080019f9
 80019e0:	08001a07 	.word	0x08001a07
 80019e4:	08001a15 	.word	0x08001a15
 80019e8:	08001a23 	.word	0x08001a23
 80019ec:	08001a31 	.word	0x08001a31
 80019f0:	08001a3f 	.word	0x08001a3f
 80019f4:	08001a4d 	.word	0x08001a4d

		case ENC_F1: ssd1306_WriteString(" 25m", Font_6x8, White);
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <display_plot_tiempo+0xa8>)
 80019fa:	2301      	movs	r3, #1
 80019fc:	ca06      	ldmia	r2, {r1, r2}
 80019fe:	481a      	ldr	r0, [pc, #104]	; (8001a68 <display_plot_tiempo+0xac>)
 8001a00:	f001 fa04 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a04:	e029      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F2: ssd1306_WriteString("6.3m", Font_6x8, White);
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a08:	2301      	movs	r3, #1
 8001a0a:	ca06      	ldmia	r2, {r1, r2}
 8001a0c:	4817      	ldr	r0, [pc, #92]	; (8001a6c <display_plot_tiempo+0xb0>)
 8001a0e:	f001 f9fd 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a12:	e022      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F3: ssd1306_WriteString("1,6m", Font_6x8, White);
 8001a14:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a16:	2301      	movs	r3, #1
 8001a18:	ca06      	ldmia	r2, {r1, r2}
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <display_plot_tiempo+0xb4>)
 8001a1c:	f001 f9f6 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a20:	e01b      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F4: ssd1306_WriteString("389u", Font_6x8, White);
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a24:	2301      	movs	r3, #1
 8001a26:	ca06      	ldmia	r2, {r1, r2}
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <display_plot_tiempo+0xb8>)
 8001a2a:	f001 f9ef 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a2e:	e014      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F5: ssd1306_WriteString(" 98u", Font_6x8, White);
 8001a30:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a32:	2301      	movs	r3, #1
 8001a34:	ca06      	ldmia	r2, {r1, r2}
 8001a36:	4810      	ldr	r0, [pc, #64]	; (8001a78 <display_plot_tiempo+0xbc>)
 8001a38:	f001 f9e8 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a3c:	e00d      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F6: ssd1306_WriteString(" 35u", Font_6x8, White);
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a40:	2301      	movs	r3, #1
 8001a42:	ca06      	ldmia	r2, {r1, r2}
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <display_plot_tiempo+0xc0>)
 8001a46:	f001 f9e1 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a4a:	e006      	b.n	8001a5a <display_plot_tiempo+0x9e>

		case ENC_F7: ssd1306_WriteString(" 17u", Font_6x8, White);
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <display_plot_tiempo+0xa8>)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	ca06      	ldmia	r2, {r1, r2}
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <display_plot_tiempo+0xc4>)
 8001a54:	f001 f9da 	bl	8002e0c <ssd1306_WriteString>
		break;
 8001a58:	bf00      	nop
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	08009974 	.word	0x08009974
 8001a6c:	0800997c 	.word	0x0800997c
 8001a70:	08009984 	.word	0x08009984
 8001a74:	0800998c 	.word	0x0800998c
 8001a78:	08009994 	.word	0x08009994
 8001a7c:	0800999c 	.word	0x0800999c
 8001a80:	080099a4 	.word	0x080099a4

08001a84 <display_plot_freq>:

void display_plot_freq(int freq){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

	uint8_t str_freq[7] = {'\0'};
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2100      	movs	r1, #0
 8001a96:	460a      	mov	r2, r1
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	709a      	strb	r2, [r3, #2]
	static int frecuencia = 0;

	// La variable se actualiza en el callback
	// En el main le voy a mandar -1 para que no actualice el valor
	// Pero que el display siga mostrando un valor
	if(freq >= 0) frecuencia = freq;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db02      	blt.n	8001aaa <display_plot_freq+0x26>
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <display_plot_freq+0x58>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]

	ssd1306_SetCursor(14, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	200e      	movs	r0, #14
 8001aae:	f001 f9d3 	bl	8002e58 <ssd1306_SetCursor>
	freq_to_char(frecuencia, str_freq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <display_plot_freq+0x58>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff fad2 	bl	8001068 <freq_to_char>
	ssd1306_WriteString((char *)str_freq,Font_6x8, White);
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <display_plot_freq+0x5c>)
 8001ac6:	f107 0008 	add.w	r0, r7, #8
 8001aca:	2301      	movs	r3, #1
 8001acc:	ca06      	ldmia	r2, {r1, r2}
 8001ace:	f001 f99d 	bl	8002e0c <ssd1306_WriteString>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001928 	.word	0x20001928
 8001ae0:	2000000c 	.word	0x2000000c

08001ae4 <display_plot_encoder>:

void display_plot_encoder(int encoder_mode){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	ssd1306_SetCursor(0, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f001 f9b2 	bl	8002e58 <ssd1306_SetCursor>

	switch(encoder_mode){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d017      	beq.n	8001b2a <display_plot_encoder+0x46>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	dc1b      	bgt.n	8001b38 <display_plot_encoder+0x54>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <display_plot_encoder+0x2a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d007      	beq.n	8001b1c <display_plot_encoder+0x38>

		case BASE_TEMP: ssd1306_WriteString("t", Font_6x8, White);break;

		case TRIGGER: ssd1306_WriteString("T", Font_6x8, White); break;
	}
}
 8001b0c:	e014      	b.n	8001b38 <display_plot_encoder+0x54>
		case AMPLITUD: ssd1306_WriteString("A", Font_6x8, White); break;
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <display_plot_encoder+0x5c>)
 8001b10:	2301      	movs	r3, #1
 8001b12:	ca06      	ldmia	r2, {r1, r2}
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <display_plot_encoder+0x60>)
 8001b16:	f001 f979 	bl	8002e0c <ssd1306_WriteString>
 8001b1a:	e00d      	b.n	8001b38 <display_plot_encoder+0x54>
		case BASE_TEMP: ssd1306_WriteString("t", Font_6x8, White);break;
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <display_plot_encoder+0x5c>)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	ca06      	ldmia	r2, {r1, r2}
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <display_plot_encoder+0x64>)
 8001b24:	f001 f972 	bl	8002e0c <ssd1306_WriteString>
 8001b28:	e006      	b.n	8001b38 <display_plot_encoder+0x54>
		case TRIGGER: ssd1306_WriteString("T", Font_6x8, White); break;
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <display_plot_encoder+0x5c>)
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	ca06      	ldmia	r2, {r1, r2}
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <display_plot_encoder+0x68>)
 8001b32:	f001 f96b 	bl	8002e0c <ssd1306_WriteString>
 8001b36:	bf00      	nop
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	080099ac 	.word	0x080099ac
 8001b48:	080099b0 	.word	0x080099b0
 8001b4c:	080099b4 	.word	0x080099b4

08001b50 <mux_select_escala>:

void mux_select_escala(int contador){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

	switch(contador){
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	f200 809c 	bhi.w	8001c98 <mux_select_escala+0x148>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <mux_select_escala+0x18>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001c55 	.word	0x08001c55
 8001b6c:	08001c77 	.word	0x08001c77
 8001b70:	08001b89 	.word	0x08001b89
 8001b74:	08001bab 	.word	0x08001bab
 8001b78:	08001bcd 	.word	0x08001bcd
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001c11 	.word	0x08001c11
 8001b84:	08001c33 	.word	0x08001c33

		case AMP_1://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	484d      	ldr	r0, [pc, #308]	; (8001cc4 <mux_select_escala+0x174>)
 8001b8e:	f002 ff27 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b98:	484b      	ldr	r0, [pc, #300]	; (8001cc8 <mux_select_escala+0x178>)
 8001b9a:	f002 ff21 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	4848      	ldr	r0, [pc, #288]	; (8001cc4 <mux_select_escala+0x174>)
 8001ba4:	f002 ff1c 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001ba8:	e087      	b.n	8001cba <mux_select_escala+0x16a>

		case AMP_3://A3
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	2108      	movs	r1, #8
 8001bae:	4845      	ldr	r0, [pc, #276]	; (8001cc4 <mux_select_escala+0x174>)
 8001bb0:	f002 ff16 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bba:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <mux_select_escala+0x178>)
 8001bbc:	f002 ff10 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <mux_select_escala+0x174>)
 8001bc6:	f002 ff0b 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001bca:	e076      	b.n	8001cba <mux_select_escala+0x16a>

		case AMP_5://A4
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2108      	movs	r1, #8
 8001bd0:	483c      	ldr	r0, [pc, #240]	; (8001cc4 <mux_select_escala+0x174>)
 8001bd2:	f002 ff05 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bdc:	483a      	ldr	r0, [pc, #232]	; (8001cc8 <mux_select_escala+0x178>)
 8001bde:	f002 feff 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2120      	movs	r1, #32
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <mux_select_escala+0x174>)
 8001be8:	f002 fefa 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001bec:	e065      	b.n	8001cba <mux_select_escala+0x16a>

		case AMP_10://A5
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4834      	ldr	r0, [pc, #208]	; (8001cc4 <mux_select_escala+0x174>)
 8001bf4:	f002 fef4 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bfe:	4832      	ldr	r0, [pc, #200]	; (8001cc8 <mux_select_escala+0x178>)
 8001c00:	f002 feee 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2120      	movs	r1, #32
 8001c08:	482e      	ldr	r0, [pc, #184]	; (8001cc4 <mux_select_escala+0x174>)
 8001c0a:	f002 fee9 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001c0e:	e054      	b.n	8001cba <mux_select_escala+0x16a>

		case AMP_31://A6
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2108      	movs	r1, #8
 8001c14:	482b      	ldr	r0, [pc, #172]	; (8001cc4 <mux_select_escala+0x174>)
 8001c16:	f002 fee3 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c20:	4829      	ldr	r0, [pc, #164]	; (8001cc8 <mux_select_escala+0x178>)
 8001c22:	f002 fedd 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <mux_select_escala+0x174>)
 8001c2c:	f002 fed8 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001c30:	e043      	b.n	8001cba <mux_select_escala+0x16a>

		case AMP_50://A7
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2108      	movs	r1, #8
 8001c36:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <mux_select_escala+0x174>)
 8001c38:	f002 fed2 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <mux_select_escala+0x178>)
 8001c44:	f002 fecc 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2120      	movs	r1, #32
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <mux_select_escala+0x174>)
 8001c4e:	f002 fec7 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001c52:	e032      	b.n	8001cba <mux_select_escala+0x16a>

		case ATEN_03://A0
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2108      	movs	r1, #8
 8001c58:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <mux_select_escala+0x174>)
 8001c5a:	f002 fec1 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <mux_select_escala+0x178>)
 8001c66:	f002 febb 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <mux_select_escala+0x174>)
 8001c70:	f002 feb6 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001c74:	e021      	b.n	8001cba <mux_select_escala+0x16a>

		case ATEN_05://A1
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <mux_select_escala+0x174>)
 8001c7c:	f002 feb0 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c86:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <mux_select_escala+0x178>)
 8001c88:	f002 feaa 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2120      	movs	r1, #32
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <mux_select_escala+0x174>)
 8001c92:	f002 fea5 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001c96:	e010      	b.n	8001cba <mux_select_escala+0x16a>

		default://A2
			HAL_GPIO_WritePin(MUX_SEL0_GPIO_Port, MUX_SEL0_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <mux_select_escala+0x174>)
 8001c9e:	f002 fe9f 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <mux_select_escala+0x178>)
 8001caa:	f002 fe99 	bl	80049e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_SEL2_GPIO_Port, MUX_SEL2_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <mux_select_escala+0x174>)
 8001cb4:	f002 fe94 	bl	80049e0 <HAL_GPIO_WritePin>
		break;
 8001cb8:	bf00      	nop
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020000 	.word	0x40020000

08001ccc <ADC_sampling>:

void ADC_sampling(int periodo){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

	int delay = 20;
 8001cd4:	2314      	movs	r3, #20
 8001cd6:	60fb      	str	r3, [r7, #12]
	if(periodo == FS_1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f24a 7269 	movw	r2, #42857	; 0xa769
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10c      	bne.n	8001cfc <ADC_sampling+0x30>
	{
		delay = 270;
 8001ce2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001ce6:	60fb      	str	r3, [r7, #12]
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <ADC_sampling+0x84>)
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f107 010c 	add.w	r1, r7, #12
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	f005 fd8f 	bl	8007818 <xQueueGenericSend>
 8001cfa:	e019      	b.n	8001d30 <ADC_sampling+0x64>
	}
	else if(periodo == FS_2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f642 2211 	movw	r2, #10769	; 0x2a11
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10b      	bne.n	8001d1e <ADC_sampling+0x52>
	{
		delay = 70;
 8001d06:	2346      	movs	r3, #70	; 0x46
 8001d08:	60fb      	str	r3, [r7, #12]
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <ADC_sampling+0x84>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f107 010c 	add.w	r1, r7, #12
 8001d12:	2300      	movs	r3, #0
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	f005 fd7e 	bl	8007818 <xQueueGenericSend>
 8001d1c:	e008      	b.n	8001d30 <ADC_sampling+0x64>
	}
	else
		xQueueSend(qDelay, &delay, portMAX_DELAY);
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <ADC_sampling+0x84>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 010c 	add.w	r1, r7, #12
 8001d26:	2300      	movs	r3, #0
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	f005 fd74 	bl	8007818 <xQueueGenericSend>

	HAL_TIM_Base_Stop(&htim3);
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <ADC_sampling+0x88>)
 8001d32:	f004 f857 	bl	8005de4 <HAL_TIM_Base_Stop>

	htim3.Init.Period = periodo;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <ADC_sampling+0x88>)
 8001d3a:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&htim3);
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <ADC_sampling+0x88>)
 8001d3e:	f003 ffa7 	bl	8005c90 <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start(&htim3);
 8001d42:	4804      	ldr	r0, [pc, #16]	; (8001d54 <ADC_sampling+0x88>)
 8001d44:	f003 fff4 	bl	8005d30 <HAL_TIM_Base_Start>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20001920 	.word	0x20001920
 8001d54:	2000043c 	.word	0x2000043c

08001d58 <adc_select_frecuencia>:

void adc_select_frecuencia(int contador){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	switch(contador){
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d831      	bhi.n	8001dcc <adc_select_frecuencia+0x74>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <adc_select_frecuencia+0x18>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001d8d 	.word	0x08001d8d
 8001d74:	08001d97 	.word	0x08001d97
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	08001dab 	.word	0x08001dab
 8001d80:	08001db5 	.word	0x08001db5
 8001d84:	08001dbd 	.word	0x08001dbd
 8001d88:	08001dc5 	.word	0x08001dc5

		case ENC_F1: ADC_sampling(FS_1); break;
 8001d8c:	f24a 7069 	movw	r0, #42857	; 0xa769
 8001d90:	f7ff ff9c 	bl	8001ccc <ADC_sampling>
 8001d94:	e01a      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F2: ADC_sampling(FS_2); break;
 8001d96:	f642 2011 	movw	r0, #10769	; 0x2a11
 8001d9a:	f7ff ff97 	bl	8001ccc <ADC_sampling>
 8001d9e:	e015      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F3: ADC_sampling(FS_3); break;
 8001da0:	f640 2073 	movw	r0, #2675	; 0xa73
 8001da4:	f7ff ff92 	bl	8001ccc <ADC_sampling>
 8001da8:	e010      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F4: ADC_sampling(FS_4); break;
 8001daa:	f240 209b 	movw	r0, #667	; 0x29b
 8001dae:	f7ff ff8d 	bl	8001ccc <ADC_sampling>
 8001db2:	e00b      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F5: ADC_sampling(FS_5); break;
 8001db4:	20a8      	movs	r0, #168	; 0xa8
 8001db6:	f7ff ff89 	bl	8001ccc <ADC_sampling>
 8001dba:	e007      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F6: ADC_sampling(FS_6); break;
 8001dbc:	203c      	movs	r0, #60	; 0x3c
 8001dbe:	f7ff ff85 	bl	8001ccc <ADC_sampling>
 8001dc2:	e003      	b.n	8001dcc <adc_select_frecuencia+0x74>

		case ENC_F7: ADC_sampling(FS_7); break;
 8001dc4:	201e      	movs	r0, #30
 8001dc6:	f7ff ff81 	bl	8001ccc <ADC_sampling>
 8001dca:	bf00      	nop
	}
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <encoder_pos>:

void encoder_pos(void){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	static int counter_amp = AMP_1;
	static int counter_temp = ENC_F6;
	static int seleccion = 0;
	static int trigger_level = 2090;

	counter_act = TIM4->CNT/2;
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <encoder_pos+0x1ec>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <encoder_pos+0x1f0>)
 8001de2:	801a      	strh	r2, [r3, #0]

	if(uxQueueMessagesWaiting(qEncoder) == 1)
 8001de4:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <encoder_pos+0x1f4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 ff8f 	bl	8007d0c <uxQueueMessagesWaiting>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <encoder_pos+0x30>
		xQueueReceive(qEncoder, &seleccion, portMAX_DELAY);
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <encoder_pos+0x1f4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	4973      	ldr	r1, [pc, #460]	; (8001fcc <encoder_pos+0x1f8>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fea4 	bl	8007b4c <xQueueReceive>

	switch(seleccion){
 8001e04:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <encoder_pos+0x1f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d06e      	beq.n	8001eea <encoder_pos+0x116>
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f300 80b4 	bgt.w	8001f7a <encoder_pos+0x1a6>
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <encoder_pos+0x48>
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d039      	beq.n	8001e8e <encoder_pos+0xba>
				trigger_level-=100;
			else if(counter_act < counter_viejo && trigger_level == 90)
				trigger_level = 3990;
		break;

		default: break;
 8001e1a:	e0ae      	b.n	8001f7a <encoder_pos+0x1a6>
			if(counter_act > counter_viejo && counter_amp < 7)
 8001e1c:	4b69      	ldr	r3, [pc, #420]	; (8001fc4 <encoder_pos+0x1f0>)
 8001e1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e22:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <encoder_pos+0x1fc>)
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dd09      	ble.n	8001e40 <encoder_pos+0x6c>
 8001e2c:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <encoder_pos+0x200>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b06      	cmp	r3, #6
 8001e32:	dc05      	bgt.n	8001e40 <encoder_pos+0x6c>
				counter_amp++;
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <encoder_pos+0x200>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <encoder_pos+0x200>)
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e020      	b.n	8001e82 <encoder_pos+0xae>
			else if(counter_act > counter_viejo && counter_amp == 7)
 8001e40:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <encoder_pos+0x1f0>)
 8001e42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <encoder_pos+0x1fc>)
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd07      	ble.n	8001e60 <encoder_pos+0x8c>
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <encoder_pos+0x200>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	d103      	bne.n	8001e60 <encoder_pos+0x8c>
				counter_amp = AMP_1;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <encoder_pos+0x200>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e010      	b.n	8001e82 <encoder_pos+0xae>
			else if(counter_act < counter_viejo && counter_amp > 0)
 8001e60:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <encoder_pos+0x1f0>)
 8001e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <encoder_pos+0x1fc>)
 8001e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	da08      	bge.n	8001e82 <encoder_pos+0xae>
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <encoder_pos+0x200>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dd04      	ble.n	8001e82 <encoder_pos+0xae>
				counter_amp--;
 8001e78:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <encoder_pos+0x200>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <encoder_pos+0x200>)
 8001e80:	6013      	str	r3, [r2, #0]
			mux_select_escala(counter_amp);
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <encoder_pos+0x200>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe62 	bl	8001b50 <mux_select_escala>
		break;
 8001e8c:	e07a      	b.n	8001f84 <encoder_pos+0x1b0>
			if(counter_act > counter_viejo && counter_temp < 7){
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <encoder_pos+0x1f0>)
 8001e90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e94:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <encoder_pos+0x1fc>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dd0e      	ble.n	8001ebc <encoder_pos+0xe8>
 8001e9e:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <encoder_pos+0x204>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	dc0a      	bgt.n	8001ebc <encoder_pos+0xe8>
				counter_temp++;
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <encoder_pos+0x204>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <encoder_pos+0x204>)
 8001eae:	6013      	str	r3, [r2, #0]
				adc_select_frecuencia(counter_temp);
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <encoder_pos+0x204>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff4f 	bl	8001d58 <adc_select_frecuencia>
			break;
 8001eba:	e060      	b.n	8001f7e <encoder_pos+0x1aa>
			else if(counter_act < counter_viejo && counter_temp > 1){
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <encoder_pos+0x1f0>)
 8001ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <encoder_pos+0x1fc>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	da58      	bge.n	8001f7e <encoder_pos+0x1aa>
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <encoder_pos+0x204>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	dd54      	ble.n	8001f7e <encoder_pos+0x1aa>
				counter_temp--;
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <encoder_pos+0x204>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <encoder_pos+0x204>)
 8001edc:	6013      	str	r3, [r2, #0]
				adc_select_frecuencia(counter_temp);
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <encoder_pos+0x204>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff38 	bl	8001d58 <adc_select_frecuencia>
			break;
 8001ee8:	e049      	b.n	8001f7e <encoder_pos+0x1aa>
			if(counter_act > counter_viejo && trigger_level < 3990)
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <encoder_pos+0x1f0>)
 8001eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <encoder_pos+0x1fc>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dd0b      	ble.n	8001f12 <encoder_pos+0x13e>
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <encoder_pos+0x208>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f640 7295 	movw	r2, #3989	; 0xf95
 8001f02:	4293      	cmp	r3, r2
 8001f04:	dc05      	bgt.n	8001f12 <encoder_pos+0x13e>
				trigger_level+=100;
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <encoder_pos+0x208>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3364      	adds	r3, #100	; 0x64
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <encoder_pos+0x208>)
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e010      	b.n	8001f34 <encoder_pos+0x160>
			else if(counter_act > counter_viejo && trigger_level == 3990)
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <encoder_pos+0x1f0>)
 8001f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <encoder_pos+0x1fc>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dd08      	ble.n	8001f34 <encoder_pos+0x160>
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <encoder_pos+0x208>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f640 7296 	movw	r2, #3990	; 0xf96
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d102      	bne.n	8001f34 <encoder_pos+0x160>
				trigger_level = 90;
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <encoder_pos+0x208>)
 8001f30:	225a      	movs	r2, #90	; 0x5a
 8001f32:	601a      	str	r2, [r3, #0]
			if(counter_act < counter_viejo && trigger_level >= 190)
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <encoder_pos+0x1f0>)
 8001f36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <encoder_pos+0x1fc>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	da09      	bge.n	8001f58 <encoder_pos+0x184>
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <encoder_pos+0x208>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2bbd      	cmp	r3, #189	; 0xbd
 8001f4a:	dd05      	ble.n	8001f58 <encoder_pos+0x184>
				trigger_level-=100;
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <encoder_pos+0x208>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3b64      	subs	r3, #100	; 0x64
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <encoder_pos+0x208>)
 8001f54:	6013      	str	r3, [r2, #0]
		break;
 8001f56:	e014      	b.n	8001f82 <encoder_pos+0x1ae>
			else if(counter_act < counter_viejo && trigger_level == 90)
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <encoder_pos+0x1f0>)
 8001f5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <encoder_pos+0x1fc>)
 8001f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	da0c      	bge.n	8001f82 <encoder_pos+0x1ae>
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <encoder_pos+0x208>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b5a      	cmp	r3, #90	; 0x5a
 8001f6e:	d108      	bne.n	8001f82 <encoder_pos+0x1ae>
				trigger_level = 3990;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <encoder_pos+0x208>)
 8001f72:	f640 7296 	movw	r2, #3990	; 0xf96
 8001f76:	601a      	str	r2, [r3, #0]
		break;
 8001f78:	e003      	b.n	8001f82 <encoder_pos+0x1ae>
		default: break;
 8001f7a:	bf00      	nop
 8001f7c:	e002      	b.n	8001f84 <encoder_pos+0x1b0>
			break;
 8001f7e:	bf00      	nop
 8001f80:	e000      	b.n	8001f84 <encoder_pos+0x1b0>
		break;
 8001f82:	bf00      	nop
	}
	xQueueSend(qTrigger,&trigger_level,portMAX_DELAY);
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <encoder_pos+0x20c>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8e:	4913      	ldr	r1, [pc, #76]	; (8001fdc <encoder_pos+0x208>)
 8001f90:	f005 fc42 	bl	8007818 <xQueueGenericSend>
	//display_plot_trigger(trigger_level);
	display_plot_escala(counter_amp);
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <encoder_pos+0x200>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f991 	bl	80012c0 <display_plot_escala>
	display_plot_tiempo(counter_temp);
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <encoder_pos+0x204>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fd0a 	bl	80019bc <display_plot_tiempo>
	display_plot_encoder(seleccion);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <encoder_pos+0x1f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fd99 	bl	8001ae4 <display_plot_encoder>

	counter_viejo = counter_act;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <encoder_pos+0x1f0>)
 8001fb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <encoder_pos+0x1fc>)
 8001fba:	801a      	strh	r2, [r3, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	2000192c 	.word	0x2000192c
 8001fc8:	20001914 	.word	0x20001914
 8001fcc:	20001930 	.word	0x20001930
 8001fd0:	20001934 	.word	0x20001934
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20001918 	.word	0x20001918

08001fe4 <Init_Sistema>:
/* ------------------------ Tareas Free RTOS ------------------------ */

void Init_Sistema(void *pvParameters){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

	ssd1306_Init();
 8001fec:	f000 fd80 	bl	8002af0 <ssd1306_Init>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	480f      	ldr	r0, [pc, #60]	; (8002030 <Init_Sistema+0x4c>)
 8001ff4:	f003 ffd0 	bl	8005f98 <HAL_TIM_OC_Start>
	HAL_ADC_Start_DMA(&hadc1, buffer_adc, MAX_SIZE);
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	490d      	ldr	r1, [pc, #52]	; (8002034 <Init_Sistema+0x50>)
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <Init_Sistema+0x54>)
 8002000:	f001 fb7e 	bl	8003700 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <Init_Sistema+0x58>)
 8002006:	f003 fe93 	bl	8005d30 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800200a:	2104      	movs	r1, #4
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <Init_Sistema+0x5c>)
 800200e:	f004 f8cd 	bl	80061ac <HAL_TIM_IC_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002012:	213c      	movs	r1, #60	; 0x3c
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <Init_Sistema+0x60>)
 8002016:	f004 fa89 	bl	800652c <HAL_TIM_Encoder_Start_IT>
	mux_select_escala(AMP_1);
 800201a:	2002      	movs	r0, #2
 800201c:	f7ff fd98 	bl	8001b50 <mux_select_escala>

	vTaskDelete(NULL);
 8002020:	2000      	movs	r0, #0
 8002022:	f006 f935 	bl	8008290 <vTaskDelete>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200003f4 	.word	0x200003f4
 8002034:	20000d14 	.word	0x20000d14
 8002038:	200002f8 	.word	0x200002f8
 800203c:	2000043c 	.word	0x2000043c
 8002040:	200004cc 	.word	0x200004cc
 8002044:	20000484 	.word	0x20000484

08002048 <Mostrar_pantalla>:

void Mostrar_pantalla(void *pvParameters){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

	int delay_display = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
	while(1){

		if(uxQueueMessagesWaiting(qDelay) == 1)
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <Mostrar_pantalla+0x54>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f005 fe57 	bl	8007d0c <uxQueueMessagesWaiting>
 800205e:	4603      	mov	r3, r0
 8002060:	2b01      	cmp	r3, #1
 8002062:	d108      	bne.n	8002076 <Mostrar_pantalla+0x2e>
			xQueueReceive(qDelay, &delay_display, portMAX_DELAY);
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <Mostrar_pantalla+0x54>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f107 010c 	add.w	r1, r7, #12
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	4618      	mov	r0, r3
 8002072:	f005 fd6b 	bl	8007b4c <xQueueReceive>

		display_plot_grilla();
 8002076:	f7ff fae9 	bl	800164c <display_plot_grilla>
		display_plot_signal();
 800207a:	f7ff fbb7 	bl	80017ec <display_plot_signal>
		display_plot_freq(VALOR_ACT);
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	f7ff fcff 	bl	8001a84 <display_plot_freq>
		display_plot_rms();
 8002086:	f7ff fc5d 	bl	8001944 <display_plot_rms>
		encoder_pos();
 800208a:	f7ff fea3 	bl	8001dd4 <encoder_pos>
		ssd1306_UpdateScreen();
 800208e:	f000 fdb9 	bl	8002c04 <ssd1306_UpdateScreen>
		vTaskDelay(delay_display/portTICK_RATE_MS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f006 f98b 	bl	80083b0 <vTaskDelay>
		if(uxQueueMessagesWaiting(qDelay) == 1)
 800209a:	e7db      	b.n	8002054 <Mostrar_pantalla+0xc>
 800209c:	20001920 	.word	0x20001920

080020a0 <HAL_GPIO_EXTI_Callback>:

}

/* --------------------------- Callbacks --------------------------- */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]

	static uint32_t previousMillis = 0;
	uint32_t currentMillis = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
	static int encoder = 0;

	currentMillis = HAL_GetTick();
 80020b2:	f001 fad5 	bl	8003660 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > DEBOUNCE))
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020be:	d12d      	bne.n	800211c <HAL_GPIO_EXTI_Callback+0x7c>
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_GPIO_EXTI_Callback+0x84>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2bc8      	cmp	r3, #200	; 0xc8
 80020ca:	d927      	bls.n	800211c <HAL_GPIO_EXTI_Callback+0x7c>
	{
		previousMillis = currentMillis;
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <HAL_GPIO_EXTI_Callback+0x84>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6013      	str	r3, [r2, #0]
		encoder++;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_GPIO_EXTI_Callback+0x88>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <HAL_GPIO_EXTI_Callback+0x88>)
 80020da:	6013      	str	r3, [r2, #0]
		encoder%=3;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_GPIO_EXTI_Callback+0x88>)
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020e2:	fb83 3201 	smull	r3, r2, r3, r1
 80020e6:	17cb      	asrs	r3, r1, #31
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	1aca      	subs	r2, r1, r3
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_GPIO_EXTI_Callback+0x88>)
 80020f4:	601a      	str	r2, [r3, #0]

		xQueueSendFromISR(qEncoder,&encoder,&xHigherPriorityTaskWoken);
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_GPIO_EXTI_Callback+0x90>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f107 0208 	add.w	r2, r7, #8
 80020fe:	2300      	movs	r3, #0
 8002100:	4909      	ldr	r1, [pc, #36]	; (8002128 <HAL_GPIO_EXTI_Callback+0x88>)
 8002102:	f005 fc87 	bl	8007a14 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_GPIO_EXTI_Callback+0x7c>
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_GPIO_EXTI_Callback+0x94>)
 800210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	f3bf 8f6f 	isb	sy
	}
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20001938 	.word	0x20001938
 8002128:	2000193c 	.word	0x2000193c
 800212c:	55555556 	.word	0x55555556
 8002130:	20001914 	.word	0x20001914
 8002134:	e000ed04 	.word	0xe000ed04

08002138 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

	for(int i = 0; i<MAX_SIZE/2; i++){
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e012      	b.n	800216c <HAL_ADC_ConvHalfCpltCallback+0x34>
		buffer_display[i] = buffer_adc[i];
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer_usb[i] = buffer_adc[i];
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800215e:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX_SIZE/2; i++){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	dde9      	ble.n	8002146 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000d14 	.word	0x20000d14
 8002184:	20001514 	.word	0x20001514
 8002188:	20000514 	.word	0x20000514
 800218c:	00000000 	.word	0x00000000

08002190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]

	float mean = 0.0;
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
	float suma = 0.0;
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
	float valorMax = 0.0;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
	float RMS = 0.0;
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<MAX_SIZE/2; i++){
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	e026      	b.n	8002208 <HAL_ADC_ConvCpltCallback+0x78>

		buffer_display[i] = buffer_adc[i+256];
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021c0:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_ADC_ConvCpltCallback+0x168>)
 80021c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021c6:	494d      	ldr	r1, [pc, #308]	; (80022fc <HAL_ADC_ConvCpltCallback+0x16c>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer_usb[i + 256] = buffer_adc[i +256];
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021da:	4947      	ldr	r1, [pc, #284]	; (80022f8 <HAL_ADC_ConvCpltCallback+0x168>)
 80021dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021e0:	4947      	ldr	r1, [pc, #284]	; (8002300 <HAL_ADC_ConvCpltCallback+0x170>)
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		mean += buffer_adc[i];
 80021e6:	4a44      	ldr	r2, [pc, #272]	; (80022f8 <HAL_ADC_ConvCpltCallback+0x168>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i<MAX_SIZE/2; i++){
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2bff      	cmp	r3, #255	; 0xff
 800220c:	ddd5      	ble.n	80021ba <HAL_ADC_ConvCpltCallback+0x2a>
	}

	mean = 2*mean/MAX_SIZE;
 800220e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002212:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002216:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002304 <HAL_ADC_ConvCpltCallback+0x174>
 800221a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	for(int i=0; i<MAX_SIZE; i++){
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e02a      	b.n	800227e <HAL_ADC_ConvCpltCallback+0xee>
		suma = (float)(buffer_adc[i]) - mean;
 8002228:	4a33      	ldr	r2, [pc, #204]	; (80022f8 <HAL_ADC_ConvCpltCallback+0x168>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002238:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002240:	edc7 7a05 	vstr	s15, [r7, #20]
		suma = suma*(3.3/4095);
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7fe f92f 	bl	80004a8 <__aeabi_f2d>
 800224a:	a329      	add	r3, pc, #164	; (adr r3, 80022f0 <HAL_ADC_ConvCpltCallback+0x160>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f982 	bl	8000558 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fc4c 	bl	8000af8 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	617b      	str	r3, [r7, #20]
		valorMax = suma*suma+valorMax;
 8002264:	edd7 7a05 	vldr	s15, [r7, #20]
 8002268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800226c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002274:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i=0; i<MAX_SIZE; i++){
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002284:	dbd0      	blt.n	8002228 <HAL_ADC_ConvCpltCallback+0x98>
	}
	RMS = sqrt((valorMax / MAX_SIZE));
 8002286:	edd7 7a08 	vldr	s15, [r7, #32]
 800228a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002304 <HAL_ADC_ConvCpltCallback+0x174>
 800228e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002292:	ee16 0a90 	vmov	r0, s13
 8002296:	f7fe f907 	bl	80004a8 <__aeabi_f2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	ec43 2b10 	vmov	d0, r2, r3
 80022a2:	f007 fa3b 	bl	800971c <sqrt>
 80022a6:	ec53 2b10 	vmov	r2, r3, d0
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc23 	bl	8000af8 <__aeabi_d2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	60fb      	str	r3, [r7, #12]
	valorMax = 0;
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]

	xQueueSendFromISR(qRMS,&RMS,&xHigherPriorityTaskWoken);
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_ADC_ConvCpltCallback+0x178>)
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f107 0210 	add.w	r2, r7, #16
 80022c4:	f107 010c 	add.w	r1, r7, #12
 80022c8:	2300      	movs	r3, #0
 80022ca:	f005 fba3 	bl	8007a14 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_ADC_ConvCpltCallback+0x154>
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_ADC_ConvCpltCallback+0x17c>)
 80022d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	f3bf 8f6f 	isb	sy
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	e734d9b4 	.word	0xe734d9b4
 80022f4:	3f4a680c 	.word	0x3f4a680c
 80022f8:	20000d14 	.word	0x20000d14
 80022fc:	20001514 	.word	0x20001514
 8002300:	20000514 	.word	0x20000514
 8002304:	44000000 	.word	0x44000000
 8002308:	2000191c 	.word	0x2000191c
 800230c:	e000ed04 	.word	0xe000ed04

08002310 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

	static uint32_t tiempo_init = 0;
	static uint32_t tiempo_act = 0;
	static uint32_t freq = 0;

	if(!freq) tiempo_init = TIM5->CNT;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x54>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_TIM_IC_CaptureCallback+0x18>
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002326:	6013      	str	r3, [r2, #0]

	tiempo_act = TIM5->CNT;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_TIM_IC_CaptureCallback+0x58>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_TIM_IC_CaptureCallback+0x60>)
 800232e:	6013      	str	r3, [r2, #0]

	if((tiempo_act - tiempo_init) < 2000) freq++;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800233e:	d205      	bcs.n	800234c <HAL_TIM_IC_CaptureCallback+0x3c>
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002348:	6013      	str	r3, [r2, #0]

	else{
		display_plot_freq(freq);
		freq = 0;
	}
}
 800234a:	e007      	b.n	800235c <HAL_TIM_IC_CaptureCallback+0x4c>
		display_plot_freq(freq);
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x54>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb97 	bl	8001a84 <display_plot_freq>
		freq = 0;
 8002356:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20001940 	.word	0x20001940
 8002368:	40000c00 	.word	0x40000c00
 800236c:	20001944 	.word	0x20001944
 8002370:	20001948 	.word	0x20001948

08002374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237a:	f001 f93b 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800237e:	f000 f857 	bl	8002430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002382:	f000 facb 	bl	800291c <MX_GPIO_Init>
  MX_DMA_Init();
 8002386:	f000 faa9 	bl	80028dc <MX_DMA_Init>
  MX_ADC1_Init();
 800238a:	f000 f8bd 	bl	8002508 <MX_ADC1_Init>
  MX_I2C1_Init();
 800238e:	f000 f90d 	bl	80025ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8002392:	f000 f939 	bl	8002608 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002396:	f000 f98f 	bl	80026b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800239a:	f000 fa2d 	bl	80027f8 <MX_TIM5_Init>
  MX_TIM4_Init();
 800239e:	f000 f9d7 	bl	8002750 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  qEncoder = xQueueCreate(1,sizeof(int));
 80023a2:	2200      	movs	r2, #0
 80023a4:	2104      	movs	r1, #4
 80023a6:	2001      	movs	r0, #1
 80023a8:	f005 f9dc 	bl	8007764 <xQueueGenericCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <main+0x9c>)
 80023b0:	6013      	str	r3, [r2, #0]
  qTrigger = xQueueCreate(1,sizeof(int));
 80023b2:	2200      	movs	r2, #0
 80023b4:	2104      	movs	r1, #4
 80023b6:	2001      	movs	r0, #1
 80023b8:	f005 f9d4 	bl	8007764 <xQueueGenericCreate>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <main+0xa0>)
 80023c0:	6013      	str	r3, [r2, #0]
  qRMS = xQueueCreate(1,sizeof(float));
 80023c2:	2200      	movs	r2, #0
 80023c4:	2104      	movs	r1, #4
 80023c6:	2001      	movs	r0, #1
 80023c8:	f005 f9cc 	bl	8007764 <xQueueGenericCreate>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <main+0xa4>)
 80023d0:	6013      	str	r3, [r2, #0]
  qDelay = xQueueCreate(1,sizeof(int));
 80023d2:	2200      	movs	r2, #0
 80023d4:	2104      	movs	r1, #4
 80023d6:	2001      	movs	r0, #1
 80023d8:	f005 f9c4 	bl	8007764 <xQueueGenericCreate>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a0f      	ldr	r2, [pc, #60]	; (800241c <main+0xa8>)
 80023e0:	6013      	str	r3, [r2, #0]


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(Init_Sistema,"INICIALIZAR",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL);
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2303      	movs	r3, #3
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	490c      	ldr	r1, [pc, #48]	; (8002420 <main+0xac>)
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <main+0xb0>)
 80023f2:	f005 fe16 	bl	8008022 <xTaskCreate>
  xTaskCreate(Mostrar_pantalla, "PANTALLA", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 80023f6:	2300      	movs	r3, #0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2301      	movs	r3, #1
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2300      	movs	r3, #0
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	4909      	ldr	r1, [pc, #36]	; (8002428 <main+0xb4>)
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <main+0xb8>)
 8002406:	f005 fe0c 	bl	8008022 <xTaskCreate>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 // Init_Sistema(NULL);
  vTaskStartScheduler();
 800240a:	f006 f805 	bl	8008418 <vTaskStartScheduler>
  while(1){
 800240e:	e7fe      	b.n	800240e <main+0x9a>
 8002410:	20001914 	.word	0x20001914
 8002414:	20001918 	.word	0x20001918
 8002418:	2000191c 	.word	0x2000191c
 800241c:	20001920 	.word	0x20001920
 8002420:	080099b8 	.word	0x080099b8
 8002424:	08001fe5 	.word	0x08001fe5
 8002428:	080099c4 	.word	0x080099c4
 800242c:	08002049 	.word	0x08002049

08002430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b094      	sub	sp, #80	; 0x50
 8002434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002436:	f107 0320 	add.w	r3, r7, #32
 800243a:	2230      	movs	r2, #48	; 0x30
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f007 f964 	bl	800970c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <SystemClock_Config+0xd0>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <SystemClock_Config+0xd0>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <SystemClock_Config+0xd0>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <SystemClock_Config+0xd4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <SystemClock_Config+0xd4>)
 800247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <SystemClock_Config+0xd4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002498:	2310      	movs	r3, #16
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249c:	2302      	movs	r3, #2
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024a4:	2310      	movs	r3, #16
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024ae:	2304      	movs	r3, #4
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024b2:	2307      	movs	r3, #7
 80024b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 ff1e 	bl	80052fc <HAL_RCC_OscConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80024c6:	f000 fadb 	bl	8002a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ca:	230f      	movs	r3, #15
 80024cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ce:	2302      	movs	r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2102      	movs	r1, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 f980 	bl	80057ec <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80024f2:	f000 fac5 	bl	8002a80 <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3750      	adds	r7, #80	; 0x50
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000

08002508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <MX_ADC1_Init+0xa0>)
 800251e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002536:	2200      	movs	r2, #0
 8002538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800254c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800255a:	2201      	movs	r2, #1
 800255c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <MX_ADC1_Init+0x9c>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800256e:	f001 f883 	bl	8003678 <HAL_ADC_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002578:	f000 fa82 	bl	8002a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800257c:	2300      	movs	r3, #0
 800257e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002580:	2301      	movs	r3, #1
 8002582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002588:	463b      	mov	r3, r7
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_ADC1_Init+0x9c>)
 800258e:	f001 f9b1 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002598:	f000 fa72 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200002f8 	.word	0x200002f8
 80025a8:	40012000 	.word	0x40012000

080025ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <MX_I2C1_Init+0x50>)
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <MX_I2C1_Init+0x54>)
 80025b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_I2C1_Init+0x50>)
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <MX_I2C1_Init+0x58>)
 80025ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MX_I2C1_Init+0x50>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_I2C1_Init+0x50>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_I2C1_Init+0x50>)
 80025ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <MX_I2C1_Init+0x50>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_I2C1_Init+0x50>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <MX_I2C1_Init+0x50>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_I2C1_Init+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <MX_I2C1_Init+0x50>)
 80025ea:	f002 fa2b 	bl	8004a44 <HAL_I2C_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f4:	f000 fa44 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200003a0 	.word	0x200003a0
 8002600:	40005400 	.word	0x40005400
 8002604:	00061a80 	.word	0x00061a80

08002608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260e:	f107 0320 	add.w	r3, r7, #32
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <MX_TIM2_Init+0xac>)
 800262c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002634:	2201      	movs	r2, #1
 8002636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <MX_TIM2_Init+0xac>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 735;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002640:	f240 22df 	movw	r2, #735	; 0x2df
 8002644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_TIM2_Init+0xac>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002652:	4818      	ldr	r0, [pc, #96]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002654:	f003 fc50 	bl	8005ef8 <HAL_TIM_OC_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800265e:	f000 fa0f 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	4619      	mov	r1, r3
 8002670:	4810      	ldr	r0, [pc, #64]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002672:	f004 fed9 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800267c:	f000 fa00 	bl	8002a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002680:	2330      	movs	r3, #48	; 0x30
 8002682:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <MX_TIM2_Init+0xac>)
 8002698:	f004 f8fe 	bl	8006898 <HAL_TIM_OC_ConfigChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80026a2:	f000 f9ed 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026a6:	4803      	ldr	r0, [pc, #12]	; (80026b4 <MX_TIM2_Init+0xac>)
 80026a8:	f000 fe82 	bl	80033b0 <HAL_TIM_MspPostInit>

}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200003f4 	.word	0x200003f4

080026b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
		//TIMER TRIGGER
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	463b      	mov	r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
  htim3.Init.Period = 2675; fs=15,7KHz fmin = 160Hz fmax = 640Hz
  htim3.Init.Period = 10769; fs=3,9KHz fmin = 40Hz fmax = 160Hz
  htim3.Init.Period = 42857; fs=980Hz fmin = 10Hz fmax = 40Hz
  */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026d4:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_TIM3_Init+0x90>)
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <MX_TIM3_Init+0x94>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_TIM3_Init+0x90>)
 80026dc:	2201      	movs	r2, #1
 80026de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_TIM3_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_TIM3_Init+0x90>)
 80026e8:	223c      	movs	r2, #60	; 0x3c
 80026ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_TIM3_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_TIM3_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026f8:	4813      	ldr	r0, [pc, #76]	; (8002748 <MX_TIM3_Init+0x90>)
 80026fa:	f003 fac9 	bl	8005c90 <HAL_TIM_Base_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002704:	f000 f9bc 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	4619      	mov	r1, r3
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <MX_TIM3_Init+0x90>)
 8002716:	f004 f9b7 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002720:	f000 f9ae 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002724:	2320      	movs	r3, #32
 8002726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_TIM3_Init+0x90>)
 8002732:	f004 fe79 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800273c:	f000 f9a0 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000043c 	.word	0x2000043c
 800274c:	40000400 	.word	0x40000400

08002750 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f006 ffd4 	bl	800970c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <MX_TIM4_Init+0xa0>)
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <MX_TIM4_Init+0xa4>)
 8002770:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_TIM4_Init+0xa0>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_TIM4_Init+0xa0>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_TIM4_Init+0xa0>)
 8002780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002784:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_TIM4_Init+0xa0>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_TIM4_Init+0xa0>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002792:	2301      	movs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002796:	2302      	movs	r3, #2
 8002798:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800279a:	2301      	movs	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80027a2:	230a      	movs	r3, #10
 80027a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80027a6:	2302      	movs	r3, #2
 80027a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027aa:	2301      	movs	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80027b2:	230a      	movs	r3, #10
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_TIM4_Init+0xa0>)
 80027be:	f003 fe0f 	bl	80063e0 <HAL_TIM_Encoder_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80027c8:	f000 f95a 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_TIM4_Init+0xa0>)
 80027da:	f004 fe25 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80027e4:	f000 f94c 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	3730      	adds	r7, #48	; 0x30
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000484 	.word	0x20000484
 80027f4:	40000800 	.word	0x40000800

080027f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0318 	add.w	r3, r7, #24
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002816:	463b      	mov	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <MX_TIM5_Init+0xe0>)
 8002826:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <MX_TIM5_Init+0xdc>)
 800282a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800282e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002836:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800284a:	4822      	ldr	r0, [pc, #136]	; (80028d4 <MX_TIM5_Init+0xdc>)
 800284c:	f003 fa20 	bl	8005c90 <HAL_TIM_Base_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002856:	f000 f913 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002860:	f107 0318 	add.w	r3, r7, #24
 8002864:	4619      	mov	r1, r3
 8002866:	481b      	ldr	r0, [pc, #108]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002868:	f004 f90e 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002872:	f000 f905 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002876:	4817      	ldr	r0, [pc, #92]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002878:	f003 fc3e 	bl	80060f8 <HAL_TIM_IC_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002882:	f000 f8fd 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4619      	mov	r1, r3
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <MX_TIM5_Init+0xdc>)
 8002896:	f004 fdc7 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80028a0:	f000 f8ee 	bl	8002a80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028a8:	2301      	movs	r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	2204      	movs	r2, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4806      	ldr	r0, [pc, #24]	; (80028d4 <MX_TIM5_Init+0xdc>)
 80028bc:	f004 f848 	bl	8006950 <HAL_TIM_IC_ConfigChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80028c6:	f000 f8db 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004cc 	.word	0x200004cc
 80028d8:	40000c00 	.word	0x40000c00

080028dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_DMA_Init+0x3c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <MX_DMA_Init+0x3c>)
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_DMA_Init+0x3c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2105      	movs	r1, #5
 8002902:	2038      	movs	r0, #56	; 0x38
 8002904:	f001 fb4e 	bl	8003fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002908:	2038      	movs	r0, #56	; 0x38
 800290a:	f001 fb67 	bl	8003fdc <HAL_NVIC_EnableIRQ>

}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <MX_GPIO_Init+0x130>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a3d      	ldr	r2, [pc, #244]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <MX_GPIO_Init+0x130>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <MX_GPIO_Init+0x130>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2120      	movs	r1, #32
 80029a6:	482a      	ldr	r0, [pc, #168]	; (8002a50 <MX_GPIO_Init+0x134>)
 80029a8:	f002 f81a 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b2:	4827      	ldr	r0, [pc, #156]	; (8002a50 <MX_GPIO_Init+0x134>)
 80029b4:	f002 f814 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL0_Pin|MUX_SEL2_Pin, GPIO_PIN_SET);
 80029b8:	2201      	movs	r2, #1
 80029ba:	2128      	movs	r1, #40	; 0x28
 80029bc:	4825      	ldr	r0, [pc, #148]	; (8002a54 <MX_GPIO_Init+0x138>)
 80029be:	f002 f80f 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	481f      	ldr	r0, [pc, #124]	; (8002a58 <MX_GPIO_Init+0x13c>)
 80029da:	f001 fe7d 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_SEL1_Pin;
 80029de:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4816      	ldr	r0, [pc, #88]	; (8002a50 <MX_GPIO_Init+0x134>)
 80029f8:	f001 fe6e 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80029fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	480f      	ldr	r0, [pc, #60]	; (8002a50 <MX_GPIO_Init+0x134>)
 8002a14:	f001 fe60 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin MUX_SEL2_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|MUX_SEL2_Pin;
 8002a18:	2328      	movs	r3, #40	; 0x28
 8002a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4809      	ldr	r0, [pc, #36]	; (8002a54 <MX_GPIO_Init+0x138>)
 8002a30:	f001 fe52 	bl	80046d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2105      	movs	r1, #5
 8002a38:	2017      	movs	r0, #23
 8002a3a:	f001 fab3 	bl	8003fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a3e:	2017      	movs	r0, #23
 8002a40:	f001 facc 	bl	8003fdc <HAL_NVIC_EnableIRQ>

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800

08002a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a6e:	f000 fde3 	bl	8003638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
}
 8002a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <Error_Handler+0x8>
	...

08002a8c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2178      	movs	r1, #120	; 0x78
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <ssd1306_WriteCommand+0x2c>)
 8002aac:	f002 f90e 	bl	8004ccc <HAL_I2C_Mem_Write>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200003a0 	.word	0x200003a0

08002abc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af04      	add	r7, sp, #16
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ace:	9202      	str	r2, [sp, #8]
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	2240      	movs	r2, #64	; 0x40
 8002ada:	2178      	movs	r1, #120	; 0x78
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <ssd1306_WriteData+0x30>)
 8002ade:	f002 f8f5 	bl	8004ccc <HAL_I2C_Mem_Write>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200003a0 	.word	0x200003a0

08002af0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
    // Wait for the screen to boot
	//HAL_Delay(100);
	//for(int i; i<100000000; i++);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002af4:	2000      	movs	r0, #0
 8002af6:	f000 fa85 	bl	8003004 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002afa:	2020      	movs	r0, #32
 8002afc:	f7ff ffc6 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff ffc3 	bl	8002a8c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b06:	20b0      	movs	r0, #176	; 0xb0
 8002b08:	f7ff ffc0 	bl	8002a8c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b0c:	20c8      	movs	r0, #200	; 0xc8
 8002b0e:	f7ff ffbd 	bl	8002a8c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff ffba 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b18:	2010      	movs	r0, #16
 8002b1a:	f7ff ffb7 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b1e:	2040      	movs	r0, #64	; 0x40
 8002b20:	f7ff ffb4 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b24:	20ff      	movs	r0, #255	; 0xff
 8002b26:	f000 fa59 	bl	8002fdc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b2a:	20a1      	movs	r0, #161	; 0xa1
 8002b2c:	f7ff ffae 	bl	8002a8c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b30:	20a6      	movs	r0, #166	; 0xa6
 8002b32:	f7ff ffab 	bl	8002a8c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b36:	20a8      	movs	r0, #168	; 0xa8
 8002b38:	f7ff ffa8 	bl	8002a8c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002b3c:	203f      	movs	r0, #63	; 0x3f
 8002b3e:	f7ff ffa5 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b42:	20a4      	movs	r0, #164	; 0xa4
 8002b44:	f7ff ffa2 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b48:	20d3      	movs	r0, #211	; 0xd3
 8002b4a:	f7ff ff9f 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff ff9c 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b54:	20d5      	movs	r0, #213	; 0xd5
 8002b56:	f7ff ff99 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b5a:	20f0      	movs	r0, #240	; 0xf0
 8002b5c:	f7ff ff96 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b60:	20d9      	movs	r0, #217	; 0xd9
 8002b62:	f7ff ff93 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b66:	2022      	movs	r0, #34	; 0x22
 8002b68:	f7ff ff90 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002b6c:	20da      	movs	r0, #218	; 0xda
 8002b6e:	f7ff ff8d 	bl	8002a8c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002b72:	2012      	movs	r0, #18
 8002b74:	f7ff ff8a 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002b78:	20db      	movs	r0, #219	; 0xdb
 8002b7a:	f7ff ff87 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002b7e:	2020      	movs	r0, #32
 8002b80:	f7ff ff84 	bl	8002a8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002b84:	208d      	movs	r0, #141	; 0x8d
 8002b86:	f7ff ff81 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002b8a:	2014      	movs	r0, #20
 8002b8c:	f7ff ff7e 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002b90:	2001      	movs	r0, #1
 8002b92:	f000 fa37 	bl	8003004 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f000 f810 	bl	8002bbc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002b9c:	f000 f832 	bl	8002c04 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <ssd1306_Init+0xc8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <ssd1306_Init+0xc8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <ssd1306_Init+0xc8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	711a      	strb	r2, [r3, #4]
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20001d4c 	.word	0x20001d4c

08002bbc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e00d      	b.n	8002be8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <ssd1306_Fill+0x1a>
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	e000      	b.n	8002bd8 <ssd1306_Fill+0x1c>
 8002bd6:	21ff      	movs	r1, #255	; 0xff
 8002bd8:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <ssd1306_Fill+0x44>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	460a      	mov	r2, r1
 8002be0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d3ed      	bcc.n	8002bcc <ssd1306_Fill+0x10>
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000194c 	.word	0x2000194c

08002c04 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71fb      	strb	r3, [r7, #7]
 8002c0e:	e016      	b.n	8002c3e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	3b50      	subs	r3, #80	; 0x50
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff38 	bl	8002a8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff ff35 	bl	8002a8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002c22:	2010      	movs	r0, #16
 8002c24:	f7ff ff32 	bl	8002a8c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <ssd1306_UpdateScreen+0x4c>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff42 	bl	8002abc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	d9e5      	bls.n	8002c10 <ssd1306_UpdateScreen+0xc>
    }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000194c 	.word	0x2000194c

08002c54 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	71bb      	strb	r3, [r7, #6]
 8002c62:	4613      	mov	r3, r2
 8002c64:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db3d      	blt.n	8002cea <ssd1306_DrawPixel+0x96>
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	2b3f      	cmp	r3, #63	; 0x3f
 8002c72:	d83a      	bhi.n	8002cea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d11a      	bne.n	8002cb0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	79bb      	ldrb	r3, [r7, #6]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	b2d8      	uxtb	r0, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	4413      	add	r3, r2
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <ssd1306_DrawPixel+0xa4>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	79bb      	ldrb	r3, [r7, #6]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b259      	sxtb	r1, r3
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	01db      	lsls	r3, r3, #7
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2c9      	uxtb	r1, r1
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <ssd1306_DrawPixel+0xa4>)
 8002cac:	54d1      	strb	r1, [r2, r3]
 8002cae:	e01d      	b.n	8002cec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cb0:	79fa      	ldrb	r2, [r7, #7]
 8002cb2:	79bb      	ldrb	r3, [r7, #6]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	b2d8      	uxtb	r0, r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <ssd1306_DrawPixel+0xa4>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	b25a      	sxtb	r2, r3
 8002cc4:	79bb      	ldrb	r3, [r7, #6]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b259      	sxtb	r1, r3
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	4603      	mov	r3, r0
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b2c9      	uxtb	r1, r1
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <ssd1306_DrawPixel+0xa4>)
 8002ce6:	54d1      	strb	r1, [r2, r3]
 8002ce8:	e000      	b.n	8002cec <ssd1306_DrawPixel+0x98>
        return;
 8002cea:	bf00      	nop
    }
}
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000194c 	.word	0x2000194c

08002cfc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4604      	mov	r4, r0
 8002d04:	1d38      	adds	r0, r7, #4
 8002d06:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	4613      	mov	r3, r2
 8002d12:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b1f      	cmp	r3, #31
 8002d18:	d902      	bls.n	8002d20 <ssd1306_WriteChar+0x24>
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b7e      	cmp	r3, #126	; 0x7e
 8002d1e:	d901      	bls.n	8002d24 <ssd1306_WriteChar+0x28>
        return 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e06d      	b.n	8002e00 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	793b      	ldrb	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	dc06      	bgt.n	8002d40 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002d34:	885b      	ldrh	r3, [r3, #2]
 8002d36:	461a      	mov	r2, r3
 8002d38:	797b      	ldrb	r3, [r7, #5]
 8002d3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	dd01      	ble.n	8002d44 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e05d      	b.n	8002e00 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e04c      	b.n	8002de4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3b20      	subs	r3, #32
 8002d50:	7979      	ldrb	r1, [r7, #5]
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	440b      	add	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e034      	b.n	8002dd4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d012      	beq.n	8002da0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002d8a:	885b      	ldrh	r3, [r3, #2]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	7bba      	ldrb	r2, [r7, #14]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7ff ff5b 	bl	8002c54 <ssd1306_DrawPixel>
 8002d9e:	e016      	b.n	8002dce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002db0:	885b      	ldrh	r3, [r3, #2]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b2d9      	uxtb	r1, r3
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f7ff ff43 	bl	8002c54 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	793b      	ldrb	r3, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d3c5      	bcc.n	8002d6a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	797b      	ldrb	r3, [r7, #5]
 8002de6:	461a      	mov	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d3ad      	bcc.n	8002d4a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	793b      	ldrb	r3, [r7, #4]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <ssd1306_WriteChar+0x10c>)
 8002dfc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3724      	adds	r7, #36	; 0x24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	20001d4c 	.word	0x20001d4c

08002e0c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	1d38      	adds	r0, r7, #4
 8002e16:	e880 0006 	stmia.w	r0, {r1, r2}
 8002e1a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002e1c:	e012      	b.n	8002e44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	7818      	ldrb	r0, [r3, #0]
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	1d3a      	adds	r2, r7, #4
 8002e26:	ca06      	ldmia	r2, {r1, r2}
 8002e28:	f7ff ff68 	bl	8002cfc <ssd1306_WriteChar>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d002      	beq.n	8002e3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	e008      	b.n	8002e50 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e8      	bne.n	8002e1e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460a      	mov	r2, r1
 8002e62:	71fb      	strb	r3, [r7, #7]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <ssd1306_SetCursor+0x2c>)
 8002e6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002e70:	79bb      	ldrb	r3, [r7, #6]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <ssd1306_SetCursor+0x2c>)
 8002e76:	805a      	strh	r2, [r3, #2]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	20001d4c 	.word	0x20001d4c

08002e88 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4604      	mov	r4, r0
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	71fb      	strb	r3, [r7, #7]
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71bb      	strb	r3, [r7, #6]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	717b      	strb	r3, [r7, #5]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8002ea6:	797a      	ldrb	r2, [r7, #5]
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bfb8      	it	lt
 8002eb0:	425b      	neglt	r3, r3
 8002eb2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002eb4:	793a      	ldrb	r2, [r7, #4]
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bfb8      	it	lt
 8002ebe:	425b      	neglt	r3, r3
 8002ec0:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002ec2:	79fa      	ldrb	r2, [r7, #7]
 8002ec4:	797b      	ldrb	r3, [r7, #5]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d201      	bcs.n	8002ece <ssd1306_Line+0x46>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e001      	b.n	8002ed2 <ssd1306_Line+0x4a>
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002ed4:	79ba      	ldrb	r2, [r7, #6]
 8002ed6:	793b      	ldrb	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d201      	bcs.n	8002ee0 <ssd1306_Line+0x58>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e001      	b.n	8002ee4 <ssd1306_Line+0x5c>
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8002eee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002ef2:	7939      	ldrb	r1, [r7, #4]
 8002ef4:	797b      	ldrb	r3, [r7, #5]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff feac 	bl	8002c54 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8002efc:	e024      	b.n	8002f48 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8002efe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f02:	79b9      	ldrb	r1, [r7, #6]
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fea4 	bl	8002c54 <ssd1306_DrawPixel>
    error2 = error * 2;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	425b      	negs	r3, r3
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dd08      	ble.n	8002f2e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	da08      	bge.n	8002f48 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	4413      	add	r3, r2
 8002f46:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002f48:	79fa      	ldrb	r2, [r7, #7]
 8002f4a:	797b      	ldrb	r3, [r7, #5]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1d6      	bne.n	8002efe <ssd1306_Line+0x76>
 8002f50:	79ba      	ldrb	r2, [r7, #6]
 8002f52:	793b      	ldrb	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1d2      	bne.n	8002efe <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002f58:	bf00      	nop
}
 8002f5a:	3724      	adds	r7, #36	; 0x24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <ssd1306_VLine>:

// NAHUEL
// Dibujar linea Vertical
void ssd1306_VLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	4603      	mov	r3, r0
 8002f74:	71bb      	strb	r3, [r7, #6]
 8002f76:	460b      	mov	r3, r1
 8002f78:	717b      	strb	r3, [r7, #5]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0,y0+length, color);
 8002f7e:	79ba      	ldrb	r2, [r7, #6]
 8002f80:	797b      	ldrb	r3, [r7, #5]
 8002f82:	4413      	add	r3, r2
 8002f84:	b2dc      	uxtb	r4, r3
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	79b9      	ldrb	r1, [r7, #6]
 8002f8a:	79f8      	ldrb	r0, [r7, #7]
 8002f8c:	793b      	ldrb	r3, [r7, #4]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4623      	mov	r3, r4
 8002f92:	f7ff ff79 	bl	8002e88 <ssd1306_Line>
	return;
 8002f96:	bf00      	nop
}
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <ssd1306_HLine>:

//dibujar linea horizontal
void ssd1306_HLine(uint8_t x0, uint8_t y0,  uint8_t length, SSD1306_COLOR color)
{
 8002f9e:	b590      	push	{r4, r7, lr}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	4611      	mov	r1, r2
 8002faa:	461a      	mov	r2, r3
 8002fac:	4623      	mov	r3, r4
 8002fae:	71fb      	strb	r3, [r7, #7]
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71bb      	strb	r3, [r7, #6]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	717b      	strb	r3, [r7, #5]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	713b      	strb	r3, [r7, #4]
	ssd1306_Line(x0,y0,x0+length,y0, color);
 8002fbc:	79fa      	ldrb	r2, [r7, #7]
 8002fbe:	797b      	ldrb	r3, [r7, #5]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	79bc      	ldrb	r4, [r7, #6]
 8002fc6:	79b9      	ldrb	r1, [r7, #6]
 8002fc8:	79f8      	ldrb	r0, [r7, #7]
 8002fca:	793b      	ldrb	r3, [r7, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4623      	mov	r3, r4
 8002fd0:	f7ff ff5a 	bl	8002e88 <ssd1306_Line>
	return;
 8002fd4:	bf00      	nop
}
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd90      	pop	{r4, r7, pc}

08002fdc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002fe6:	2381      	movs	r3, #129	; 0x81
 8002fe8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fd4d 	bl	8002a8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd49 	bl	8002a8c <ssd1306_WriteCommand>
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003014:	23af      	movs	r3, #175	; 0xaf
 8003016:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <ssd1306_SetDisplayOn+0x38>)
 800301a:	2201      	movs	r2, #1
 800301c:	715a      	strb	r2, [r3, #5]
 800301e:	e004      	b.n	800302a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003020:	23ae      	movs	r3, #174	; 0xae
 8003022:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <ssd1306_SetDisplayOn+0x38>)
 8003026:	2200      	movs	r2, #0
 8003028:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fd2d 	bl	8002a8c <ssd1306_WriteCommand>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20001d4c 	.word	0x20001d4c

08003040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_MspInit+0x54>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_MspInit+0x54>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_MspInit+0x54>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_MspInit+0x54>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_MspInit+0x54>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_MspInit+0x54>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	210f      	movs	r1, #15
 8003082:	f06f 0001 	mvn.w	r0, #1
 8003086:	f000 ff8d 	bl	8003fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_ADC_MspInit+0xd8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d156      	bne.n	8003168 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a25      	ldr	r2, [pc, #148]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_ADC_MspInit+0xdc>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f6:	2303      	movs	r3, #3
 80030f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	481c      	ldr	r0, [pc, #112]	; (8003178 <HAL_ADC_MspInit+0xe0>)
 8003106:	f001 fae7 	bl	80046d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_ADC_MspInit+0xe4>)
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_ADC_MspInit+0xe8>)
 800310e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_ADC_MspInit+0xe4>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_ADC_MspInit+0xe4>)
 800312c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_MspInit+0xe4>)
 800313c:	2200      	movs	r2, #0
 800313e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003142:	2200      	movs	r2, #0
 8003144:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003148:	2200      	movs	r2, #0
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800314c:	480b      	ldr	r0, [pc, #44]	; (800317c <HAL_ADC_MspInit+0xe4>)
 800314e:	f000 ff53 	bl	8003ff8 <HAL_DMA_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003158:	f7ff fc92 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
 8003162:	4a06      	ldr	r2, [pc, #24]	; (800317c <HAL_ADC_MspInit+0xe4>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012000 	.word	0x40012000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	20000340 	.word	0x20000340
 8003180:	40026410 	.word	0x40026410

08003184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_I2C_MspInit+0x84>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12c      	bne.n	8003200 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c8:	2312      	movs	r3, #18
 80031ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031d4:	2304      	movs	r3, #4
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	480c      	ldr	r0, [pc, #48]	; (8003210 <HAL_I2C_MspInit+0x8c>)
 80031e0:	f001 fa7a 	bl	80046d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_I2C_MspInit+0x88>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003200:	bf00      	nop
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40005400 	.word	0x40005400
 800320c:	40023800 	.word	0x40023800
 8003210:	40020400 	.word	0x40020400

08003214 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d10d      	bne.n	8003242 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_TIM_OC_MspInit+0x3c>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_TIM_OC_MspInit+0x3c>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_TIM_OC_MspInit+0x3c>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_TIM_Base_MspInit+0xbc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003292:	e038      	b.n	8003306 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM5)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_TIM_Base_MspInit+0xc4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d133      	bne.n	8003306 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032a8:	f043 0308 	orr.w	r3, r3, #8
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_TIM_Base_MspInit+0xc0>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032d6:	2302      	movs	r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032e6:	2302      	movs	r3, #2
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	480a      	ldr	r0, [pc, #40]	; (800331c <HAL_TIM_Base_MspInit+0xc8>)
 80032f2:	f001 f9f1 	bl	80046d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2105      	movs	r1, #5
 80032fa:	2032      	movs	r0, #50	; 0x32
 80032fc:	f000 fe52 	bl	8003fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003300:	2032      	movs	r0, #50	; 0x32
 8003302:	f000 fe6b 	bl	8003fdc <HAL_NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40000400 	.word	0x40000400
 8003314:	40023800 	.word	0x40023800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40020000 	.word	0x40020000

08003320 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12b      	bne.n	800339a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800338a:	2302      	movs	r3, #2
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	4805      	ldr	r0, [pc, #20]	; (80033ac <HAL_TIM_Encoder_MspInit+0x8c>)
 8003396:	f001 f99f 	bl	80046d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800339a:	bf00      	nop
 800339c:	3728      	adds	r7, #40	; 0x28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400

080033b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d11e      	bne.n	8003410 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_TIM_MspPostInit+0x68>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <HAL_TIM_MspPostInit+0x68>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_TIM_MspPostInit+0x68>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003400:	2301      	movs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	4619      	mov	r1, r3
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <HAL_TIM_MspPostInit+0x6c>)
 800340c:	f001 f964 	bl	80046d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000

08003420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <HAL_InitTick+0xd0>)
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <HAL_InitTick+0xd0>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6453      	str	r3, [r2, #68]	; 0x44
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_InitTick+0xd0>)
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800344c:	f107 020c 	add.w	r2, r7, #12
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fbe8 	bl	8005c2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800345c:	f002 fbd2 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8003460:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <HAL_InitTick+0xd4>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	0c9b      	lsrs	r3, r3, #18
 800346c:	3b01      	subs	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_InitTick+0xd8>)
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_InitTick+0xdc>)
 8003474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_InitTick+0xd8>)
 8003478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800347c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800347e:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_InitTick+0xd8>)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_InitTick+0xd8>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_InitTick+0xd8>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_InitTick+0xd8>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003496:	4818      	ldr	r0, [pc, #96]	; (80034f8 <HAL_InitTick+0xd8>)
 8003498:	f002 fbfa 	bl	8005c90 <HAL_TIM_Base_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80034a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11b      	bne.n	80034e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80034aa:	4813      	ldr	r0, [pc, #76]	; (80034f8 <HAL_InitTick+0xd8>)
 80034ac:	f002 fcc2 	bl	8005e34 <HAL_TIM_Base_Start_IT>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80034b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d111      	bne.n	80034e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034be:	2019      	movs	r0, #25
 80034c0:	f000 fd8c 	bl	8003fdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d808      	bhi.n	80034dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80034ca:	2200      	movs	r2, #0
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	2019      	movs	r0, #25
 80034d0:	f000 fd68 	bl	8003fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_InitTick+0xe0>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e002      	b.n	80034e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3730      	adds	r7, #48	; 0x30
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	20001d54 	.word	0x20001d54
 80034fc:	40010000 	.word	0x40010000
 8003500:	20000018 	.word	0x20000018

08003504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <NMI_Handler+0x4>

0800350a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <HardFault_Handler+0x4>

08003510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <MemManage_Handler+0x4>

08003516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351a:	e7fe      	b.n	800351a <BusFault_Handler+0x4>

0800351c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <UsageFault_Handler+0x4>

08003522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SW_Pin);
 8003534:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003538:	f001 fa6c 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}

08003540 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003546:	f003 f89f 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20001d54 	.word	0x20001d54

08003554 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM5_IRQHandler+0x10>)
 800355a:	f003 f895 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200004cc 	.word	0x200004cc

08003568 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA2_Stream0_IRQHandler+0x10>)
 800356e:	f000 fe49 	bl	8004204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000340 	.word	0x20000340

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	; (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480d      	ldr	r0, [pc, #52]	; (80035dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035a6:	490e      	ldr	r1, [pc, #56]	; (80035e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035bc:	4c0b      	ldr	r4, [pc, #44]	; (80035ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ca:	f7ff ffd7 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f006 f86b 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fe fecf 	bl	8002374 <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80035e4:	08009ff8 	.word	0x08009ff8
  ldr r2, =_sbss
 80035e8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80035ec:	20005af4 	.word	0x20005af4

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 fcb6 	bl	8003f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	200f      	movs	r0, #15
 8003624:	f7ff fefc 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fd0a 	bl	8003040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000001c 	.word	0x2000001c
 800365c:	20001d9c 	.word	0x20001d9c

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20001d9c 	.word	0x20001d9c

08003678 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e033      	b.n	80036f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fcfe 	bl	8003098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d118      	bne.n	80036e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036be:	f023 0302 	bic.w	r3, r3, #2
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa34 	bl	8003b38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
 80036e6:	e001      	b.n	80036ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADC_Start_DMA+0x1e>
 800371a:	2302      	movs	r3, #2
 800371c:	e0ce      	b.n	80038bc <HAL_ADC_Start_DMA+0x1bc>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d018      	beq.n	8003766 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003744:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <HAL_ADC_Start_DMA+0x1c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5f      	ldr	r2, [pc, #380]	; (80038c8 <HAL_ADC_Start_DMA+0x1c8>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0c9a      	lsrs	r2, r3, #18
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003758:	e002      	b.n	8003760 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3b01      	subs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003774:	d107      	bne.n	8003786 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003784:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 8086 	bne.w	80038a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d106      	bne.n	80037e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f023 0206 	bic.w	r2, r3, #6
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
 80037e2:	e002      	b.n	80037ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_ADC_Start_DMA+0x1cc>)
 80037f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4a35      	ldr	r2, [pc, #212]	; (80038d0 <HAL_ADC_Start_DMA+0x1d0>)
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_ADC_Start_DMA+0x1d4>)
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <HAL_ADC_Start_DMA+0x1d8>)
 800380c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003816:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003826:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003836:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	334c      	adds	r3, #76	; 0x4c
 8003842:	4619      	mov	r1, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f000 fc84 	bl	8004154 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10f      	bne.n	8003878 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d129      	bne.n	80038ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e020      	b.n	80038ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_ADC_Start_DMA+0x1dc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11b      	bne.n	80038ba <HAL_ADC_Start_DMA+0x1ba>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d114      	bne.n	80038ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e00b      	b.n	80038ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0210 	orr.w	r2, r3, #16
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000014 	.word	0x20000014
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	40012300 	.word	0x40012300
 80038d0:	08003d31 	.word	0x08003d31
 80038d4:	08003deb 	.word	0x08003deb
 80038d8:	08003e07 	.word	0x08003e07
 80038dc:	40012000 	.word	0x40012000

080038e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x1c>
 800390c:	2302      	movs	r3, #2
 800390e:	e105      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x228>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b09      	cmp	r3, #9
 800391e:	d925      	bls.n	800396c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68d9      	ldr	r1, [r3, #12]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	3b1e      	subs	r3, #30
 8003936:	2207      	movs	r2, #7
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43da      	mvns	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	400a      	ands	r2, r1
 8003944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68d9      	ldr	r1, [r3, #12]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	4618      	mov	r0, r3
 8003958:	4603      	mov	r3, r0
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4403      	add	r3, r0
 800395e:	3b1e      	subs	r3, #30
 8003960:	409a      	lsls	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	e022      	b.n	80039b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6919      	ldr	r1, [r3, #16]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	2207      	movs	r2, #7
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	400a      	ands	r2, r1
 800398e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4618      	mov	r0, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4403      	add	r3, r0
 80039a8:	409a      	lsls	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d824      	bhi.n	8003a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b05      	subs	r3, #5
 80039cc:	221f      	movs	r2, #31
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	3b05      	subs	r3, #5
 80039f6:	fa00 f203 	lsl.w	r2, r0, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
 8003a02:	e04c      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d824      	bhi.n	8003a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3b23      	subs	r3, #35	; 0x23
 8003a1e:	221f      	movs	r2, #31
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43da      	mvns	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	3b23      	subs	r3, #35	; 0x23
 8003a48:	fa00 f203 	lsl.w	r2, r0, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
 8003a54:	e023      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	3b41      	subs	r3, #65	; 0x41
 8003a68:	221f      	movs	r2, #31
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4618      	mov	r0, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b41      	subs	r3, #65	; 0x41
 8003a92:	fa00 f203 	lsl.w	r2, r0, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_ADC_ConfigChannel+0x234>)
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <HAL_ADC_ConfigChannel+0x238>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b12      	cmp	r3, #18
 8003ab2:	d105      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_ADC_ConfigChannel+0x238>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d123      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x21e>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d003      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x1e6>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b11      	cmp	r3, #17
 8003ad8:	d11b      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d111      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_ADC_ConfigChannel+0x23c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_ADC_ConfigChannel+0x240>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9a      	lsrs	r2, r3, #18
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012300 	.word	0x40012300
 8003b2c:	40012000 	.word	0x40012000
 8003b30:	20000014 	.word	0x20000014
 8003b34:	431bde83 	.word	0x431bde83

08003b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b40:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <ADC_Init+0x1f0>)
 8003b42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	021a      	lsls	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <ADC_Init+0x1f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6899      	ldr	r1, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6899      	ldr	r1, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	e00f      	b.n	8003c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0202 	bic.w	r2, r2, #2
 8003c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	005a      	lsls	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	035a      	lsls	r2, r3, #13
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	e007      	b.n	8003cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	051a      	lsls	r2, r3, #20
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cee:	025a      	lsls	r2, r3, #9
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	029a      	lsls	r2, r3, #10
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40012300 	.word	0x40012300
 8003d2c:	0f000001 	.word	0x0f000001

08003d30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d13c      	bne.n	8003dc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d12b      	bne.n	8003dbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d127      	bne.n	8003dbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d119      	bne.n	8003dbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0220 	bic.w	r2, r2, #32
 8003d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7fe f9e7 	bl	8002190 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dc2:	e00e      	b.n	8003de2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fd85 	bl	80038e0 <HAL_ADC_ErrorCallback>
}
 8003dd6:	e004      	b.n	8003de2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7fe f99d 	bl	8002138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2240      	movs	r2, #64	; 0x40
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff fd5a 	bl	80038e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <__NVIC_SetPriorityGrouping+0x44>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e50:	4013      	ands	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e66:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <__NVIC_SetPriorityGrouping+0x44>)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	60d3      	str	r3, [r2, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <__NVIC_GetPriorityGrouping+0x18>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 0307 	and.w	r3, r3, #7
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	db0b      	blt.n	8003ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <__NVIC_EnableIRQ+0x38>)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2001      	movs	r0, #1
 8003eba:	fa00 f202 	lsl.w	r2, r0, r2
 8003ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e100 	.word	0xe000e100

08003ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf28      	it	cs
 8003f46:	2304      	movcs	r3, #4
 8003f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d902      	bls.n	8003f58 <NVIC_EncodePriority+0x30>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3b03      	subs	r3, #3
 8003f56:	e000      	b.n	8003f5a <NVIC_EncodePriority+0x32>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f80:	4313      	orrs	r3, r2
         );
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3724      	adds	r7, #36	; 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ff4c 	bl	8003e34 <__NVIC_SetPriorityGrouping>
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb6:	f7ff ff61 	bl	8003e7c <__NVIC_GetPriorityGrouping>
 8003fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7ff ffb1 	bl	8003f28 <NVIC_EncodePriority>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff80 	bl	8003ed4 <__NVIC_SetPriority>
}
 8003fd4:	bf00      	nop
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff54 	bl	8003e98 <__NVIC_EnableIRQ>
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fb2c 	bl	8003660 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e099      	b.n	8004148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004034:	e00f      	b.n	8004056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004036:	f7ff fb13 	bl	8003660 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b05      	cmp	r3, #5
 8004042:	d908      	bls.n	8004056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2203      	movs	r2, #3
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e078      	b.n	8004148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e8      	bne.n	8004036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_DMA_Init+0x158>)
 8004070:	4013      	ands	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d107      	bne.n	80040c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	4313      	orrs	r3, r2
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d117      	bne.n	800411a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fa6f 	bl	80045e0 <DMA_CheckFifoParam>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004116:	2301      	movs	r3, #1
 8004118:	e016      	b.n	8004148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa26 	bl	8004574 <DMA_CalcBaseAndBitshift>
 8004128:	4603      	mov	r3, r0
 800412a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	223f      	movs	r2, #63	; 0x3f
 8004132:	409a      	lsls	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	f010803f 	.word	0xf010803f

08004154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_DMA_Start_IT+0x26>
 8004176:	2302      	movs	r3, #2
 8004178:	e040      	b.n	80041fc <HAL_DMA_Start_IT+0xa8>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d12f      	bne.n	80041ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9b8 	bl	8004518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	223f      	movs	r2, #63	; 0x3f
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0216 	orr.w	r2, r2, #22
 80041c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0208 	orr.w	r2, r2, #8
 80041da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e005      	b.n	80041fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
 80041f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004210:	4b8e      	ldr	r3, [pc, #568]	; (800444c <HAL_DMA_IRQHandler+0x248>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a8e      	ldr	r2, [pc, #568]	; (8004450 <HAL_DMA_IRQHandler+0x24c>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2208      	movs	r2, #8
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2208      	movs	r2, #8
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	2201      	movs	r2, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	2204      	movs	r2, #4
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2204      	movs	r2, #4
 80042ca:	409a      	lsls	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0204 	orr.w	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2210      	movs	r2, #16
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d043      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2210      	movs	r2, #16
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d018      	beq.n	8004346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d024      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e01f      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e016      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0208 	bic.w	r2, r2, #8
 8004362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2220      	movs	r2, #32
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808f 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8087 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2220      	movs	r2, #32
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d136      	bne.n	800441c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0216 	bic.w	r2, r2, #22
 80043bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_DMA_IRQHandler+0x1da>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0208 	bic.w	r2, r2, #8
 80043ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	223f      	movs	r2, #63	; 0x3f
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d07e      	beq.n	8004510 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
        }
        return;
 800441a:	e079      	b.n	8004510 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10d      	bne.n	8004454 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	2b00      	cmp	r3, #0
 800443e:	d031      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e02c      	b.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
 800444a:	bf00      	nop
 800444c:	20000014 	.word	0x20000014
 8004450:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d023      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
 8004464:	e01e      	b.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10f      	bne.n	8004494 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0210 	bic.w	r2, r2, #16
 8004482:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d032      	beq.n	8004512 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d022      	beq.n	80044fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2205      	movs	r2, #5
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d307      	bcc.n	80044ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f2      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x2cc>
 80044ea:	e000      	b.n	80044ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e000      	b.n	8004512 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004510:	bf00      	nop
    }
  }
}
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d108      	bne.n	8004558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004556:	e007      	b.n	8004568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3b10      	subs	r3, #16
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <DMA_CalcBaseAndBitshift+0x68>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d909      	bls.n	80045b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	; 0x58
 80045b4:	e007      	b.n	80045c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	08009fe0 	.word	0x08009fe0

080045e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11f      	bne.n	800463a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d856      	bhi.n	80046ae <DMA_CheckFifoParam+0xce>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x28>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	0800462b 	.word	0x0800462b
 8004610:	08004619 	.word	0x08004619
 8004614:	080046af 	.word	0x080046af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d046      	beq.n	80046b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e043      	b.n	80046b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004632:	d140      	bne.n	80046b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004638:	e03d      	b.n	80046b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	d121      	bne.n	8004688 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d837      	bhi.n	80046ba <DMA_CheckFifoParam+0xda>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <DMA_CheckFifoParam+0x70>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	08004667 	.word	0x08004667
 8004658:	08004661 	.word	0x08004661
 800465c:	08004679 	.word	0x08004679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e030      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d025      	beq.n	80046be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004676:	e022      	b.n	80046be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004680:	d11f      	bne.n	80046c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004686:	e01c      	b.n	80046c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d903      	bls.n	8004696 <DMA_CheckFifoParam+0xb6>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d003      	beq.n	800469c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004694:	e018      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      break;
 800469a:	e015      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e00b      	b.n	80046c6 <DMA_CheckFifoParam+0xe6>
      break;
 80046ae:	bf00      	nop
 80046b0:	e00a      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e008      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e006      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e004      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
    }
  } 
  
  return status; 
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e159      	b.n	80049a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 8148 	bne.w	80049a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a2 	beq.w	80049a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	4a56      	ldr	r2, [pc, #344]	; (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486c:	6453      	str	r3, [r2, #68]	; 0x44
 800486e:	4b54      	ldr	r3, [pc, #336]	; (80049c0 <HAL_GPIO_Init+0x2e8>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800487a:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_GPIO_Init+0x2ec>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <HAL_GPIO_Init+0x2f0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x202>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a48      	ldr	r2, [pc, #288]	; (80049cc <HAL_GPIO_Init+0x2f4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x1fe>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a47      	ldr	r2, [pc, #284]	; (80049d0 <HAL_GPIO_Init+0x2f8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x1fa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <HAL_GPIO_Init+0x2fc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x1f6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a45      	ldr	r2, [pc, #276]	; (80049d8 <HAL_GPIO_Init+0x300>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x1f2>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e008      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e006      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048ce:	2303      	movs	r3, #3
 80048d0:	e004      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e002      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_GPIO_Init+0x204>
 80048da:	2300      	movs	r3, #0
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	f002 0203 	and.w	r2, r2, #3
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	4093      	lsls	r3, r2
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ec:	4935      	ldr	r1, [pc, #212]	; (80049c4 <HAL_GPIO_Init+0x2ec>)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	3302      	adds	r3, #2
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_GPIO_Init+0x304>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800491e:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <HAL_GPIO_Init+0x304>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_GPIO_Init+0x304>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004948:	4a24      	ldr	r2, [pc, #144]	; (80049dc <HAL_GPIO_Init+0x304>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <HAL_GPIO_Init+0x304>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_GPIO_Init+0x304>)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_GPIO_Init+0x304>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800499c:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <HAL_GPIO_Init+0x304>)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	f67f aea2 	bls.w	80046f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3724      	adds	r7, #36	; 0x24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	40020400 	.word	0x40020400
 80049d0:	40020800 	.word	0x40020800
 80049d4:	40020c00 	.word	0x40020c00
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fb34 	bl	80020a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40013c00 	.word	0x40013c00

08004a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e12b      	b.n	8004cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fe fb8a 	bl	8003184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f001 f898 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8004aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a81      	ldr	r2, [pc, #516]	; (8004cb8 <HAL_I2C_Init+0x274>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d807      	bhi.n	8004ac8 <HAL_I2C_Init+0x84>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a80      	ldr	r2, [pc, #512]	; (8004cbc <HAL_I2C_Init+0x278>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e006      	b.n	8004ad6 <HAL_I2C_Init+0x92>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a7d      	ldr	r2, [pc, #500]	; (8004cc0 <HAL_I2C_Init+0x27c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf94      	ite	ls
 8004ad0:	2301      	movls	r3, #1
 8004ad2:	2300      	movhi	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0e7      	b.n	8004cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a78      	ldr	r2, [pc, #480]	; (8004cc4 <HAL_I2C_Init+0x280>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a6a      	ldr	r2, [pc, #424]	; (8004cb8 <HAL_I2C_Init+0x274>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d802      	bhi.n	8004b18 <HAL_I2C_Init+0xd4>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3301      	adds	r3, #1
 8004b16:	e009      	b.n	8004b2c <HAL_I2C_Init+0xe8>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	4a69      	ldr	r2, [pc, #420]	; (8004cc8 <HAL_I2C_Init+0x284>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	495c      	ldr	r1, [pc, #368]	; (8004cb8 <HAL_I2C_Init+0x274>)
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d819      	bhi.n	8004b80 <HAL_I2C_Init+0x13c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e59      	subs	r1, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b60:	400b      	ands	r3, r1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_I2C_Init+0x138>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1e59      	subs	r1, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	e051      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	e04f      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d111      	bne.n	8004bac <HAL_I2C_Init+0x168>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e58      	subs	r0, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e012      	b.n	8004bd2 <HAL_I2C_Init+0x18e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Init+0x196>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e022      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10e      	bne.n	8004c00 <HAL_I2C_Init+0x1bc>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1e58      	subs	r0, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	440b      	add	r3, r1
 8004bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	e00f      	b.n	8004c20 <HAL_I2C_Init+0x1dc>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1e58      	subs	r0, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	0099      	lsls	r1, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c16:	3301      	adds	r3, #1
 8004c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	6809      	ldr	r1, [r1, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6911      	ldr	r1, [r2, #16]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	000186a0 	.word	0x000186a0
 8004cbc:	001e847f 	.word	0x001e847f
 8004cc0:	003d08ff 	.word	0x003d08ff
 8004cc4:	431bde83 	.word	0x431bde83
 8004cc8:	10624dd3 	.word	0x10624dd3

08004ccc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	813b      	strh	r3, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce6:	f7fe fcbb 	bl	8003660 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	f040 80d9 	bne.w	8004eac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2319      	movs	r3, #25
 8004d00:	2201      	movs	r2, #1
 8004d02:	496d      	ldr	r1, [pc, #436]	; (8004eb8 <HAL_I2C_Mem_Write+0x1ec>)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f971 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0cc      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Mem_Write+0x56>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0c5      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d007      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2221      	movs	r2, #33	; 0x21
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a4d      	ldr	r2, [pc, #308]	; (8004ebc <HAL_I2C_Mem_Write+0x1f0>)
 8004d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8a:	88f8      	ldrh	r0, [r7, #6]
 8004d8c:	893a      	ldrh	r2, [r7, #8]
 8004d8e:	8979      	ldrh	r1, [r7, #10]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4603      	mov	r3, r0
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f890 	bl	8004ec0 <I2C_RequestMemoryWrite>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d052      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e081      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f9f2 	bl	8005198 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d107      	bne.n	8004dd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e06b      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d11b      	bne.n	8004e4c <HAL_I2C_Mem_Write+0x180>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1aa      	bne.n	8004daa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f9de 	bl	800521a <I2C_WaitOnBTFFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d107      	bne.n	8004e7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e016      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000

08004ec0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	817b      	strh	r3, [r7, #10]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	813b      	strh	r3, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f878 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f10:	d103      	bne.n	8004f1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e05f      	b.n	8004fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	492d      	ldr	r1, [pc, #180]	; (8004fe8 <I2C_RequestMemoryWrite+0x128>)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8b0 	bl	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e04c      	b.n	8004fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f91a 	bl	8005198 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d107      	bne.n	8004f82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e02b      	b.n	8004fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8c:	893b      	ldrh	r3, [r7, #8]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]
 8004f96:	e021      	b.n	8004fdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f98:	893b      	ldrh	r3, [r7, #8]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8f4 	bl	8005198 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d107      	bne.n	8004fce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e005      	b.n	8004fde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd2:	893b      	ldrh	r3, [r7, #8]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	00010002 	.word	0x00010002

08004fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffc:	e025      	b.n	800504a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d021      	beq.n	800504a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe fb2b 	bl	8003660 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d116      	bne.n	800504a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e023      	b.n	8005092 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10d      	bne.n	8005070 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	e00c      	b.n	800508a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	429a      	cmp	r2, r3
 800508e:	d0b6      	beq.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a8:	e051      	b.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d123      	bne.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e046      	b.n	8005190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d021      	beq.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fe faa9 	bl	8003660 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e020      	b.n	8005190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10c      	bne.n	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	43da      	mvns	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e00b      	b.n	800518a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	43da      	mvns	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d18d      	bne.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a4:	e02d      	b.n	8005202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f878 	bl	800529c <I2C_IsAcknowledgeFailed>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e02d      	b.n	8005212 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d021      	beq.n	8005202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fe fa4f 	bl	8003660 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d116      	bne.n	8005202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e007      	b.n	8005212 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d1ca      	bne.n	80051a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005226:	e02d      	b.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f837 	bl	800529c <I2C_IsAcknowledgeFailed>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e02d      	b.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d021      	beq.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fe fa0e 	bl	8003660 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d116      	bne.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e007      	b.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d1ca      	bne.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d11b      	bne.n	80052ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	f043 0204 	orr.w	r2, r3, #4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e267      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d075      	beq.n	8005406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800531a:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00c      	beq.n	8005340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4b85      	ldr	r3, [pc, #532]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d112      	bne.n	8005358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005332:	4b82      	ldr	r3, [pc, #520]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800533e:	d10b      	bne.n	8005358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	4b7e      	ldr	r3, [pc, #504]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d05b      	beq.n	8005404 <HAL_RCC_OscConfig+0x108>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d157      	bne.n	8005404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e242      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d106      	bne.n	8005370 <HAL_RCC_OscConfig+0x74>
 8005362:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a75      	ldr	r2, [pc, #468]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e01d      	b.n	80053ac <HAL_RCC_OscConfig+0xb0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005378:	d10c      	bne.n	8005394 <HAL_RCC_OscConfig+0x98>
 800537a:	4b70      	ldr	r3, [pc, #448]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a6f      	ldr	r2, [pc, #444]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4b6d      	ldr	r3, [pc, #436]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6c      	ldr	r2, [pc, #432]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e00b      	b.n	80053ac <HAL_RCC_OscConfig+0xb0>
 8005394:	4b69      	ldr	r3, [pc, #420]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a68      	ldr	r2, [pc, #416]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4b66      	ldr	r3, [pc, #408]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a65      	ldr	r2, [pc, #404]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80053a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fe f954 	bl	8003660 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fe f950 	bl	8003660 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e207      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b5b      	ldr	r3, [pc, #364]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0xc0>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fe f940 	bl	8003660 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fe f93c 	bl	8003660 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1f3      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f6:	4b51      	ldr	r3, [pc, #324]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0xe8>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d063      	beq.n	80054da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005412:	4b4a      	ldr	r3, [pc, #296]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005426:	2b08      	cmp	r3, #8
 8005428:	d11c      	bne.n	8005464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542a:	4b44      	ldr	r3, [pc, #272]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d116      	bne.n	8005464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCC_OscConfig+0x152>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e1c7      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4937      	ldr	r1, [pc, #220]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005462:	e03a      	b.n	80054da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <HAL_RCC_OscConfig+0x244>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fe f8f5 	bl	8003660 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547a:	f7fe f8f1 	bl	8003660 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e1a8      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b28      	ldr	r3, [pc, #160]	; (800553c <HAL_RCC_OscConfig+0x240>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4925      	ldr	r1, [pc, #148]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_OscConfig+0x244>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fe f8d4 	bl	8003660 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054bc:	f7fe f8d0 	bl	8003660 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e187      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d036      	beq.n	8005554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0x248>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f4:	f7fe f8b4 	bl	8003660 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fe f8b0 	bl	8003660 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e167      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_OscConfig+0x240>)
 8005510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x200>
 800551a:	e01b      	b.n	8005554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_OscConfig+0x248>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005522:	f7fe f89d 	bl	8003660 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005528:	e00e      	b.n	8005548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800552a:	f7fe f899 	bl	8003660 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d907      	bls.n	8005548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e150      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
 800553c:	40023800 	.word	0x40023800
 8005540:	42470000 	.word	0x42470000
 8005544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	4b88      	ldr	r3, [pc, #544]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ea      	bne.n	800552a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8097 	beq.w	8005690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b81      	ldr	r3, [pc, #516]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	4b7d      	ldr	r3, [pc, #500]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4a7c      	ldr	r2, [pc, #496]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6413      	str	r3, [r2, #64]	; 0x40
 8005582:	4b7a      	ldr	r3, [pc, #488]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005592:	4b77      	ldr	r3, [pc, #476]	; (8005770 <HAL_RCC_OscConfig+0x474>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d118      	bne.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800559e:	4b74      	ldr	r3, [pc, #464]	; (8005770 <HAL_RCC_OscConfig+0x474>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a73      	ldr	r2, [pc, #460]	; (8005770 <HAL_RCC_OscConfig+0x474>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055aa:	f7fe f859 	bl	8003660 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b2:	f7fe f855 	bl	8003660 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e10c      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	4b6a      	ldr	r3, [pc, #424]	; (8005770 <HAL_RCC_OscConfig+0x474>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_OscConfig+0x2ea>
 80055d8:	4b64      	ldr	r3, [pc, #400]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	4a63      	ldr	r2, [pc, #396]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6713      	str	r3, [r2, #112]	; 0x70
 80055e4:	e01c      	b.n	8005620 <HAL_RCC_OscConfig+0x324>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0x30c>
 80055ee:	4b5f      	ldr	r3, [pc, #380]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	4a5e      	ldr	r2, [pc, #376]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	6713      	str	r3, [r2, #112]	; 0x70
 80055fa:	4b5c      	ldr	r3, [pc, #368]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	4a5b      	ldr	r2, [pc, #364]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6713      	str	r3, [r2, #112]	; 0x70
 8005606:	e00b      	b.n	8005620 <HAL_RCC_OscConfig+0x324>
 8005608:	4b58      	ldr	r3, [pc, #352]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	4a57      	ldr	r2, [pc, #348]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	6713      	str	r3, [r2, #112]	; 0x70
 8005614:	4b55      	ldr	r3, [pc, #340]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a54      	ldr	r2, [pc, #336]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800561a:	f023 0304 	bic.w	r3, r3, #4
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fe f81a 	bl	8003660 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fe f816 	bl	8003660 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	; 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0cb      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005646:	4b49      	ldr	r3, [pc, #292]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ee      	beq.n	8005630 <HAL_RCC_OscConfig+0x334>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005654:	f7fe f804 	bl	8003660 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565a:	e00a      	b.n	8005672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fe f800 	bl	8003660 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	; 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e0b5      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1ee      	bne.n	800565c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005684:	4b39      	ldr	r3, [pc, #228]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	4a38      	ldr	r2, [pc, #224]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800568a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80a1 	beq.w	80057dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_OscConfig+0x470>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d05c      	beq.n	8005760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d141      	bne.n	8005732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ae:	4b31      	ldr	r3, [pc, #196]	; (8005774 <HAL_RCC_OscConfig+0x478>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fd ffd4 	bl	8003660 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056bc:	f7fd ffd0 	bl	8003660 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e087      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <HAL_RCC_OscConfig+0x470>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	3b01      	subs	r3, #1
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	491b      	ldr	r1, [pc, #108]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005704:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <HAL_RCC_OscConfig+0x478>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fd ffa9 	bl	8003660 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005712:	f7fd ffa5 	bl	8003660 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e05c      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x416>
 8005730:	e054      	b.n	80057dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCC_OscConfig+0x478>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fd ff92 	bl	8003660 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fd ff8e 	bl	8003660 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e045      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCC_OscConfig+0x470>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x444>
 800575e:	e03d      	b.n	80057dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d107      	bne.n	8005778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e038      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
 800576c:	40023800 	.word	0x40023800
 8005770:	40007000 	.word	0x40007000
 8005774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_OscConfig+0x4ec>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d028      	beq.n	80057d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d121      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579e:	429a      	cmp	r2, r3
 80057a0:	d11a      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d111      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	3b01      	subs	r3, #1
 80057c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800

080057ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0cc      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005800:	4b68      	ldr	r3, [pc, #416]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d90c      	bls.n	8005828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005816:	4b63      	ldr	r3, [pc, #396]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0b8      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d020      	beq.n	8005876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005840:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4a58      	ldr	r2, [pc, #352]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800584a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005858:	4b53      	ldr	r3, [pc, #332]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4a52      	ldr	r2, [pc, #328]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005864:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	494d      	ldr	r1, [pc, #308]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d044      	beq.n	800590c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d119      	bne.n	80058ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e07f      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d003      	beq.n	80058aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058aa:	4b3f      	ldr	r3, [pc, #252]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e06f      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ba:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e067      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ca:	4b37      	ldr	r3, [pc, #220]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f023 0203 	bic.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4934      	ldr	r1, [pc, #208]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058dc:	f7fd fec0 	bl	8003660 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e4:	f7fd febc 	bl	8003660 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e04f      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 020c 	and.w	r2, r3, #12
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	429a      	cmp	r2, r3
 800590a:	d1eb      	bne.n	80058e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d20c      	bcs.n	8005934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b22      	ldr	r3, [pc, #136]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e032      	b.n	800599a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4916      	ldr	r1, [pc, #88]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	490e      	ldr	r1, [pc, #56]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005972:	f000 f821 	bl	80059b8 <HAL_RCC_GetSysClockFreq>
 8005976:	4602      	mov	r2, r0
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	490a      	ldr	r1, [pc, #40]	; (80059ac <HAL_RCC_ClockConfig+0x1c0>)
 8005984:	5ccb      	ldrb	r3, [r1, r3]
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd fd44 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40023c00 	.word	0x40023c00
 80059a8:	40023800 	.word	0x40023800
 80059ac:	08009fc8 	.word	0x08009fc8
 80059b0:	20000014 	.word	0x20000014
 80059b4:	20000018 	.word	0x20000018

080059b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b094      	sub	sp, #80	; 0x50
 80059be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	647b      	str	r3, [r7, #68]	; 0x44
 80059c4:	2300      	movs	r3, #0
 80059c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c8:	2300      	movs	r3, #0
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059d0:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 030c 	and.w	r3, r3, #12
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d00d      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0x40>
 80059dc:	2b08      	cmp	r3, #8
 80059de:	f200 80e1 	bhi.w	8005ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x34>
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d003      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ea:	e0db      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ec:	4b73      	ldr	r3, [pc, #460]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059f0:	e0db      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059f2:	4b73      	ldr	r3, [pc, #460]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80059f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059f6:	e0d8      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059f8:	4b6f      	ldr	r3, [pc, #444]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a02:	4b6d      	ldr	r3, [pc, #436]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d063      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a0e:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	099b      	lsrs	r3, r3, #6
 8005a14:	2200      	movs	r2, #0
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
 8005a22:	2300      	movs	r3, #0
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
 8005a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	f04f 0000 	mov.w	r0, #0
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	0159      	lsls	r1, r3, #5
 8005a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3c:	0150      	lsls	r0, r2, #5
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4621      	mov	r1, r4
 8005a44:	1a51      	subs	r1, r2, r1
 8005a46:	6139      	str	r1, [r7, #16]
 8005a48:	4629      	mov	r1, r5
 8005a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	018b      	lsls	r3, r1, #6
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a66:	4651      	mov	r1, sl
 8005a68:	018a      	lsls	r2, r1, #6
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a70:	4659      	mov	r1, fp
 8005a72:	eb63 0901 	sbc.w	r9, r3, r1
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a8a:	4690      	mov	r8, r2
 8005a8c:	4699      	mov	r9, r3
 8005a8e:	4623      	mov	r3, r4
 8005a90:	eb18 0303 	adds.w	r3, r8, r3
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	462b      	mov	r3, r5
 8005a98:	eb49 0303 	adc.w	r3, r9, r3
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005aaa:	4629      	mov	r1, r5
 8005aac:	024b      	lsls	r3, r1, #9
 8005aae:	4621      	mov	r1, r4
 8005ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	024a      	lsls	r2, r1, #9
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4619      	mov	r1, r3
 8005abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005abe:	2200      	movs	r2, #0
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ac8:	f7fb f866 	bl	8000b98 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	e058      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad6:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	099b      	lsrs	r3, r3, #6
 8005adc:	2200      	movs	r2, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
 8005aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005af0:	4642      	mov	r2, r8
 8005af2:	464b      	mov	r3, r9
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	0159      	lsls	r1, r3, #5
 8005afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b02:	0150      	lsls	r0, r2, #5
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4641      	mov	r1, r8
 8005b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b0e:	4649      	mov	r1, r9
 8005b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b28:	ebb2 040a 	subs.w	r4, r2, sl
 8005b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	00eb      	lsls	r3, r5, #3
 8005b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3e:	00e2      	lsls	r2, r4, #3
 8005b40:	4614      	mov	r4, r2
 8005b42:	461d      	mov	r5, r3
 8005b44:	4643      	mov	r3, r8
 8005b46:	18e3      	adds	r3, r4, r3
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	eb45 0303 	adc.w	r3, r5, r3
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b5e:	4629      	mov	r1, r5
 8005b60:	028b      	lsls	r3, r1, #10
 8005b62:	4621      	mov	r1, r4
 8005b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b68:	4621      	mov	r1, r4
 8005b6a:	028a      	lsls	r2, r1, #10
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	2200      	movs	r2, #0
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	61fa      	str	r2, [r7, #28]
 8005b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b7c:	f7fb f80c 	bl	8000b98 <__aeabi_uldivmod>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4613      	mov	r3, r2
 8005b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	3301      	adds	r3, #1
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3750      	adds	r7, #80	; 0x50
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000014 	.word	0x20000014

08005bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005be0:	f7ff fff0 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0a9b      	lsrs	r3, r3, #10
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4903      	ldr	r1, [pc, #12]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	08009fd8 	.word	0x08009fd8

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c08:	f7ff ffdc 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0b5b      	lsrs	r3, r3, #13
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4903      	ldr	r1, [pc, #12]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40023800 	.word	0x40023800
 8005c28:	08009fd8 	.word	0x08009fd8

08005c2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	220f      	movs	r2, #15
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0203 	and.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <HAL_RCC_GetClockConfig+0x60>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0207 	and.w	r2, r3, #7
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	601a      	str	r2, [r3, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	40023c00 	.word	0x40023c00

08005c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e041      	b.n	8005d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fd facc 	bl	8003254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 ffc0 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d001      	beq.n	8005d48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e03c      	b.n	8005dc2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_TIM_Base_Start+0xa0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIM_Base_Start+0x5c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_Base_Start+0x5c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <HAL_TIM_Base_Start+0xa4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_Base_Start+0x5c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <HAL_TIM_Base_Start+0xa8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_Base_Start+0x5c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_TIM_Base_Start+0xac>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_Base_Start+0x5c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_TIM_Base_Start+0xb0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d010      	beq.n	8005dc0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e007      	b.n	8005dc0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40014000 	.word	0x40014000

08005de4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <HAL_TIM_Base_Stop+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	f240 4344 	movw	r3, #1092	; 0x444
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_Base_Stop+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d001      	beq.n	8005e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e044      	b.n	8005ed6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a19      	ldr	r2, [pc, #100]	; (8005eec <HAL_TIM_Base_Start_IT+0xb8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d111      	bne.n	8005ec4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d010      	beq.n	8005ed4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	e007      	b.n	8005ed4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40014000 	.word	0x40014000

08005ef8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e041      	b.n	8005f8e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd f978 	bl	8003214 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f000 fe8c 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_TIM_OC_Start+0x24>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e022      	b.n	8006002 <HAL_TIM_OC_Start+0x6a>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d109      	bne.n	8005fd6 <HAL_TIM_OC_Start+0x3e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	bf14      	ite	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	2300      	moveq	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	e015      	b.n	8006002 <HAL_TIM_OC_Start+0x6a>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d109      	bne.n	8005ff0 <HAL_TIM_OC_Start+0x58>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	bf14      	ite	ne
 8005fe8:	2301      	movne	r3, #1
 8005fea:	2300      	moveq	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e008      	b.n	8006002 <HAL_TIM_OC_Start+0x6a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e068      	b.n	80060dc <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_TIM_OC_Start+0x82>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006018:	e013      	b.n	8006042 <HAL_TIM_OC_Start+0xaa>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d104      	bne.n	800602a <HAL_TIM_OC_Start+0x92>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006028:	e00b      	b.n	8006042 <HAL_TIM_OC_Start+0xaa>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d104      	bne.n	800603a <HAL_TIM_OC_Start+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	e003      	b.n	8006042 <HAL_TIM_OC_Start+0xaa>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f001 f9c6 	bl	80073dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <HAL_TIM_OC_Start+0x14c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d107      	bne.n	800606a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <HAL_TIM_OC_Start+0x14c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIM_OC_Start+0x10e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d013      	beq.n	80060a6 <HAL_TIM_OC_Start+0x10e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <HAL_TIM_OC_Start+0x150>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIM_OC_Start+0x10e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_TIM_OC_Start+0x154>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIM_OC_Start+0x10e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <HAL_TIM_OC_Start+0x158>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_OC_Start+0x10e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <HAL_TIM_OC_Start+0x15c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d111      	bne.n	80060ca <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d010      	beq.n	80060da <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	e007      	b.n	80060da <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40014000 	.word	0x40014000

080060f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e041      	b.n	800618e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f839 	bl	8006196 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f000 fd8c 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_TIM_IC_Start_IT+0x1e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	e013      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x46>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d104      	bne.n	80061da <HAL_TIM_IC_Start_IT+0x2e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e00b      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x46>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d104      	bne.n	80061ea <HAL_TIM_IC_Start_IT+0x3e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x46>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_TIM_IC_Start_IT+0x58>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e013      	b.n	800622c <HAL_TIM_IC_Start_IT+0x80>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b04      	cmp	r3, #4
 8006208:	d104      	bne.n	8006214 <HAL_TIM_IC_Start_IT+0x68>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e00b      	b.n	800622c <HAL_TIM_IC_Start_IT+0x80>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b08      	cmp	r3, #8
 8006218:	d104      	bne.n	8006224 <HAL_TIM_IC_Start_IT+0x78>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e003      	b.n	800622c <HAL_TIM_IC_Start_IT+0x80>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800622a:	b2db      	uxtb	r3, r3
 800622c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d102      	bne.n	800623a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006234:	7b7b      	ldrb	r3, [r7, #13]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d001      	beq.n	800623e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0c2      	b.n	80063c4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_TIM_IC_Start_IT+0xa2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624c:	e013      	b.n	8006276 <HAL_TIM_IC_Start_IT+0xca>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d104      	bne.n	800625e <HAL_TIM_IC_Start_IT+0xb2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	e00b      	b.n	8006276 <HAL_TIM_IC_Start_IT+0xca>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d104      	bne.n	800626e <HAL_TIM_IC_Start_IT+0xc2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626c:	e003      	b.n	8006276 <HAL_TIM_IC_Start_IT+0xca>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <HAL_TIM_IC_Start_IT+0xda>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006284:	e013      	b.n	80062ae <HAL_TIM_IC_Start_IT+0x102>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b04      	cmp	r3, #4
 800628a:	d104      	bne.n	8006296 <HAL_TIM_IC_Start_IT+0xea>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006294:	e00b      	b.n	80062ae <HAL_TIM_IC_Start_IT+0x102>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_IC_Start_IT+0xfa>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a4:	e003      	b.n	80062ae <HAL_TIM_IC_Start_IT+0x102>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d841      	bhi.n	8006338 <HAL_TIM_IC_Start_IT+0x18c>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <HAL_TIM_IC_Start_IT+0x110>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006339 	.word	0x08006339
 80062c4:	08006339 	.word	0x08006339
 80062c8:	08006339 	.word	0x08006339
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006339 	.word	0x08006339
 80062d4:	08006339 	.word	0x08006339
 80062d8:	08006339 	.word	0x08006339
 80062dc:	08006315 	.word	0x08006315
 80062e0:	08006339 	.word	0x08006339
 80062e4:	08006339 	.word	0x08006339
 80062e8:	08006339 	.word	0x08006339
 80062ec:	08006327 	.word	0x08006327
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0202 	orr.w	r2, r2, #2
 80062fe:	60da      	str	r2, [r3, #12]
      break;
 8006300:	e01d      	b.n	800633e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0204 	orr.w	r2, r2, #4
 8006310:	60da      	str	r2, [r3, #12]
      break;
 8006312:	e014      	b.n	800633e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	60da      	str	r2, [r3, #12]
      break;
 8006324:	e00b      	b.n	800633e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0210 	orr.w	r2, r2, #16
 8006334:	60da      	str	r2, [r3, #12]
      break;
 8006336:	e002      	b.n	800633e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	bf00      	nop
  }

  if (status == HAL_OK)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d13e      	bne.n	80063c2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2201      	movs	r2, #1
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f845 	bl	80073dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_TIM_IC_Start_IT+0x220>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_TIM_IC_Start_IT+0x1e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d013      	beq.n	800638e <HAL_TIM_IC_Start_IT+0x1e2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <HAL_TIM_IC_Start_IT+0x224>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_IC_Start_IT+0x1e2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <HAL_TIM_IC_Start_IT+0x228>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_IC_Start_IT+0x1e2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_TIM_IC_Start_IT+0x22c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_IC_Start_IT+0x1e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a14      	ldr	r2, [pc, #80]	; (80063dc <HAL_TIM_IC_Start_IT+0x230>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d111      	bne.n	80063b2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d010      	beq.n	80063c2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b0:	e007      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40014000 	.word	0x40014000

080063e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e097      	b.n	8006524 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fc ff89 	bl	8003320 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 fc0d 	bl	8006c54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	4313      	orrs	r3, r2
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006480:	f023 030c 	bic.w	r3, r3, #12
 8006484:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800648c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	4313      	orrs	r3, r2
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	011a      	lsls	r2, r3, #4
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	031b      	lsls	r3, r3, #12
 80064b0:	4313      	orrs	r3, r2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	4313      	orrs	r3, r2
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006544:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800654c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006554:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d110      	bne.n	800657e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d102      	bne.n	8006568 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006562:	7b7b      	ldrb	r3, [r7, #13]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d001      	beq.n	800656c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e089      	b.n	8006680 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657c:	e031      	b.n	80065e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d110      	bne.n	80065a6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d102      	bne.n	8006590 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800658a:	7b3b      	ldrb	r3, [r7, #12]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e075      	b.n	8006680 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065a4:	e01d      	b.n	80065e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d108      	bne.n	80065be <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d105      	bne.n	80065be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b2:	7b7b      	ldrb	r3, [r7, #13]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d102      	bne.n	80065be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d001      	beq.n	80065c2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e05e      	b.n	8006680 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d010      	beq.n	8006610 <HAL_TIM_Encoder_Start_IT+0xe4>
 80065ee:	e01f      	b.n	8006630 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 feef 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	60da      	str	r2, [r3, #12]
      break;
 800660e:	e02e      	b.n	800666e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	2104      	movs	r1, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fedf 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0204 	orr.w	r2, r2, #4
 800662c:	60da      	str	r2, [r3, #12]
      break;
 800662e:	e01e      	b.n	800666e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2201      	movs	r2, #1
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fecf 	bl	80073dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2201      	movs	r2, #1
 8006644:	2104      	movs	r1, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fec8 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0202 	orr.w	r2, r2, #2
 800665a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0204 	orr.w	r2, r2, #4
 800666a:	60da      	str	r2, [r3, #12]
      break;
 800666c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d122      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0202 	mvn.w	r2, #2
 80066b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb fe20 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80066d0:	e005      	b.n	80066de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa9f 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 faa6 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d122      	bne.n	8006738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d11b      	bne.n	8006738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0204 	mvn.w	r2, #4
 8006708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb fdf6 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8006724:	e005      	b.n	8006732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa75 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa7c 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b08      	cmp	r3, #8
 8006744:	d122      	bne.n	800678c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b08      	cmp	r3, #8
 8006752:	d11b      	bne.n	800678c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0208 	mvn.w	r2, #8
 800675c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2204      	movs	r2, #4
 8006762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb fdcc 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8006778:	e005      	b.n	8006786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa4b 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fa52 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d122      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d11b      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0210 	mvn.w	r2, #16
 80067b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2208      	movs	r2, #8
 80067b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fb fda2 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80067cc:	e005      	b.n	80067da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa21 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa28 	bl	8006c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d10e      	bne.n	800680c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0201 	mvn.w	r2, #1
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fc f928 	bl	8002a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	2b80      	cmp	r3, #128	; 0x80
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fe70 	bl	8007518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9ed 	bl	8006c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0220 	mvn.w	r2, #32
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fe3a 	bl	8007504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e048      	b.n	8006948 <HAL_TIM_OC_ConfigChannel+0xb0>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d839      	bhi.n	8006938 <HAL_TIM_OC_ConfigChannel+0xa0>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	08006901 	.word	0x08006901
 80068d0:	08006939 	.word	0x08006939
 80068d4:	08006939 	.word	0x08006939
 80068d8:	08006939 	.word	0x08006939
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	08006939 	.word	0x08006939
 80068e4:	08006939 	.word	0x08006939
 80068e8:	08006939 	.word	0x08006939
 80068ec:	0800691d 	.word	0x0800691d
 80068f0:	08006939 	.word	0x08006939
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006939 	.word	0x08006939
 80068fc:	0800692b 	.word	0x0800692b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fa24 	bl	8006d54 <TIM_OC1_SetConfig>
      break;
 800690c:	e017      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fa83 	bl	8006e20 <TIM_OC2_SetConfig>
      break;
 800691a:	e010      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fae8 	bl	8006ef8 <TIM_OC3_SetConfig>
      break;
 8006928:	e009      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fb4b 	bl	8006fcc <TIM_OC4_SetConfig>
      break;
 8006936:	e002      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
      break;
 800693c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_TIM_IC_ConfigChannel+0x1e>
 800696a:	2302      	movs	r3, #2
 800696c:	e088      	b.n	8006a80 <HAL_TIM_IC_ConfigChannel+0x130>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f000 fb6e 	bl	800706c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 020c 	bic.w	r2, r2, #12
 800699e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6999      	ldr	r1, [r3, #24]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	619a      	str	r2, [r3, #24]
 80069b2:	e060      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d11c      	bne.n	80069f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6819      	ldr	r1, [r3, #0]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f000 fbe6 	bl	800719a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6999      	ldr	r1, [r3, #24]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	021a      	lsls	r2, r3, #8
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
 80069f2:	e040      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d11b      	bne.n	8006a32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f000 fc33 	bl	8007274 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 020c 	bic.w	r2, r2, #12
 8006a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69d9      	ldr	r1, [r3, #28]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	61da      	str	r2, [r3, #28]
 8006a30:	e021      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d11c      	bne.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f000 fc50 	bl	80072ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69d9      	ldr	r1, [r3, #28]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	61da      	str	r2, [r3, #28]
 8006a70:	e001      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0b4      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x186>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006adc:	d03e      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0xd4>
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae2:	f200 8087 	bhi.w	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	f000 8086 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x172>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d87f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d01a      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xa6>
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d87b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d050      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d877      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d03c      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xfa>
 8006b08:	2b50      	cmp	r3, #80	; 0x50
 8006b0a:	d873      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d058      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d86f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d064      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d86b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d060      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d867      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d05c      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d05a      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	e062      	b.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f000 fc2d 	bl	800739c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	609a      	str	r2, [r3, #8]
      break;
 8006b5a:	e04f      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f000 fc16 	bl	800739c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7e:	609a      	str	r2, [r3, #8]
      break;
 8006b80:	e03c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 fad4 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2150      	movs	r1, #80	; 0x50
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fbe3 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e02c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f000 fb30 	bl	8007214 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2160      	movs	r1, #96	; 0x60
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fbd3 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e01c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f000 fab4 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2140      	movs	r1, #64	; 0x40
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fbc3 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f000 fbba 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a31      	ldr	r2, [pc, #196]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a30      	ldr	r2, [pc, #192]	; (8006d40 <TIM_Base_SetConfig+0xec>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a25      	ldr	r2, [pc, #148]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d017      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <TIM_Base_SetConfig+0xec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00f      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <TIM_Base_SetConfig+0xf4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d007      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <TIM_Base_SetConfig+0xf8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <TIM_Base_SetConfig+0xfc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d108      	bne.n	8006cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d103      	bne.n	8006d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	615a      	str	r2, [r3, #20]
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400
 8006d50:	40014800 	.word	0x40014800

08006d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0303 	bic.w	r3, r3, #3
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0302 	bic.w	r3, r3, #2
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC1_SetConfig+0xc8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10c      	bne.n	8006dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0308 	bic.w	r3, r3, #8
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <TIM_OC1_SetConfig+0xc8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d111      	bne.n	8006df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000

08006e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0210 	bic.w	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <TIM_OC2_SetConfig+0xd4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d10d      	bne.n	8006e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <TIM_OC2_SetConfig+0xd4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d113      	bne.n	8006ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <TIM_OC3_SetConfig+0xd0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10d      	bne.n	8006f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <TIM_OC3_SetConfig+0xd0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d113      	bne.n	8006fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000

08006fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	031b      	lsls	r3, r3, #12
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a10      	ldr	r2, [pc, #64]	; (8007068 <TIM_OC4_SetConfig+0x9c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d109      	bne.n	8007040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	019b      	lsls	r3, r3, #6
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f023 0201 	bic.w	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a24      	ldr	r2, [pc, #144]	; (8007128 <TIM_TI1_SetConfig+0xbc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <TIM_TI1_SetConfig+0x56>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d00f      	beq.n	80070c2 <TIM_TI1_SetConfig+0x56>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4a21      	ldr	r2, [pc, #132]	; (800712c <TIM_TI1_SetConfig+0xc0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <TIM_TI1_SetConfig+0x56>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a20      	ldr	r2, [pc, #128]	; (8007130 <TIM_TI1_SetConfig+0xc4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d007      	beq.n	80070c2 <TIM_TI1_SetConfig+0x56>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a1f      	ldr	r2, [pc, #124]	; (8007134 <TIM_TI1_SetConfig+0xc8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_TI1_SetConfig+0x56>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <TIM_TI1_SetConfig+0xcc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d101      	bne.n	80070c6 <TIM_TI1_SetConfig+0x5a>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <TIM_TI1_SetConfig+0x5c>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	e003      	b.n	80070e6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f023 030a 	bic.w	r3, r3, #10
 8007100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f003 030a 	and.w	r3, r3, #10
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000

0800713c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 030a 	bic.w	r3, r3, #10
 8007178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b087      	sub	sp, #28
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f023 0210 	bic.w	r2, r3, #16
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	031b      	lsls	r3, r3, #12
 80071de:	b29b      	uxth	r3, r3
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f023 0210 	bic.w	r2, r3, #16
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800723e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	031b      	lsls	r3, r3, #12
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007250:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	621a      	str	r2, [r3, #32]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 0303 	bic.w	r3, r3, #3
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800732a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	031b      	lsls	r3, r3, #12
 8007330:	b29b      	uxth	r3, r3
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800733e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	031b      	lsls	r3, r3, #12
 8007344:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	f043 0307 	orr.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	021a      	lsls	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	431a      	orrs	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2201      	movs	r2, #1
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1a      	ldr	r2, [r3, #32]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	401a      	ands	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	431a      	orrs	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e050      	b.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748c:	d013      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a15      	ldr	r2, [pc, #84]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a13      	ldr	r2, [pc, #76]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10c      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40014000 	.word	0x40014000

08007504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f103 0208 	add.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 0208 	add.w	r2, r3, #8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f103 0208 	add.w	r2, r3, #8
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
}
 80075c2:	bf00      	nop
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d103      	bne.n	80075ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e00c      	b.n	8007608 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3308      	adds	r3, #8
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <vListInsert+0x2e>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	429a      	cmp	r2, r3
 8007606:	d2f6      	bcs.n	80075f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6892      	ldr	r2, [r2, #8]
 8007656:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6852      	ldr	r2, [r2, #4]
 8007660:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d103      	bne.n	8007674 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	1e5a      	subs	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076be:	f001 fce1 	bl	8009084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	441a      	add	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	3b01      	subs	r3, #1
 80076f0:	68f9      	ldr	r1, [r7, #12]
 80076f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	441a      	add	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	22ff      	movs	r2, #255	; 0xff
 8007702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d114      	bne.n	800773e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01a      	beq.n	8007752 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3310      	adds	r3, #16
 8007720:	4618      	mov	r0, r3
 8007722:	f001 f8bb 	bl	800889c <xTaskRemoveFromEventList>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d012      	beq.n	8007752 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800772c:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <xQueueGenericReset+0xcc>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	e009      	b.n	8007752 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3310      	adds	r3, #16
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fef2 	bl	800752c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff feed 	bl	800752c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007752:	f001 fcc7 	bl	80090e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007756:	2301      	movs	r3, #1
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3348      	adds	r3, #72	; 0x48
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fd93 	bl	80092c8 <pvPortMalloc>
 80077a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d011      	beq.n	80077ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	3348      	adds	r3, #72	; 0x48
 80077b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077bc:	79fa      	ldrb	r2, [r7, #7]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4613      	mov	r3, r2
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f805 	bl	80077d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ce:	69bb      	ldr	r3, [r7, #24]
	}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e002      	b.n	80077fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007806:	2101      	movs	r1, #1
 8007808:	69b8      	ldr	r0, [r7, #24]
 800780a:	f7ff ff43 	bl	8007694 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007826:	2300      	movs	r3, #0
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericSend+0x32>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <xQueueGenericSend+0x40>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <xQueueGenericSend+0x44>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <xQueueGenericSend+0x46>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <xQueueGenericSend+0x60>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d103      	bne.n	8007886 <xQueueGenericSend+0x6e>
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <xQueueGenericSend+0x72>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueGenericSend+0x74>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	623b      	str	r3, [r7, #32]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078a6:	f001 f9b5 	bl	8008c14 <xTaskGetSchedulerState>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <xQueueGenericSend+0x9e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <xQueueGenericSend+0xa2>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <xQueueGenericSend+0xa4>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	61fb      	str	r3, [r7, #28]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078d6:	f001 fbd5 	bl	8009084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <xQueueGenericSend+0xd4>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d129      	bne.n	8007940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078f2:	f000 fa29 	bl	8007d48 <prvCopyDataToQueue>
 80078f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d010      	beq.n	8007922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f000 ffc9 	bl	800889c <xTaskRemoveFromEventList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007910:	4b3f      	ldr	r3, [pc, #252]	; (8007a10 <xQueueGenericSend+0x1f8>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	e00a      	b.n	8007938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b39      	ldr	r3, [pc, #228]	; (8007a10 <xQueueGenericSend+0x1f8>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007938:	f001 fbd4 	bl	80090e4 <vPortExitCritical>
				return pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	e063      	b.n	8007a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007946:	f001 fbcd 	bl	80090e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800794a:	2300      	movs	r3, #0
 800794c:	e05c      	b.n	8007a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4618      	mov	r0, r3
 800795a:	f001 f801 	bl	8008960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007962:	f001 fbbf 	bl	80090e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007966:	f000 fdb7 	bl	80084d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796a:	f001 fb8b 	bl	8009084 <vPortEnterCritical>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007974:	b25b      	sxtb	r3, r3
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d103      	bne.n	8007984 <xQueueGenericSend+0x16c>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <xQueueGenericSend+0x182>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800799a:	f001 fba3 	bl	80090e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800799e:	1d3a      	adds	r2, r7, #4
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fff0 	bl	800898c <xTaskCheckForTimeOut>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d124      	bne.n	80079fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b4:	f000 fac0 	bl	8007f38 <prvIsQueueFull>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d018      	beq.n	80079f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	3310      	adds	r3, #16
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 ff44 	bl	8008854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ce:	f000 fa4b 	bl	8007e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079d2:	f000 fd8f 	bl	80084f4 <xTaskResumeAll>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f47f af7c 	bne.w	80078d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <xQueueGenericSend+0x1f8>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	e772      	b.n	80078d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f2:	f000 fa39 	bl	8007e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f6:	f000 fd7d 	bl	80084f4 <xTaskResumeAll>
 80079fa:	e76c      	b.n	80078d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079fe:	f000 fa33 	bl	8007e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a02:	f000 fd77 	bl	80084f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3738      	adds	r7, #56	; 0x38
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b090      	sub	sp, #64	; 0x40
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <xQueueGenericSendFromISR+0x3c>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <xQueueGenericSendFromISR+0x40>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <xQueueGenericSendFromISR+0x42>
 8007a54:	2300      	movs	r3, #0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d103      	bne.n	8007a7e <xQueueGenericSendFromISR+0x6a>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <xQueueGenericSendFromISR+0x6e>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xQueueGenericSendFromISR+0x70>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	623b      	str	r3, [r7, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9e:	f001 fbd3 	bl	8009248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61fa      	str	r2, [r7, #28]
 8007ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <xQueueGenericSendFromISR+0xbc>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d12f      	bne.n	8007b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae6:	f000 f92f 	bl	8007d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d112      	bne.n	8007b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d016      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fecb 	bl	800889c <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00e      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e007      	b.n	8007b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b1e:	3301      	adds	r3, #1
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	b25a      	sxtb	r2, r3
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b2e:	e001      	b.n	8007b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3740      	adds	r7, #64	; 0x40
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08c      	sub	sp, #48	; 0x30
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <xQueueReceive+0x30>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	623b      	str	r3, [r7, #32]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <xQueueReceive+0x3e>
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <xQueueReceive+0x42>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <xQueueReceive+0x44>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueReceive+0x5e>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61fb      	str	r3, [r7, #28]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007baa:	f001 f833 	bl	8008c14 <xTaskGetSchedulerState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <xQueueReceive+0x6e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <xQueueReceive+0x72>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueReceive+0x74>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueReceive+0x8e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	61bb      	str	r3, [r7, #24]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bda:	f001 fa53 	bl	8009084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01f      	beq.n	8007c2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f000 f915 	bl	8007e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00f      	beq.n	8007c22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	3310      	adds	r3, #16
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fe48 	bl	800889c <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c12:	4b3d      	ldr	r3, [pc, #244]	; (8007d08 <xQueueReceive+0x1bc>)
 8007c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c22:	f001 fa5f 	bl	80090e4 <vPortExitCritical>
				return pdPASS;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e069      	b.n	8007cfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c30:	f001 fa58 	bl	80090e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c34:	2300      	movs	r3, #0
 8007c36:	e062      	b.n	8007cfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fe8c 	bl	8008960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c4c:	f001 fa4a 	bl	80090e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c50:	f000 fc42 	bl	80084d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c54:	f001 fa16 	bl	8009084 <vPortEnterCritical>
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5e:	b25b      	sxtb	r3, r3
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d103      	bne.n	8007c6e <xQueueReceive+0x122>
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d103      	bne.n	8007c84 <xQueueReceive+0x138>
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c84:	f001 fa2e 	bl	80090e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c88:	1d3a      	adds	r2, r7, #4
 8007c8a:	f107 0310 	add.w	r3, r7, #16
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fe7b 	bl	800898c <xTaskCheckForTimeOut>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d123      	bne.n	8007ce4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9e:	f000 f935 	bl	8007f0c <prvIsQueueEmpty>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d017      	beq.n	8007cd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	3324      	adds	r3, #36	; 0x24
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fdcf 	bl	8008854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb8:	f000 f8d6 	bl	8007e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cbc:	f000 fc1a 	bl	80084f4 <xTaskResumeAll>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d189      	bne.n	8007bda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <xQueueReceive+0x1bc>)
 8007cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	e780      	b.n	8007bda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cda:	f000 f8c5 	bl	8007e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cde:	f000 fc09 	bl	80084f4 <xTaskResumeAll>
 8007ce2:	e77a      	b.n	8007bda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce6:	f000 f8bf 	bl	8007e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cea:	f000 fc03 	bl	80084f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf0:	f000 f90c 	bl	8007f0c <prvIsQueueEmpty>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f43f af6f 	beq.w	8007bda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3730      	adds	r7, #48	; 0x30
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	60bb      	str	r3, [r7, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007d30:	f001 f9a8 	bl	8009084 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007d3a:	f001 f9d3 	bl	80090e4 <vPortExitCritical>

	return uxReturn;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10d      	bne.n	8007d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d14d      	bne.n	8007e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 ff6c 	bl	8008c50 <xTaskPriorityDisinherit>
 8007d78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	609a      	str	r2, [r3, #8]
 8007d80:	e043      	b.n	8007e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d119      	bne.n	8007dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6858      	ldr	r0, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	461a      	mov	r2, r3
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	f001 fcac 	bl	80096f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d32b      	bcc.n	8007e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	605a      	str	r2, [r3, #4]
 8007dba:	e026      	b.n	8007e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68d8      	ldr	r0, [r3, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	f001 fc92 	bl	80096f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	425b      	negs	r3, r3
 8007dd6:	441a      	add	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d207      	bcs.n	8007df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	425b      	negs	r3, r3
 8007df2:	441a      	add	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d105      	bne.n	8007e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	441a      	add	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d303      	bcc.n	8007e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68d9      	ldr	r1, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6838      	ldr	r0, [r7, #0]
 8007e5c:	f001 fc48 	bl	80096f0 <memcpy>
	}
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e70:	f001 f908 	bl	8009084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e7c:	e011      	b.n	8007ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d012      	beq.n	8007eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fd06 	bl	800889c <xTaskRemoveFromEventList>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e96:	f000 fddb 	bl	8008a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dce9      	bgt.n	8007e7e <prvUnlockQueue+0x16>
 8007eaa:	e000      	b.n	8007eae <prvUnlockQueue+0x46>
					break;
 8007eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007eb6:	f001 f915 	bl	80090e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eba:	f001 f8e3 	bl	8009084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec6:	e011      	b.n	8007eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3310      	adds	r3, #16
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fce1 	bl	800889c <xTaskRemoveFromEventList>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ee0:	f000 fdb6 	bl	8008a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dce9      	bgt.n	8007ec8 <prvUnlockQueue+0x60>
 8007ef4:	e000      	b.n	8007ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	22ff      	movs	r2, #255	; 0xff
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f00:	f001 f8f0 	bl	80090e4 <vPortExitCritical>
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f14:	f001 f8b6 	bl	8009084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e001      	b.n	8007f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f2a:	f001 f8db 	bl	80090e4 <vPortExitCritical>

	return xReturn;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f40:	f001 f8a0 	bl	8009084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d102      	bne.n	8007f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e001      	b.n	8007f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f5a:	f001 f8c3 	bl	80090e4 <vPortExitCritical>

	return xReturn;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08e      	sub	sp, #56	; 0x38
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	623b      	str	r3, [r7, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xTaskCreateStatic+0x46>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	61fb      	str	r3, [r7, #28]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fae:	2354      	movs	r3, #84	; 0x54
 8007fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b54      	cmp	r3, #84	; 0x54
 8007fb6:	d00a      	beq.n	8007fce <xTaskCreateStatic+0x66>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	61bb      	str	r3, [r7, #24]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01e      	beq.n	8008014 <xTaskCreateStatic+0xac>
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01b      	beq.n	8008014 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	9302      	str	r3, [sp, #8]
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f850 	bl	80080ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800800c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800800e:	f000 f8d5 	bl	80081bc <prvAddNewTaskToReadyList>
 8008012:	e001      	b.n	8008018 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008018:	697b      	ldr	r3, [r7, #20]
	}
 800801a:	4618      	mov	r0, r3
 800801c:	3728      	adds	r7, #40	; 0x28
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008022:	b580      	push	{r7, lr}
 8008024:	b08c      	sub	sp, #48	; 0x30
 8008026:	af04      	add	r7, sp, #16
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4618      	mov	r0, r3
 8008038:	f001 f946 	bl	80092c8 <pvPortMalloc>
 800803c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00e      	beq.n	8008062 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008044:	2054      	movs	r0, #84	; 0x54
 8008046:	f001 f93f 	bl	80092c8 <pvPortMalloc>
 800804a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
 8008058:	e005      	b.n	8008066 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800805a:	6978      	ldr	r0, [r7, #20]
 800805c:	f001 fa00 	bl	8009460 <vPortFree>
 8008060:	e001      	b.n	8008066 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d017      	beq.n	800809c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	2300      	movs	r3, #0
 8008078:	9303      	str	r3, [sp, #12]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f80e 	bl	80080ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008090:	69f8      	ldr	r0, [r7, #28]
 8008092:	f000 f893 	bl	80081bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008096:	2301      	movs	r3, #1
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	e002      	b.n	80080a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800809c:	f04f 33ff 	mov.w	r3, #4294967295
 80080a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080a2:	69bb      	ldr	r3, [r7, #24]
	}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080c4:	3b01      	subs	r3, #1
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f023 0307 	bic.w	r3, r3, #7
 80080d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01f      	beq.n	800813a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	e012      	b.n	8008126 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	7819      	ldrb	r1, [r3, #0]
 8008108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	3334      	adds	r3, #52	; 0x34
 8008110:	460a      	mov	r2, r1
 8008112:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	3301      	adds	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b0f      	cmp	r3, #15
 800812a:	d9e9      	bls.n	8008100 <prvInitialiseNewTask+0x54>
 800812c:	e000      	b.n	8008130 <prvInitialiseNewTask+0x84>
			{
				break;
 800812e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008138:	e003      	b.n	8008142 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	2b06      	cmp	r3, #6
 8008146:	d901      	bls.n	800814c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008148:	2306      	movs	r3, #6
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008156:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	2200      	movs	r2, #0
 800815c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fa02 	bl	800756c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	3318      	adds	r3, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f9fd 	bl	800756c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008176:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	f1c3 0207 	rsb	r2, r3, #7
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2200      	movs	r2, #0
 800818c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	69b8      	ldr	r0, [r7, #24]
 800819c:	f000 fe44 	bl	8008e28 <pxPortInitialiseStack>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081c4:	f000 ff5e 	bl	8009084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081c8:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <prvAddNewTaskToReadyList+0xb8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	4a29      	ldr	r2, [pc, #164]	; (8008274 <prvAddNewTaskToReadyList+0xb8>)
 80081d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081d2:	4b29      	ldr	r3, [pc, #164]	; (8008278 <prvAddNewTaskToReadyList+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d109      	bne.n	80081ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081da:	4a27      	ldr	r2, [pc, #156]	; (8008278 <prvAddNewTaskToReadyList+0xbc>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081e0:	4b24      	ldr	r3, [pc, #144]	; (8008274 <prvAddNewTaskToReadyList+0xb8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d110      	bne.n	800820a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081e8:	f000 fc56 	bl	8008a98 <prvInitialiseTaskLists>
 80081ec:	e00d      	b.n	800820a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ee:	4b23      	ldr	r3, [pc, #140]	; (800827c <prvAddNewTaskToReadyList+0xc0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <prvAddNewTaskToReadyList+0xbc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d802      	bhi.n	800820a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008204:	4a1c      	ldr	r2, [pc, #112]	; (8008278 <prvAddNewTaskToReadyList+0xbc>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <prvAddNewTaskToReadyList+0xc4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	4a1b      	ldr	r2, [pc, #108]	; (8008280 <prvAddNewTaskToReadyList+0xc4>)
 8008212:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	2201      	movs	r2, #1
 800821a:	409a      	lsls	r2, r3
 800821c:	4b19      	ldr	r3, [pc, #100]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4313      	orrs	r3, r2
 8008222:	4a18      	ldr	r2, [pc, #96]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4a15      	ldr	r2, [pc, #84]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7ff f9a2 	bl	8007586 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008242:	f000 ff4f 	bl	80090e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <prvAddNewTaskToReadyList+0xc0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00e      	beq.n	800826c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvAddNewTaskToReadyList+0xbc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d207      	bcs.n	800826c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800825c:	4b0b      	ldr	r3, [pc, #44]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20001ea0 	.word	0x20001ea0
 8008278:	20001da0 	.word	0x20001da0
 800827c:	20001eac 	.word	0x20001eac
 8008280:	20001ebc 	.word	0x20001ebc
 8008284:	20001ea8 	.word	0x20001ea8
 8008288:	20001da4 	.word	0x20001da4
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008298:	f000 fef4 	bl	8009084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <vTaskDelete+0x18>
 80082a2:	4b39      	ldr	r3, [pc, #228]	; (8008388 <vTaskDelete+0xf8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	e000      	b.n	80082aa <vTaskDelete+0x1a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff f9c5 	bl	8007640 <uxListRemove>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d115      	bne.n	80082e8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4932      	ldr	r1, [pc, #200]	; (800838c <vTaskDelete+0xfc>)
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <vTaskDelete+0x58>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	2201      	movs	r2, #1
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43da      	mvns	r2, r3
 80082de:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <vTaskDelete+0x100>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4013      	ands	r3, r2
 80082e4:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <vTaskDelete+0x100>)
 80082e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d004      	beq.n	80082fa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3318      	adds	r3, #24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff f9a3 	bl	8007640 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80082fa:	4b26      	ldr	r3, [pc, #152]	; (8008394 <vTaskDelete+0x104>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3301      	adds	r3, #1
 8008300:	4a24      	ldr	r2, [pc, #144]	; (8008394 <vTaskDelete+0x104>)
 8008302:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008304:	4b20      	ldr	r3, [pc, #128]	; (8008388 <vTaskDelete+0xf8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	429a      	cmp	r2, r3
 800830c:	d10b      	bne.n	8008326 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3304      	adds	r3, #4
 8008312:	4619      	mov	r1, r3
 8008314:	4820      	ldr	r0, [pc, #128]	; (8008398 <vTaskDelete+0x108>)
 8008316:	f7ff f936 	bl	8007586 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800831a:	4b20      	ldr	r3, [pc, #128]	; (800839c <vTaskDelete+0x10c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3301      	adds	r3, #1
 8008320:	4a1e      	ldr	r2, [pc, #120]	; (800839c <vTaskDelete+0x10c>)
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	e009      	b.n	800833a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008326:	4b1e      	ldr	r3, [pc, #120]	; (80083a0 <vTaskDelete+0x110>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3b01      	subs	r3, #1
 800832c:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <vTaskDelete+0x110>)
 800832e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fc1f 	bl	8008b74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008336:	f000 fc4d 	bl	8008bd4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800833a:	f000 fed3 	bl	80090e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800833e:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <vTaskDelete+0x114>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01b      	beq.n	800837e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <vTaskDelete+0xf8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	429a      	cmp	r2, r3
 800834e:	d116      	bne.n	800837e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008350:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <vTaskDelete+0x118>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <vTaskDelete+0xde>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	60bb      	str	r3, [r7, #8]
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <vTaskDelete+0x11c>)
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001da0 	.word	0x20001da0
 800838c:	20001da4 	.word	0x20001da4
 8008390:	20001ea8 	.word	0x20001ea8
 8008394:	20001ebc 	.word	0x20001ebc
 8008398:	20001e74 	.word	0x20001e74
 800839c:	20001e88 	.word	0x20001e88
 80083a0:	20001ea0 	.word	0x20001ea0
 80083a4:	20001eac 	.word	0x20001eac
 80083a8:	20001ec8 	.word	0x20001ec8
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d017      	beq.n	80083f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083c2:	4b13      	ldr	r3, [pc, #76]	; (8008410 <vTaskDelay+0x60>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <vTaskDelay+0x30>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60bb      	str	r3, [r7, #8]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083e0:	f000 f87a 	bl	80084d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083e4:	2100      	movs	r1, #0
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fcb8 	bl	8008d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083ec:	f000 f882 	bl	80084f4 <xTaskResumeAll>
 80083f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083f8:	4b06      	ldr	r3, [pc, #24]	; (8008414 <vTaskDelay+0x64>)
 80083fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20001ec8 	.word	0x20001ec8
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008426:	463a      	mov	r2, r7
 8008428:	1d39      	adds	r1, r7, #4
 800842a:	f107 0308 	add.w	r3, r7, #8
 800842e:	4618      	mov	r0, r3
 8008430:	f7f8 fd34 	bl	8000e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	9202      	str	r2, [sp, #8]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	460a      	mov	r2, r1
 8008446:	491e      	ldr	r1, [pc, #120]	; (80084c0 <vTaskStartScheduler+0xa8>)
 8008448:	481e      	ldr	r0, [pc, #120]	; (80084c4 <vTaskStartScheduler+0xac>)
 800844a:	f7ff fd8d 	bl	8007f68 <xTaskCreateStatic>
 800844e:	4603      	mov	r3, r0
 8008450:	4a1d      	ldr	r2, [pc, #116]	; (80084c8 <vTaskStartScheduler+0xb0>)
 8008452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008454:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <vTaskStartScheduler+0xb0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800845c:	2301      	movs	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e001      	b.n	8008466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d116      	bne.n	800849a <vTaskStartScheduler+0x82>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	613b      	str	r3, [r7, #16]
}
 800847e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008480:	4b12      	ldr	r3, [pc, #72]	; (80084cc <vTaskStartScheduler+0xb4>)
 8008482:	f04f 32ff 	mov.w	r2, #4294967295
 8008486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008488:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <vTaskStartScheduler+0xb8>)
 800848a:	2201      	movs	r2, #1
 800848c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800848e:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <vTaskStartScheduler+0xbc>)
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008494:	f000 fd54 	bl	8008f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008498:	e00e      	b.n	80084b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d10a      	bne.n	80084b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vTaskStartScheduler+0x9e>
}
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	080099d0 	.word	0x080099d0
 80084c4:	08008a69 	.word	0x08008a69
 80084c8:	20001ec4 	.word	0x20001ec4
 80084cc:	20001ec0 	.word	0x20001ec0
 80084d0:	20001eac 	.word	0x20001eac
 80084d4:	20001ea4 	.word	0x20001ea4

080084d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20001ec8 	.word	0x20001ec8

080084f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008502:	4b41      	ldr	r3, [pc, #260]	; (8008608 <xTaskResumeAll+0x114>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <xTaskResumeAll+0x2c>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	603b      	str	r3, [r7, #0]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008520:	f000 fdb0 	bl	8009084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008524:	4b38      	ldr	r3, [pc, #224]	; (8008608 <xTaskResumeAll+0x114>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3b01      	subs	r3, #1
 800852a:	4a37      	ldr	r2, [pc, #220]	; (8008608 <xTaskResumeAll+0x114>)
 800852c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852e:	4b36      	ldr	r3, [pc, #216]	; (8008608 <xTaskResumeAll+0x114>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d161      	bne.n	80085fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008536:	4b35      	ldr	r3, [pc, #212]	; (800860c <xTaskResumeAll+0x118>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d05d      	beq.n	80085fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853e:	e02e      	b.n	800859e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008540:	4b33      	ldr	r3, [pc, #204]	; (8008610 <xTaskResumeAll+0x11c>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3318      	adds	r3, #24
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff f877 	bl	8007640 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3304      	adds	r3, #4
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff f872 	bl	8007640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	2201      	movs	r2, #1
 8008562:	409a      	lsls	r2, r3
 8008564:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <xTaskResumeAll+0x120>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4313      	orrs	r3, r2
 800856a:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <xTaskResumeAll+0x120>)
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4a27      	ldr	r2, [pc, #156]	; (8008618 <xTaskResumeAll+0x124>)
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7fe fffe 	bl	8007586 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4b23      	ldr	r3, [pc, #140]	; (800861c <xTaskResumeAll+0x128>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008598:	4b21      	ldr	r3, [pc, #132]	; (8008620 <xTaskResumeAll+0x12c>)
 800859a:	2201      	movs	r2, #1
 800859c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <xTaskResumeAll+0x11c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1cc      	bne.n	8008540 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085ac:	f000 fb12 	bl	8008bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085b0:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <xTaskResumeAll+0x130>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085bc:	f000 f836 	bl	800862c <xTaskIncrementTick>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <xTaskResumeAll+0x12c>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f1      	bne.n	80085bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <xTaskResumeAll+0x130>)
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <xTaskResumeAll+0x12c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <xTaskResumeAll+0x134>)
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085fa:	f000 fd73 	bl	80090e4 <vPortExitCritical>

	return xAlreadyYielded;
 80085fe:	68bb      	ldr	r3, [r7, #8]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20001ec8 	.word	0x20001ec8
 800860c:	20001ea0 	.word	0x20001ea0
 8008610:	20001e60 	.word	0x20001e60
 8008614:	20001ea8 	.word	0x20001ea8
 8008618:	20001da4 	.word	0x20001da4
 800861c:	20001da0 	.word	0x20001da0
 8008620:	20001eb4 	.word	0x20001eb4
 8008624:	20001eb0 	.word	0x20001eb0
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008636:	4b4e      	ldr	r3, [pc, #312]	; (8008770 <xTaskIncrementTick+0x144>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 808e 	bne.w	800875c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008640:	4b4c      	ldr	r3, [pc, #304]	; (8008774 <xTaskIncrementTick+0x148>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008648:	4a4a      	ldr	r2, [pc, #296]	; (8008774 <xTaskIncrementTick+0x148>)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d120      	bne.n	8008696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008654:	4b48      	ldr	r3, [pc, #288]	; (8008778 <xTaskIncrementTick+0x14c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <xTaskIncrementTick+0x48>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	603b      	str	r3, [r7, #0]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xTaskIncrementTick+0x46>
 8008674:	4b40      	ldr	r3, [pc, #256]	; (8008778 <xTaskIncrementTick+0x14c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	4b40      	ldr	r3, [pc, #256]	; (800877c <xTaskIncrementTick+0x150>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a3e      	ldr	r2, [pc, #248]	; (8008778 <xTaskIncrementTick+0x14c>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4a3e      	ldr	r2, [pc, #248]	; (800877c <xTaskIncrementTick+0x150>)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b3d      	ldr	r3, [pc, #244]	; (8008780 <xTaskIncrementTick+0x154>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	4a3c      	ldr	r2, [pc, #240]	; (8008780 <xTaskIncrementTick+0x154>)
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	f000 fa9f 	bl	8008bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008696:	4b3b      	ldr	r3, [pc, #236]	; (8008784 <xTaskIncrementTick+0x158>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d348      	bcc.n	8008732 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a0:	4b35      	ldr	r3, [pc, #212]	; (8008778 <xTaskIncrementTick+0x14c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	4b36      	ldr	r3, [pc, #216]	; (8008784 <xTaskIncrementTick+0x158>)
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	601a      	str	r2, [r3, #0]
					break;
 80086b2:	e03e      	b.n	8008732 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b4:	4b30      	ldr	r3, [pc, #192]	; (8008778 <xTaskIncrementTick+0x14c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d203      	bcs.n	80086d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086cc:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <xTaskIncrementTick+0x158>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086d2:	e02e      	b.n	8008732 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe ffb1 	bl	8007640 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3318      	adds	r3, #24
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe ffa8 	bl	8007640 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	2201      	movs	r2, #1
 80086f6:	409a      	lsls	r2, r3
 80086f8:	4b23      	ldr	r3, [pc, #140]	; (8008788 <xTaskIncrementTick+0x15c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	4a22      	ldr	r2, [pc, #136]	; (8008788 <xTaskIncrementTick+0x15c>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a1f      	ldr	r2, [pc, #124]	; (800878c <xTaskIncrementTick+0x160>)
 8008710:	441a      	add	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe ff34 	bl	8007586 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <xTaskIncrementTick+0x164>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	429a      	cmp	r2, r3
 800872a:	d3b9      	bcc.n	80086a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008730:	e7b6      	b.n	80086a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008732:	4b17      	ldr	r3, [pc, #92]	; (8008790 <xTaskIncrementTick+0x164>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4914      	ldr	r1, [pc, #80]	; (800878c <xTaskIncrementTick+0x160>)
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d901      	bls.n	800874e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800874a:	2301      	movs	r3, #1
 800874c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <xTaskIncrementTick+0x168>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e004      	b.n	8008766 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800875c:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <xTaskIncrementTick+0x16c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a0d      	ldr	r2, [pc, #52]	; (8008798 <xTaskIncrementTick+0x16c>)
 8008764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20001ec8 	.word	0x20001ec8
 8008774:	20001ea4 	.word	0x20001ea4
 8008778:	20001e58 	.word	0x20001e58
 800877c:	20001e5c 	.word	0x20001e5c
 8008780:	20001eb8 	.word	0x20001eb8
 8008784:	20001ec0 	.word	0x20001ec0
 8008788:	20001ea8 	.word	0x20001ea8
 800878c:	20001da4 	.word	0x20001da4
 8008790:	20001da0 	.word	0x20001da0
 8008794:	20001eb4 	.word	0x20001eb4
 8008798:	20001eb0 	.word	0x20001eb0

0800879c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087a2:	4b27      	ldr	r3, [pc, #156]	; (8008840 <vTaskSwitchContext+0xa4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087aa:	4b26      	ldr	r3, [pc, #152]	; (8008844 <vTaskSwitchContext+0xa8>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087b0:	e03f      	b.n	8008832 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <vTaskSwitchContext+0xa8>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b8:	4b23      	ldr	r3, [pc, #140]	; (8008848 <vTaskSwitchContext+0xac>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	fab3 f383 	clz	r3, r3
 80087c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	f1c3 031f 	rsb	r3, r3, #31
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	491f      	ldr	r1, [pc, #124]	; (800884c <vTaskSwitchContext+0xb0>)
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <vTaskSwitchContext+0x5a>
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4a12      	ldr	r2, [pc, #72]	; (800884c <vTaskSwitchContext+0xb0>)
 8008804:	4413      	add	r3, r2
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	3308      	adds	r3, #8
 800881a:	429a      	cmp	r2, r3
 800881c:	d104      	bne.n	8008828 <vTaskSwitchContext+0x8c>
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	605a      	str	r2, [r3, #4]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4a08      	ldr	r2, [pc, #32]	; (8008850 <vTaskSwitchContext+0xb4>)
 8008830:	6013      	str	r3, [r2, #0]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20001ec8 	.word	0x20001ec8
 8008844:	20001eb4 	.word	0x20001eb4
 8008848:	20001ea8 	.word	0x20001ea8
 800884c:	20001da4 	.word	0x20001da4
 8008850:	20001da0 	.word	0x20001da0

08008854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60fb      	str	r3, [r7, #12]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800887a:	4b07      	ldr	r3, [pc, #28]	; (8008898 <vTaskPlaceOnEventList+0x44>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3318      	adds	r3, #24
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe fea3 	bl	80075ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008888:	2101      	movs	r1, #1
 800888a:	6838      	ldr	r0, [r7, #0]
 800888c:	f000 fa66 	bl	8008d5c <prvAddCurrentTaskToDelayedList>
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20001da0 	.word	0x20001da0

0800889c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3318      	adds	r3, #24
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe feb7 	bl	8007640 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <xTaskRemoveFromEventList+0xac>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d11c      	bne.n	8008914 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe feae 	bl	8007640 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	2201      	movs	r2, #1
 80088ea:	409a      	lsls	r2, r3
 80088ec:	4b17      	ldr	r3, [pc, #92]	; (800894c <xTaskRemoveFromEventList+0xb0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <xTaskRemoveFromEventList+0xb0>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4a13      	ldr	r2, [pc, #76]	; (8008950 <xTaskRemoveFromEventList+0xb4>)
 8008904:	441a      	add	r2, r3
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7fe fe3a 	bl	8007586 <vListInsertEnd>
 8008912:	e005      	b.n	8008920 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3318      	adds	r3, #24
 8008918:	4619      	mov	r1, r3
 800891a:	480e      	ldr	r0, [pc, #56]	; (8008954 <xTaskRemoveFromEventList+0xb8>)
 800891c:	f7fe fe33 	bl	8007586 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <xTaskRemoveFromEventList+0xbc>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	429a      	cmp	r2, r3
 800892c:	d905      	bls.n	800893a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <xTaskRemoveFromEventList+0xc0>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e001      	b.n	800893e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800893e:	697b      	ldr	r3, [r7, #20]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20001ec8 	.word	0x20001ec8
 800894c:	20001ea8 	.word	0x20001ea8
 8008950:	20001da4 	.word	0x20001da4
 8008954:	20001e60 	.word	0x20001e60
 8008958:	20001da0 	.word	0x20001da0
 800895c:	20001eb4 	.word	0x20001eb4

08008960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <vTaskInternalSetTimeOutState+0x24>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <vTaskInternalSetTimeOutState+0x28>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	605a      	str	r2, [r3, #4]
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20001eb8 	.word	0x20001eb8
 8008988:	20001ea4 	.word	0x20001ea4

0800898c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	613b      	str	r3, [r7, #16]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60fb      	str	r3, [r7, #12]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089ce:	f000 fb59 	bl	8009084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <xTaskCheckForTimeOut+0xbc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d102      	bne.n	80089f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e023      	b.n	8008a3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <xTaskCheckForTimeOut+0xc0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d007      	beq.n	8008a0e <xTaskCheckForTimeOut+0x82>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d302      	bcc.n	8008a0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	61fb      	str	r3, [r7, #28]
 8008a0c:	e015      	b.n	8008a3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d20b      	bcs.n	8008a30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff9b 	bl	8008960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e004      	b.n	8008a3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a36:	2301      	movs	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a3a:	f000 fb53 	bl	80090e4 <vPortExitCritical>

	return xReturn;
 8008a3e:	69fb      	ldr	r3, [r7, #28]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20001ea4 	.word	0x20001ea4
 8008a4c:	20001eb8 	.word	0x20001eb8

08008a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <vTaskMissedYield+0x14>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
}
 8008a5a:	bf00      	nop
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20001eb4 	.word	0x20001eb4

08008a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a70:	f000 f852 	bl	8008b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <prvIdleTask+0x28>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d9f9      	bls.n	8008a70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <prvIdleTask+0x2c>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a8c:	e7f0      	b.n	8008a70 <prvIdleTask+0x8>
 8008a8e:	bf00      	nop
 8008a90:	20001da4 	.word	0x20001da4
 8008a94:	e000ed04 	.word	0xe000ed04

08008a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	e00c      	b.n	8008abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4a12      	ldr	r2, [pc, #72]	; (8008af8 <prvInitialiseTaskLists+0x60>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fd3a 	bl	800752c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3301      	adds	r3, #1
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b06      	cmp	r3, #6
 8008ac2:	d9ef      	bls.n	8008aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ac4:	480d      	ldr	r0, [pc, #52]	; (8008afc <prvInitialiseTaskLists+0x64>)
 8008ac6:	f7fe fd31 	bl	800752c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aca:	480d      	ldr	r0, [pc, #52]	; (8008b00 <prvInitialiseTaskLists+0x68>)
 8008acc:	f7fe fd2e 	bl	800752c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ad0:	480c      	ldr	r0, [pc, #48]	; (8008b04 <prvInitialiseTaskLists+0x6c>)
 8008ad2:	f7fe fd2b 	bl	800752c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ad6:	480c      	ldr	r0, [pc, #48]	; (8008b08 <prvInitialiseTaskLists+0x70>)
 8008ad8:	f7fe fd28 	bl	800752c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008adc:	480b      	ldr	r0, [pc, #44]	; (8008b0c <prvInitialiseTaskLists+0x74>)
 8008ade:	f7fe fd25 	bl	800752c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <prvInitialiseTaskLists+0x78>)
 8008ae4:	4a05      	ldr	r2, [pc, #20]	; (8008afc <prvInitialiseTaskLists+0x64>)
 8008ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <prvInitialiseTaskLists+0x7c>)
 8008aea:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <prvInitialiseTaskLists+0x68>)
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20001da4 	.word	0x20001da4
 8008afc:	20001e30 	.word	0x20001e30
 8008b00:	20001e44 	.word	0x20001e44
 8008b04:	20001e60 	.word	0x20001e60
 8008b08:	20001e74 	.word	0x20001e74
 8008b0c:	20001e8c 	.word	0x20001e8c
 8008b10:	20001e58 	.word	0x20001e58
 8008b14:	20001e5c 	.word	0x20001e5c

08008b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b1e:	e019      	b.n	8008b54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b20:	f000 fab0 	bl	8009084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b24:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <prvCheckTasksWaitingTermination+0x50>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fd85 	bl	8007640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <prvCheckTasksWaitingTermination+0x54>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <prvCheckTasksWaitingTermination+0x54>)
 8008b3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b4a:	f000 facb 	bl	80090e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f810 	bl	8008b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e1      	bne.n	8008b20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001e74 	.word	0x20001e74
 8008b6c:	20001ea0 	.word	0x20001ea0
 8008b70:	20001e88 	.word	0x20001e88

08008b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d108      	bne.n	8008b98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fc68 	bl	8009460 <vPortFree>
				vPortFree( pxTCB );
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc65 	bl	8009460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b96:	e018      	b.n	8008bca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d103      	bne.n	8008baa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fc5c 	bl	8009460 <vPortFree>
	}
 8008ba8:	e00f      	b.n	8008bca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d00a      	beq.n	8008bca <prvDeleteTCB+0x56>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <prvDeleteTCB+0x54>
	}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <prvResetNextTaskUnblockTime+0x38>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <prvResetNextTaskUnblockTime+0x3c>)
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bec:	e008      	b.n	8008c00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bee:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <prvResetNextTaskUnblockTime+0x38>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a04      	ldr	r2, [pc, #16]	; (8008c10 <prvResetNextTaskUnblockTime+0x3c>)
 8008bfe:	6013      	str	r3, [r2, #0]
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20001e58 	.word	0x20001e58
 8008c10:	20001ec0 	.word	0x20001ec0

08008c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <xTaskGetSchedulerState+0x34>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c22:	2301      	movs	r3, #1
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	e008      	b.n	8008c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c28:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <xTaskGetSchedulerState+0x38>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c30:	2302      	movs	r3, #2
 8008c32:	607b      	str	r3, [r7, #4]
 8008c34:	e001      	b.n	8008c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c3a:	687b      	ldr	r3, [r7, #4]
	}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	20001eac 	.word	0x20001eac
 8008c4c:	20001ec8 	.word	0x20001ec8

08008c50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d06e      	beq.n	8008d44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c66:	4b3a      	ldr	r3, [pc, #232]	; (8008d50 <xTaskPriorityDisinherit+0x100>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d00a      	beq.n	8008c86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60bb      	str	r3, [r7, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca8:	1e5a      	subs	r2, r3, #1
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d044      	beq.n	8008d44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d140      	bne.n	8008d44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fcba 	bl	8007640 <uxListRemove>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d115      	bne.n	8008cfe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	491f      	ldr	r1, [pc, #124]	; (8008d54 <xTaskPriorityDisinherit+0x104>)
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <xTaskPriorityDisinherit+0xae>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	2201      	movs	r2, #1
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43da      	mvns	r2, r3
 8008cf4:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xTaskPriorityDisinherit+0x108>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xTaskPriorityDisinherit+0x108>)
 8008cfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f1c3 0207 	rsb	r2, r3, #7
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	2201      	movs	r2, #1
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <xTaskPriorityDisinherit+0x108>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	4a0d      	ldr	r2, [pc, #52]	; (8008d58 <xTaskPriorityDisinherit+0x108>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <xTaskPriorityDisinherit+0x104>)
 8008d32:	441a      	add	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fc23 	bl	8007586 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d44:	697b      	ldr	r3, [r7, #20]
	}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20001da0 	.word	0x20001da0
 8008d54:	20001da4 	.word	0x20001da4
 8008d58:	20001ea8 	.word	0x20001ea8

08008d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d66:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe fc64 	bl	8007640 <uxListRemove>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d7e:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	2201      	movs	r2, #1
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43da      	mvns	r2, r3
 8008d8c:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4013      	ands	r3, r2
 8008d92:	4a20      	ldr	r2, [pc, #128]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d10a      	bne.n	8008db4 <prvAddCurrentTaskToDelayedList+0x58>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	481a      	ldr	r0, [pc, #104]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dae:	f7fe fbea 	bl	8007586 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008db2:	e026      	b.n	8008e02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4413      	add	r3, r2
 8008dba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dbc:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d209      	bcs.n	8008de0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dcc:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f7fe fbf8 	bl	80075ce <vListInsert>
}
 8008dde:	e010      	b.n	8008e02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7fe fbee 	bl	80075ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d202      	bcs.n	8008e02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dfc:	4a09      	ldr	r2, [pc, #36]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6013      	str	r3, [r2, #0]
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20001ea4 	.word	0x20001ea4
 8008e10:	20001da0 	.word	0x20001da0
 8008e14:	20001ea8 	.word	0x20001ea8
 8008e18:	20001e8c 	.word	0x20001e8c
 8008e1c:	20001e5c 	.word	0x20001e5c
 8008e20:	20001e58 	.word	0x20001e58
 8008e24:	20001ec0 	.word	0x20001ec0

08008e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3b04      	subs	r3, #4
 8008e38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b04      	subs	r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f023 0201 	bic.w	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e58:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <pxPortInitialiseStack+0x64>)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3b14      	subs	r3, #20
 8008e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f06f 0202 	mvn.w	r2, #2
 8008e76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3b20      	subs	r3, #32
 8008e7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	08008e91 	.word	0x08008e91

08008e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e9a:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <prvTaskExitError+0x54>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea2:	d00a      	beq.n	8008eba <prvTaskExitError+0x2a>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60fb      	str	r3, [r7, #12]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <prvTaskExitError+0x28>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60bb      	str	r3, [r7, #8]
}
 8008ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ece:	bf00      	nop
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0fc      	beq.n	8008ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	20000020 	.word	0x20000020
	...

08008ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <pxCurrentTCBConst2>)
 8008ef2:	6819      	ldr	r1, [r3, #0]
 8008ef4:	6808      	ldr	r0, [r1, #0]
 8008ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	f380 8809 	msr	PSP, r0
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8811 	msr	BASEPRI, r0
 8008f0a:	4770      	bx	lr
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst2>:
 8008f10:	20001da0 	.word	0x20001da0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <prvPortStartFirstTask+0x24>)
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	6800      	ldr	r0, [r0, #0]
 8008f1e:	f380 8808 	msr	MSP, r0
 8008f22:	f04f 0000 	mov.w	r0, #0
 8008f26:	f380 8814 	msr	CONTROL, r0
 8008f2a:	b662      	cpsie	i
 8008f2c:	b661      	cpsie	f
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	df00      	svc	0
 8008f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed08 	.word	0xe000ed08

08008f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f46:	4b46      	ldr	r3, [pc, #280]	; (8009060 <xPortStartScheduler+0x120>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a46      	ldr	r2, [pc, #280]	; (8009064 <xPortStartScheduler+0x124>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d10a      	bne.n	8008f66 <xPortStartScheduler+0x26>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f66:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <xPortStartScheduler+0x120>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a3f      	ldr	r2, [pc, #252]	; (8009068 <xPortStartScheduler+0x128>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d10a      	bne.n	8008f86 <xPortStartScheduler+0x46>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f86:	4b39      	ldr	r3, [pc, #228]	; (800906c <xPortStartScheduler+0x12c>)
 8008f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	22ff      	movs	r2, #255	; 0xff
 8008f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	4b31      	ldr	r3, [pc, #196]	; (8009070 <xPortStartScheduler+0x130>)
 8008fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fae:	4b31      	ldr	r3, [pc, #196]	; (8009074 <xPortStartScheduler+0x134>)
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fb4:	e009      	b.n	8008fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fb6:	4b2f      	ldr	r3, [pc, #188]	; (8009074 <xPortStartScheduler+0x134>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	4a2d      	ldr	r2, [pc, #180]	; (8009074 <xPortStartScheduler+0x134>)
 8008fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b80      	cmp	r3, #128	; 0x80
 8008fd4:	d0ef      	beq.n	8008fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <xPortStartScheduler+0x134>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f1c3 0307 	rsb	r3, r3, #7
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d00a      	beq.n	8008ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	60bb      	str	r3, [r7, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ff8:	4b1e      	ldr	r3, [pc, #120]	; (8009074 <xPortStartScheduler+0x134>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <xPortStartScheduler+0x134>)
 8009000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <xPortStartScheduler+0x134>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800900a:	4a1a      	ldr	r2, [pc, #104]	; (8009074 <xPortStartScheduler+0x134>)
 800900c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	b2da      	uxtb	r2, r3
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <xPortStartScheduler+0x138>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a17      	ldr	r2, [pc, #92]	; (8009078 <xPortStartScheduler+0x138>)
 800901c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <xPortStartScheduler+0x138>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a14      	ldr	r2, [pc, #80]	; (8009078 <xPortStartScheduler+0x138>)
 8009028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800902c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800902e:	f000 f8dd 	bl	80091ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009032:	4b12      	ldr	r3, [pc, #72]	; (800907c <xPortStartScheduler+0x13c>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009038:	f000 f8fc 	bl	8009234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800903c:	4b10      	ldr	r3, [pc, #64]	; (8009080 <xPortStartScheduler+0x140>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0f      	ldr	r2, [pc, #60]	; (8009080 <xPortStartScheduler+0x140>)
 8009042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009048:	f7ff ff66 	bl	8008f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800904c:	f7ff fba6 	bl	800879c <vTaskSwitchContext>
	prvTaskExitError();
 8009050:	f7ff ff1e 	bl	8008e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	e000ed00 	.word	0xe000ed00
 8009064:	410fc271 	.word	0x410fc271
 8009068:	410fc270 	.word	0x410fc270
 800906c:	e000e400 	.word	0xe000e400
 8009070:	20001ecc 	.word	0x20001ecc
 8009074:	20001ed0 	.word	0x20001ed0
 8009078:	e000ed20 	.word	0xe000ed20
 800907c:	20000020 	.word	0x20000020
 8009080:	e000ef34 	.word	0xe000ef34

08009084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	607b      	str	r3, [r7, #4]
}
 800909c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800909e:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <vPortEnterCritical+0x58>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	4a0d      	ldr	r2, [pc, #52]	; (80090dc <vPortEnterCritical+0x58>)
 80090a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090a8:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <vPortEnterCritical+0x58>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d10f      	bne.n	80090d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <vPortEnterCritical+0x5c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	603b      	str	r3, [r7, #0]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <vPortEnterCritical+0x4a>
	}
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20000020 	.word	0x20000020
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090ea:	4b12      	ldr	r3, [pc, #72]	; (8009134 <vPortExitCritical+0x50>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <vPortExitCritical+0x24>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	607b      	str	r3, [r7, #4]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <vPortExitCritical+0x50>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3b01      	subs	r3, #1
 800910e:	4a09      	ldr	r2, [pc, #36]	; (8009134 <vPortExitCritical+0x50>)
 8009110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <vPortExitCritical+0x50>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <vPortExitCritical+0x42>
 800911a:	2300      	movs	r3, #0
 800911c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	f383 8811 	msr	BASEPRI, r3
}
 8009124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20000020 	.word	0x20000020
	...

08009140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009140:	f3ef 8009 	mrs	r0, PSP
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <pxCurrentTCBConst>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	f01e 0f10 	tst.w	lr, #16
 8009150:	bf08      	it	eq
 8009152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915a:	6010      	str	r0, [r2, #0]
 800915c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009164:	f380 8811 	msr	BASEPRI, r0
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f7ff fb14 	bl	800879c <vTaskSwitchContext>
 8009174:	f04f 0000 	mov.w	r0, #0
 8009178:	f380 8811 	msr	BASEPRI, r0
 800917c:	bc09      	pop	{r0, r3}
 800917e:	6819      	ldr	r1, [r3, #0]
 8009180:	6808      	ldr	r0, [r1, #0]
 8009182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009186:	f01e 0f10 	tst.w	lr, #16
 800918a:	bf08      	it	eq
 800918c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009190:	f380 8809 	msr	PSP, r0
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	f3af 8000 	nop.w

080091a0 <pxCurrentTCBConst>:
 80091a0:	20001da0 	.word	0x20001da0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop

080091a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	607b      	str	r3, [r7, #4]
}
 80091c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091c2:	f7ff fa33 	bl	800862c <xTaskIncrementTick>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <SysTick_Handler+0x40>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	2300      	movs	r3, #0
 80091d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f383 8811 	msr	BASEPRI, r3
}
 80091de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <vPortSetupTimerInterrupt+0x34>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <vPortSetupTimerInterrupt+0x38>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <vPortSetupTimerInterrupt+0x3c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a0a      	ldr	r2, [pc, #40]	; (800922c <vPortSetupTimerInterrupt+0x40>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	099b      	lsrs	r3, r3, #6
 8009208:	4a09      	ldr	r2, [pc, #36]	; (8009230 <vPortSetupTimerInterrupt+0x44>)
 800920a:	3b01      	subs	r3, #1
 800920c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800920e:	4b04      	ldr	r3, [pc, #16]	; (8009220 <vPortSetupTimerInterrupt+0x34>)
 8009210:	2207      	movs	r2, #7
 8009212:	601a      	str	r2, [r3, #0]
}
 8009214:	bf00      	nop
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	e000e010 	.word	0xe000e010
 8009224:	e000e018 	.word	0xe000e018
 8009228:	20000014 	.word	0x20000014
 800922c:	10624dd3 	.word	0x10624dd3
 8009230:	e000e014 	.word	0xe000e014

08009234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009244 <vPortEnableVFP+0x10>
 8009238:	6801      	ldr	r1, [r0, #0]
 800923a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800923e:	6001      	str	r1, [r0, #0]
 8009240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009242:	bf00      	nop
 8009244:	e000ed88 	.word	0xe000ed88

08009248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800924e:	f3ef 8305 	mrs	r3, IPSR
 8009252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b0f      	cmp	r3, #15
 8009258:	d914      	bls.n	8009284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800925a:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <vPortValidateInterruptPriority+0x70>)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009264:	4b15      	ldr	r3, [pc, #84]	; (80092bc <vPortValidateInterruptPriority+0x74>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	7afa      	ldrb	r2, [r7, #11]
 800926a:	429a      	cmp	r2, r3
 800926c:	d20a      	bcs.n	8009284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <vPortValidateInterruptPriority+0x78>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <vPortValidateInterruptPriority+0x7c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d90a      	bls.n	80092aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	603b      	str	r3, [r7, #0]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <vPortValidateInterruptPriority+0x60>
	}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	e000e3f0 	.word	0xe000e3f0
 80092bc:	20001ecc 	.word	0x20001ecc
 80092c0:	e000ed0c 	.word	0xe000ed0c
 80092c4:	20001ed0 	.word	0x20001ed0

080092c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092d4:	f7ff f900 	bl	80084d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092d8:	4b5b      	ldr	r3, [pc, #364]	; (8009448 <pvPortMalloc+0x180>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092e0:	f000 f920 	bl	8009524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092e4:	4b59      	ldr	r3, [pc, #356]	; (800944c <pvPortMalloc+0x184>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 8093 	bne.w	8009418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01d      	beq.n	8009334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092f8:	2208      	movs	r2, #8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4413      	add	r3, r2
 80092fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b00      	cmp	r3, #0
 8009308:	d014      	beq.n	8009334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f023 0307 	bic.w	r3, r3, #7
 8009310:	3308      	adds	r3, #8
 8009312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <pvPortMalloc+0x6c>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	617b      	str	r3, [r7, #20]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d06e      	beq.n	8009418 <pvPortMalloc+0x150>
 800933a:	4b45      	ldr	r3, [pc, #276]	; (8009450 <pvPortMalloc+0x188>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	429a      	cmp	r2, r3
 8009342:	d869      	bhi.n	8009418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009344:	4b43      	ldr	r3, [pc, #268]	; (8009454 <pvPortMalloc+0x18c>)
 8009346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <pvPortMalloc+0x18c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800934e:	e004      	b.n	800935a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <pvPortMalloc+0xa4>
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f1      	bne.n	8009350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800936c:	4b36      	ldr	r3, [pc, #216]	; (8009448 <pvPortMalloc+0x180>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009372:	429a      	cmp	r2, r3
 8009374:	d050      	beq.n	8009418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2208      	movs	r2, #8
 800937c:	4413      	add	r3, r2
 800937e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	2308      	movs	r3, #8
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	d91f      	bls.n	80093d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4413      	add	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00a      	beq.n	80093c0 <pvPortMalloc+0xf8>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	613b      	str	r3, [r7, #16]
}
 80093bc:	bf00      	nop
 80093be:	e7fe      	b.n	80093be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093d2:	69b8      	ldr	r0, [r7, #24]
 80093d4:	f000 f908 	bl	80095e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093d8:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <pvPortMalloc+0x188>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	4a1b      	ldr	r2, [pc, #108]	; (8009450 <pvPortMalloc+0x188>)
 80093e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093e6:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <pvPortMalloc+0x188>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <pvPortMalloc+0x190>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d203      	bcs.n	80093fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <pvPortMalloc+0x188>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a18      	ldr	r2, [pc, #96]	; (8009458 <pvPortMalloc+0x190>)
 80093f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <pvPortMalloc+0x184>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	431a      	orrs	r2, r3
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <pvPortMalloc+0x194>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	4a11      	ldr	r2, [pc, #68]	; (800945c <pvPortMalloc+0x194>)
 8009416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009418:	f7ff f86c 	bl	80084f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <pvPortMalloc+0x174>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60fb      	str	r3, [r7, #12]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <pvPortMalloc+0x172>
	return pvReturn;
 800943c:	69fb      	ldr	r3, [r7, #28]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	; 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20005adc 	.word	0x20005adc
 800944c:	20005af0 	.word	0x20005af0
 8009450:	20005ae0 	.word	0x20005ae0
 8009454:	20005ad4 	.word	0x20005ad4
 8009458:	20005ae4 	.word	0x20005ae4
 800945c:	20005ae8 	.word	0x20005ae8

08009460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d04d      	beq.n	800950e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009472:	2308      	movs	r3, #8
 8009474:	425b      	negs	r3, r3
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4413      	add	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	4b24      	ldr	r3, [pc, #144]	; (8009518 <vPortFree+0xb8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4013      	ands	r3, r2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <vPortFree+0x44>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	60fb      	str	r3, [r7, #12]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <vPortFree+0x62>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	60bb      	str	r3, [r7, #8]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	4b14      	ldr	r3, [pc, #80]	; (8009518 <vPortFree+0xb8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d01e      	beq.n	800950e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d11a      	bne.n	800950e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <vPortFree+0xb8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	43db      	mvns	r3, r3
 80094e2:	401a      	ands	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094e8:	f7fe fff6 	bl	80084d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vPortFree+0xbc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4413      	add	r3, r2
 80094f6:	4a09      	ldr	r2, [pc, #36]	; (800951c <vPortFree+0xbc>)
 80094f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094fa:	6938      	ldr	r0, [r7, #16]
 80094fc:	f000 f874 	bl	80095e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <vPortFree+0xc0>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3301      	adds	r3, #1
 8009506:	4a06      	ldr	r2, [pc, #24]	; (8009520 <vPortFree+0xc0>)
 8009508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800950a:	f7fe fff3 	bl	80084f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800950e:	bf00      	nop
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20005af0 	.word	0x20005af0
 800951c:	20005ae0 	.word	0x20005ae0
 8009520:	20005aec 	.word	0x20005aec

08009524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800952a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800952e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009530:	4b27      	ldr	r3, [pc, #156]	; (80095d0 <prvHeapInit+0xac>)
 8009532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00c      	beq.n	8009558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3307      	adds	r3, #7
 8009542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0307 	bic.w	r3, r3, #7
 800954a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	4a1f      	ldr	r2, [pc, #124]	; (80095d0 <prvHeapInit+0xac>)
 8009554:	4413      	add	r3, r2
 8009556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800955c:	4a1d      	ldr	r2, [pc, #116]	; (80095d4 <prvHeapInit+0xb0>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009562:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <prvHeapInit+0xb0>)
 8009564:	2200      	movs	r2, #0
 8009566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4413      	add	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009570:	2208      	movs	r2, #8
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0307 	bic.w	r3, r3, #7
 800957e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <prvHeapInit+0xb4>)
 8009584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009586:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <prvHeapInit+0xb4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <prvHeapInit+0xb4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	1ad2      	subs	r2, r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <prvHeapInit+0xb4>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <prvHeapInit+0xb8>)
 80095b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <prvHeapInit+0xbc>)
 80095ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095bc:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <prvHeapInit+0xc0>)
 80095be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095c2:	601a      	str	r2, [r3, #0]
}
 80095c4:	bf00      	nop
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20001ed4 	.word	0x20001ed4
 80095d4:	20005ad4 	.word	0x20005ad4
 80095d8:	20005adc 	.word	0x20005adc
 80095dc:	20005ae4 	.word	0x20005ae4
 80095e0:	20005ae0 	.word	0x20005ae0
 80095e4:	20005af0 	.word	0x20005af0

080095e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095f0:	4b28      	ldr	r3, [pc, #160]	; (8009694 <prvInsertBlockIntoFreeList+0xac>)
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e002      	b.n	80095fc <prvInsertBlockIntoFreeList+0x14>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	429a      	cmp	r2, r3
 8009604:	d8f7      	bhi.n	80095f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	4413      	add	r3, r2
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	429a      	cmp	r2, r3
 8009616:	d108      	bne.n	800962a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	441a      	add	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	441a      	add	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d118      	bne.n	8009670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b15      	ldr	r3, [pc, #84]	; (8009698 <prvInsertBlockIntoFreeList+0xb0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d00d      	beq.n	8009666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	e008      	b.n	8009678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <prvInsertBlockIntoFreeList+0xb0>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e003      	b.n	8009678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d002      	beq.n	8009686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20005ad4 	.word	0x20005ad4
 8009698:	20005adc 	.word	0x20005adc

0800969c <__errno>:
 800969c:	4b01      	ldr	r3, [pc, #4]	; (80096a4 <__errno+0x8>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000024 	.word	0x20000024

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	; (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	; (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	; (80096ec <__libc_init_array+0x44>)
 80096bc:	f000 f90c 	bl	80098d8 <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	08009ff0 	.word	0x08009ff0
 80096e4:	08009ff0 	.word	0x08009ff0
 80096e8:	08009ff0 	.word	0x08009ff0
 80096ec:	08009ff4 	.word	0x08009ff4

080096f0 <memcpy>:
 80096f0:	440a      	add	r2, r1
 80096f2:	4291      	cmp	r1, r2
 80096f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f8:	d100      	bne.n	80096fc <memcpy+0xc>
 80096fa:	4770      	bx	lr
 80096fc:	b510      	push	{r4, lr}
 80096fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009706:	4291      	cmp	r1, r2
 8009708:	d1f9      	bne.n	80096fe <memcpy+0xe>
 800970a:	bd10      	pop	{r4, pc}

0800970c <memset>:
 800970c:	4402      	add	r2, r0
 800970e:	4603      	mov	r3, r0
 8009710:	4293      	cmp	r3, r2
 8009712:	d100      	bne.n	8009716 <memset+0xa>
 8009714:	4770      	bx	lr
 8009716:	f803 1b01 	strb.w	r1, [r3], #1
 800971a:	e7f9      	b.n	8009710 <memset+0x4>

0800971c <sqrt>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	ed2d 8b02 	vpush	{d8}
 8009722:	ec55 4b10 	vmov	r4, r5, d0
 8009726:	f000 f825 	bl	8009774 <__ieee754_sqrt>
 800972a:	4622      	mov	r2, r4
 800972c:	462b      	mov	r3, r5
 800972e:	4620      	mov	r0, r4
 8009730:	4629      	mov	r1, r5
 8009732:	eeb0 8a40 	vmov.f32	s16, s0
 8009736:	eef0 8a60 	vmov.f32	s17, s1
 800973a:	f7f7 f9a7 	bl	8000a8c <__aeabi_dcmpun>
 800973e:	b990      	cbnz	r0, 8009766 <sqrt+0x4a>
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	4620      	mov	r0, r4
 8009746:	4629      	mov	r1, r5
 8009748:	f7f7 f978 	bl	8000a3c <__aeabi_dcmplt>
 800974c:	b158      	cbz	r0, 8009766 <sqrt+0x4a>
 800974e:	f7ff ffa5 	bl	800969c <__errno>
 8009752:	2321      	movs	r3, #33	; 0x21
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	2300      	movs	r3, #0
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	f7f7 f825 	bl	80007ac <__aeabi_ddiv>
 8009762:	ec41 0b18 	vmov	d8, r0, r1
 8009766:	eeb0 0a48 	vmov.f32	s0, s16
 800976a:	eef0 0a68 	vmov.f32	s1, s17
 800976e:	ecbd 8b02 	vpop	{d8}
 8009772:	bd38      	pop	{r3, r4, r5, pc}

08009774 <__ieee754_sqrt>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	ec55 4b10 	vmov	r4, r5, d0
 800977c:	4e55      	ldr	r6, [pc, #340]	; (80098d4 <__ieee754_sqrt+0x160>)
 800977e:	43ae      	bics	r6, r5
 8009780:	ee10 0a10 	vmov	r0, s0
 8009784:	ee10 3a10 	vmov	r3, s0
 8009788:	462a      	mov	r2, r5
 800978a:	4629      	mov	r1, r5
 800978c:	d110      	bne.n	80097b0 <__ieee754_sqrt+0x3c>
 800978e:	ee10 2a10 	vmov	r2, s0
 8009792:	462b      	mov	r3, r5
 8009794:	f7f6 fee0 	bl	8000558 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fd24 	bl	80001ec <__adddf3>
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	ec45 4b10 	vmov	d0, r4, r5
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	dc10      	bgt.n	80097d6 <__ieee754_sqrt+0x62>
 80097b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097b8:	4330      	orrs	r0, r6
 80097ba:	d0f5      	beq.n	80097a8 <__ieee754_sqrt+0x34>
 80097bc:	b15d      	cbz	r5, 80097d6 <__ieee754_sqrt+0x62>
 80097be:	ee10 2a10 	vmov	r2, s0
 80097c2:	462b      	mov	r3, r5
 80097c4:	ee10 0a10 	vmov	r0, s0
 80097c8:	f7f6 fd0e 	bl	80001e8 <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	f7f6 ffec 	bl	80007ac <__aeabi_ddiv>
 80097d4:	e7e6      	b.n	80097a4 <__ieee754_sqrt+0x30>
 80097d6:	1512      	asrs	r2, r2, #20
 80097d8:	d074      	beq.n	80098c4 <__ieee754_sqrt+0x150>
 80097da:	07d4      	lsls	r4, r2, #31
 80097dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80097e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80097e8:	bf5e      	ittt	pl
 80097ea:	0fda      	lsrpl	r2, r3, #31
 80097ec:	005b      	lslpl	r3, r3, #1
 80097ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80097f2:	2400      	movs	r4, #0
 80097f4:	0fda      	lsrs	r2, r3, #31
 80097f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80097fa:	107f      	asrs	r7, r7, #1
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	2516      	movs	r5, #22
 8009800:	4620      	mov	r0, r4
 8009802:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009806:	1886      	adds	r6, r0, r2
 8009808:	428e      	cmp	r6, r1
 800980a:	bfde      	ittt	le
 800980c:	1b89      	suble	r1, r1, r6
 800980e:	18b0      	addle	r0, r6, r2
 8009810:	18a4      	addle	r4, r4, r2
 8009812:	0049      	lsls	r1, r1, #1
 8009814:	3d01      	subs	r5, #1
 8009816:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800981a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800981e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009822:	d1f0      	bne.n	8009806 <__ieee754_sqrt+0x92>
 8009824:	462a      	mov	r2, r5
 8009826:	f04f 0e20 	mov.w	lr, #32
 800982a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800982e:	4281      	cmp	r1, r0
 8009830:	eb06 0c05 	add.w	ip, r6, r5
 8009834:	dc02      	bgt.n	800983c <__ieee754_sqrt+0xc8>
 8009836:	d113      	bne.n	8009860 <__ieee754_sqrt+0xec>
 8009838:	459c      	cmp	ip, r3
 800983a:	d811      	bhi.n	8009860 <__ieee754_sqrt+0xec>
 800983c:	f1bc 0f00 	cmp.w	ip, #0
 8009840:	eb0c 0506 	add.w	r5, ip, r6
 8009844:	da43      	bge.n	80098ce <__ieee754_sqrt+0x15a>
 8009846:	2d00      	cmp	r5, #0
 8009848:	db41      	blt.n	80098ce <__ieee754_sqrt+0x15a>
 800984a:	f100 0801 	add.w	r8, r0, #1
 800984e:	1a09      	subs	r1, r1, r0
 8009850:	459c      	cmp	ip, r3
 8009852:	bf88      	it	hi
 8009854:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009858:	eba3 030c 	sub.w	r3, r3, ip
 800985c:	4432      	add	r2, r6
 800985e:	4640      	mov	r0, r8
 8009860:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009864:	f1be 0e01 	subs.w	lr, lr, #1
 8009868:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800986c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009870:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009874:	d1db      	bne.n	800982e <__ieee754_sqrt+0xba>
 8009876:	430b      	orrs	r3, r1
 8009878:	d006      	beq.n	8009888 <__ieee754_sqrt+0x114>
 800987a:	1c50      	adds	r0, r2, #1
 800987c:	bf13      	iteet	ne
 800987e:	3201      	addne	r2, #1
 8009880:	3401      	addeq	r4, #1
 8009882:	4672      	moveq	r2, lr
 8009884:	f022 0201 	bicne.w	r2, r2, #1
 8009888:	1063      	asrs	r3, r4, #1
 800988a:	0852      	lsrs	r2, r2, #1
 800988c:	07e1      	lsls	r1, r4, #31
 800988e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009892:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009896:	bf48      	it	mi
 8009898:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800989c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80098a0:	4614      	mov	r4, r2
 80098a2:	e781      	b.n	80097a8 <__ieee754_sqrt+0x34>
 80098a4:	0ad9      	lsrs	r1, r3, #11
 80098a6:	3815      	subs	r0, #21
 80098a8:	055b      	lsls	r3, r3, #21
 80098aa:	2900      	cmp	r1, #0
 80098ac:	d0fa      	beq.n	80098a4 <__ieee754_sqrt+0x130>
 80098ae:	02cd      	lsls	r5, r1, #11
 80098b0:	d50a      	bpl.n	80098c8 <__ieee754_sqrt+0x154>
 80098b2:	f1c2 0420 	rsb	r4, r2, #32
 80098b6:	fa23 f404 	lsr.w	r4, r3, r4
 80098ba:	1e55      	subs	r5, r2, #1
 80098bc:	4093      	lsls	r3, r2
 80098be:	4321      	orrs	r1, r4
 80098c0:	1b42      	subs	r2, r0, r5
 80098c2:	e78a      	b.n	80097da <__ieee754_sqrt+0x66>
 80098c4:	4610      	mov	r0, r2
 80098c6:	e7f0      	b.n	80098aa <__ieee754_sqrt+0x136>
 80098c8:	0049      	lsls	r1, r1, #1
 80098ca:	3201      	adds	r2, #1
 80098cc:	e7ef      	b.n	80098ae <__ieee754_sqrt+0x13a>
 80098ce:	4680      	mov	r8, r0
 80098d0:	e7bd      	b.n	800984e <__ieee754_sqrt+0xda>
 80098d2:	bf00      	nop
 80098d4:	7ff00000 	.word	0x7ff00000

080098d8 <_init>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr

080098e4 <_fini>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr
